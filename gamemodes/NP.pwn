/*
/-----------------------------------------------------------------------------------------------------------------------/
<!> PROXIMAS VERSIONES:

v0.0.5
* PROX: Modificar sistema administrativo.
v0.1
* PROX: Sistema de conquista para familias por GangZone.
* PROX: SAFD.
* PROX: Agregar mas hobbys. (basquet, carreras, pool, etc.)
* PROX: Candado para sapd.
* PROX: Autos y armas por pedido.
* PROX: Job Transportista
* PROX: Sistema de Celular.
* PROX: Balas de goma para la policia.

/-----------------------------------------------------------------------------------------------------------------------/
*/

#include <a_samp>
#undef 			    MAX_PLAYERS
#define 			MAX_PLAYERS 				(101)
#include <a_zones>
#include <streamer>
#include <yom_buttons>
#include <YSI\y_ini>
#include <YSI\y_timers>
#include <sscanf2>
#include <progress>
#include <foreach>
#include <zcmd>
#include <msel>
#include <dof2>

// -======================================================================================- //
#define 			SERVER_GM_TEXT 				"«*  New Paradise Roleplay  *»   Rol en español"
#define 			SERVER_SHOP_URL				"www.newparadise-rp.net"
#define 			SERVER_TS3_IP				"92.222.255.142"
#define             SERVER_VERSION              "v0.0.5B"
// -=====================================================================================- //

#pragma 			tabsize 					(0)
#pragma             unused                      ReturnUser
// Limites
#define 			VV 							(175)
#define 			MAX_FACTION 				(13)
#define 			MAX_AD 						(40)
#define 			MAX_PING 					(1200)
#define 			MAX_HOUSES  				(250)
#define 			MAX_FURNITURE 				(30)
#define 			MAX_vCAMERAS  				(15)
#define				MAX_BARRICADES 				(20)
#define 			MAX_POINTS 					(10)
#define             MAX_ATMS                    (40)
#define             MAX_BUSINESS              	(35)
#define 			NEW_VULNERABLE 				(72)
#define 			MAX_DDOORS 					(50)
#define 			MAX_PLAYERTOYS 				(10)
#define 			MAX_TIMERS 					(11)
#define 			MAX_PLAYERVEHICLES 			(300)
#define 			MAX_MODS 					(15)
#define 			MAX_CARSALE 				(130)
#define 			MAX_CODESVIP 				(50)
#define             MAX_OBJETOS_TIRADOS         (200)
#define 			EX_SPLITLENGTH 				(118)
#define 			MAX_SPEED_VEHSURF 			60

#define             BUSINESS_VIRTUAL_WORLD     	(30000)
#define             GARAGES_VIRTUAL_WORLD     	(30001)

#define 			TIME_RESPAWN 				(7200)  // Tiempo respawn
#define 			TIME_TO_TAKEOVER			(5)    // Puntos

#define 			INVALID_HOUSE_ID 			(-1)
#define 			INVALID_PLAYER_VEHICLE_ID 	(0)
#define 			INVALID_FURNITURE_ID 		(0)

#define 			CHECKPOINT_NONE 			(0)
#define 			CHECKPOINT_LOADTRUCK 		(97651)
#define 			CHECKPOINT_RETURNTRUCK 		(97652)
#define 			CHECKPOINT_RETURNBANK		(97653)
#define 			NOOB_SKIN 					(170)

#define				TYPE_GIVEWEAPONTIMER 		(0)
#define 			TYPE_FLOODPROTECTION 		(1)
#define 			TYPE_PAYTIMER        		(2)
#define				TYPE_ARMSTIMER 		 		(3)
#define 			TYPE_TPPIZZARUNTIMER 		(4)
#define 			TYPE_PIZZATIMER      		(5)
#define				TYPE_TPTRUCKRUNTIMER   		(6)
#define				TYPE_TPDRUGRUNTIMER 		(11)
#define 			TYPE_TPMATRUNTIMER 			(12)
#define 			TYPE_GUARDTIMER				(13)
#define 			MAX_OBJ 					(150)
#define 			USERFILE 					"cuentas/%s.ini"
#define 			HOUSE_FILE 					"houses/House%d.ini"
#define 			BUSINESS_FILE 				"negocios/Negocio%d.ini"
#define 	        SPRAYTAG_FOLDER 			"sprays/%s.ini"
#define             DD_FILE                     "dynamicdoors/DD%d.ini"
#define             PV_FILE                     "playervehicles/PV%d.ini"

#define 			INFINITY_HEALTH 			Float:0x7F800000

// Sistema de graffitis
#define 	MAX_PLAYERS_TAGS 			(5) 					// Graffiti's que pueden crear.
#define 	SPRAY_TAG_TIMER 			(4) 					// Segundos para crear el graffiti.
#define 	SPRAY_TAG_OBJECT 			(11359)     			// ID del objeto.
#define 	SPRAY_TAG_OBJECT_DISTANCE 	(200.0) 				// Distancía en la que se ve el graffiti
#define 	TYPE_LIST_MENU 				(0)
#define 	TYPE_LIST_EDIT 				(1)
#define 	TYPE_LIST_CREATE 			(2)
#define 	TYPE_LIST_TAGS 				(3)
#define 	TYPE_LIST_TAGS_DELETE 		(4)
#define 	TYPE_LIST_TAGS_CREATE 		(5)
#define 	TYPE_LIST_TAGS_FIND 		(6)
#define 	SPRAYTAG_MENU 				(9800)
#define 	SPRAYTAG_DELETE 			(9801)
#define 	SPRAYTAG_CREATE 			(9802)
#define 	SPRAYTAG_CREATE_MAIN 		(9803)
#define 	SPRAYTAG_CREATE_TEXT 		(9804)
#define 	SPRAYTAG_CREATE_FONT 		(9805)
#define 	SPRAYTAG_CREATE_SIZE 		(9806)
#define 	SPRAYTAG_CREATE_COLOR 		(9807)
#define 	SPRAYTAG_CREATE_FINISH 		(9808)
#define 	SPRAYTAG_EDIT_MAIN 			(9809)
#define 	SPRAYTAG_EDIT_TEXT 			(9810)
#define 	SPRAYTAG_EDIT_FONT 			(9811)
#define 	SPRAYTAG_EDIT_SIZE 			(9812)
#define 	SPRAYTAG_EDIT_COLOR 		(9813)
#define 	SPRAYTAG_EDIT_FINISH 		(9814)
#define 	SPRAYTAG_EDIT_LIST 			(9815)
#define 	SPRAYTAG_FIND				(9816)
#define 	SPRAYTAG_DIALOG_RETURN		(9817)


//DIALOGS LIBRETA

#define DIALOG_LIBRETAMENU 12450
#define DIALOG_LIBRETACONTACTO 12451
#define DIALOG_AGENDARCONTACTO 12452

#define             BURBUJA                     (250)
//Sistema de ropero
#define DIALOG_ROPEROMENU 12453

//New's

enum ObjTirados
{
	Float:PosObjeto[3],
	Text3D:TextID,
	ObjetoID,
	Tipo,
	IDReferencia,
	Cantidad,
};
new ObjetosTirados[MAX_OBJETOS_TIRADOS][ObjTirados];

new Policia;
new RopaElegida[MAX_PLAYERS];
new EstaComprandoRopa[MAX_PLAYERS];
new LocalOOC[MAX_PLAYERS];

new PosibleFlood[MAX_PLAYERS];

new JugadorFac[MAX_PLAYERS];
new MoneyBankTempFix[MAX_PLAYERS];

new LocalTarifa[MAX_PLAYERS];

new Vortex[MAX_PLAYERS];
new ticketR;
new PlayerPressedJump[MAX_PLAYERS];
new PlayerSurfing[MAX_PLAYERS];
new camaraon[MAX_PLAYERS];
new FPS[MAX_PLAYERS];
//Texturas
new PrisionLS;
new Cartel1;
new Cartel2;

new Text:TDIntro[4], Text:TDHUD[2];

//Velocimetro
new Text:VelocimetroTD[5], Bar:VelocimetroBAR[MAX_PLAYERS][2], Text:VelocimetroTDP[MAX_PLAYERS][2];

//Licencias
new Text:LicenciasTD[4], Bar:LicenciasBAR[MAX_PLAYERS][2], LicTimer[MAX_PLAYERS];

// Puertas mecanicos
new Mecagate;
new Mecagate2;

// Defines FaceAngles
#define 			SUR 						(180)
#define				NORTE 						(0)
#define 			OESTE 						(90)
#define 			ESTE 						(270)
// Defines / Macros
#define             Loop(%0,%1,%2)  		    							for(new %0 = %2; %0 < %1; %0++)
#define 			function%0(%1) 											forward %0(%1); public %0(%1)
#define 			PRESSED(%0) 											(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define 			NoAutorizado        									SendClientMessageEx(playerid, COLOR_GREY,"* No estás autorizado para usar este comando.");
#define 			NODUTY        											"* No puedes usar comandos administrativos estando off duty."
#define 			NoConectado          									"* No estás conectado correctamente."
#define 			SendFormattedMessage(%0,%1,%2) 							do{new _str[128]; format(_str,128,%2); SendClientMessageEx(%0,%1,_str);}while(FALSE)
#define 			def(%0,%1)												(format(text,sizeof(text),%0,%1),text)
#define 			GetVehicleName(%0) 										VehicleName[GetVehicleModel(%0)-400]
#define 			GetPlayerCash(%0) 										GetPVarInt(%0, "Cash")
#define 			SetPVarInt(%0,%1,0); 									DeletePVar(%0,%1);
#define 			PlayerToPoint(%1,%2,%3,%4,%5)  							IsPlayerInRangeOfPoint(%2,%1,%3,%4,%5)
#define 			Skin        											SetPlayerSkin
#define 			SpeedCheck(%0,%1,%2,%3,%4)  							floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.6)
#define 			SetPlayerHoldingObject(%1,%2,%3,%4,%5,%6,%7,%8,%9) 		SetPlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1,%2,%3,%4,%5,%6,%7,%8,%9)
#define 			StopPlayerHoldingObject(%1)    							RemovePlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define 			IsPlayerHoldingObject(%1) 								IsPlayerAttachedObjectSlotUsed(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)

#define             EfectoPedo 					(18687)
#define             EfectoEructo 				(18729)

// Colores
#define 			FIND_COLOR					0xB90000FF
#define 			COLOR_GENERAL               0xDF013AFF
#define 			COLOR_LIYELLOW 				0xFFFF80FF
#define 			COLOR_POINTGEN 				0xF5CB38FF
#define 			COLOR_BLUED                 0xDF013AFF
#define 			COLOR_VIP 					0xC93CCE00
#define 			TEAM_FBI_COLOR 				0x8D8DFF00
#define 			TEAM_NEWS_COLOR 			0x049C7100
#define 			TEAM_MED_COLOR 				0xFF828200
#define 			COLOR_NG 					0x9ACD3200
#define 			TEAM_TAXI_COLOR 			0xF2FF0000
#define 			COLOR_NEWBIE 				0x7DAEFFFF
#define 			COLOR_TWWHITE 				0xFFFFFFAA
#define 			COLOR_TWYELLOW 				0xFFFF00AA
#define 			COLOR_TWPINK 				0xE75480AA
#define 			COLOR_TWRED 				0xFF0000AA
#define 			COLOR_TWBROWN 				0x654321AA
#define 			COLOR_TWGRAY 				0x808080AA
#define 			COLOR_TWOLIVE 				0x808000AA
#define 			COLOR_TWPURPLE 				0x800080AA
#define 			COLOR_TWTAN 				0xD2B48CAA
#define 			COLOR_TWAQUA 				0x00FFFFAA
#define 			COLOR_TWORANGE 				0xFF8C00AA
#define 			COLOR_TWAZURE 				0x007FFFAA
#define 			COLOR_TWGREEN 				0x008000AA
#define 			COLOR_TWBLUE 				0x0000FFAA
#define 			COLOR_TWBLACK 				0x000000AA
#define 			TEAM_APRISON_COLOR 			0x9C791200
#define 			PUBLICRADIO_COLOR    		0x6DFB6DFF
#define				COLOR_REPORT				0xFFFF91FF
#define 			COLOR_HELPERCHAT  			0x0BBD5FEC8
#define 			COLOR_COMBINEDCHAT 			0x6CEFF0FF
#define 			COLOR_TITLE 				0xFCCA03FF
#define 			COLOR_TEORY     			0xFFFF91FF
#define 			COLOR_QUESTION  			0xFFB18CFF
#define 			COLOR_YES       			0x00CC00FF
#define 			COLOR_DUDA      			0xD86356FF
#define 			COLOR_NO        			0xFF8080FF
#define 			COLOR_ASKQ 					0xFF0000FF
#define 			COLOR_DUTY 					0x00CA00FF
#define 			COLOR_NEGATIVE 				0xFF6A6AFF
#define 			WANTED_COLOR 				0xBF6000FF
#define 			COLOR_MEGAPHONE 			0xFF9B6AFF
#define 			COLOR_GRAD1 				0xB4B5B7FF
#define 			COLOR_GRAD2     			0xBFC0C2FF
#define 			COLOR_GRAD3 				0xCBCCCEFF
#define 			COLOR_GRAD4 				0xD8D8D8FF
#define 			COLOR_GRAD5 				0xE3E3E3FF
#define 			COLOR_GRAD6 				0xF0F0F0FF
#define 			COLOR_GREY 					0xAFAFAFAA
#define 			COLOR_GREEN 				0x9EC73DAA
#define 			COLOR_GREEN2 				0x33AA33AA
#define 			COLOR_GROVE 				0x00FF00FF
#define 			COLOR_RED 					0xAA3333AA
#define 			COLOR_REALRED     			0xFF0606FF
#define 			COLOR_RED2 					0xFF6F6FFF
#define 			COLOR_LIGHTRED 				0xFF6347AA
#define 			COLOR_LIGHTBLUE 			0x33CCFFAA
#define 			COLOR_LIGHTGREEN			0x9ACD32AA
#define 			COLOR_CMDA 					0xFFFF00AA
#define 			COLOR_YELLOW 				0xFFFF00AA
#define 			COLOR_YELLOW2 				0xF5DEB3AA
#define 			COLOR_ORANGE 				0xFF7F00FF
#define 			COLOR_WHITE 				0xFFFFFFAA
#define 			COLOR_FADE 					0xE6E6E6E6
#define 			COLOR_FADE1 				0xE6E6E6E6
#define 			COLOR_FADE2 				0xC8C8C8C8
#define 			COLOR_FADE3 				0xAAAAAAAA
#define 			COLOR_FADE4 				0x8C8C8C8C
#define 			COLOR_FADE5 				0x6E6E6E6E
#define 			COLOR_PURPLE 				0xC2A2DAAA
#define 			COLOR_DBLUE 				0x2641FEAA
#define				COLOR_ALLDEPT 				0xFF8282AA
#define 			COLOR_NEWS 					0x458E1DAA
#define 			COLOR_NEWS2 				0xFFA500AA
#define             COLOR_SANEWS                0x77A71FFF
#define             COLOR_GOBALL                0x007AF4FF
#define 			COLOR_OOC 					0x66FFFFFF
#define 			OBJECTIVE_COLOR 			0x64000064
#define 			TEAM_GREEN_COLOR 			0xFFFFFFAA
#define 			TEAM_JOB_COLOR 				0xFFB6C1AA
#define 			TEAM_HIT_COLOR 				0xFFFFFF00
#define 			TEAM_BLUE_COLOR 			0x8D8DFF00
#define 			TEAM_RADIO_COLOR2 			0xF2D068FF // Amarillo
#define 			TEAM_RADIO_COLOR 			0x9B9BFFFF // Azul
#define 			COLOR_ADD 					0x63FF60AA
#define 			TEAM_GROVE_COLOR 			0x00D900C8
#define 			TEAM_VAGOS_COLOR 			0xFFC801C8
#define 			TEAM_BALLAS_COLOR 			0xD900D3C8
#define 			TEAM_AZTECAS_COLOR 			0x01FCFFC8
#define 			TEAM_CYAN_COLOR 			0xFF8282AA
#define 			TEAM_ORANGE_COLOR 			0xFF830000
#define 			TEAM_COR_COLOR 				0x39393900
#define 			TEAM_BAR_COLOR 				0x00D90000
#define 			TEAM_TAT_COLOR 				0xBDCB9200
#define 			TEAM_CUN_COLOR 				0xD900D300
#define 			TEAM_STR_COLOR 				0x01FCFF00
#define 			TEAM_ADMIN_COLOR 			0x00808000
#define 			COLOR_INVIS 				0xAFAFAF00
#define 			COLOR_SPEC 					0xBFC0C200
#define 			COLOR_BLUE 					0x2641FEAA
#define 			COLOR_DARKNICERED 			0x9D000096
#define 			COLOR_LIGHT_BLUE 			0x9FB1EEAA
#define 			TRY_GREEN   				0x00BF60FF
#define 			ROJO_ADMIN 					0xDC092FFF
#define 			COLOR_SHOP 					0xE7E784FF
#define 			VERDE_ADMIN 				0x41FF2FFF
#define 			CELESTE_ADMIN 				0x41FFECFF
#define 			AMARILLO_ADMIN 				0xFFFF00FF
#define 			CREMA_ADMIN 				0xFFFFD4D4
#define 			ROSADO_ADMIN 				0xFF4FD4D4
#define 			MORADO_ADMIN 				0x9600FF2E
#define 			ORANGE_ADMIN 				0xFF7617FF
#define 			PAINTBALL_TEAM_RED 			0xFF000000
#define 			PAINTBALL_TEAM_BLUE 		0x2641FE00
#define 			YELLOW 						0xFFFF00FF
#define 			ORANGE 						0xF97804FF
#define 			GRAY 						0xCECECEFF
#define 			LIGHTBLUE 					0x00C2ECFF
#define 			COLOR_GREENDO 				0xAAD564FF
// Sistema de colores administracion
#define             PROJO_ADMIN                  0xFF0000FF
#define             PVERDE_ADMIN                 0x00FF00FF
#define             PCELESTE_ADMIN               0x00FFFFFF
#define             PAMARILLO_ADMIN              0xFFFF00FF
#define             POLIVA_ADMIN                 0xBCBD4EFF
#define             PROSADO_ADMIN                0xFF87FFFF
#define             PMORADO_ADMIN                0x8C00FFFF
#define             PORANGE_ADMIN                0xFF5C00FF
#define             PNEGRO_ADMIN                 0x000000FF
// Colores para mensajes
#define 			COL_ADM		     	        "{FF0000}"
#define 			COL_GENERAL					"{DF013A}"
#define 			COL_GENERAL2				"{DF013A}"
#define				COL_WHITE 					"{FFFFFF}"
#define 			COL_RED 					"{F81414}"
#define 			COL_GREEN 					"{00FF22}"
#define 			COL_WEED 					"{4DC855}"
#define 			COL_WEED2 					"{E4ED6B}"
#define 			COL_LIGHTBLUE 				"{00CED1}"
#define 			COL_YELLOW 					"{FFFF00}"
#define 			COL_PURPLE					"{C2A2DA}"
#define 			COL_HOUSET					"{DF013A}"
#define 			COL_BLUE					"{DF013A}"
#define 			COL_DUDA					"{FF4719}"
#define 			COL_REPO					"{FFCABC}"
#define 			COL_PINK					"{F781F3}"

#define 			ResetMoneyBar 				ResetPlayerMoney
#define 			UpdateMoneyBar 				GivePlayerMoney
/* 						Dialogs				 				*/
#define 			INVALID_DIALOG      		(9999)
#define 			EQUIPO_DOC  				(2)
#define 			DIALOGUNDI   				(3)
#define 			DIALOG_HIT     				(4)
#define 			DIALOG_DROP     			(5)
#define 			RENT_BIKE 					(6)
#define 			DIALOG_EDITOBJECT           (7)
#define 			DRINKDIALOG 				(8)
#define 			DRINKLISTDIALOG				(9)
#define 			TIPDIALOG 					(10)
#define 			EQUIPO_GOB 					(11)
#define 			IPAD 						(12)
#define 			CPASS 						(13)
#define 			EQUIPO_CNN 					(14)
#define 			TELEPORTS_FACCIONES 		(15)
#define 			PB_MENU 					(16)
#define 			PB_SARENA 					(17)
#define 			PB_BUYFI 					(18)
#define				PB_SCORE 					(19)
#define 			PB_FICHAS 					(20)
#define 			DUTY_OPTIONS 				(21)
#define 			DUTYMENU2 					(22)
#define 			DUTYMENU3 					(23)
#define 			DUTYMENU4 					(24)
#define 			DUTYMENU5 					(25)
#define 			TRAFICDRUGS 				(26)
#define 			ADMUTE 						(27)
#define 			DOORLOCK 					(28)
#define 			CARSPAWN 					(29)
#define  			D_SPEEDCAMRANGE				(31)
#define  			D_SPEEDCAMLIMIT				(32)
#define  			D_SPEEDCAMSTATUS			(33)
#define				D_SPEEDCAMFINE              (34)
#define 			DIALOG_BANKMD    			(35)
#define 			NMusica 					(36)
#define				DIALOG_FAMILIA              (37)
#define				DIALOG_GUNLIC              	(38)
#define				DIALOG_GM_INFO 				(39)
#define				DIALOG_GM_INFO_VERSION 		(40)
#define				DIALOG_GM_INFO_VERSION2 	(41)
#define             DIALOG_CUENTAEXIST          (42)
#define 			DIALOG_CDBUY 				(43)
#define             UMENU_REPARACION2           (44)
#define             MECANICO_MSEG               (45)
#define             EQUIPO_PANDILLA             (46)
#define 			DIALOG_ADMAIN				(47)
#define 			DIALOG_ADLIST				(48)
#define 			DIALOG_ADPLACE				(49)
#define 			DIALOG_ADPLACEP				(50)
#define 			DIALOG_ADSEARCH				(51)
#define 			DIALOG_ADFINAL				(52)
#define 			DIALOG_SHOPORDER    		(53)
#define 			DIALOG_SHOPERROR    		(54)
#define 			DIALOG_GMX          		(55)
#define 			PB_CHOOSE 					(56)
#define 			PBJOINTEAM 					(57)
#define 			PB_ARMAS 					(58)
#define 			PB_CANJE1 					(59)
#define 			PBARENASCORES 				(60)
#define				MPSPAYTICKETS 				(61)
#define             DIALOG_ENVENTA              (62)
#define             DIALOG_ELECTRONICA          (63)
#define 			GOTOPLAYERCAR 				(64)
#define 			TRACKCAR 					(65)
#define             HOUSE_WEAPONS2              (66)
#define 			SELLCAR 					(67)
#define             DIALOG_ESTEREOV             (68)
#define             DIALOG_ESTEREOV_URL         (69)
#define             HOUSE_RENTA                 (70)
#define             HOUSE_RENTA2                (71)
#define             HOUSE_DINERO2               (72)
#define             HOUSE_DINERO3               (73)
#define             HOUSE_WEAPONS               (74)
#define 			HQENTRANCE 					(75)
#define 			HQEXIT 						(76)
#define 			HQCUSTOMINT 				(77)
#define 			HQDELETE 					(78)
#define             DIALOG_ADMINH_ST            (79)
#define             DIALOG_ADMINH_FM            (80)
#define 			JOBFINDMENU 				(81)
#define 			DIALOG_NAMECHANGE 			(82)
#define 			DIALOG_HITMAN 				(83)
#define 			FDUTYMENU 					(84)
#define 			FDUTYMENU2 					(85)
#define 			FDUTYMENU3 					(86)
#define 			DUTYMENU 					(87)
#define 			WELCOME 					(88)
#define 			REG_AGE 					(89)
#define 			REG_SEX 					(90)
#define 			D_REGACENT 					(91)
#define 			D_REGCON 					(92)
#define 			DIALOG_REG_TUT 				(93)
#define 			REG_NAC		 				(94)
#define 			DINFO   					(95)
#define 			STOREMENU 					(96)
#define 			LOTTO_BUY       			(97)
#define 			FSTYLE_DIALOG   			(98)
#define 			DIALOG_AMMU        			(99)
#define             DIALOG_ADMINH_1             (100)
#define 			ELEVATOR 					(101)
#define 			ELEVATOR2 					(102)
#define 			ELEVATOR3 					(103)
#define 			ELEVATOR4 					(104)
#define 			ELEVATOR5 					(105)
#define 			ELEVATOR7 					(106)
#define 			DLOGIN       				(107)
#define 			DREGISTER                   (108)
#define 			MECANICO_MENU   			(109)
#define 			MMENU_REPARACION    		(110)
#define 			MMENUTUNING_G 				(111)
#define 			TUNING_WAA  				(112)
#define 			TUNING_LOC  				(113)
#define 			TUNING_MENU_RUEDAS 			(114)
#define 			REQF_ACCEPT 				(115)
#define 			PETITION_DIALOG 			(116)
#define 			ENTER_LSTV 					(117)
#define 			REPORTSMENU  				(118)
#define 			TIPRE 						(119)
#define 			REBUG 						(120)
#define 			DIALOG_LOADTRUCK			(121)
#define 			DIALOG_LOADTRUCKL 			(122)
#define 			DIALOG_LOADTRUCKI 			(123)
#define 			TOYS        				(124)
#define 			DELETETOY       			(125)
#define 			WEARTOY         			(126)
#define 			BUYTOYS         			(127)
#define 			BUYTOYS2       				(128)
#define 			D_SERVICES        			(129)
#define 			BUYTOYSGOLD     			(130)
#define 			BUYTOYSGOLD2    			(131)
#define 			EDITTOYS        			(132)
#define 			EDITTOYS2       			(133)
#define 			EDITTOYSBONE    			(134)
#define 			DIALOG_ATMB      			(135)
#define 			DIALOG_ATMBR      			(136)
#define 			DIALOG_ATMBD      			(137)
#define 			DIALOG_ATMBE      			(138)
#define 			DIALOG_BANKM      			(139)
#define             DIALOG_ADMINH_2             (140)
#define             DIALOG_ADMINH_3             (141)
#define 			BUYTOYSCOP                  (142)
#define 			BUYTOYSCOP2     			(143)
#define 			BUYTOYSCOP3     			(144)
#define 			EDITTOYSIZX     			(145)
#define 			EDITTOYSIZY      			(146)
#define 			EDITTOYSIZZ      			(147)
#define 			NGMENU          			(148)
#define 			NGMENUWEP       			(149)
#define 			NGMENUSKIN      			(150)
#define 			FDUTYMENU4 					(151)
#define 			DIALOG_SHOPFISH 			(152)
#define             MERCADONEGRO                (153)
#define             DIALOG_NOLOGIN              (154)
#define             DIALOG_ADMINH_4             (155)
#define 			DIALOG_VIPCOLOR				(156)
#define 			D_CVACENTO					(157)
#define 			DIALOG_VIPCLOTHES			(158)
#define 			DIALOG_CREATEGUN    		(159)
#define				D_ATM_MENU   				(160)
#define				D_ATM_PIN          			(161)
#define				D_ATM_RET                	(162)
#define				D_ATM_DEP                	(163)
#define				D_ATM_CAMPIN                (164)
#define				D_ATM_ESTADO                (165)
#define 			D_ATM_TRANS                 (166)
#define 			D_ATM_TRANS1                (167)
#define 			D_ATM_TRANS2                (168)
#define 			HELP_MENU                   (169)
#define 			D_NEWVEH 					(170)
#define 			D_NEWVEH_1 					(171)
#define 			D_NEWVEH_2 					(172)
#define 			D_NEWVEH_3 					(173)
#define 			HOUSE_OPTIONS    			(174)
#define 			HOUSE_DINERO    			(175)
#define             DIALOG_ADMINH_5             (176)
#define             DIALOG_ADMINH_6             (177)
#define 			HOUSE_ITEM 		 			(178)
#define 			HOUSE_ITEM_MAT   			(179)
#define 			HOUSE_ITEM_POT 	 			(180)
#define 			HOUSE_ITEM_CRACK 			(181)
#define 			HOUSE_ITEM_MAT_D 			(182)
#define 			HOUSE_ITEM_MAT_R 			(183)
#define 			HOUSE_ITEM_POT_D 			(184)
#define 			HOUSE_ITEM_POT_R 			(185)
#define 			HOUSE_ITEM_CRACK_D 			(186)
#define 			HOUSE_ITEM_CRACK_R 			(187)
#define             DIALOG_ADMINH_7             (188)
#define 			D_COINSVIP    				(201)
#define 			D_CVCARMODEL                (202)
#define 			D_CVVEST                    (203)
#define 			D_CVLASER                   (204)
#define 			D_CVLASERSLOT               (205)
#define 			D_CVLASERCONFIRM            (206)
#define 			D_CVVIP                     (207)
#define 			D_CVVIPSILVER               (208)
#define 			D_CVVIP2              		(209)
#define 			D_CVVIPTERMS              	(210)
#define 			D_CVDOBLEEXP              	(211)
#define 			D_CVNEON	              	(212)
#define 			D_CVNEONSLOT	            (213)
#define 			D_CVNEONCONFIRM	            (214)
#define 			D_PINVIP            		(215)
#define 			D_PINVIPCREATE            	(216)
#define 			D_PINVIPCHANGE	            (217)
#define 			D_PINVIPCHANGE2	            (218)
#define 			D_VIPACC	            	(219)
#define 			D_CODEVIP	            	(220)
#define 			D_CVOTHERS	            	(221)
#define 			D_CVOTHERSSLOT	            (222)
#define 			D_CVOTHERCONFIRM	        (223)
#define             DIALOG_MYBUSINESS           (224)
#define             DIALOG_MYBUSINESS_RET       (225)
#define             DIALOG_MYBUSINESS_DEP       (226)
#define             DIALOG_MYBUSINESS_STO       (227)
#define             DIALOG_MYBUSINESS_PSTO      (228)
#define             DIALOG_BFOOD      			(229)
#define             DIALOG_BSEX_SHOP      		(230)
#define             DIALOG_MYBUSINESS_PSTO2     (231)
// -=================================================-//
#define             DIALOG_BOOMBOX              (232)
#define             DIALOG_BOOMBOX1             (233)
#define             DIALOG_BOOMBOX2             (234)
#define             DIALOG_BOOMBOX3             (235)
#define             DIALOG_BOOMBOX4             (236)
#define             DIALOG_BOOMBOX5             (237)
#define             DIALOG_BOOMBOX6             (238)
#define             DIALOG_BOOMBOX7             (239)
// -=================================================-//
#define 			DIALOG_EDIT_FURNITURE 		(240)
#define 			DIALOG_SELL_FURNITURE 		(241)
#define 			DIALOG_BUY_FURNITURE 		(242)
#define 			DIALOG_MENU_FURNITURE 		(243)
#define 			DIALOG_FURNITURE_BOUGHT 	(244)
#define 			DIALOG_FURNITURE_KEEPSELL 	(245)
#define             DIALOG_CDSTEREOMENU         (246)
#define 			EQUIPO_MAFIA 				(247)
#define 			BEBIDAS     				(248)
#define 			TESTLIC_0     				(249)
#define 			TESTLIC_1     				(250)
#define 			TESTLIC_2     				(251)
#define 			TESTLIC_3     				(252)
#define 			TESTLIC_4     				(253)
#define 			TESTLIC_5     				(254)
#define 			TESTLIC_6     				(255)
#define 			TESTLIC_7     				(256)
#define 			TESTLIC_8     				(257)
#define 			TESTLIC_9     				(258)
#define 			TESTLIC_10     				(259)
#define 			TESTLIC_11     				(260)
#define 			TESTLIC_FIN1     			(261)
#define 			TESTLIC_FIN2     			(262)
#define 			TEST_0              		(263)
#define 			TEST_1              		(264)
#define 			TEST_2              		(265)
#define 			TEST_3              		(266)
#define 			TEST_4              		(267)
#define 			TEST_5              		(268)
#define 			TEST_6              		(269)
#define 			TEST_7              		(270)
#define 			TEST_8              		(271)
#define 			TEST_9              		(272)
#define 			DIALOG_REG_FIN1         	(273)
#define 			DIALOG_REG_FIN2         	(274)
#define 			AGENDA                   	(275)
#define 			AGENDA_AGREGAR              (276)
#define 			AGENDA_VB                 	(277)
#define 			DIALOG_MUSICA               (278)
#define 			DIALOG_MUSICAURL            (279)
#define 			CAMBIARACENTO               (280)
#define 			V_TUNECAR                   (281)
#define     		V_CARVINILOS                (282)
#define			    V_CARCOLORS                	(283)
#define     		V_TUBOS                   	(284)
#define     		V_PARAGOLPESD               (285)
#define     		V_PARAGOLPEST               (286)
#define     		V_TECHOS                    (287)
#define     		V_ALERONES                  (288)
#define    		 	V_LATERALES                 (289)
#define   		  	V_BULLARS                   (290)
#define     		V_RUEDAS                    (291)
#define    		 	V_ESTEREO                   (292)
#define     		V_TUNECAR2                  (293)
#define    		 	V_RUEDAS2                   (294)
#define   	 	 	V_NITRO                     (295)
#define             DIALOG_COLORADMIN           (296)
#define 			INT_CASAS          			(297)
#define 			BALAS1          			(298)
#define 			BALAS2          			(299)
#define             UMENU_REPARACION            (300)
#define             DIALOG_LIC_BUY              (301)
#define             DIALOG_LIC_01               (302)

/* Sistema de Graffitis */

enum SPRAYTAG_DATA
{
	_spSQLID,
	_spObject,
	_spText[50],
	_spOwned[MAX_PLAYER_NAME],
	_spFontColor,
	_spBold,
	_spFontSize,
	_spFont[50],
	Float:_spPosX,
	Float:_spPosY,
	Float:_spPosZ,
	Float:_spPosRX,
	Float:_spPosRY,
	Float:_spPosRZ,
	_spVW,
	_spInt
}

new RandMusic[][] =
{
	"http://s1.wikimuzik.com/music/W/Wiz%20Khalifa/[one]/Black%20And%20Yellow%20[WikiSeda].mp3",
	"http://www.wearecode.com/wp-content/uploads/2011/08/Midnight-City1.mp3",
	"http://www.millburylittleleague.org/All-Star/Smash%20Mouth%20-%20All%20Star.mp3",
	"http://a.tumblr.com/tumblr_kzljfm4Ozx1qavc47o1.mp3",
	"http://www.djcelso.com.br/wp-content/uploads/2012/11/Showtek-Justin-Prime-Cannonball-Site-edit.mp3",
	"https://dl.dropboxusercontent.com/s/95zai6kygp58bw0/survival.mp3",
	"https://dl.dropboxusercontent.com/u/100949615/eve%20w%20gwen%20stefani%20-%20scorpion%20-%20let%20me%20blow%20your%20mind.mp3",
	"https://dl.dropboxusercontent.com/s/hlgkora62wpwhhv/hood.mp3"
};
new
	SprayTags[MAX_PLAYERS][MAX_PLAYERS_TAGS][SPRAYTAG_DATA],
	spraytag_object[MAX_PLAYERS],
	spraytag_timer[MAX_PLAYERS],
	spraytag_timer_left[MAX_PLAYERS],
	spraytag_find[MAX_PLAYERS],
	spraytag_slot[MAX_PLAYERS],
	spraytag_text[MAX_PLAYERS],
	spraytag_size[MAX_PLAYERS],
	spraytag_bold[MAX_PLAYERS],
	spraytag_color[MAX_PLAYERS],
	spraytag_font[MAX_PLAYERS],
	Float:spraytag_positions[MAX_PLAYERS][6]
;

/*----------------*/

enum vCoords
{
	getID,
	Float:vvvX,
	Float:vvvY,
	Float:vvvZ,
};

new Offsets[9][vCoords] = {
{560, 0.398071289,0.75390625,0.43879509}, // Tablero Sultna
{415, 0.409729004, 0.526367188, 0.206963539}, // Tablero Cheetah
{421, 0.421691895, 0.804931641, 0.256482124}, // Tablero Washington
{426, 0.575378418, 0.786132812, 0.361483574}, // Tablero Premir
{579, 0.454345703, 0.575683594, 0.645122528}, // Tablero Huntley
{402, 0.53515625, 0.562988281, 0.278743744}, // Tablero Buffalo
{461, 0.00000000, -0.932861328, 0.494509697}, // PCJ 600
{521, 0.00000000, -0.928955078, 0.558652878},  // FCR 900
{506, 0.541137695, 0.282714844, 0.272130013} // Super Gt
};

enum ddInfo
{
	ddDescription[128],
	ddPickupID,
	Text3D: ddTextID,
	ddCustomInterior,
	ddExteriorVW,
	ddExteriorInt,
	ddInteriorVW,
	ddInteriorInt,
	Float: ddExteriorX,
	Float: ddExteriorY,
	Float: ddExteriorZ,
	Float: ddExteriorA,
	Float: ddInteriorX,
	Float: ddInteriorY,
	Float: ddInteriorZ,
	Float: ddInteriorA,
	ddCustomExterior,
	ddVIP,
	ddFamily,
	ddFaction,
	ddAdmin,
	ddWanted,
	ddVehicleAble,
	ddColor,
	ddPickupModel,
	dPass[24],
	dLocked,
	dMusic,
};
new DDoorsInfo[MAX_DDOORS][ddInfo];

enum infoCarSale
{
	Float: CSVehSpawn[4],
	Float: VehSpawn[4],
	CSVehId,
	CSVehCost,
	CSVehModel,
	Text3D:CSVehicleLabel,
}
new varCarSale[MAX_CARSALE][infoCarSale];

enum CodesVIP{CodeNro,CodeCoins,}
new varCodesVIP[MAX_CODESVIP][CodesVIP];

enum hInfo
{
	hOwned,
	hLevel,
	hHInteriorWorld,
	hCustomInterior,
	hOwner[MAX_PLAYER_NAME],
	hDireccion[256],
	Float: hExteriorX,
	Float: hExteriorY,
	Float: hExteriorZ,
	Float: hExteriorR,
	Float: hExteriorA,
	Float: hInteriorX,
	Float: hInteriorY,
	Float: hInteriorZ,
	Float: hInteriorR,
	Float: hInteriorA,
	hLock,
	hRentable,
	hRentFee,
	hValue,
	hSlotRopero1,
	hSlotRopero2,
	hSlotRopero3,
	hSlotRopero4,
	hSlotRopero5,
	hSlotRopero6,
	hSlotRopero7,
	hSlotRopero8,
	hSlotRopero9,
	hSlotRopero10,
	hSafeMoney,
	hPot,
	hCrack,
	hMaterials,
	hWeapons[5],
	hMunicion[5],
	hPickupID,
	Text3D: hTextID,
	hCustomExterior,
	gInteriorWorld,
	Float:gX,
	Float:gY,
	Float:gZ,
	Float:gR,
	gPickupID,
	Text3D:gTextID,
	gT,
	FCount,
	FModel[MAX_FURNITURE],
	FurnitureObj[MAX_FURNITURE],
	Float:FPosX[MAX_FURNITURE],
	Float:FPosY[MAX_FURNITURE],
	Float:FPosZ[MAX_FURNITURE],
	Float:FRotX[MAX_FURNITURE],
	Float:FRotY[MAX_FURNITURE],
	Float:FRotZ[MAX_FURNITURE]
};
new HouseInfo[MAX_HOUSES][hInfo];

enum businessE
{
	bType,
	bOwner[MAX_PLAYER_NAME],
	bName[32],
	Float: bExteriorPos[3],
	Float: bInteriorPos[3],
	bInterior,
	bLocked,
	Float: bMiscPos[3],
	bVault,
	bPrice,
	Text3D: bLabelID,
	bPickupID,
	bStock,
}
new businessVariables[MAX_BUSINESS][businessE];

// Event
enum EventInfoEnum
{
	EventAdvisor,
	EventStatus,
	EventType,
	EventoInfo[128],
	Float: EventHealth,
	Float: EventArmor,
	Float: EventPositionX,
	Float: EventPositionY,
	Float: EventPositionZ,
	EventInterior,
	EventWorld,
	EventWeapons[ 5 ],
	EventTeamColor[2],
	EventTeamSkin[2],
	EventLimit,
	EventPlayers,
	EventRequest,
	EventStartRequest,
	EventCreator,
	EventStaff[5],
	EventJoinStaff,
	VipOnly,
	Float: EventTeamPosX1,
	Float: EventTeamPosY1,
	Float: EventTeamPosZ1,
	Float: EventTeamPosX2,
	Float: EventTeamPosY2,
	Float: EventTeamPosZ2
}

new InfoEvento[ EventInfoEnum ];

enum vCamera
{
	Float: vCameraPos[3],
	Float: vCameraRot,
	vCameraStatus, // 0: ON 1: OFF futere reference
	vCameraRange,
	vCameraLimit,
	vCameraTicket,
	Text3D:vCameraLabel,
	vCameraObject,
}
new vCameraInfo[MAX_vCAMERAS][vCamera];

enum atmE
{
	Float: fATMPos[3],
	Float: fATMPosRot,
	atmMoney,
	rObjectId,
	Text3D: rTextLabel,
}
new atmVariables[MAX_ATMS][atmE];

enum fPoint
{
	Float:Pointx,
	Float:Pointy,
	Float:Pointz,
	Type,
	Vulnerable,
	MatPoint,
	CratePoint,
	Announced,
	ClaimerId,
	ClaimerTeam,
	TimeToClaim,
	TimeLeft,
	Owner[32],
	PlayerNameCapping[MAX_PLAYER_NAME],
	CapperName[MAX_PLAYER_NAME],
	Name[32],
	TakeOverTimerStarted,
	TakeOverTimer,
	Text3D:TextLabel,
	CaptureTimerEx2,
	Stock,
	Text3D:CaptureProccess,
	Text3D:CaptureProgress,
	CaptureProccessEx,
	Float: Capturex,
	Float: Capturey,
	Float: Capturez,
	PointPickupID,
	Bar:PointBarID,
}
new Points[MAX_POINTS][fPoint];

enum ptInfo
{
	ptModelID,
	ptBone,
	Float:ptPosX,
	Float:ptPosY,
	Float:ptPosZ,
	Float:ptRotX,
	Float:ptRotY,
	Float:ptRotZ,
	Float:ftscaleX,
	Float:ftscaleY,
	Float:ftscaleZ
};
new PlayerToyInfo[MAX_PLAYERS+1][MAX_PLAYERTOYS][ptInfo];

enum HoldingEnumAllCop { holdingmodelid, holdingprice, holdingmodelname[24] }
new HoldingObjectsCop[15][HoldingEnumAllCop] = {
{18642,1000,"Taser"},
{19141,2500,"Casco SWAT"},
{19142,2500,"Chaleco SWAT"},
{18636,1000,"Gorro Policía"},
{19099,1000,"Gorro Policía 2"},
{19100,1000,"Gorro Policía 3"},
{18637,1000,"Escudo Policía"},
{19161,1000,"Sombrero Policía"},
{19162,1000,"Sombrero Policía 2"},
{19200,1000,"Casco Policía"},
{19520,50,"Sombrero Piloto"},
{19521,50,"Sombrero Cop"},
{19138,1000,"Lentes"},
{19139,1000,"Lentes 2"},
{19140,1000,"Lentes 3"}
};

enum HoldingEnumAll { holdingmodelid, holdingmodelname[24] }
new HoldingObjectsAll[263][HoldingEnumAll] = {
{18642,"Taser"},
{18643,"Laser Rojo"},
{19080,"Laser Azul"},
{19081,"Laser Rosado"},
{19082,"Laser Naranja"},
{19083,"Laser Verde"},
{19084,"Laser Amarillo"},
{335,"Navaja"},
{336,"Bat"},
{348,"Desert E"},
{349,"Escopeta"},
{353,"MP5"},
{355,"AK-47"},
{356,"M4"},
{358,"Sniper"},
{371,"Mochila Rockstar"},
{19351,"Bigotes Falsos"},
{19347,"Estrella Sheriff"},
{19086,"Dildo Grande"},
{18675,"SmokePuff"},
{19701,"Flama Pequeña"},
{18693,"Flama Larga"},
{18698,"Insectos"},
{18708,"Burbujas"},
{19141,"Casco SWAT"},
{19515,"Chaleco Antibalas"},
{19142,"Chaleco SWAT"},
{18636,"Gorro Policía"},
{19099,"Gorro Policía 2"},
{19100,"Gorro Policía 3"},
{18637,"Escudo Policía"},
{19161,"Sombrero Policía"},
{19162,"Sombrero Policía 2"},
{19520,"Sombrero Piloto"},
{19521,"Sombrero Cop"},
{19200,"Casco Policía"},
{19138,"Lentes"},
{19139,"Lentes 2"},
{19140,"Lentes 3"},
{18632,"Caña Pesca"},
{18633,"L. Inglesa"},
{18634,"Palanca"},
{18635,"Martillo"},
{18638,"Casco Amarillo"},
{19093,"Casco 1"},
{19160,"Casco 3"},
{18639,"Sombrero N."},
{19488,"Sombrero B."},
{18640,"Cabello"},
{18975,"Cabello 2"},
{19136,"Cabello 3"},
{19274,"Cabello 4"},
{18641,"Linterna"},
{18644,"Desarmador"},
{18865,"Telefono1"},
{18866,"Telefono2"},
{18867,"Telefono3"},
{18868,"Telefono4"},
{18869,"Telefono5"},
{18870,"Telefono6"},
{18871,"Telefono7"},
{18872,"Telefono8"},
{18873,"Telefono9"},
{18874,"Telefono10"},
{18875,"B.Personas"},
{18890,"Rastrillo"},
{18891,"Bandana1"},
{18892,"Bandana2"},
{18893,"Bandana3"},
{18894,"Bandana4"},
{18895,"Bandana5"},
{18896,"Bandana6"},
{18897,"Bandana7"},
{18898,"Bandana8"},
{18899,"Bandana9"},
{18900,"Bandana10"},
{18901,"Bandana11"},
{18902,"Bandana12"},
{18903,"Bandana13"},
{18904,"Bandana14"},
{18905,"Bandana15"},
{18906,"Bandana16"},
{18907,"Bandana17"},
{18908,"Bandana18"},
{18909,"Bandana19"},
{18910,"Bandana20"},
{18911,"Mask1"},
{18912,"Mask2"},
{18913,"Mask3"},
{18914,"Mask4"},
{18915,"Mask5"},
{18916,"Mask6"},
{18917,"Mask7"},
{18918,"Mask8"},
{18919,"Mask9"},
{18920,"Mask10"},
{18921,"Boina1"},
{18922,"Boina1"},
{18923,"Boina3"},
{18924,"Boina4"},
{18925,"Boina5"},
{18926,"Sombrero1"},
{18927,"Sombrero12"},
{18928,"Sombrero13"},
{18929,"Sombrero14"},
{18930,"Sombrero15"},
{18931,"Sombrero16"},
{18932,"Sombrero17"},
{18933,"Sombrero18"},
{18934,"Sombrero19"},
{18935,"Sombrero20"},
{19487,"Sombrero21"},
{18936,"Casco1"},
{18937,"Casco2"},
{18938,"Casco3"},
{18939,"Gorra 1"},
{18940,"Gorra 2"},
{18941,"Gorra 3"},
{18942,"Gorra 4"},
{18943,"Gorra 5"},
{18944,"GorraBoater1"},
{18945,"GorraBoater2"},
{18946,"GorraBoater3"},
{18947,"GorraBoater4"},
{18948,"GorraBoater5"},
{18949,"GorraBoater6"},
{18950,"GorraBoater7"},
{18951,"GorraBoater8"},
{18952,"Casco Box"},
{18953,"GorraLana1"},
{18954,"GorraLana2"},
{18955,"GorraIncl1"},
{18956,"GorraIncl2"},
{18957,"GorraIncl3"},
{18958,"GorraIncl4"},
{18959,"GorraIncl5"},
{18960,"GorraIncl6"},
{18961,"GorraCamionero"},
{18962,"Sombrero Vaquero"},
{18964,"Casquete1"},
{18965,"Casquete2"},
{18966,"Casquete3"},
{18967,"Sombrero"},
{18968,"Sombrero2"},
{18969,"Sombrero3"},
{18970,"Sombrero Tigre"},
{18971,"GorroCool"},
{18972,"GorroCool2"},
{18973,"GorroCool3"},
{18974,"MaskZorro"},
{18645,"Casco Moto"},
{18976,"Casco Moto 2"},
{18977,"Casco Moto 3"},
{18978,"Casco Moto 4"},
{18979,"Casco Moto 5"},
{19006,"Lentes 1"},
{19007,"Lentes 2"},
{19008,"Lentes 3"},
{19009,"Lentes 4"},
{19010,"Lentes 4"},
{19011,"Lentes 6"},
{19012,"Lentes 7"},
{19013,"Lentes 8"},
{19014,"Lentes 9"},
{19015,"Lentes 10"},
{19016,"Lentes 11"},
{19017,"Lentes 12"},
{19018,"Lentes 13"},
{19019,"Lentes 14"},
{19020,"Lentes 15"},
{19021,"Lentes 16"},
{19022,"Lentes 17"},
{19023,"Lentes 18"},
{19024,"Lentes 19"},
{19025,"Lentes 20"},
{19026,"Lentes 21"},
{19027,"Lentes 22"},
{19028,"Lentes 23"},
{19029,"Lentes 24"},
{19030,"Lentes 25"},
{19031,"Lentes 26"},
{19032,"Lentes 27"},
{19033,"Lentes 28"},
{19034,"Lentes 29"},
{19035,"Lentes 30"},
{19036,"HockeyMask1"},
{19037,"HockeyMask2"},
{19038,"HockeyMask3"},
{19039,"Reloj 1"},
{19040,"Reloj 2"},
{19041,"Reloj 3"},
{19042,"Reloj 4"},
{19043,"Reloj 5"},
{19044,"Reloj 6"},
{19045,"Reloj 7"},
{19046,"Reloj 8"},
{19047,"Reloj 9"},
{19048,"Reloj 10"},
{19049,"Reloj 11"},
{19050,"Reloj 12"},
{19051,"Reloj 13"},
{19052,"Reloj 14"},
{19053,"Reloj 15"},
{19064,"GorraSanta1"},
{19065,"GorraSanta2"},
{19066,"GorraSanta3"},
{19067,"HoodyHat1"},
{19068,"HoodyHat2"},
{19069,"HoodyHat3"},
{19078,"Loro1"},
{19079,"Loro2"},
{19085,"Parche Ojo"},
{19090,"PomPomAzul"},
{19091,"PomPomRejo"},
{19092,"PomPomVerde"},
{19094,"GorroBurgerShot"},
{19095,"Sombrero Vaquero 2"},
{19096,"Sombrero Vaquero 3"},
{19097,"Sombrero Vaquero 4"},
{19098,"Sombrero Vaquero 5"},
{19113,"Casco Tonto1"},
{19114,"Casco Tonto2"},
{19115,"Casco Tonto3"},
{19116,"Casco Aereo1"},
{19117,"Casco A. 2"},
{19118,"Casco A. 3"},
{19119,"Casco A. 4"},
{19120,"Casco A. 5"},
{19101,"Casco Militar1"},
{19102,"Casco Militar2"},
{19103,"Casco Militar3"},
{19104,"Casco Militar4"},
{19105,"Casco Militar5"},
{19106,"Casco Militar6"},
{19107,"Casco Militar7"},
{19108,"Casco Militar8"},
{19109,"Casco Militar9"},
{19110,"Casco Militar10"},
{19111,"Casco Militar11"},
{19112,"Casco Militar12"},
{19137,"GorraCluckinBell"},
{19163,"Mascara"},
{19330,"Casco Bomb"},
{19331,"Casco Bomb2"},
{19317,"Guitarra"},
{19318,"GuitarraX"},
{19319,"XFireGuitarra"},
{1210,"Maleta"},
{3044,"Cigarro"},
{18647,"Neon Rojo"},
{18648,"Neon Azul"},
{18649,"Neon Verde"},
{18650,"Neon Amarillo"},
{18651,"Neon Rosado"},
{18652,"Neon Blanco"},
{18861,"Signo ?"},
{18646,"Luz Azul&Roja"},
{19346,"HotDog"},
{19472,"Máscara de Gas"},
{19421,"Headphone 1"},
{19422,"Headphone 2"},
{19423,"Headphone 3"},
{19424,"Headphone 4"}
};

new HoldingBones[][] = {
"Nada",
"Columna",
"Cabeza",
"Brazo Izq Sup",
"Brazo Der Sup",
"Mano Izq",
"Mano Derecha",
"Muslo Izq",
"Muslo Der",
"Pie Izq",
"Pie Der",
"Right calf",
"Left calf",
"AnteBrazo Izq",
"AnteBrazo Der",
"Clavicula Izq",
"Clavicula Der",
"Cuello",
"Quijada"
};

// Info Player
enum pInfo
{
pKey[24],
pLevel,
pAdmin,
pRolPuntos,
pBanAppealer,
pStaffManager,
pFactionModerator,
pHelper,
pConnectTime,
pReg,
pSex,
pAge,
pExp,
pCash,
pMoneyBank,
pPinBank,
pNrCuenta,
pIP[32],
pKills,
pDeaths,
pArrested,
pJailAdmin,
pLottoNr,
pJob,
pDudaMute,
pWarn,
pWRestricted,
pJailed,
pJailTime,
pMats,
pPackages,
pDrugs,
pCosecha,
pCrack,
pPot,
pCrates,
pAdiccion,
pLeader,
pMember,
pDivision,
pFMember,
pRank,
pChar,
Float:pHealth,
Float:pArmour,
pInt,
pPnumber,
pSprunk,
pPhoneBook,
pPhousekey,
Float:pPos_x,
Float:pPos_y,
Float:pPos_z,
Float:pPos_r,
pCarLic,
pFlyLic,
pBoatLic,
pGunLic,
pGafas,
pTut,
pVW,
pLighter,
pCigarettes,
pPapel,
pMask,
pMaskuse,
pPalanca,
pHideNumber,
pSpeaker,
pBanned,
pDisabled,
pBlockBug,
pDNI,
pArmsSkill,
pTruckSkill,
pSmugSkill,
pDrugsSkill,
pRequestingBackup,
pFStyle,
pWantedLevel,
pRenting,
p_Pr_Money,
p_Pr_Time,
pRob,
pVIP,
pBanDuda,
pPasaporte,
pRMuted,
pRMutedTotal,
pRMutedTime,
pRadio,
pRadioFreq,
pIpadMusic,
pWeapons[13],
pMunicion[13],
pAcento[40],
pAgenda1[40],
pAgenda2[40],
pAgenda3[40],
pAgenda4[40],
pAgenda5[40],
pHead,
pContactoAgendar,
pLibreta,
pNumeroLibreta1,
pNumeroLibreta2,
pNumeroLibreta3,
pNumeroLibreta4,
pNumeroLibreta5,
pNumeroLibreta6,
pNumeroLibreta7,
pNumeroLibreta8,
pNumeroLibreta9,
pNumeroLibreta10,
pCHits,
pFHits,
pMarried,
pPaintTeam,
pPaintTokens,
pVehicleKeysFrom,
pVehicleKeys,
pLockCar,
pLock,
pSpraycan,
pMarriedTo[128],
pContractBy[32],
pContractDetail[64],
pServiceTime,
pTaxiLicense,
pHospital,
pTriageTime,
pWExists,
Float:pWX,
Float:pWY,
Float:pWZ,
Float:pWZ2,
pWVW,
pWInt,
pWValue,
pWObject,
pWObject2,
Text3D:pWText,
pWTimer,
pWSeeds,
pGBloq,
pADMute,
pADMuteTotal,
pWarrant[128],
pJudgeJailTime,
pJudgeJailType,
pBeingSentenced,
pProbationTime,
pFishSkill,
pFishes,
pBiggestFish,
pADTime,
pGTokens,
pDobleExp,
pAdverID,
pOrder,
pTempVIP,
pVIPInviteDay,
pBuddyInvited,
pJob2,
pVIPCHAT,
pTypeSpawn,
pAutoTextReply[64],
pShopTech,
pEstado, // 0: None 1: Tazer 2: Esposado  - future reference
pVIPDateD,
pVIPDateM,
pRegalo,
pTaxDeuda,
pTimePayDay,
pTimePlay,
pSavedTime,
pScrewdriver,
pFirstaid,
pSurveillance,
pSpectating,
pMoneyBankT,
pBorrowedMoney,
pFeesBank,
pAdminDuty,
pAdminName[MAX_PLAYER_NAME],
pNormalName[MAX_PLAYER_NAME],
pTempName,
pCoinsVip,
pCoinsPIN,
pCashGo,
pBoombox,
pAntecedente1[32],
pAntecedente2[32],
pAntecedente3[32],
pAntecedenteID1,
pAntecedenteID2,
pAntecedenteID3,
pTestErrores,
pCansancioNN,
pOrinaNN,
pHambreNN,
pPlayerVehiclesID[5]
};
new Info[MAX_PLAYERS][pInfo];

// System Cars Dynamic
enum pvInfo
{
	pvOwner[MAX_PLAYER_NAME],
	Float:pvPosX,
	Float:pvPosY,
	Float:pvPosZ,
	Float:pvPosAngle,
	pvVW,
	pvId,
	pvModelId,
	pvLock,
	pvLocked,
	pvPaintJob,
	pvColor1,
	pvColor2,
	pvMods[MAX_MODS],
	pvAllowPlayer[MAX_PLAYER_NAME],
	pvAllowedPlayerId,
	pvPark,
	pvStereo,
	pvNumberPlate[32],
	pvPrice,
	pvTicket,
	pvWeapons[3],
	pvMunicion[3],
	pvImpounded,
	pvFuel,
	Float:pvHealth,
	pvSpawned,
	pvEnVenta,
	pvEnVentaP,
	Text3D:pvEnVentaT,
	pvEnVentaO,
	pvEqSound
};
new PlayerVehicleInfo[MAX_PLAYERVEHICLES][pvInfo];

new light[MAX_VEHICLES], Lamp[MAX_VEHICLES] = 0;
new skinlist = mS_INVALID_LISTID,ToyList = mS_INVALID_LISTID,ToyListGold = mS_INVALID_LISTID,DormitorioFur = mS_INVALID_LISTID,ComedorFur = mS_INVALID_LISTID,BanoFur = mS_INVALID_LISTID,
LobbyFur = mS_INVALID_LISTID,CocinaFur = mS_INVALID_LISTID,ParedesFur = mS_INVALID_LISTID,ElectroFur = mS_INVALID_LISTID,OtrosFur = mS_INVALID_LISTID,
JustReported[MAX_PLAYERS],PlayerDuda[MAX_PLAYERS],szDialog[255],szMessage[1024];
new PLuces[MAX_PLAYERS];
new TLI, TLI2;
new TransferMoney[MAX_PLAYERS],
	TransferTo[MAX_PLAYERS],
	TransferNroAcc[MAX_PLAYERS];
new Bar:PizzaBar[MAX_PLAYERS];
new VehicleFuel[MAX_VEHICLES] = 300;
new MatarFlatulencia[MAX_PLAYERS][2];
new FlatulenciaTroll[MAX_PLAYERS][2];
new LockStatus[MAX_VEHICLES];
new bool:EstereoON[MAX_VEHICLES], EstereoArea[MAX_VEHICLES], Float:EstereoVPos[MAX_VEHICLES][3], EstereoURL[MAX_VEHICLES][80];
new arr_Engine[MAX_VEHICLES char];
new arr_Towing[MAX_PLAYERS];
new RefuelingVehicle[MAX_PLAYERS];
new RefuelingVehicleTimer[MAX_PLAYERS];
new RefuelingVehiclePrice[MAX_PLAYERS];
new VehicleStatus[MAX_VEHICLES char] = 0; // 0 == none, 1 == vehicle dead about to respawn
new Float: fVehSpeed[MAX_PLAYERS];
new Muted[MAX_PLAYERS];
new QFA[MAX_PLAYERS][24]; // Anti DM ?

new OOCTimer[MAX_PLAYERS];
new TEL_INPUT_ID[MAX_PLAYERS];
new IsPractising[MAX_PLAYERS];
//-= Garage Tunning =-
static pmodelid[MAX_PLAYERS];
static pvehicleid[MAX_PLAYERS];
// Peajes
new pea1, pea2, pea3, pea4, pea5, pea6, pea7, pea8;
new AutoPeaje = 0;
new Text:InfoText[MAX_PLAYERS],
InfoTimer[MAX_PLAYERS],
InfoTextShowing[MAX_PLAYERS];
// Limitador de velocidad
new Speedlimit[MAX_PLAYERS];
// Licencias
new ExamenManejo[MAX_PLAYERS];
new ExamenVuelo[MAX_PLAYERS];
new ExamenNav[MAX_PLAYERS];
new bool:TestGunLic[MAX_PLAYERS], ObjectLic[MAX_PLAYERS][5], CountDing[MAX_PLAYERS], TestGunLicLevel[MAX_PLAYERS];
// Color admin
new ColorAdmin[MAX_PLAYERS];
// Puertas banco
new botonesbanco1[5], puertasbanco1[4];
// Robar banco
new Robo[MAX_PLAYERS];
new DineroRobado[MAX_PLAYERS];
new RobarBanco = 0;
new Bar:LoadRoboBanco[MAX_PLAYERS] = INVALID_BAR_ID;
new LoadRoboBancoTime[MAX_PLAYERS];
new RobarTiempo[MAX_PLAYERS], RobarTiempoTimer[MAX_PLAYERS];
new ForzarTimer[MAX_PLAYERS];
new Bar:ForzandoPuerta[MAX_PLAYERS] = INVALID_BAR_ID;
new ForzandoPuertaTiempo[MAX_PLAYERS];
new ErroresLic[MAX_PLAYERS];
new Mostrando[MAX_PLAYERS];
// Trabajo Obrero //
new picando[MAX_PLAYERS];
new hands[MAX_PLAYERS];
new escombros[MAX_PLAYERS];
new escombrost[MAX_PLAYERS];
new picarescombros[5]; // pickup juntar escombros
new eescombros; // pickup entregar escombros
new entregare[MAX_PLAYERS]; // entrega escombros
new randommine[][1] =
{
{8},{9},{10},{11},{12}
};
//AntiAFK
new AFK[MAX_PLAYERS];
new Float:OldPos[MAX_PLAYERS][3];
new Float:NewPos[MAX_PLAYERS][3];
new IsAFK[MAX_PLAYERS];
new Text3D:AFKText[MAX_PLAYERS];

// Alt-Tab Detection
new AltTabbed[MAX_PLAYERS];
new Tabbed[MAX_PLAYERS];
new Text3D:AltTabText[MAX_PLAYERS];
new HasText[MAX_PLAYERS];

// Trabajo Leñador //
new ropalenador[MAX_PLAYERS];
new talar[MAX_PLAYERS];
new CorteY;
new CorteX;
new gcorte[MAX_PLAYERS];
new Azar1;
new Maderaazar[][1] =
{
	{8},{9},{10},{11},{12}
};
new lena1[MAX_PLAYERS];
new lena2[MAX_PLAYERS];
new lena;
new bool:TrabajoL[MAX_PLAYERS];
new Arbolvivo[5];
new Arbolmuerto[5];
new Talararbol[5];
new Tiempotalar[MAX_PLAYERS];
new bool:MBasura[MAX_PLAYERS], bool:RBasura[MAX_PLAYERS], CBasura[MAX_PLAYERS], RutaBasura[MAX_PLAYERS], CheckBasura[MAX_PLAYERS];
new iGMXTick,iGMXTimer, servertime;
//scriptTimers[MAX_TIMERS];
new VIPGifts = 0, VIPGiftsTimeLeft, VIPGiftsName[MAX_PLAYER_NAME];
new Float:TeleportDest[MAX_PLAYERS][3];
new TeleportDestInt[MAX_PLAYERS];
new Float:TelePos[MAX_PLAYERS][6];
new EventLastInt[MAX_PLAYERS]; new EventLastVW[MAX_PLAYERS];
new Float:EventFloats[MAX_PLAYERS][6]; // 0 = EventLastR 1 = EventLastX 2 = EventLastY 3 = EventLastZ 4 = EventLastH 5 = EventLastA
new nextteam;
new textdrawscount;
new FishCount[MAX_PLAYERS];
new TotalLogin, TotalConnect, TotalAutoBan, TotalRegister,MaxPlayersConnected,MPDay,MPMonth,MPYear,MPHour,MPMinute,PlayerCars,TotalUptime;

//talksys
new JugadorSentado[MAX_PLAYERS];

// SystemAds
enum advertinfo
{
aAdvert[128],
aResume[15],
aNumber,
aContact[MAX_PLAYER_NAME],
aTimer,
aActive,
aOther
}

new ADInfo[MAX_AD][advertinfo];
new ListItemTrackId[MAX_PLAYERS][40];
//
new NewbieTimer[MAX_PLAYERS];
new VIPTimer[MAX_PLAYERS];
//
new CurrentMoney[MAX_PLAYERS];
new JetPack[MAX_PLAYERS];
new PuedeD[MAX_PLAYERS];
new ShowRules[MAX_PLAYERS];
new RulesTime[MAX_PLAYERS];
new slotselection[MAX_PLAYERS];
//new carselection[MAX_PLAYERS];
new carsforplayer;
//Simple AntiCheat
new WeaponNames[47][] = // As below
{
"Puño","Manopla","Palo de golf","Palo de acero","Cuchillo","Bate de beísbol","Pala","Palo de billar","Katana","Motosierra","Dildo morado","Dildo blanco","Dildo largo","Dildo plateado",
"Ramo de flores","Cane","Granada","Granada de gas","Cóctel molotov","Jetpack"," "," ","Pistola 45mm","Pistola SD 45mm","Pistola Desert Eagle","Escopeta","Escopeta recortada","SPAS-12",
"Micro Uzi","MP5","AK-47","M4A1","TEC-9","Rifle","Sniper Rifle","Rocket Launcher","Heatseeker","Lanzallamas","Minigun","Carga de explosivos","Detonador","Spray","Extinguidor",
"Cámara","Nightvision", "Thermal Goggles","Paracaídas"
};

function KickFix(playerid) { Kick(playerid); }
function MatarFlatulencia_1(playerid) { KillTimer(MatarFlatulencia[playerid][0]); DestroyObject(FlatulenciaTroll[playerid][0]); }
function MatarFlatulencia_2(playerid) { KillTimer(MatarFlatulencia[playerid][1]); DestroyObject(FlatulenciaTroll[playerid][1]); }
function SetHP(playerid, Float:hp)
{
	Info[playerid][pHealth] =hp;
	SetPlayerHealth(playerid, hp);
	return 1;
}

function GiveArmorToPlayer(playerid, Float:armour)
{
	Info[playerid][pArmour] = armour;
	SetPlayerArmour(playerid, Float:armour);
	return 1;
}
timer Anticheat[1000]()
{
	foreach(Player, i)
	{
	    if(IsPlayerConnectedEx(i))
		{
	        new Float:health, Float:armor, Float:distance = GetPlayerDistanceFromPoint(i, GetPVarFloat(i, "pACPX"), GetPVarFloat(i, "pACPY"), GetPVarFloat(i, "pACPZ"));
			new Float:distances = GetVehicleDistanceFromPoint(GetPlayerVehicleID(i), GetPVarFloat(i, "pACVX"), GetPVarFloat(i, "pACVY"), GetPVarFloat(i, "pACVZ"));
			GetPlayerHealth(i, health);
	        if(distance > 100 && GetPlayerState(i) == PLAYER_STATE_ONFOOT && Info[i][pAdminDuty] == 0 && GetPVarInt(i, "tempfixac") == 0)
	        {
	            format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s fue expulsado automaticamente, razón: Teleport Hack", GetPlayerNameEx(i));
				SendClientMessageToAllEx(COLOR_LIGHTRED, szMessage);
	   			Expulsar(i);
			}
			if(distances > 100 && !IsAPlane(GetPlayerVehicleID(i)) && GetPlayerState(i) == PLAYER_STATE_DRIVER && Info[i][pAdminDuty] == 0 && GetPVarInt(i, "tempfixac") == 0)
			{
			    format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s fue expulsado automaticamente, razón: Teleport Hack", GetPlayerNameEx(i));
				SendClientMessageToAllEx(COLOR_LIGHTRED, szMessage);
	   			Expulsar(i);
			}
			if(health > Info[i][pHealth] && GetPVarInt(i, "tempfixac") == 0 && Info[i][pAdminDuty] == 0)
			{
				format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s fue expulsado automaticamente, razón: Hack de Vida", GetPlayerNameEx(i));
				SendClientMessageToAllEx(COLOR_LIGHTRED, szMessage);
	   			Expulsar(i);
			}
	        GetPlayerArmour(i, armor);
	  		if(armor > Info[i][pArmour] && GetPVarInt(i, "tempfixac") == 0 && Info[i][pAdminDuty] == 0)
	  		{
	  			format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s fue expulsado automaticamente, razón: Hack de Armadura", GetPlayerNameEx(i));
				SendClientMessageToAllEx(COLOR_LIGHTRED, szMessage);
	   			Expulsar(i);
	  		}
		}
	}
	return 1;
}



forward AltTabTimer();
public AltTabTimer()
{
    foreach(Player, i)
    {
        if(IsPlayerConnectedEx(i))
		{
		    // Deteccion del AFK
			GetPlayerPos(i, NewPos[i][0], NewPos[i][1], NewPos[i][2]);
			if(IsPlayerInRangeOfPoint(i, 3, OldPos[i][0], OldPos[i][1], OldPos[i][2])) {AFK[i] ++;} else {AFK[i] = 0;}
			GetPlayerPos(i, OldPos[i][0], OldPos[i][1], OldPos[i][2]);
			if(AFK[i] >= 30)
			{
			    if(!IsAFK[i])
			    {
					IsAFK[i] = 1;
			    	AFKText[i] = CreateDynamic3DTextLabel("Jugador en estado AFK", COLOR_WHITE, 0, 0, -20, 25, i);
			    	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL,AFKText[i] , E_STREAMER_ATTACH_OFFSET_Z, 0.35);
				}
			}
			else if(AFK[i] == 0)
			{
				if(IsAFK[i])
				{
					IsAFK[i] = 0;
					//SendClientMessage(i, COLOR_WHITE, " Te has movido de tu posicion, ya no estas marcado como jugador AFK.");
                    if(IsValidDynamic3DTextLabel(AFKText[i])) DestroyDynamic3DTextLabel(AFKText[i]);
				}
			}
		    // Deteccion del Alt-Tab
		    AltTabbed[i] ++;
		    if(AltTabbed[i] < 2)
			{
				if(HasText[i])
				{
				    HasText[i] = 0;
					if(IsValidDynamic3DTextLabel(AltTabText[i])) DestroyDynamic3DTextLabel(AltTabText[i]);
				}
			}
		    if(AltTabbed[i] > 2) {Tabbed[i] = 1;}
		    else Tabbed[i] = 0;
			if(Tabbed[i])
			{
			    if(!HasText[i])
			    {
			    	HasText[i] = 1;
			    	AltTabText[i] = CreateDynamic3DTextLabel("Jugador en estado AFK", COLOR_WHITE, 0, 0, -20, 25, i);
			    	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, AltTabText[i] , E_STREAMER_ATTACH_OFFSET_Z, 0.25);
			    }
			}
		}
 }
	return 1;
}
new ropapizzero[MAX_PLAYERS];
// Variables
// Trucker Job
new Bar:LoadTruckBar[MAX_PLAYERS] = INVALID_BAR_ID;
new LoadTruckTime[MAX_PLAYERS];
new TruckDeliver[MAX_PLAYERS];
new TruckUsed[MAX_PLAYERS] = INVALID_VEHICLE_ID;
new TruckContents[MAX_VEHICLES] = 0;
new gPlayerCheckpointStatus[MAX_PLAYERS];
new InsideMainMenu[MAX_PLAYERS];
new HelpingNewbie[MAX_PLAYERS];
new Advisors = 0;
new AdvisorCall = 999;
new thora = 0;
new tminuto = 0;
new tsegundo = 0;
new tiemporeal = 1;
new tiempo = 16;
new cambiartiempo = -1;
new cambiarhora;
new EstaHora;
//DNI TEXTDRAW
new Text:DNI0;
new Text:DNI1;
new Text:DNI2;
new Text:DNI3[MAX_PLAYERS];
new Text:DNI4;
new Text:DNI5;
new Text:DNI6;
new Text:DNI7;
new Text:DNI8[MAX_PLAYERS];
new Text:DNI9[MAX_PLAYERS];
new Text:DNI10[MAX_PLAYERS];
new Text:DNI11[MAX_PLAYERS];
new Text:DNI12[MAX_PLAYERS];
//lnfd
new InviteOffer[MAX_PLAYERS];
new InviteFaction[MAX_PLAYERS];
new InviteFamily[MAX_PLAYERS];
new RefillOffer[MAX_PLAYERS];
new RefillPrice[MAX_PLAYERS];
new JailPrice[MAX_PLAYERS];
new RepairOffer[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];
new RepairPrice[MAX_PLAYERS];
// Vender Veh
new VehicleOffer[MAX_PLAYERS];
new VehicleId[MAX_PLAYERS];
new VehiclePrice[MAX_PLAYERS];
// Vender Casa
new HouseOffer[MAX_PLAYERS];
new House[MAX_PLAYERS];
new HousePrice[MAX_PLAYERS];
// Vender ARMA
new GunOffer[MAX_PLAYERS];
new GunId[MAX_PLAYERS];
new GunMats[MAX_PLAYERS];
new Text3D:Camera3D[MAX_PLAYERS];
// EMS
new EMSCallTime[MAX_PLAYERS];
new EMSAccepted[MAX_PLAYERS];
//TUTORIAL
new Text:flash;
//new Text:TutTxt[4];
new Text:TextTut[MAX_PLAYERS];
new TutStep[MAX_PLAYERS];
new Text:txtAnimHelper;
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
//Looking up for your account
new Text:boxGM;
//SAPD int
new courtjail[MAX_PLAYERS];
new courtbuttons[5], courtgates[2];
new ayuntadoor, ayuntadoor2, botayu1, botayu2, botayu3, botayu4;
new fen1,fen2,fen3,fen4,fen5,fen6, JDoor1, JDoor2, JDoor3, JDoor4, JDoor5, JDoor6;
new eastlobby1, eastlobby2, westlobby1, westlobby2, cctv1, cctv2, locker1, locker2, chief1, chief2;
new eastin, eastout, lockerin, lockerout, cctvin, cctvout, elevator, roofkey, garage0, chiefout, chiefin, westin, westout;

//Porton Hitman
new hitman;
//SAPD Portones
new pdgate1,pdgate2,saem3;
//new pObject[MAX_PLAYERS];
new Ipadon[MAX_PLAYERS];
//FBI Int
new FBILobbyLeft, FBILobbyLeftBTN[2], FBILobbyRight, FBILobbyRightBTN[2], FBIPrivate[2], FBIPrivateBTN[2];
//CNN Portones
new tvp, tvp1;
//Italianos Portones
new lcnpuerta;
//Rusos Portones
new rusa1, rusa2, rusa3;
//Hospital Portones
new hospitalgate;
//Gobierno Portones
new gobiernogate, gobiernogate1;
new depgate;
//Cars
new SAPDVehicles[52],
TruckerVehicles[10],
TaxiTrans[7],
BusTrans[3],
SAMCVehicles[7],
MecanicosVehicle[20],
FBIVehicle[16],
NGLandVehicles[26],
CNNVehicle[5],
Rentbike[11],
PizzaBike[8],
GobiernoCar[6],
RusosCar[8],
ItalianosCar[7],
GroveCar[7],
BallasCar[7],
VagosCar[7],
HitmanVeh[10],
VehiculosExamen[6][6],
BasurerosV[14];
//Sistema "Rent Bike"
new RentTime[MAX_PLAYERS];
new IsaRent[MAX_PLAYERS];
new HireKey[MAX_PLAYERS];
//
new Carnada[MAX_PLAYERS];
new Lineas[MAX_PLAYERS];
new CreatedCars[100];
new Barricade[MAX_BARRICADES];
//Mats Seller
new MatsOffer[MAX_PLAYERS];
new MatsPrice[MAX_PLAYERS];
new MatsAmount[MAX_PLAYERS];
/// matrimonio
new DivorceOffer[MAX_PLAYERS];
new MarriageCeremoney[MAX_PLAYERS];
new ProposeOffer[MAX_PLAYERS];
new ProposedTo[MAX_PLAYERS];
new GotProposedBy[MAX_PLAYERS];
new MarryWitness[MAX_PLAYERS];
new MarryWitnessOffer[MAX_PLAYERS];
//
new JobDuty[MAX_PLAYERS];
new PuedeP[MAX_PLAYERS];
// -= Petition =-
new Petition_ID[MAX_PLAYERS];
new NumBuy[MAX_PLAYERS], NumSeller[MAX_PLAYERS], NumPrice[MAX_PLAYERS];
new See_MP[MAX_PLAYERS];
new CraftOffer[MAX_PLAYERS], CraftId[MAX_PLAYERS], CraftMats[MAX_PLAYERS], CraftName[MAX_PLAYERS][50];
new Blinded[MAX_PLAYERS], Tied[MAX_PLAYERS];
new Rope[MAX_PLAYERS];
new AdminChat[MAX_PLAYERS];
new advisorchat[MAX_PLAYERS];
new DrugFarming[MAX_PLAYERS];
new nod = 0;
//new LoginTimer[MAX_PLAYERS];
new Editing[MAX_PLAYERS];
//Hitman New Variable
new HitOffer[MAX_PLAYERS];
new HitToGet[MAX_PLAYERS];
new GotHit[MAX_PLAYERS];
new GoChase[MAX_PLAYERS];
new GetChased[MAX_PLAYERS];
// Security comands spam
new CommandSpamTimes[MAX_PLAYERS];
new CommandSpamUnmute[MAX_PLAYERS];
new UsedFind[MAX_PLAYERS];
new WhoFind[MAX_PLAYERS];
new GuardOffer[MAX_PLAYERS];
new GuardPrice[MAX_PLAYERS];
new RequestingBackup[MAX_PLAYERS];
new ReqF_Faction[MAX_PLAYERS];
new ReqF_Name[MAX_PLAYERS][32];
new Seatbelt[MAX_PLAYERS];
new FreezeLast[MAX_PLAYERS];
new Misile_Launcher;
new PuertaH1;
new PuertaH2;
new HaciaArriba = 0;
new HaciaAbajo = 0;
new TotalDM, TotalTDM, PlayersRed, PlayersBlue, TotalDM2, TRedKills, TBlueKills; // PAINTBALL VAR
new Ganzuas[MAX_PLAYERS];
new Interview = 0;
new Interviewer[32] = "Nadie";
new Tax = 0;
new TaxCNN = 0;
new nonewbie = 0;
new TaxValue = 0;
new Jackpot = 0;
new Blood = 1000;
new Fuel = 400;
new Mechanics = 0;
new MechanicCall = 999;
new MechanicCallTime[MAX_PLAYERS];
new InLive = 0;
new Medics = 0;
new MedicCall = 999;
new TaxiCall = 999;
new TaxiCallReady[MAX_PLAYERS];
new TaxiOnDuty[MAX_PLAYERS]; // Si está onduty el conductor
new TaxiTarifa[MAX_PLAYERS]; // .-.
new TaxiTiempo[MAX_PLAYERS]; // Tiempo del taximetro
new TaxiCliente[MAX_PLAYERS]; // Variable para conductor - ID de Pasajero
new TaxiDriver[MAX_PLAYERS]; // Variable para pasajero - ID de Conductor
new TaxiCosto[MAX_PLAYERS];
new TaxiDrivers = 0;
new MedicCallTime[MAX_PLAYERS];
new MedicAccepted[MAX_PLAYERS];
new RStep[MAX_PLAYERS];
new TakingLesson[MAX_PLAYERS];
new PlayersChannel[MAX_PLAYERS];
new Paquetes[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new TutTime[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];
new PlayerDrunkTime[MAX_PLAYERS];
new PlayerTazeTime[MAX_PLAYERS];
new Situacion[MAX_PLAYERS];
new PlayerCuffedTime[MAX_PLAYERS];
new TazerTimeout[MAX_PLAYERS];
new pTazer[MAX_PLAYERS];
new pTazerReplace[MAX_PLAYERS];
new pTazerMunicion[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new Condom[MAX_PLAYERS];
new MoneyMessage[MAX_PLAYERS];
new OnDuty[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS char];
new gPlayerLogTries[MAX_PLAYERS];
new gPlayerSpawned[MAX_PLAYERS];
new gLastCar[MAX_PLAYERS];
new gOoc[MAX_PLAYERS];
new gNewbie[MAX_PLAYERS];
new gNews[MAX_PLAYERS];
new gFam[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new HidePM[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new CallCost[MAX_PLAYERS];
new gPlayerAccount[MAX_PLAYERS];
new Viendocuenta[MAX_PLAYERS];
new noac = 0;
new nofac = 0;
new iAdverTimer;
new callcost = 2; //20 seconds
new gWeather;
new explevel = 4;
new cchargetime = 30;
new txtcost = 1;
// -==================
new pCurrentWeapon[MAX_PLAYERS];
new KnockedDown[MAX_PLAYERS];
new UnidentifedCall[MAX_PLAYERS];
new OwnableCarOffer[MAX_PLAYERS];
new OwnableCarID[MAX_PLAYERS];
new OwnableCarPrice[MAX_PLAYERS];
new BlindFold[MAX_PLAYERS];
// Drugs System
new CrackOffer[MAX_PLAYERS];
new CrackPrice[MAX_PLAYERS];
new CrackGram[MAX_PLAYERS];
new PotOffer[MAX_PLAYERS];
new PotPrice[MAX_PLAYERS];
new PotGram[MAX_PLAYERS];
// Sell spray
new SprayOffer[MAX_PLAYERS];
new SprayPrice[MAX_PLAYERS];
new SprayGram[MAX_PLAYERS];
//
new UsedWeed[MAX_PLAYERS];
new UsedCrack[MAX_PLAYERS];
new PlayerStoned[MAX_PLAYERS];
//Bartender Var
new DrinkOffer[MAX_PLAYERS];
//Aviso tiros
new bool:AdvertenciaAviso[MAX_PLAYERS];
//Necesidades
new Text:tdNecesidades[5];
new Text:DurmiendoTD;
new Bar:BarraNec[MAX_PLAYERS][4];
new bool:EstaOrinando[MAX_PLAYERS];
new bool:EstaDurmiendo[MAX_PLAYERS];
new TimerDurmiendo[MAX_PLAYERS];
new TimerOrinando[MAX_PLAYERS];
new MuriendoHambre[MAX_PLAYERS];
new TimerMuriendoHambre[MAX_PLAYERS];
// Rob Sys.
new TelfRob[MAX_PLAYERS];
// ------------
new VehicleWindows[MAX_VEHICLES] = 0;
new AdminDuty[MAX_PLAYERS];
new pdtrace = 0;
new Float:pdtrace_x;
new Float:pdtrace_y;
new Float:pdtrace_z;
new emdtrace = 0;
new Float:emdtrace_x;
new Float:emdtrace_y;
new Float:emdtrace_z;
new PlayerNeedsHelp[MAX_PLAYERS];
new IsSmoking[MAX_PLAYERS];
new ReduceTime[MAX_PLAYERS];
new RegText[MAX_PLAYERS];
new RegConfig[MAX_PLAYERS];
new RadioOn[MAX_PLAYERS];
new gRadio[MAX_PLAYERS];
// Factura
new Facturing[MAX_PLAYERS];
new fPay[MAX_PLAYERS];
new fDest[MAX_PLAYERS];
new fFacturer[MAX_PLAYERS];

new Refueling[MAX_PLAYERS];

stock Float:GetDistanceBetweenPlayers(p1,p2)
{
new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
if(!IsPlayerConnectedEx(p1) || !IsPlayerConnectedEx(p2))
{
	return -1.00;
}
GetPlayerPos(p1,x1,y1,z1);
GetPlayerPos(p2,x2,y2,z2);
return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

Float: player_get_speed(playerid) {

new
	Float: Floats[3];

GetVehicleVelocity(GetPlayerVehicleID(playerid), Floats[0], Floats[1], Floats[2]);
return floatsqroot(Floats[0] * Floats[0] + Floats[1] * Floats[1] + Floats[2] * Floats[2]) * 150;
}

Float:GetDistance( Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2 )
{
new Float:d;
d += floatpower(x1-x2, 2.0 );
d += floatpower(y1-y2, 2.0 );
d += floatpower(z1-z2, 2.0 );
d = floatsqroot(d);
return d;
}

stock GetCarSale(vehicleid)
{
    for(new v = 0; v < MAX_CARSALE; v++)
    {
        if(varCarSale[v][CSVehId] == vehicleid)
        {
            return v;
        }
    }
    return -1;
}

stock ShowEditMenu(playerid)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, slotselection[playerid]))
	{
		RemovePlayerAttachedObject(playerid, slotselection[playerid]);
	}
	SetPlayerAttachedObject(playerid, slotselection[playerid], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID],
	PlayerToyInfo[playerid][slotselection[playerid]][ptBone], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX],
	PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY],
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX],
	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ]);

	new stringg[64];
	format(stringg, sizeof(stringg), "* Parte (%s)\n* "COL_GENERAL"Editor Personalizado",HoldingBones[PlayerToyInfo[playerid][slotselection[playerid]][ptBone]]);
	ShowPlayerDialog(playerid, EDITTOYS2, DIALOG_STYLE_LIST, ""COL_GENERAL"Toys Menu: "COL_WHITE"Editar", stringg, "Seleccionar", "Atrás");
}

new duda[MAX_PLAYERS];
new NewUsed[MAX_PLAYERS];

enum Spikes
{
Float:sX,
Float:sY,
Float:sZ,
sObjectID,
sDeployedBy[MAX_PLAYER_NAME],
sDeployedAt[MAX_ZONE_NAME]
}

new SpikeStrips[10][Spikes];

enum pSpec
{
Float:Coords[3],
Float:sPx,
Float:sPy,
Float:sPz,
sPint,
sLocal,
sCam,
};

new Unspec[MAX_PLAYERS][pSpec];

enum pFishing
{
pFish1[20],
pFish2[20],
pFish3[20],
pFish4[20],
pFish5[20],
pWeight1,
pWeight2,
pWeight3,
pWeight4,
pWeight5,
pFid1,
pFid2,
pFid3,
pFid4,
pFid5,
pLastFish,
pFishID,
pLastWeight,
};
new Fishes[MAX_PLAYERS][pFishing];
new FishNamesNumber = 22;
new FishNames[22][20] = {
{"Jacket"},
{"Amberjack"},
{"Grouper"},
{"Red Snapper"},
{"Pants"},
{"Trout"},
{"Blue Marlin"},
{"Can"},
{"Mackeral"},
{"Sea Bass"},
{"Bracko"},
{"Pike"},
{"Sail Fish"},
{"Garbage"},
{"Tuna"},
{"Eel"},
{"Dolphin"},
{"Shark"},
{"Turtle"},
{"Catfish"},
{"Pinesh"},
{"Swordfish"}
};

new Float:gDrugFarmVar[25][3] = {
{-305.7741,-1325.3922,8.7690},
{-313.9316,-1372.0267,9.8456},
{-256.0529,-1352.7881,8.3675},
{-216.0643,-1320.5674,9.8763},
{-182.6801,-1325.6882,6.7469},
{-186.6857,-1354.8462,4.4349},
{-173.9771,-1379.9622,3.7936},
{-191.7761,-1407.7988,3.7467},
{-218.2909,-1379.2842,7.1219},
{-255.7885,-1373.1575,10.3859},
{-264.8060,-1412.2454,9.8714},
{-235.2527,-1420.7180,6.2894},
{-217.9355,-1473.2656,7.4994},
{-247.2120,-1475.3043,4.7016},
{-283.9395,-1474.8760,5.8857},
{-315.0880,-1474.6946,11.6932},
{-331.1367,-1496.1550,14.1900},
{-305.5966,-1504.1873,10.7392},
{-272.0421,-1504.3024,5.0853},
{-235.9812,-1504.6582,7.1696},
{-227.4191,-1526.5315,6.9845},
{-252.8621,-1544.6726,4.1863},
{-277.6162,-1546.8979,5.2690},
{-309.1938,-1547.3822,11.7634},
{-332.0667,-1547.9976,15.9872}
};

new Float:OOCJail[1][3] = {
{2764.9155, 377.0344, 3.0396}
};

/*new Float:OOCJail[4][3] = {
{315.1677,-1451.5564,-33.5292},
{315.1677,-1451.5564,-33.5292},
{315.1677,-1451.5564,-33.5292},
{315.1677,-1451.5564,-33.5292}
};*/

new Float:ICPrisonSpawns[4][3] = {
{181.6174,1953.3961,3867.2429},
{190.7607,1951.7330,3867.2358},
{199.2319,1951.4128,3867.2358},
{173.4761,1951.0363,3867.2429}
};

new Float:WarrantJail[3][3] = {
{2136.1924,1297.5011,7699.0610},
{2136.0273,1310.5793,7699.0547},
{2131.5989,1309.8353,7699.0547}
};

new Float:PrisonDillmore[2][3] = {
{318.8560,313.0484,999.1484},
{318.7299,317.0638,999.1484}
};

new Float:SAPDPrisonSpawns[8][3] = { //acalodeje
{357.2076,1818.4858,1201.9984},
{354.7497,1807.1208,1201.9984},
{352.0991,1822.2009,1205.4869},
{354.2115,1818.9130,1201.9984},
{345.4739,1823.6227,1205.4911},
{345.6825,1826.8528,1205.4911},
{347.8854,1829.9768,1205.4932},
{1768.4694,-1543.8859,9.5713}
};
//------------------------------------------------------------------------------------------------------
//Vehicle Names

new OneSeatVehicles[38] =
{
425, 430, 432, 441, 446, 448, 452, 453,
454, 464, 465, 472, 473, 476, 481, 484,
485, 486, 493, 501, 509, 510, 519, 520,
530, 531, 532, 539, 553, 564, 568, 571,
572, 574, 583, 592, 594, 595
};

new VehicleName[212][] = {
"Landstalker","Bravura","Buffalo","Linerunner","Perennial","Sentinel","Dumper","Firetruck","Trashmaster","Stretch",
"Manana","Infernus","Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto","Taxi",
"Washington","Bobcat","Mr Whoopee","BF Injection","Hunter","Premier","Enforcer","Securicar","Banshee","Predator",
"Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie","Stallion","Rumpo","RC Bandit", "Romero",
"Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder","Reefer","Tropic","Flatbed",
"Yankee","Caddy","Solair","Berkley's RC Van","Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider",
"Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler",
"ZR-350","Walton","Regina","Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper",
"Rancher","FBI Rancher","Virgo","Greenwood","Jetmax","Hotring Racer","Sandking","Blista Compact","Police Maverick",
"Boxville","Benson","Mesa","RC Goblin","Hotring Racer A","Hotring Racer B","Bloodring Banger","Rancher","Super GT",
"Elegant","Journey","Bike","Mountain Bike","Beagle","Cropduster","Stuntplane","Tanker","Road Train","Nebula","Majestic",
"Buccaneer","Shamal","Hydra","FCR-900","NRG-500","HPV-1000","Cement Truck","Tow Truck","Fortune","Cadrona","FBI Truck",
"Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight","Streak","Vortex","Vincent",
"Bullet","Clover","Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility",
"Nevada","Yosemite","Windsor","Monster A","Monster B","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RC Tiger",
"Flash","Tahoma","Savanna","Bandito","Freight","Trailer","Kart","Mower","Duneride","Sweeper","Broadway",
"Tornado","AT-400","DFT-30","Huntley","Stafford","BF-400","Newsvan","Tug","Trailer","Emperor","Wayfarer",
"Euros","Hotdog","Club","Trailer","Trailer","Andromada","Dodo","RCCam","Launch","Police Car (LSPD)","Police Car (SFPD)",
"Police Car (LVPD)","Police Ranger","Picador","S.W.A.T. Van","Alpha","Phoenix","Glendale","Sadler","Luggage Trailer A",
"Luggage Trailer B","Stair Trailer","Boxville","Farm Plow","Utility Trailer"
};

stock GetVehicleFriendlyName(vehicleid)
{
new GVFNstring[56];
format(GVFNstring, sizeof(GVFNstring), VehicleName[GetVehicleModel(vehicleid)-400]);
return GVFNstring;
}

new Peds[217][1] = {
{299},
{288},//TEAM_ADMIN
{286},{287},{228},{113},{120},{147},{294},{227},{61},{171},
{247},//CIVILIANS DOWN HERE
{248},{100},{256},{263},{262},{261},{260},{259},{258},{257},{256},{255},
{253},{252},{251},{249},{246},{245},{244},{243},{242},{241},{240},{239},
{238},{237},{236},{235},{234},{233},{232},{231},{230},{229},
{226},{225},{173},{174},{175},{224},{223},{222},{221},{220},{219},{218},
{217},{216},{215},{214},{213},{212},{211},{210},{209},
{207},{206},{205},{204},{203},{202},{201},{200},{199},{198},{197},{196},
{195},{194},{193},{192},{191},{190},{189},{185},{184},{183},
{182},{181},{180},{179},{178},{176},{172},{170},{168},{167},{162},
{161},{160},{159},{158},{157},{156},{155},{154},{153},{152},{151},
{146},{145},{144},{143},{142},{141},{140},{139},{138},{137},{136},{135},
{134},{133},{132},{131},{130},{129},{128},{254},{99},{97},{96},{95},{94},
{92},{90},{89},{88},{87},{85},{84},{83},{82},{81},{80},{79},{78},{77},{76},
{75},{73},{72},{69},{68},{67},{66},{64},{63},{62},{58},{57},{56},{55},
{54},{53},{52},{51},{50},{49},{45},{44},{43},{41},{39},{38},{37},{36},{35},
{34},{33},{32},{31},{30},{29},{28},{27},{26},{25},{24},{23},{22},{21},{20},
{19},{18},{17},{16},{15},{14},{13},{12},{11},{10},{1},{2},
{290},//ROSE
{291},//PAUL
{292},//CESAR
{293},//OGLOC
{187},
{296},//JIZZY
{297},//MADDOGG
{298},//CAT
{299}//ZERO
};

function LoadUser_pass(playerid,name[],value[])
{
	INI_Int("Password",Info[playerid][pKey]);
	return 1;
}

function LoadUser_data(playerid,name[],value[])
{
	INI_Int("Level",Info[playerid][pLevel]);
	INI_Int("AdminNivel",Info[playerid][pAdmin]);
	INI_Int("BanAppealer",Info[playerid][pBanAppealer]);
	INI_Int("StaffManager",Info[playerid][pStaffManager]);
	INI_Int("FactionModerator",Info[playerid][pFactionModerator]);
	INI_Int("RolPuntos",Info[playerid][pRolPuntos]);
	INI_Int("Helper",Info[playerid][pHelper]);
	INI_Int("ConnectedTime",Info[playerid][pConnectTime]);
	INI_Int("Registered",Info[playerid][pReg]);
	INI_Int("Sex",Info[playerid][pSex]);
	INI_Int("Age",Info[playerid][pAge]);
	INI_Int("Respect",Info[playerid][pExp]);
	INI_Int("Money",Info[playerid][pCash]);
	SetPVarInt(playerid, "Cash",Info[playerid][pCash]);
	INI_Int("Bank",Info[playerid][pMoneyBank]);
	INI_Int("PINBank",Info[playerid][pPinBank]);
	INI_Int("NrCuenta",Info[playerid][pNrCuenta]);
	INI_String("IP", Info[playerid][pIP], 32);
	INI_Int("Arrested",Info[playerid][pArrested]);
	INI_Int("JailAdmin",Info[playerid][pJailAdmin]);
	INI_Int("LottoNr",Info[playerid][pLottoNr]);
	INI_Int("Job",Info[playerid][pJob]);
	INI_Int("DudaMute",Info[playerid][pDudaMute]);
	INI_Int("Warn",Info[playerid][pWarn]);
	INI_Int("WRestricted",Info[playerid][pWRestricted]);
	INI_Int("Jailed",Info[playerid][pJailed]);
	INI_Int("Libreta",Info[playerid][pLibreta]);
	INI_Int("ContactoAgendar",Info[playerid][pContactoAgendar]);
	INI_Int("NumeroLibreta1",Info[playerid][pNumeroLibreta1]);
	INI_Int("NumeroLibreta2",Info[playerid][pNumeroLibreta2]);
	INI_Int("NumeroLibreta3",Info[playerid][pNumeroLibreta3]);
	INI_Int("NumeroLibreta4",Info[playerid][pNumeroLibreta4]);
	INI_Int("NumeroLibreta5",Info[playerid][pNumeroLibreta5]);
	INI_Int("NumeroLibreta6",Info[playerid][pNumeroLibreta6]);
	INI_Int("NumeroLibreta7",Info[playerid][pNumeroLibreta7]);
	INI_Int("NumeroLibreta8",Info[playerid][pNumeroLibreta8]);
	INI_Int("NumeroLibreta9",Info[playerid][pNumeroLibreta9]);
	INI_Int("NumeroLibreta10",Info[playerid][pNumeroLibreta10]);
	INI_Int("JailTime",Info[playerid][pJailTime]);
	INI_Int("Materials",Info[playerid][pMats]);
	INI_Int("Packages",Info[playerid][pPackages]);
	SetPVarInt(playerid, "Packages",Info[playerid][pPackages]);
	INI_Int("Drugs",Info[playerid][pDrugs]);
	INI_Int("Cosecha",Info[playerid][pCosecha]);
	INI_Int("Crack",Info[playerid][pCrack]);
	INI_Int("Pot",Info[playerid][pPot]);
	INI_Int("Crates",Info[playerid][pCrates]);
	INI_Int("Adic",Info[playerid][pAdiccion]);
	INI_Int("Leader",Info[playerid][pLeader]);
	INI_Int("Member",Info[playerid][pMember]);
	INI_Int("FMember",Info[playerid][pFMember]);
	INI_Int("Division",Info[playerid][pDivision]);
	INI_Int("Rank",Info[playerid][pRank]);
	INI_Int("Char",Info[playerid][pChar]);
	INI_Float("pHealth",Info[playerid][pHealth]);
	INI_Float("pArmour",Info[playerid][pArmour]);
	INI_Int("PhoneNr",Info[playerid][pPnumber]);
	INI_Int("Sprunk",Info[playerid][pSprunk]);
	INI_Int("Phonebook",Info[playerid][pPhoneBook]);
	INI_Int("House",Info[playerid][pPhousekey]);
	INI_Int("Int", Info[playerid][pInt]);
	INI_Float("Pos_x",Info[playerid][pPos_x]);
	INI_Float("Pos_y",Info[playerid][pPos_y]);
	INI_Float("Pos_z",Info[playerid][pPos_z]);
	INI_Float("SPos_r",Info[playerid][pPos_r]);
	INI_Int("CarLic",Info[playerid][pCarLic]);
	INI_Int("FlyLic",Info[playerid][pFlyLic]);
	INI_Int("BoatLic",Info[playerid][pBoatLic]);
	INI_Int("GunLic",Info[playerid][pGunLic]);
	INI_Int("Gafas",Info[playerid][pGafas]);
	INI_Int("Tutorial",Info[playerid][pTut]);
	INI_Int("VWorld",Info[playerid][pVW]);
	INI_Int("Lighter",Info[playerid][pLighter]);
	INI_Int("Cigarettes",Info[playerid][pCigarettes]);
	INI_Int("Ban",Info[playerid][pBanned]);
	INI_Int("Disabled",Info[playerid][pDisabled]);
	INI_Int("BlockBug",Info[playerid][pBlockBug]);
	INI_Int("DNI",Info[playerid][pDNI]);
	INI_Int("VSkill",Info[playerid][pArmsSkill]);
	INI_Int("TSkill",Info[playerid][pTruckSkill]);
	INI_Int("SmugglerSkill",Info[playerid][pSmugSkill]);
	INI_Int("DrugsSkill",Info[playerid][pDrugsSkill]);
	INI_Int("FStyle",Info[playerid][pFStyle]);
	INI_Int("Busqueda",Info[playerid][pWantedLevel]);
	INI_Int("Rent",Info[playerid][pRenting]);
	INI_Int("prMoney",Info[playerid][p_Pr_Money]);
	INI_Int("prTime",Info[playerid][p_Pr_Time]);
	INI_Int("Rob",Info[playerid][pRob]);
	INI_Int("Premium",Info[playerid][pVIP]);
	INI_Int("BanDuda",Info[playerid][pBanDuda]);
	INI_Int("ReportMuted",Info[playerid][pRMuted]);
	INI_Int("ReportMutedTotal",Info[playerid][pRMutedTotal]);
	INI_Int("ReportMutedTime",Info[playerid][pRMutedTime]);
	INI_Int("Pasaporte",Info[playerid][pPasaporte]);
	INI_Int("RadioP", Info[playerid][pRadio]);
	INI_Int("CansancioNN", Info[playerid][pCansancioNN]);
	INI_Int("OrinaNN", Info[playerid][pOrinaNN]);
	INI_Int("HambreNN", Info[playerid][pHambreNN]);
	INI_Int("KHZ",Info[playerid][pRadioFreq]);
	INI_Int("Ipad",Info[playerid][pIpadMusic]);
	for( new m = 0; m < 5 ; m++ )
	{
		new mStr[24];
		format( mStr, sizeof( mStr ), "PVeh%d",m);
		INI_Int(mStr, Info[playerid][pPlayerVehiclesID][m]);
	}
    for( new m = 0; m < 13; m++ )
	{
	    new mStr[24];
		format( mStr, sizeof( mStr ), "Gun%d", m);
		INI_Int(mStr, Info[playerid][pWeapons][m]);
		format( mStr, sizeof( mStr ), "Municion%d", m);
		INI_Int(mStr, Info[playerid][pMunicion][m]);
	}
	INI_String("Acento",Info[playerid][pAcento], 40);
	INI_String("Agenda1",Info[playerid][pAgenda1], 40);
	INI_String("Agenda2",Info[playerid][pAgenda2], 40);
	INI_String("Agenda3",Info[playerid][pAgenda3], 40);
	INI_String("Agenda4",Info[playerid][pAgenda4], 40);
	INI_String("Agenda5",Info[playerid][pAgenda5], 40);
	INI_Int("PTokens",Info[playerid][pPaintTokens]);
	INI_Int("Head",Info[playerid][pHead]);
	INI_Int("TaxiLicense", Info[playerid][pTaxiLicense]);
	INI_Int("Hospital",Info[playerid][pHospital]);
	INI_Int("CHits",Info[playerid][pCHits]);
	INI_Int("FHits",Info[playerid][pFHits]);
	INI_Int("Spraycan",Info[playerid][pSpraycan]);
	INI_Int("Married",Info[playerid][pMarried]);
	INI_String("MarriedTo",Info[playerid][pMarriedTo], MAX_PLAYER_NAME);
	INI_String("ContractBy",Info[playerid][pContractBy], MAX_PLAYER_NAME);
	INI_String("ContractDetail",Info[playerid][pContractDetail], 64);
	INI_Int("pWExists",Info[playerid][pWExists]);
	INI_Float("pWX",Info[playerid][pWX]);
	INI_Float("pWY",Info[playerid][pWY]);
	INI_Float("pWZ",Info[playerid][pWZ]);
	INI_Float("pWZ2",Info[playerid][pWZ2]);
	INI_Int("pWVW",Info[playerid][pWVW]);
	INI_Int("pWInt",Info[playerid][pWInt]);
	INI_Int("pWValue",Info[playerid][pWValue]);
	INI_Int("pWSeeds",Info[playerid][pWSeeds]);
	INI_Int("AdMuted",Info[playerid][pADMute]);
	INI_Int("G. Bloq",Info[playerid][pGBloq]);
	INI_Int("AdMutedTotal",Info[playerid][pADMuteTotal]);
	INI_String("Warrants",Info[playerid][pWarrant], 128);
	INI_Int("JudgeJailTime",Info[playerid][pJudgeJailTime]);
	INI_Int("JudgeJailType",Info[playerid][pJudgeJailType]);
	INI_Int("BeingSentenced",Info[playerid][pBeingSentenced]);
	INI_Int("ProbationTime",Info[playerid][pProbationTime]);
	INI_Int("Fishes" ,Info[playerid][pFishes]);
	INI_Int("FishSkill",Info[playerid][pFishSkill]);
	INI_Int("BiggestFish",Info[playerid][pBiggestFish]);
	INI_Int("ADTime",Info[playerid][pADTime]);
	INI_Int("GGTokens",Info[playerid][pGTokens]);
	INI_Int("HDExp",Info[playerid][pDobleExp]);
	INI_Int("Order",Info[playerid][pOrder]);
    INI_Int("TempVIP",Info[playerid][pTempVIP]);
    INI_Int("VIPInviteDay",Info[playerid][pVIPInviteDay]);
    INI_Int("BuddyInvite",Info[playerid][pBuddyInvited]);
	INI_Int("Job2",Info[playerid][pJob2]);
	INI_Int("TypeSpawn",Info[playerid][pTypeSpawn]);
	INI_Int("ShopTech",Info[playerid][pShopTech]);
	INI_Int("Status",Info[playerid][pEstado]);
	INI_Int("DayVIP",Info[playerid][pVIPDateD]);
	INI_Int("MonthVIP",Info[playerid][pVIPDateM]);
	INI_Int("IDRegalo",Info[playerid][pRegalo]);
	INI_Int("Deuda",Info[playerid][pTaxDeuda]);
	INI_Int("TimePayDay", Info[playerid][pTimePayDay]);
	INI_Int("Screwdrivers", Info[playerid][pScrewdriver]);
	INI_Int("Firstaid", Info[playerid][pFirstaid]);
	INI_Int("CamOculta", Info[playerid][pSurveillance]);
	INI_Int("MoneyOfBank",Info[playerid][pMoneyBankT]);
	INI_Int("DeudaBank",Info[playerid][pBorrowedMoney]);
	INI_Int("CuotasBank",Info[playerid][pFeesBank]);
	INI_String("AdminName",Info[playerid][pAdminName], MAX_PLAYER_NAME);
	INI_Int("Coins",Info[playerid][pCoinsVip]);
	INI_Int("CoinsPIN",Info[playerid][pCoinsPIN]);
	INI_Int("CashGo",Info[playerid][pCashGo]);
	INI_Int("Boombox",Info[playerid][pBoombox]);
    INI_String( "Antecedente1",Info[playerid][pAntecedente1], 32);
    INI_String( "Antecedente2",Info[playerid][pAntecedente2], 32);
    INI_String( "Antecedente3",Info[playerid][pAntecedente3], 32);
    INI_Int("AntecedenteID1", Info[playerid][pAntecedenteID1]);
    INI_Int("AntecedenteID2", Info[playerid][pAntecedenteID2]);
    INI_Int("AntecedenteID3", Info[playerid][pAntecedenteID3]);
    INI_Int("Errores test", Info[playerid][pTestErrores]);
	for(new v = 0; v < MAX_PLAYERTOYS; v++)
	{
	    new string[128];
		format( string, sizeof( string ), "pt%dModelID", v);
		INI_Int(string, PlayerToyInfo[playerid][v][ptModelID]);
		format(string, 128, "pt%dBone",v);
		INI_Int(string, PlayerToyInfo[playerid][v][ptBone]);
		format(string, 128, "pt%dPosX",v);
		INI_Float(string, PlayerToyInfo[playerid][v][ptPosX]);
		format(string, 128, "pt%dPosY",v);
		INI_Float(string, PlayerToyInfo[playerid][v][ptPosY]);
		format(string, 128, "pt%dPosZ",v);
		INI_Float(string, PlayerToyInfo[playerid][v][ptPosZ]);
		format(string, 128, "pt%dRotX",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ptRotX]);
		format(string, 128, "pt%dRotY",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ptRotY]);
		format(string, 128, "pt%dRotZ",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ptRotZ]);
		format(string, 128, "pt%dSizX",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ftscaleX]);
		format(string, 128, "pt%dSizY",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ftscaleY]);
		format(string, 128, "pt%dSizZ",v);
		INI_Float(string,PlayerToyInfo[playerid][v][ftscaleZ]);
	}
	return 1;
}

function GetMoneyBank(playerid, name[], value[])
{
    INI_Int("Bank",MoneyBankTempFix[playerid]);
	return 0;
}

function GetFaccion(playerid, name[], value[])
{
    INI_Int( "Member",			JugadorFac[playerid]);
	return 0;
}

INI_Exist(nickname[])
{
	new tmp[128];
	format(tmp,sizeof(tmp),USERFILE, nickname);
	return fexist(tmp);
}

stock UserPath(playerid)
{
	new string[128],playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid,playername,sizeof(playername));
	format(string,sizeof(string),USERFILE,playername);
	return string;
}

RespawnNearbyVehicles(playerid, Float:radi)
{
new Float:x, Float:y, Float:z;
GetPlayerPos(playerid, x, y, z);
for(new i=1; i<MAX_VEHICLES; i++)
{
    if(GetVehicleModel(i))
    {
        new Float:posx, Float:posy, Float:posz;
        new Float:tempposx, Float:tempposy, Float:tempposz;
        GetVehiclePos(i, posx, posy, posz);
        tempposx = (posx - x);
        tempposy = (posy - y);
        tempposz = (posz - z);
        if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
        {
            SetVehicleToRespawn(i);
        }
    }
}
}

vehicle_lock_doors(vehicle)
{
new
	vParamArr[7];
GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_ON, vParamArr[4], vParamArr[5], vParamArr[6]);
}

vehicle_unlock_doors(vehicle)
{
new
	vParamArr[7];
GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_OFF, vParamArr[4], vParamArr[5], vParamArr[6]);
}

stock IsSeatAvailable(vehicleid, seat)
{
new carmodel = GetVehicleModel(vehicleid);
for (new i = 0; i < sizeof( OneSeatVehicles ); i++ )
{
    if( carmodel == OneSeatVehicles[i] ) return 0;
}
foreach(Player, i)
{
    if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seat) return 0;
}
return 1;
}

function SurfingFix(playerid)
{
SetPlayerPos(playerid, GetPVarFloat(playerid, "tmpPosX"), GetPVarFloat(playerid, "tmpPosY"), GetPVarFloat(playerid, "tmpPosZ"));
DeletePVar(playerid, "tmpPosX");
DeletePVar(playerid, "tmpPosY");
DeletePVar(playerid, "tmpPosZ");

return 1;
}

main()
{
	repeat severTimers();
	repeat severTimers2();
	repeat Anticheat();
	repeat saveAccounts();
	repeat VehicleUpdate();
	repeat ServerMicrobeat();
	repeat SyncUp();
	repeat SincronizarTiempo();
	repeat Mensajes();
	repeat EMSUpdate();
	print(" ");
	print(" ");
	print("-------------------------------------------");
	print(" <!> INICIANDO GAMEMODE...");
	print(" <!> AMX CARGADO...");
	print(" * Bienvenido a NEW PARADISE Roleplay *");
	print("-------------------------------------------");
	print(" ");
}

function DollahScoreUpdate()
{
foreach(Player, i){
	if(IsPlayerConnectedEx(i)){
		SetPlayerScore(i, Info[i][pLevel]);
	}
}
return 1;
}

function Anim_Hablar(playerid, text[]){
	new anim = GetPlayerAnimationIndex(playerid);
	if(!IsPlayerInAnyVehicle(playerid)){
		if(JugadorSentado[playerid] != 1){
			if((anim != 1538 || anim != 1539 || anim != 1540  || anim != 1541 || anim != 1542)){
			ApplyAnimation(playerid,"PED","IDLE_chat",4.1,7,5,1,1,1);
			SetTimerEx("FinishHablar", strlen(text)*500, false, "d", playerid);
			}
		}
	}
}

function FinishHablar(playerid){
	StopLoopingAnim(playerid);
}

//------------------------------------------------------------------------------------------------------
function GetColorCode(clr[]) {
new color = -1;
if (isnumeric(clr))
{
	color = strval(clr);
	return color;
}
if(strcmp(clr, "black", true)==0) color=0;
if(strcmp(clr, "white", true)==0) color=1;
if(strcmp(clr, "blue", true)==0) color=2;
if(strcmp(clr, "red", true)==0) color=3;
if(strcmp(clr, "green", true)==0) color=16;
if(strcmp(clr, "purple", true)==0) color=5;
if(strcmp(clr, "yellow", true)==0) color=6;
if(strcmp(clr, "lightblue", true)==0) color=7;
if(strcmp(clr, "navy", true)==0) color=94;
if(strcmp(clr, "beige", true)==0) color=102;
if(strcmp(clr, "darkgreen", true)==0) color=51;
if(strcmp(clr, "darkblue", true)==0) color=103;
if(strcmp(clr, "darkgrey", true)==0) color=13;
if(strcmp(clr, "gold", true)==0) color=99;
if(strcmp(clr, "brown", true)==0 || strcmp(clr, "dennell", true)==0) color=55;
if(strcmp(clr, "darkbrown", true)==0) color=84;
if(strcmp(clr, "darkred", true)==0) color=74;
if(strcmp(clr, "maroon", true)==0) color=115;
if(strcmp(clr, "pink", true)==0) color=126;
return color;
}
forward FPSCamara();
public FPSCamara()
{
	for(new i; i < MAX_PLAYERS; i++)
	{
	if(camaraon[i] > 0 && IsPlayerInAnyVehicle(i))
	{
		AttachObjectToVehicle(FPS[i], GetPlayerVehicleID(i), 0.0, 0.15, 0.65, 0.0, 0.0, 0.0);
    	AttachCameraToObject(i, FPS[i]);
	}
	else if(camaraon[i] > 0 && !IsPlayerInAnyVehicle(i))
	{
		AttachObjectToPlayer(FPS[i], i, 0.0, 0.15, 0.65, 0.0, 0.0, 0.0);
    	AttachCameraToObject(i, FPS[i]);
	}
	}
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(GetPlayerVehicle(playerid, vehicleid) > -1)
	{
		PlayerVehicleInfo[GetPlayerVehicle(playerid, vehicleid)][pvPaintJob] = paintjobid;
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(GetPlayerVehicle(playerid, vehicleid) > -1)
	{
		PlayerVehicleInfo[GetPlayerVehicle(playerid, vehicleid)][pvColor1] = color1;
		PlayerVehicleInfo[GetPlayerVehicle(playerid, vehicleid)][pvColor2] = color2;
	}
	return 1;
}

public OnEnterExitModShop( playerid, enterexit, interiorid )
{
	if( enterexit == 0 )
	{
		if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1)
		{
			UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
		}
		SetPlayerInterior( playerid, 0);
	}
	return 1;
}


public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	Seatbelt[playerid] = 0;
	if(GetPVarInt(playerid, "Injured") == 1) SetPVarInt(playerid, "ToBeEjected", 1);
	if(Info[playerid][pEstado] != 0) SetPVarInt( playerid, "ToBeEjected", 1 );
	SetPVarInt(playerid, "LastWeapon", GetPlayerWeapon(playerid));
	new engine,lights,alarm,doors,bonnet,boot,objective;
 	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(engine == VEHICLE_PARAMS_UNSET) switch(GetVehicleModel(vehicleid))
	{
		case 509, 481, 510: VehicleFuel[vehicleid] = 300, arr_Engine{vehicleid} = 1, SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective), arr_Engine{vehicleid} = 1;
		default: SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective), arr_Engine{vehicleid} = 0;
	}
	if(!ispassenger)
	{
		if(IsAVortex(vehicleid))
		{
	    	if(Vortex[playerid]== 0)
	    	{
		    	RemovePlayerFromVehicle(playerid);
		    	new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				SendClientMessageEx(playerid, COLOR_GREY, "No Tienes un ticket!");
				return 1;
			}
		}
		else if(IsATruckerCar(vehicleid))
		{
    		if(Info[playerid][pJob] == 2 || Info[playerid][pJob2] == 2)
			{
				new string[128];
				new truckcontents = TruckContents[vehicleid];
				new truckcontentname[25];
				if(truckcontents == 0)
				{ format(truckcontentname, sizeof(truckcontentname), "Nada"); }
				else if(truckcontents >= 1 && truckcontents <= 3)
				{ format(truckcontentname, sizeof(truckcontentname), ""COL_GENERAL"Comida");}
				else if(truckcontents >= 4 && truckcontents <= 6)
				{ format(truckcontentname, sizeof(truckcontentname), ""COL_GENERAL"Ropa y Calzado"); }
				else if(truckcontents == 7)
				{ format(truckcontentname, sizeof(truckcontentname), ""COL_GENERAL"Materiales Legales"); }
				else if(truckcontents >= 8 && truckcontents <= 10)
				{ format(truckcontentname, sizeof(truckcontentname), ""COL_GENERAL"Objetos del 24/7"); }
				else if(truckcontents >= 11 && truckcontents <= 15)
				{ format(truckcontentname, sizeof(truckcontentname), ""COL_GENERAL"Armas Ilegales"); }
				else if(truckcontents >= 16 && truckcontents <= 20)
				{ format(truckcontentname, sizeof(truckcontentname), ""COL_GENERAL"Drogas"); }
				else if(truckcontents >= 21 && truckcontents <= 25)
				{ format(truckcontentname, sizeof(truckcontentname), ""COL_GENERAL"Materiales"); }
				format(string, sizeof(string), "[Registro: %s %d] | [Contenido: %s]", GetVehicleName(vehicleid), vehicleid, truckcontentname);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				if(IsACop(playerid) && truckcontents >= 11)
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "Información > Para remover productos ilegales usa /limpiarcamion cerca del camión.");
				}
				if(truckcontents > 0 && TruckUsed[playerid] == INVALID_VEHICLE_ID)
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "Información > Para entregar productos usa /robarcamion como el conductor.");
				}
				else if(TruckUsed[playerid] == INVALID_VEHICLE_ID)
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "Información > Para obtener productos y entregarlos usa /cargarcamion siendo el conductor.");
				}
				else if(TruckUsed[playerid] == vehicleid && gPlayerCheckpointStatus[playerid] == CHECKPOINT_RETURNTRUCK)
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "Información > Este es tu camión, aún no lo has devuelto a Ocean Docks para que te pagen.");
				}
				else if(TruckUsed[playerid] == vehicleid)
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "Información > Este es tu camión, aún no has entregado los productos.");
				}
				else if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "Información > Ya estás en otra entrega, usa /cancelar camión para cancelar la entrega.");
				}
			}
		}
	}
	else if(!IsPlayerInRangeOfVehicle(playerid, vehicleid, 7.5) || LockStatus[vehicleid] >= 1) ClearAnimations(playerid);
	return 1;
}

Team_SAPD(playerid){
if(IsPlayerConnectedEx(playerid)){
    new leader = Info[playerid][pLeader];
    new member = Info[playerid][pMember];
    if(member	==	1){return 1;}
	else if(leader	==	1){return 1;}
}
return 0;
}

Team_FBI(playerid)
{
if(IsPlayerConnectedEx(playerid))
{
    new leader = Info[playerid][pLeader];
    new member = Info[playerid][pMember];
    if(member	==	2){return 1;}
	else if(leader	==	2){return 1;}
}
return 0;
}

Team_NG(playerid)
{
if(IsPlayerConnectedEx(playerid))
{
    new leader = Info[playerid][pLeader];
    new member = Info[playerid][pMember];
    if(member	==	3){return 1;}
	else if(leader	==	3){return 1;}
}
return 0;
}

Team_SAMD(playerid)
{
if(IsPlayerConnectedEx(playerid))
{
    new leader = Info[playerid][pLeader];
    new member = Info[playerid][pMember];
    if(member	==	4){return 1;}
	else if(leader	==	4){return 1;}
}
return 0;
}

Team_LSTV(playerid)
{
if(IsPlayerConnectedEx(playerid))
{
    new leader = Info[playerid][pLeader];
    new member = Info[playerid][pMember];
    if(member	==	5){return 1;}
	else if(leader	==	5){return 1;}
}
return 0;
}

Team_Mecanicos(playerid)
{
if(IsPlayerConnectedEx(playerid))
{
    new leader = Info[playerid][pLeader];
    new member = Info[playerid][pMember];
    if(member	==	6){return 1;}
	else if(leader	==	6){return 1;}
}
return 0;
}

Gobierno(playerid)
{
if(IsPlayerConnectedEx(playerid))
{
    new leader = Info[playerid][pLeader];
    new member = Info[playerid][pMember];
    if(member	==	7){return 1;}
	else if(leader == 7){return 1;}
}
return 0;
}

Hitman(playerid)
{
if(IsPlayerConnectedEx(playerid))
{
    new leader = Info[playerid][pLeader];
    new member = Info[playerid][pMember];
    if(member	==	8){return 1;}
	else if(leader	==	8){return 1;}
}
return 0;
}

Rusos(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	9){return 1;}
		else if(leader	==	9){return 1;}
	}
    return 0;
}

Italianos(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	10){return 1;}
		else if(leader	==	10){return 1;}
	}
	return 0;
}

Team_Grove(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	11){return 1;}
		else if(leader	==	11){return 1;}
	}
	return 0;
}

Team_Ballas(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	12){return 1;}
		else if(leader	==	12){return 1;}
	}
	return 0;
}

Team_Vagos(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{
	    new leader = Info[playerid][pLeader];
	    new member = Info[playerid][pMember];
	    if(member	==	13){return 1;}
		else if(leader	==	13){return 1;}
	}
	return 0;
}

Presidente(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{
	    new leader = Info[playerid][pLeader];
		if(leader == 7){return 1;}
	}
	return 0;
}

IsACop(playerid)
{
if(IsPlayerConnectedEx(playerid))
{
    new leader = Info[playerid][pLeader];
    new member = Info[playerid][pMember];
    if(member	==	1 || member	==	2 || member	==	3)
	{
	    return 1;
	}
	else if(leader	==	1 || leader	==	2 || leader	==	3)
	{
	    return 1;
	}
}
return 0;
}
DirectorCNN(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Info[playerid][pLeader];
		if(leader == 5)
		{
		    return 1;
		}
	}
	return 0;
}
IsAPolice(playerid)
{
if(IsPlayerConnectedEx(playerid))
{
    new leader = Info[playerid][pLeader];
    new member = Info[playerid][pMember];
    if(member==1){return 1;}
	else if(leader==1){return 1;}
}
return 0;
}

ReturnUser(text[]) {

	new
		strPos,
		returnID = 0,
		bool: isnum = true;

	while(text[strPos]) {
		if(isnum) {
			if ('0' <= text[strPos] <= '9') returnID = (returnID * 10) + (text[strPos] - '0');
			else isnum = false;
		}
		strPos++;
	}
	if (isnum) {
		if(IsPlayerConnected(returnID)) return returnID;
	}
	else {

		new
			sz_playerName[MAX_PLAYER_NAME];

		foreach(Player, i) {
			GetPlayerName(i, sz_playerName, MAX_PLAYER_NAME);
			if(!strcmp(sz_playerName, text, true, strPos)) return i;
		}
	}
	return INVALID_PLAYER_ID;
}


IsANewsCar(carid)
{
if(GetVehicleModel(carid)== 582 || GetVehicleModel(carid)== 488)
{
	return 1;
}
return 0;
}

Float:GetPizzaDistance(houseid)
{
new Float: pDistance;
pDistance = GetDistance(2098.6919,-1789.5027,13.5547, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
return pDistance;
}

EmpleosPOS(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0,1405.0239,-1571.1348,-0.8841)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 3.0,1405.0239,-1571.1348,-0.8841)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 3.0,1407.5956,-1571.1732,-0.8841)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 3.0,1410.6195,-1571.4785,-0.8841)) return 1;
		else return 0;
	}
	return 0;
}

stock IsAtClothShop(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,25.0,207.5627,-103.7291,1005.2578) || IsPlayerInRangeOfPoint(playerid,25.0,203.9068,-41.0728,1001.8047) || IsPlayerInRangeOfPoint(playerid,25.0,203.9068,-41.0728,1001.8047))
		{//Binco & Suburban
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,30.0,214.4470,-7.6471,1001.2109) || IsPlayerInRangeOfPoint(playerid,50.0,161.3765,-83.8416,1001.8047))
		{//Zip & Victim
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,-2664.3318,1538.4259,907.1797))
		{// SaC HQ
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,202.6777,-163.0623,1000.5306))
		{//Diedier Sachs
		    return 1;
		}
	}
	return 0;
}

IsAtArrestPoint(playerid){
if(IsPlayerConnectedEx(playerid))
{
	if(IsPlayerInRangeOfPoint(playerid, 4.0,1559.3228,-1693.7491,5.8970)){return 1;} //LSPD
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 317.4623,-1506.9045,24.9219)){ return 1; } //FBI
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 613.3228,-589.1623,17.2266)){ return 1; } //SAPD Dillmore
    else if(IsPlayerInRangeOfPoint(playerid, 4.0, 2756.9263,-2532.0305,13.6357)){ return 1; } //SAEM
}
return 0;
}

IsAtTruckDeliveryPoint(playerid)
{
if(IsPlayerInRangeOfPoint(playerid, 6, 1025.6554,-1362.6024,13.5649) || IsPlayerInRangeOfPoint(playerid, 6, 455.2845,-1501.5569,31.0434) ||
IsPlayerInRangeOfPoint(playerid, 6, 793.0801,-1625.8910,13.3906) || IsPlayerInRangeOfPoint(playerid, 6, 2112.7766,-1216.1750,23.8047) ||
IsPlayerInRangeOfPoint(playerid, 6, 1197.6417,-887.7512,43.0229) || IsPlayerInRangeOfPoint(playerid, 6, -64.5445,-1120.5356,1.0781) ||
IsPlayerInRangeOfPoint(playerid, 6, 1331.2570,-885.2997,39.9401) || IsPlayerInRangeOfPoint(playerid, 6, -86.3670,-1195.7297,2.1664) ||
IsPlayerInRangeOfPoint(playerid, 6, 1347.0487,-1752.1692,13.7886) || IsPlayerInRangeOfPoint(playerid, 6, -70.8884,-1549.4922,2.6172) ||
IsPlayerInRangeOfPoint(playerid, 6, 1925.5968,-1789.5017,13.1459) || IsPlayerInRangeOfPoint(playerid, 6, 1474.4786,-1140.6188,24.0781) ||
IsPlayerInRangeOfPoint(playerid, 6, 2247.2351,-1661.2406,15.6749))
{ return true; }
return false;
}
IsATablones(playerid)
{
    if(IsPlayerConnected(playerid))
	{
 		if(PlayerToPoint(5.0,playerid,1540.4944,-1658.5583,13.5507)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,1702.3256,-1805.3718,13.5469)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,2096.1907,-1769.2832,13.5608)) { return 1; }
		else if(PlayerToPoint(5.0,playerid,1365.6742,-1288.2228,13.5469)) { return 1; }
	}
	return 0;
}
IsAt247(playerid)
{
if(IsPlayerConnectedEx(playerid))
{
//	if(PlayerToPoint(5.0,playerid,-1833.8270,62.3936,1055.1891)) { return 1; }
//	else if(PlayerToPoint(5.0,playerid,-22.3260,-138.6221,1003.5469)) { return 1; }
	if(PlayerToPoint(20.0,playerid,-25.6448,-56.6718,1003.5469)) { return 1; }//NEGOCIO 19 & 22
//	else if(PlayerToPoint(5.0,playerid,-29.3554,-28.8020,1003.5573)) { return 1; }
//	else if(PlayerToPoint(5.0,playerid,-28.7605,-185.1333,1003.5469)) { return 1; }
//	else if(PlayerToPoint(5.0,playerid,-10.3085,-178.2465,1003.5469)) { return 1; }
	else if(PlayerToPoint(20.0,playerid,2.3437,-29.0118,1003.5494)) { return 1; }//NEGOCIO 8
//	else if(PlayerToPoint(5.0,playerid,-28.0818,-89.9434,1003.5469)) { return 1; }
//	else if(PlayerToPoint(5.0,playerid,-29.1318,-184.7204,1003.5469)) { return 1; }
	else if(PlayerToPoint(20.0,playerid,-25.7885,-183.2835,1003.5469)) { return 1; }//NEGOCIO 1 & 7
//	else if(PlayerToPoint(3.0,playerid,664.8079,-568.7150,16.3433)) { return 1; }
}
return 0;
}
IsAtBank(playerid){
	if(IsPlayerConnectedEx(playerid)){
		if(IsPlayerInRangeOfPoint(playerid, 10.0, 1429.9501,-985.9300,996.1060) || IsPlayerInRangeOfPoint(playerid, 1.0, 366.1188,174.1942,1996.0428) || IsPlayerInRangeOfPoint(playerid, 1.0, 366.1174,175.9878,1996.0428)) { return 1; }
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 372.1295,161.2576,1996.0493) || IsPlayerInRangeOfPoint(playerid, 1.0, 371.6609,153.1515,1983.4484)) { return 1; }
	}
	return 0;
}
IsAtDeliverPatientPoint(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0,1174.6427,-1308.5641,13.9963))
	{
		return 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0,225.0963,1980.7179,17.6406))
	{
		return 1;
	}
	return 0;
}

IsAtImpoundingPoint(playerid)
{
return (IsPlayerInRangeOfPoint(playerid, 5.0,1658.9924,-1807.1152,13.5508));
}

IsAtGasStation(playerid)
{
if(IsPlayerConnectedEx(playerid))
{
if(PlayerToPoint(6.0,playerid,1004.0070,-939.3102,42.1797) || PlayerToPoint(6.0,playerid,1944.3260,-1772.9254,13.3906))
	{//LS
	    return 1;
	}
	else if(PlayerToPoint(6.0,playerid,-90.5515,-1169.4578,2.4079) || PlayerToPoint(6.0,playerid,-1609.7958,-2718.2048,48.5391))
	{//LS
	    return 1;
	}
	else if(PlayerToPoint(6.0,playerid,2114.5444,920.1169,10.8203) || PlayerToPoint(8.0,playerid,2640.6272,1106.5349,10.8203))
	{//SF
	    return 1;
	}
	else if(PlayerToPoint(5.0,playerid,1625.0463,-2167.6428,13.4402) || PlayerToPoint(8.0,playerid,-1676.6323,414.0262,6.9484))
	{//Between LS and SF
	    return 1;
	}
	else if(PlayerToPoint(6.0,playerid,2202.2349,2474.3494,10.5258) || PlayerToPoint(10.0,playerid,614.9333,1689.7418,6.6968))
	{//LV
	    return 1;
	}
	else if(PlayerToPoint(8.0,playerid,-1328.8250,2677.2173,49.7665) || PlayerToPoint(6.0,playerid,70.3882,1218.6783,18.5165))
	{//LV
	    return 1;
	}
	else if(PlayerToPoint(8.0,playerid,2113.7390,920.1079,10.5255) || PlayerToPoint(6.0,playerid,-1327.7218,2678.8723,50.0625))
	{//LV
	    return 1;
	}
	else if(PlayerToPoint(8.0,playerid,1637.0149,2331.5129,10.8722) || PlayerToPoint(6.0,playerid,1636.6686,2325.8711,10.8722))
	{
	    return 1;
	}
	else if(PlayerToPoint(8.0,playerid,1636.6140,2320.6423,10.8722) || PlayerToPoint(6.0,playerid,1595.5337,2198.9404,10.8203)|| PlayerToPoint(6.0,playerid,1839.58, -2522.52, 13.55))
	{
	    return 1;
	}
	else if(PlayerToPoint(8.0,playerid,656.4265,-559.8610,16.5015) || PlayerToPoint(6.0,playerid,656.3797,-570.4138,16.5015) || PlayerToPoint(6.0,playerid,2294.2227,-1911.0593,13.5971) )
	{//Dillimore
	    return 1;
	}
}
return 0;
}

IsAtTaller(playerid)
{
    if(IsPlayerConnected(playerid)){
     	if(PlayerToPoint(15.0,playerid,99.8937,-168.8510,2.2314)){// Blueberry
		    return 1;
		}
		else if(PlayerToPoint(15.0,playerid,99.8937,-168.8510,2.2314)){// Blueberry
		    return 1;
		}
		else if(PlayerToPoint(15.0,playerid,1830.3441,-1415.8441,13.6016)){// LS
		    return 1;
		}
		else if(PlayerToPoint(15.0,playerid,1828.3667,-1424.4454,13.6016)){// LS
		    return 1;
		}
	}
	return 0;
}

CancelTruckDelivery(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){if(IsATruckerCar(vehicleid)) SetVehicleToRespawn(vehicleid);}
	DestroyProgressBar(LoadTruckBar[playerid]);
	LoadTruckBar[playerid] = INVALID_BAR_ID;
	LoadTruckTime[playerid] = 0;
	DeletePVar(playerid, "TruckDeliver");
	TruckContents[TruckUsed[playerid]] = 0;
	TruckUsed[playerid] = INVALID_VEHICLE_ID;
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	DisablePlayerCheckpoint(playerid);
	return 1;
}

//CARS
IsATowTruck(carid)
{
if(GetVehicleModel(carid) == 485 || GetVehicleModel(carid) == 525 || GetVehicleModel(carid) == 583 || GetVehicleModel(carid) == 574)
{
	return 1;
}
return 0;
}
IsAnBus(carid)
{
if(GetVehicleModel(carid) == 431 || GetVehicleModel(carid) == 437)
{
	return 1;
}
return 0;
}

LSPD_IsACopCar(carid)
{
for(new v = 0; v < sizeof(SAPDVehicles); v++)
{
    if(carid == SAPDVehicles[v]) return 1;
}
return 0;
}

IsATestVehicle(carid)
{
	for(new v = 0 ; v < sizeof(VehiculosExamen) ; v++)
	{
	    if(carid == VehiculosExamen[v][0] || carid == VehiculosExamen[v][1] || carid == VehiculosExamen[v][2] || carid == VehiculosExamen[v][3] || carid == VehiculosExamen[v][4] || carid == VehiculosExamen[v][5]) return 1;
	}
	return 0;
}

IsABasureroVehicle(carid)
{
	for(new v = 0; v < sizeof(BasurerosV); v++)
	{
	    if(carid == BasurerosV[v]) return 1;
	}
	return 0;
}

VehiculoHitman(carid)
{
	for(new i = 0; i < sizeof(HitmanVeh); i++)
	{
		if(HitmanVeh[ i ] == carid) return 1;
	}
	return 0;
}

IsAnTaxi(carid)
{
if(GetVehicleModel(carid) == 420 || GetVehicleModel(carid) == 438)
{
	return 1;
}
return 0;
}

Taxi_Vehicle(carid)
{
for(new v = 0; v < sizeof(TaxiTrans); v++)
{
    if(carid == TaxiTrans[v]) return 1;
}
return 0;
}

Bus_Vehicle(carid)
{
for(new v = 0; v < sizeof(BusTrans); v++)
{
    if(carid == BusTrans[v]) return 1;
}
return 0;
}

IsATruckerCar(carid)
{
for(new v = 0; v < sizeof(TruckerVehicles); v++)
{
    if(carid == TruckerVehicles[v]) return 1;
}
return 0;
}

IsAHarvest(carid)
{
if(GetVehicleModel(carid) == 532)
{
	return 1;
}
return 0;
}

IsAPizzabike(carid)
{
for(new v = 0; v < sizeof(PizzaBike); v++)
{
    if(carid == PizzaBike[v]) return 1;
}
return 0;
}

IsAVortex(carid)
{
if(GetVehicleModel(carid) == 539)
{
	return 1;
}
return 0;
}

IsAnAmbulance(carid)
{
if(GetVehicleModel(carid) == 416)
{
	return 1;
}
return 0;
}

SAMD_Vehicle(carid)
{
for(new v = 0; v < sizeof(SAMCVehicles); v++)
{
    if(carid == SAMCVehicles[v]) return 1;
}
return 0;
}

Mecanico_Vehicle(carid)
{
for(new v = 0; v < sizeof(MecanicosVehicle); v++)
{
    if(carid == MecanicosVehicle[v]) return 1;
}
return 0;
}

FBI_Vehicle(carid)
{
for(new v = 0; v < sizeof(FBIVehicle); v++)
{
    if(carid == FBIVehicle[v]) return 1;
}
return 0;
}

CNN_Vehicle(carid)
{
for(new v = 0; v < sizeof(CNNVehicle); v++)
{
    if(carid == CNNVehicle[v]) return 1;
}
return 0;
}

IsARentCar(carid)
{
for(new v = 0; v < sizeof(Rentbike); v++)
{
    if(carid == Rentbike[v]) return 1;
}
return 0;
}

IsAnNGCar(carid)
{
for(new i = 0; i < sizeof(NGLandVehicles); i++)
{
	if(NGLandVehicles[ i ] == carid) return 1;
}
return 0;
}

GobierAuto(carid)
{
for(new v = 0; v < sizeof(GobiernoCar); v++)
{
    if(carid == GobiernoCar[v]) return 1;
}
return 0;
}

AutoRusos(carid)
{
for(new v = 0; v < sizeof(RusosCar); v++)
{
    if(carid == RusosCar[v]) return 1;
}
return 0;
}

AutoItalianos(carid)
{
for(new v = 0; v < sizeof(ItalianosCar); v++)
{
    if(carid == ItalianosCar[v]) return 1;
}
return 0;
}

AutoGrove(carid)
{
for(new v = 0; v < sizeof(GroveCar); v++)
{
    if(carid == GroveCar[v]) return 1;
}
return 0;
}

AutoBallas(carid)
{
for(new v = 0; v < sizeof(BallasCar); v++)
{
    if(carid == BallasCar[v]) return 1;
}
return 0;
}

AutoVagos(carid)
{
for(new v = 0; v < sizeof(VagosCar); v++)
{
    if(carid == VagosCar[v]) return 1;
}
return 0;
}

IsABike(carid)
{
if(GetVehicleModel(carid) == 509 || GetVehicleModel(carid) ==  481 || GetVehicleModel(carid) == 510)
{
	return 1;
}
return 0;
}

IsAMBike(fahrzeug)
{
new Motorads[] = { 509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471 };
for(new i = 0; i < sizeof(Motorads); i++) {
    if(GetVehicleModel(fahrzeug) == Motorads[i]) return 1;
}
return 0;
}

IsAPlane(carid)
{
switch(GetVehicleModel(carid)) {
	case 592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469: return 1;
}
return 0;
}

IsABoat(carid)
{
	new Boats[] = { 472, 473, 493, 484, 430, 454, 453, 452, 446 };
	for(new i = 0; i < sizeof(Boats); i++)
	{
		if(GetVehicleModel(carid) == Boats[i]) return 1;
	}
	return 0;
}

IsAValidVehSurf(carid)
{
	new VehSurfs[] = { 406, 422, 433, 443, 444, 455, 478, 578, 556, 557, 554, 543 };
	for(new i = 0; i < sizeof(VehSurfs); i++)
	{
		if(GetVehicleModel(carid) == VehSurfs[i]) return 1;
	}
	return 0;
}

GivePlayerValidWeapon(playerid, WeaponID, CMunicion){
    if((Info[playerid][pConnectTime] < 2 || Info[playerid][pWRestricted] > 0) && WeaponID != 46 && WeaponID != 43) return 1;
	switch( WeaponID ){
  		case 0, 1:{
			Info[playerid][pWeapons][ 0 ] = WeaponID;
			Info[playerid][pMunicion][ 0 ] = CMunicion;
			GivePlayerWeapon( playerid, WeaponID, CMunicion);
		}
		case 2, 3, 4, 5, 6, 7, 8, 9:{
			Info[playerid][pWeapons][ 1 ] = WeaponID;
			Info[playerid][pMunicion][ 1 ] = CMunicion;
			GivePlayerWeapon( playerid, WeaponID, CMunicion);
		}
		case 22, 23, 24:{
			Info[playerid][pWeapons][ 2 ] = WeaponID;
			Info[playerid][pMunicion][ 2 ] = CMunicion;
			GivePlayerWeapon( playerid, WeaponID, CMunicion);
		}
		case 25, 26, 27:{
			Info[playerid][pWeapons][ 3 ] = WeaponID;
			Info[playerid][pMunicion][ 3 ] = CMunicion;
			GivePlayerWeapon( playerid, WeaponID, CMunicion);
		}
		case 28, 29, 32:{
			Info[playerid][pWeapons][ 4 ] = WeaponID;
			Info[playerid][pMunicion][ 4 ] = CMunicion;
			GivePlayerWeapon( playerid, WeaponID, CMunicion);
		}
		case 30, 31:{
			Info[playerid][pWeapons][ 5 ] = WeaponID;
			Info[playerid][pMunicion][ 5 ] = CMunicion;
			GivePlayerWeapon( playerid, WeaponID, CMunicion);
		}
		case 33, 34:{
			Info[playerid][pWeapons][ 6 ] = WeaponID;
			Info[playerid][pMunicion][ 6 ] = CMunicion;
			GivePlayerWeapon( playerid, WeaponID, CMunicion);
		}
		case 35, 36, 37, 38:{
			Info[playerid][pWeapons][ 7 ] = WeaponID;
			Info[playerid][pMunicion][ 7 ] = CMunicion;
			GivePlayerWeapon( playerid, WeaponID, CMunicion);
		}
		case 16, 17, 18, 39:{
			Info[playerid][pWeapons][ 8 ] = WeaponID;
			Info[playerid][pMunicion][ 8 ] = CMunicion;
			GivePlayerWeapon( playerid, WeaponID, CMunicion);
		}
		case 41, 42, 43:{
			Info[playerid][pWeapons][ 9 ] = WeaponID;
			Info[playerid][pMunicion][ 9 ] = CMunicion;
			GivePlayerWeapon( playerid, WeaponID, CMunicion);
		}
		case 10, 11, 12, 13, 14, 15:{
			Info[playerid][pWeapons][ 10 ] = WeaponID;
			Info[playerid][pMunicion][ 10 ] = CMunicion;
			GivePlayerWeapon( playerid, WeaponID, CMunicion);
		}
		case 44, 45, 46:{
			Info[playerid][pWeapons][ 11 ] = WeaponID;
			Info[playerid][pMunicion][ 11 ] = CMunicion;
			GivePlayerWeapon( playerid, WeaponID, CMunicion);
		}
	    case 40: {
	        Info[playerid][pWeapons][12] = WeaponID;
	        Info[playerid][pMunicion][ 12 ] = CMunicion;
	        GivePlayerWeapon(playerid, WeaponID, CMunicion);
	    }
	}
	return 1;
}


stock GetWeaponSlot(weaponid) {
	switch(weaponid) {
		case 0, 1: return 0;
		case 2 .. 9: return 1;
		case 22 .. 24: return 2;
		case 25 .. 27: return 3;
		case 28, 29, 32: return 4;
		case 30, 31: return 5;
		case 33, 34: return 6;
		case 35 .. 38: return 7;
		case 16, 17, 18, 39: return 8;
		case 41 .. 43: return 9;
		case 10 .. 15: return 10;
		case 44 .. 46: return 11;
		case 40: return 12;
	}
	return -1;
}
stock ResetPlayerWeaponsEx( playerid ){
	ResetPlayerWeapons(playerid);
	Info[playerid][pWeapons][0] = 0;
	Info[playerid][pWeapons][1] = 0;
	Info[playerid][pWeapons][2] = 0;
	Info[playerid][pWeapons][3] = 0;
	Info[playerid][pWeapons][4] = 0;
	Info[playerid][pWeapons][5] = 0;
	Info[playerid][pWeapons][6] = 0;
	Info[playerid][pWeapons][7] = 0;
	Info[playerid][pWeapons][8] = 0;
	Info[playerid][pWeapons][9] = 0;
	Info[playerid][pWeapons][10] = 0;
	Info[playerid][pWeapons][11] = 0;
	Info[playerid][pWeapons][12] = 0;
	Info[playerid][pMunicion][0] = 0;
	Info[playerid][pMunicion][1] = 0;
	Info[playerid][pMunicion][2] = 0;
	Info[playerid][pMunicion][3] = 0;
	Info[playerid][pMunicion][4] = 0;
	Info[playerid][pMunicion][5] = 0;
	Info[playerid][pMunicion][6] = 0;
	Info[playerid][pMunicion][7] = 0;
	Info[playerid][pMunicion][8] = 0;
	Info[playerid][pMunicion][9] = 0;
	Info[playerid][pMunicion][10] = 0;
	Info[playerid][pMunicion][11] = 0;
	Info[playerid][pMunicion][12] = 0;
	return 1;
}

stock IsVehicleOccupied(vehicleid)
{
    foreach(Player,i)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i) == vehicleid) return 1;
            else return 0;
        }
    }
    return 1;
}

new GunNames[48][] = {
    "nada",
    "un puño americano",
    "un palo de golf",
    "una porra policial",
    "un cuchillo",
    "un bate",
    "una pala",
    "un palo de pool",
    "una katana",
    "una motosierra",
    "un consolador",
    "un consolador",
    "un consolador",
    "un consolador",
    "un ramo de flores",
    "un baston",
    "una granada",
    "una granada de humo",
    "una bomba molotov",
    "invalid",
    "invalid",
    "invalid",
    "una colt .45",
    "una colt .45 con silenciador",
    "una desert eagle",
    "una escopeta normal",
    "una escopeta recortada",
    "una escopeta de combate",
    "un subfusil uzi",
    "una mp5",
    "una ak-47",
    "una m4",
    "un subfusil tec9",
    "un rifle",
    "un rifle de francotirador",
    "una RPG",
    "un lanzamisiles",
    "un lanzallamas",
    "una minigun",
    "una bomba C4",
    "un detonador",
    "un aerosol",
    "un extintor",
    "una cámara",
    "unas gafas de visión nocturna",
    "unas gafas de visión infrarroja",
    "un paracaídas",
    "pistola falsa"
};

new GunObjects[47][0] = {
    {0},
    {331},
    {333},
    {334},
    {335},
    {336},
    {337},
    {338},
    {339},
    {341},
    {321},
    {322},
    {323},
    {324},
    {325},
    {326},
    {342},
    {343},
    {344},
    {0},
    {0},
    {0},
    {346},
    {347},
    {348},
    {349},
    {350},
    {351},
    {352},
    {353},
    {355},
    {356},
    {372},
    {357},
    {358},
    {359},
    {360},
    {361},
    {362},
    {363},
    {364},
    {365},
    {366},
    {367},
    {368},
    {368},
    {371}
};

stock GetWeaponNameEx(id, name[], len) return format(name,len, "%s", GunNames[id]);

stock GetWeaponSlotInSave(i, p)
{
	if(p == Info[i][pWeapons][0]) return 0;
	if(p == Info[i][pWeapons][1]) return 1;
	if(p == Info[i][pWeapons][2]) return 2;
	if(p == Info[i][pWeapons][3]) return 3;
	if(p == Info[i][pWeapons][4]) return 4;
	if(p == Info[i][pWeapons][5]) return 5;
	if(p == Info[i][pWeapons][6]) return 6;
	if(p == Info[i][pWeapons][7]) return 7;
	if(p == Info[i][pWeapons][8]) return 8;
	if(p == Info[i][pWeapons][9]) return 9;
	if(p == Info[i][pWeapons][10]) return 10;
	if(p == Info[i][pWeapons][11]) return 11;
	if(p == Info[i][pWeapons][12]) return 12;
	return INVALID_HOUSE_ID;
}

stock TirarObjeto(i, Float:x, Float:y, Float:z, t, d, q)
{
    new f = MAX_OBJETOS_TIRADOS+1;
    for(new a = 0; a < sizeof(ObjetosTirados); a++)
	{
		if(ObjetosTirados[a][PosObjeto][0] == 0.0)
		{
			f = a;
			break;
		}
	}
	if(f > MAX_OBJETOS_TIRADOS) return SendClientMessage(i, COLOR_GREY, "No puede tirar objetos en éste momento, intente más tarde.");
	switch(t)
	{
	    case 0:
	    {
            ObjetosTirados[f][PosObjeto][0] = x;
            ObjetosTirados[f][PosObjeto][1] = y;
            ObjetosTirados[f][PosObjeto][2] = z;
			ObjetosTirados[f][Tipo] = 0;
			ObjetosTirados[f][IDReferencia] = 0;
            ObjetosTirados[f][Cantidad] = q;
			ObjetosTirados[f][ObjetoID] = CreateDynamicObject(d, x, y, z-0.97, 0, 0, 0);
			ObjetosTirados[f][TextID] = CreateDynamic3DTextLabel(""COL_GENERAL"Telefono movil "COL_WHITE"tirado",-1,ObjetosTirados[f][PosObjeto][0],ObjetosTirados[f][PosObjeto][1],ObjetosTirados[f][PosObjeto][2]-0.97,6.0);
	        Info[i][pPnumber] = 0;
	        ApplyAnimation(i, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
	        format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s tira su teléfono al suelo.", GetPlayerNameEx(i));
			NearMsg(i, -1, szMessage,10.0);
		}
		case 1:
	    {
	        ObjetosTirados[f][PosObjeto][0] = x;
            ObjetosTirados[f][PosObjeto][1] = y;
            ObjetosTirados[f][PosObjeto][2] = z;
			ObjetosTirados[f][Tipo] = 1;
			ObjetosTirados[f][IDReferencia] = 0;
            ObjetosTirados[f][Cantidad] = 0;
			ObjetosTirados[f][ObjetoID] = CreateDynamicObject(d, x, y, z-0.97, 0, 0, 0);
			ObjetosTirados[f][TextID] = CreateDynamic3DTextLabel(""COL_GENERAL"Radio "COL_WHITE"tirada",-1,ObjetosTirados[f][PosObjeto][0],ObjetosTirados[f][PosObjeto][1],ObjetosTirados[f][PosObjeto][2]-0.97,6.0);
	        Info[i][pRadio] = 0;
	        ApplyAnimation(i, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
	        format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s tira su radio al suelo.", GetPlayerNameEx(i));
			NearMsg(i, -1, szMessage,10.0);
		}
		case 2:
	    {
	        ObjetosTirados[f][PosObjeto][0] = x;
            ObjetosTirados[f][PosObjeto][1] = y;
            ObjetosTirados[f][PosObjeto][2] = z;
			ObjetosTirados[f][Tipo] = 2;
			ObjetosTirados[f][IDReferencia] = 0;
            ObjetosTirados[f][Cantidad] = q;
			ObjetosTirados[f][ObjetoID] = CreateDynamicObject(d, x, y, z-0.97, 0, 0, 0);
			ObjetosTirados[f][TextID] = CreateDynamic3DTextLabel(""COL_GENERAL"Paquete "COL_WHITE"tirado",-1,ObjetosTirados[f][PosObjeto][0],ObjetosTirados[f][PosObjeto][1],ObjetosTirados[f][PosObjeto][2]-0.97,6.0);
	        Info[i][pCrack] = 0;
	        ApplyAnimation(i, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
	        format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s tira algo sospechoso al suelo.", GetPlayerNameEx(i));
			NearMsg(i, -1, szMessage,10.0);
		}
		case 3:
	    {
	        ObjetosTirados[f][PosObjeto][0] = x;
            ObjetosTirados[f][PosObjeto][1] = y;
            ObjetosTirados[f][PosObjeto][2] = z;
			ObjetosTirados[f][Tipo] = 3;
			ObjetosTirados[f][IDReferencia] = 0;
            ObjetosTirados[f][Cantidad] = q;
			ObjetosTirados[f][ObjetoID] = CreateDynamicObject(d, x, y, z-0.97, 0, 0, 0);
			ObjetosTirados[f][TextID] = CreateDynamic3DTextLabel(""COL_GENERAL"Paquete "COL_WHITE"tirado",-1,ObjetosTirados[f][PosObjeto][0],ObjetosTirados[f][PosObjeto][1],ObjetosTirados[f][PosObjeto][2]-0.97,6.0);
	        Info[i][pPot] = 0;
	        ApplyAnimation(i, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
	        format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s tira algo sospechoso al suelo.", GetPlayerNameEx(i));
			NearMsg(i, -1, szMessage,10.0);
		}
		case 4:
	    {
	        ObjetosTirados[f][PosObjeto][0] = x;
            ObjetosTirados[f][PosObjeto][1] = y;
            ObjetosTirados[f][PosObjeto][2] = z;
			ObjetosTirados[f][Tipo] = 4;
			ObjetosTirados[f][IDReferencia] = 0;
            ObjetosTirados[f][Cantidad] = q;
			ObjetosTirados[f][ObjetoID] = CreateDynamicObject(d, x, y, z-0.97, 0, 0, 0);
			ObjetosTirados[f][TextID] = CreateDynamic3DTextLabel(""COL_GENERAL"Maleta "COL_WHITE"tirada",-1,ObjetosTirados[f][PosObjeto][0],ObjetosTirados[f][PosObjeto][1],ObjetosTirados[f][PosObjeto][2]-0.97,6.0);
	        Info[i][pMats] = 0;
	        ApplyAnimation(i, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
	        format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s tira algo sospechoso al suelo.", GetPlayerNameEx(i));
			NearMsg(i, -1, szMessage,10.0);
		}
		case 5:
	    {
	        new NombreArma[25], wepid = GetPlayerWeapon(i);
	        GetWeaponNameEx(wepid, NombreArma, sizeof(NombreArma));
	        ObjetosTirados[f][PosObjeto][0] = x;
            ObjetosTirados[f][PosObjeto][1] = y;
            ObjetosTirados[f][PosObjeto][2] = z;
			ObjetosTirados[f][Tipo] = 5;
			ObjetosTirados[f][IDReferencia] = wepid;
            ObjetosTirados[f][Cantidad] = q;
			ObjetosTirados[f][ObjetoID] = CreateDynamicObject(d, x, y, z-0.97, 0, 0, 0);
			format(szMessage, sizeof(szMessage), ""COL_GENERAL" %s {FFFFFF}tirada", NombreArma);
			ObjetosTirados[f][TextID] = CreateDynamic3DTextLabel(szMessage,-1,ObjetosTirados[f][PosObjeto][0],ObjetosTirados[f][PosObjeto][1],ObjetosTirados[f][PosObjeto][2]-0.97,6.0);
			RemovePlayerWeapon(i, wepid);
			ApplyAnimation(i, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
			format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s tira %s al suelo.", GetPlayerNameEx(i), NombreArma);
			NearMsg(i, -1, szMessage,10.0);
		}
		case 6:
	    {
	        ObjetosTirados[f][PosObjeto][0] = x;
            ObjetosTirados[f][PosObjeto][1] = y;
            ObjetosTirados[f][PosObjeto][2] = z;
			ObjetosTirados[f][Tipo] = 6;
			ObjetosTirados[f][IDReferencia] = 0;
            ObjetosTirados[f][Cantidad] = q;
			ObjetosTirados[f][ObjetoID] = CreateDynamicObject(d, x, y, z-0.97, 0, 0, 0);
			ObjetosTirados[f][TextID] = CreateDynamic3DTextLabel(""COL_GENERAL"Chaleco "COL_WHITE"tirado",-1,ObjetosTirados[f][PosObjeto][0],ObjetosTirados[f][PosObjeto][1],ObjetosTirados[f][PosObjeto][2]-0.97,6.0);
			GiveArmorToPlayer(i, 0);
	        ApplyAnimation(i, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
	        format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s tira su chaleco al suelo.", GetPlayerNameEx(i));
			NearMsg(i, -1, szMessage,10.0);
		}
	}
	return 1;
}

stock SleepEx(time)
{
	time += GetTickCount();
	while(time>GetTickCount()){}
}

stock SprayTag_Create(playerid, iIndex)
{
	if(IsPlayerConnected(playerid))
	{
		SprayTags[playerid][iIndex][_spPosX] = spraytag_positions[playerid][0];
		SprayTags[playerid][iIndex][_spPosY] = spraytag_positions[playerid][1];
		SprayTags[playerid][iIndex][_spPosZ] = spraytag_positions[playerid][2];
		SprayTags[playerid][iIndex][_spPosRX] = spraytag_positions[playerid][3];
		SprayTags[playerid][iIndex][_spPosRY] = spraytag_positions[playerid][4];
		SprayTags[playerid][iIndex][_spPosRZ] = spraytag_positions[playerid][5];

		format(SprayTags[playerid][iIndex][_spText], 50, spraytag_text[playerid]);
		format(SprayTags[playerid][iIndex][_spFont], 50, spraytag_font[playerid]);

		SprayTags[playerid][iIndex][_spFontColor] = spraytag_color[playerid];
		SprayTags[playerid][iIndex][_spFontSize] = spraytag_size[playerid];
		SprayTags[playerid][iIndex][_spBold] = spraytag_bold[playerid];

        SprayTag_Spawn(playerid, iIndex);
		Tags_Save(playerid, iIndex);

		format(szMessage, sizeof szMessage, "Graffiti número: %i.", iIndex);
		SendClientMessage(playerid, -1, szMessage);
		format(szMessage, sizeof szMessage, ""COL_GENERAL"%s "COL_WHITE"has creado un nuevo graffiti: '"COL_GENERAL"%s"COL_WHITE"'", GetPlayerNameEx(playerid), spraytag_text[playerid]);
        Log("logs/graffitis.log", szMessage);
	}
}

stock SprayTag_Spawn(playerid, iIndex)
{
	SprayTags[playerid][iIndex][_spObject] = CreateDynamicObject(SPRAY_TAG_OBJECT, SprayTags[playerid][iIndex][_spPosX], SprayTags[playerid][iIndex][_spPosY], SprayTags[playerid][iIndex][_spPosZ], SprayTags[playerid][iIndex][_spPosRX], SprayTags[playerid][iIndex][_spPosRY], SprayTags[playerid][iIndex][_spPosRZ], SprayTags[playerid][iIndex][_spVW], SprayTags[playerid][iIndex][_spInt], -1, SPRAY_TAG_OBJECT_DISTANCE);
	SetDynamicObjectMaterialText(SprayTags[playerid][iIndex][_spObject], 0, SprayTags[playerid][iIndex][_spText], OBJECT_MATERIAL_SIZE_512x512, SprayTags[playerid][iIndex][_spFont], SprayTags[playerid][iIndex][_spFontSize], SprayTags[playerid][iIndex][_spBold], SprayTags[playerid][iIndex][_spFontColor], 0, 1);
	return 1;
}

stock Tag_Load(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new
			szFile[40],
			szLine[28],
			szName[MAX_PLAYER_NAME]
		;
		GetPlayerName(playerid, szName, MAX_PLAYER_NAME);
		format(szFile, 40, SPRAYTAG_FOLDER, szName);

		for(new i; i < MAX_PLAYERS_TAGS; i++)
		{
			format(szLine, sizeof szLine, "Text%i", i); format(SprayTags[playerid][i][_spText], 50, DOF2_GetString(szFile, szLine));
			format(szLine, sizeof szLine, "Font%i", i); format(SprayTags[playerid][i][_spFont], 50, DOF2_GetString(szFile, szLine));
			format(szLine, sizeof szLine, "FontSize%i", i); SprayTags[playerid][i][_spFontSize] = DOF2_GetInt(szFile, szLine);
			format(szLine, sizeof szLine, "FontBold%i", i); SprayTags[playerid][i][_spBold] = DOF2_GetInt(szFile, szLine);
			format(szLine, sizeof szLine, "FontColor%i", i); SprayTags[playerid][i][_spFontColor] = DOF2_GetInt(szFile, szLine);
			format(szLine, sizeof szLine, "PosX%i", i); SprayTags[playerid][i][_spPosX] = DOF2_GetFloat(szFile, szLine);
			format(szLine, sizeof szLine, "PosY%i", i); SprayTags[playerid][i][_spPosY] = DOF2_GetFloat(szFile, szLine);
			format(szLine, sizeof szLine, "PosZ%i", i); SprayTags[playerid][i][_spPosZ] = DOF2_GetFloat(szFile, szLine);
			format(szLine, sizeof szLine, "RotX%i", i); SprayTags[playerid][i][_spPosRX] = DOF2_GetFloat(szFile, szLine);
			format(szLine, sizeof szLine, "RotY%i", i); SprayTags[playerid][i][_spPosRY] = DOF2_GetFloat(szFile, szLine);
			format(szLine, sizeof szLine, "RotZ%i", i); SprayTags[playerid][i][_spPosRZ] = DOF2_GetFloat(szFile, szLine);
			format(szLine, sizeof szLine, "VirtualWorld%i", i); SprayTags[playerid][i][_spVW] = DOF2_GetInt(szFile, szLine);
			format(szLine, sizeof szLine, "Interior%i", i); SprayTags[playerid][i][_spInt] = DOF2_GetInt(szFile, szLine);

			if(SprayTags[playerid][i][_spPosX] != 0.0)
			{
				SprayTag_Spawn(playerid, i);
			}
		}
	}
	return 1;
}

stock Tags_Clear(playerid, iIndex)
{
	format(SprayTags[playerid][iIndex][_spText], 50, "Exemplo");
	format(SprayTags[playerid][iIndex][_spFont], 50, "Arial");
	SprayTags[playerid][iIndex][_spFontSize] = 24;
	SprayTags[playerid][iIndex][_spBold] = 0;
	SprayTags[playerid][iIndex][_spFontColor] = -1;
	SprayTags[playerid][iIndex][_spPosX] = 0.0;
	SprayTags[playerid][iIndex][_spPosY] = 0.0;
	SprayTags[playerid][iIndex][_spPosZ] = 0.0;
	SprayTags[playerid][iIndex][_spPosRX] = 0.0;
	SprayTags[playerid][iIndex][_spPosRY] = 0.0;
	SprayTags[playerid][iIndex][_spPosRZ] = 0.0;
	SprayTags[playerid][iIndex][_spVW] = 0;
	SprayTags[playerid][iIndex][_spInt] = 0;
	DestroyDynamicObject(SprayTags[playerid][iIndex][_spObject]);
	Tags_Save(playerid, iIndex);
	return 1;
}

stock Tags_Save(playerid, iIndex)
{
	if(IsPlayerConnected(playerid))
	{
		new
			szFile[32],
			szLine[128],
			szName[MAX_PLAYER_NAME]
		;

		GetPlayerName(playerid, szName, MAX_PLAYER_NAME);
		format(szFile, 32, SPRAYTAG_FOLDER, szName);
		if(!DOF2_FileExists(szFile)) DOF2_CreateFile(szFile);
		{
			format(szLine, sizeof szLine, "Text%i", iIndex); DOF2_SetString(szFile, szLine, SprayTags[playerid][iIndex][_spText]);
			format(szLine, sizeof szLine, "Font%i", iIndex); DOF2_SetString(szFile, szLine, SprayTags[playerid][iIndex][_spFont]);
			format(szLine, sizeof szLine, "FontSize%i", iIndex); DOF2_SetInt(szFile, szLine, SprayTags[playerid][iIndex][_spFontSize]);
			format(szLine, sizeof szLine, "FontBold%i", iIndex); DOF2_SetInt(szFile, szLine, SprayTags[playerid][iIndex][_spBold]);
			format(szLine, sizeof szLine, "FontColor%i", iIndex); DOF2_SetInt(szFile, szLine, SprayTags[playerid][iIndex][_spFontColor]);
			format(szLine, sizeof szLine, "PosX%i", iIndex); DOF2_SetFloat(szFile, szLine, SprayTags[playerid][iIndex][_spPosX]);
			format(szLine, sizeof szLine, "PosY%i", iIndex); DOF2_SetFloat(szFile, szLine, SprayTags[playerid][iIndex][_spPosY]);
			format(szLine, sizeof szLine, "PosZ%i", iIndex); DOF2_SetFloat(szFile, szLine, SprayTags[playerid][iIndex][_spPosZ]);
			format(szLine, sizeof szLine, "RotX%i", iIndex); DOF2_SetFloat(szFile, szLine, SprayTags[playerid][iIndex][_spPosRX]);
			format(szLine, sizeof szLine, "RotY%i", iIndex); DOF2_SetFloat(szFile, szLine, SprayTags[playerid][iIndex][_spPosRY]);
			format(szLine, sizeof szLine, "RotZ%i", iIndex); DOF2_SetFloat(szFile, szLine, SprayTags[playerid][iIndex][_spPosRZ]);
			format(szLine, sizeof szLine, "VirtualWorld%i", iIndex); DOF2_SetInt(szFile, szLine, SprayTags[playerid][iIndex][_spVW]);
			format(szLine, sizeof szLine, "Interior%i", iIndex); DOF2_SetInt(szFile, szLine, SprayTags[playerid][iIndex][_spInt]);
			DOF2_SaveFile();
		}
	}
	return 1;
}

stock ModifyVehicleSpeed(vehicleid,mph) //Miles Per Hour
{
	new Float:Vx,Float:Vy,Float:Vz,Float:DV,Float:multiple;
	GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
	DV = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
	if(DV > 0) //Directional velocity must be greater than 0 (display strobes if 0)
	{
		multiple = ((mph + DV * 100) / (DV * 100)); //Multiplying DV by 100 calculates speed in MPH
		return SetVehicleVelocity(vehicleid,Vx*multiple,Vy*multiple,Vz*multiple);
	}
	return 0;
}

stock HexToInt(string[]) // Created by Zamaroth
{
	if (string[0] == 0) return 0;

	new
		i,
		cur = 1,
		res = 0
	;

	for (i = strlen(string); i > 0; i --) {
		if (string[i-1] < 58) res = res + cur * (string[i-1]-48); else res = res + cur * (string[i-1]-65+10);
		cur = cur * 16;
	}
	return res;
}
function Test(playerid)
{
    ShowPlayerDialog(playerid, TEST_0, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa MetaGaming?","Correr y saltar al mismo tiempo\nInsultar a un usuario\nMatar sin razon\nConfundir canales (OOC - IC)\nRobar un vehiculo sin rol\nEstacionarse mal.", "Seleccionar", "");
}
function SprayTag_Dialog(iPlayerID, iType)
{
	new
		szGraff[500],
		szText[50],
		szFont[50],
		szBold[20],
		szColor[30]
	;

	switch(iType)
	{
		case TYPE_LIST_MENU:
		{
			ShowPlayerDialog(iPlayerID, SPRAYTAG_MENU, DIALOG_STYLE_LIST, ""COL_GENERAL"NP:RP - "COL_WHITE"Graffitis", "Crear graffitis\nEditar graffitis\nBorrar grafitis\nRastrear graffitis", "Seleccionar", "Salir");
		}
		case TYPE_LIST_CREATE:
		{
			switch(spraytag_bold[iPlayerID])
			{
				case 0: szBold = "Desactivada";
				case 1: szBold = "Activada";
			}
			switch(spraytag_color[iPlayerID])
			{
				case -65536: szColor = "{FF0000}Rojo";
				case -16468988: szColor = "{04B404}Verde";
				case -16730675: szColor = "{00B5CD}Azul Claro";
				case -256: szColor = "{FFFF00}Amarillo";
				case -16776961: szColor = "{0000FF}Azul";
				case -8092540: szColor = "{848484}Gris";
				case -65281: szColor = "{FF00FF}Rosa";
				case -1: szColor = "{FFFFFF}Blanco";
			}

			format(szText, 50, spraytag_text[iPlayerID]);
			format(szFont, 50, spraytag_font[iPlayerID]);

			format(szGraff, sizeof szGraff, "\
				"COL_GENERAL"Texto:"COL_WHITE" %s\n\
				"COL_GENERAL"Fuente:"COL_WHITE" %s\n\
				"COL_GENERAL"Tamaño:"COL_WHITE" %d\n\
				"COL_GENERAL"Color:"COL_WHITE" %s\n\
				"COL_GENERAL"Negrita:"COL_WHITE" %s\n\
				"COL_GENERAL"Crear graffiti",
				szText,
				szFont,
				spraytag_size[iPlayerID],
				szColor,
				szBold
			);
			ShowPlayerDialog(iPlayerID, SPRAYTAG_CREATE_MAIN, DIALOG_STYLE_LIST, ""COL_GENERAL"NP:RP -"COL_WHITE" Graffitis", szGraff, "Seleccionar", "Volver");
		}
		case TYPE_LIST_EDIT:
		{
			switch(spraytag_bold[iPlayerID])
			{
				case 0: szBold = "Desactivada";
				case 1: szBold = "Activada";
			}
			switch(spraytag_color[iPlayerID])
			{
				case -65536: szColor = "{FF0000}Rojo";
				case -16468988: szColor = "{04B404}Verde";
				case -16730675: szColor = "{00B5CD}Azul Claro";
				case -256: szColor = "{FFFF00}Amarillo";
				case -16776961: szColor = "{0000FF}Azul";
				case -8092540: szColor = "{848484}Gris";
				case -65281: szColor = "{FF00FF}Rosa";
				case -1: szColor = "{FFFFFF}Blanco";
			}

			format(szGraff, sizeof szGraff, "\
				"COL_GENERAL"Texto: "COL_WHITE"%s\n\
				"COL_GENERAL"Fuente: "COL_WHITE"%s\n\
				"COL_GENERAL"Tamaño: "COL_WHITE"%d\n\
				"COL_GENERAL"Color: "COL_WHITE"%s\n\
				"COL_GENERAL"Negrita: "COL_WHITE"%s\n\
				"COL_GENERAL"Editar graffiti",
				spraytag_text[iPlayerID],
				spraytag_font[iPlayerID],
				spraytag_size[iPlayerID],
				szColor,
				szBold
			);
			ShowPlayerDialog(iPlayerID, SPRAYTAG_EDIT_LIST, DIALOG_STYLE_LIST, ""COL_GENERAL"NP:RP -"COL_WHITE" Graffitis", szGraff, "Seleccionar", "Volver");
		}
		case TYPE_LIST_TAGS:
		{
			new
				szName[MAX_PLAYER_NAME]
			;

			GetPlayerName(iPlayerID, szName, sizeof szName);
			for(new i; i < MAX_PLAYERS_TAGS; i++)
			{
				new szTag[24];
				format(szTag, sizeof szTag, ""COL_WHITE"Libre");
				if(SprayTags[iPlayerID][i][_spPosX] != 0.0 && SprayTags[iPlayerID][i][_spPosY] != 0.0)
				{
					format(szTag, sizeof(szTag), ""COL_GENERAL"Graffiti ID %i", i);
				}
				format(szGraff, sizeof(szGraff), "%s%s\n", szGraff, szTag);
			}

			ShowPlayerDialog(iPlayerID, SPRAYTAG_EDIT_MAIN, DIALOG_STYLE_LIST, ""COL_GENERAL"NP:RP -"COL_WHITE" Graffitis", szGraff, "Seleccionar", "Volver");
		}
		case TYPE_LIST_TAGS_DELETE:
		{
			new
				szName[MAX_PLAYER_NAME]
			;

			GetPlayerName(iPlayerID, szName, sizeof szName);

			for(new i; i < MAX_PLAYERS_TAGS; i++)
			{
				new szTag[24];
				format(szTag, sizeof szTag, ""COL_WHITE"Libre");
				if(SprayTags[iPlayerID][i][_spPosX] != 0.0 && SprayTags[iPlayerID][i][_spPosY] != 0.0)
				{
					format(szTag, sizeof(szTag), ""COL_GENERAL"Graffiti ID %i", i);
				}
				format(szGraff, sizeof(szGraff), "%s%s\n", szGraff, szTag);
			}
			ShowPlayerDialog(iPlayerID, SPRAYTAG_DELETE, DIALOG_STYLE_LIST, ""COL_GENERAL"NP:RP -"COL_WHITE" Graffitis", szGraff, "Seleccionar", "Volver");
		}
		case TYPE_LIST_TAGS_CREATE:
		{
			new szName[MAX_PLAYER_NAME];
			GetPlayerName(iPlayerID, szName, sizeof szName);
			for(new i; i < MAX_PLAYERS_TAGS; i++)
			{
				new szTag[24];
				format(szTag, sizeof szTag, ""COL_WHITE"Libre");
				if(SprayTags[iPlayerID][i][_spPosX] != 0.0 && SprayTags[iPlayerID][i][_spPosY] != 0.0)
				{
					format(szTag, sizeof(szTag), ""COL_GENERAL"Graffiti ID %i", i);
				}
				format(szGraff, sizeof(szGraff), "%s%s\n", szGraff, szTag);
			}
			ShowPlayerDialog(iPlayerID, SPRAYTAG_CREATE, DIALOG_STYLE_LIST, ""COL_GENERAL"NP:RP -"COL_WHITE" Graffitis", szGraff, "Seleccionar", "Volver");
		}
		case TYPE_LIST_TAGS_FIND:
		{
			new
				szName[MAX_PLAYER_NAME]
			;

			GetPlayerName(iPlayerID, szName, sizeof szName);

			for(new i; i < MAX_PLAYERS_TAGS; i++)
			{
				new szTag[24];
				format(szTag, sizeof szTag, ""COL_WHITE"Libre");
				if(SprayTags[iPlayerID][i][_spPosX] != 0.0 && SprayTags[iPlayerID][i][_spPosY] != 0.0)
				{
					format(szTag, sizeof(szTag), ""COL_GENERAL"Graffiti ID %i", i);
				}
				format(szGraff, sizeof(szGraff), "%s%s\n", szGraff, szTag);
			}
			ShowPlayerDialog(iPlayerID, SPRAYTAG_FIND, DIALOG_STYLE_LIST, ""COL_GENERAL"NP:RP -"COL_WHITE" Graffitis", szGraff, "Seleccionar", "Volver");
		}
	}
	return 1;
}

function SprayTag(playerid, type)
{
	new
		iIndex = spraytag_slot[playerid]
	;

	if(!IsPlayerConnected(playerid))
	{
		spraytag_timer_left[playerid] = 0;
		DeletePVar(playerid, "SPRAYTAG_EDIT");
		KillTimer(spraytag_timer[playerid]);
		return 1;
	}

	spraytag_timer_left[playerid]--;

	switch(type)
	{
		case 1:
		{
			if(spraytag_timer_left[playerid] == 0)
			{
				DestroyDynamicObject(SprayTags[playerid][iIndex][_spObject]);
				DestroyDynamicObject(spraytag_object[playerid]);

				format(SprayTags[playerid][iIndex][_spText], 50, spraytag_text[playerid]);
				format(SprayTags[playerid][iIndex][_spFont], 50, spraytag_font[playerid]);

				SprayTags[playerid][iIndex][_spPosX] = spraytag_positions[playerid][0];
				SprayTags[playerid][iIndex][_spPosY] = spraytag_positions[playerid][1];
				SprayTags[playerid][iIndex][_spPosZ] = spraytag_positions[playerid][2];
				SprayTags[playerid][iIndex][_spPosRX] = spraytag_positions[playerid][3];
				SprayTags[playerid][iIndex][_spPosRY] = spraytag_positions[playerid][4];
				SprayTags[playerid][iIndex][_spPosRZ] = spraytag_positions[playerid][5];
				SprayTags[playerid][iIndex][_spFontColor] = spraytag_color[playerid];
				SprayTags[playerid][iIndex][_spFontSize] = spraytag_size[playerid];
				SprayTags[playerid][iIndex][_spBold] = spraytag_bold[playerid];

				SprayTag_Spawn(playerid, iIndex);
				Tags_Save(playerid, iIndex);

				ClearAnimations(playerid);
				ApplyAnimation(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 0, 0, 0, 0, 0, 1);
				KillTimer(spraytag_timer[playerid]);
			}
		}
		case 2:
		{
			if(spraytag_timer_left[playerid] == 0)
			{
				SprayTag_Create(playerid, spraytag_slot[playerid]);
				ClearAnimations(playerid);
				ApplyAnimation(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 0, 0, 0, 0, 0, 1);
				KillTimer(spraytag_timer[playerid]);
			}
		}
	}
	DeletePVar(playerid, "SPRAYTAG_EDIT");
	return 1;
}

function Tiempoarbol0(playerid)
{
    DestroyObject(Arbolmuerto[0]);
    Arbolvivo[0] = CreateObject(771, -168.90, -1173.00, 3.69,   0.00, 0.00, 0.00);
    return 1;
}
function Tiempoarbolx(playerid)
{
    DestroyObject(Arbolmuerto[1]);
    Arbolvivo[1] = CreateObject(730, -168.11, -1191.22, 4.11,   0.00, 0.00, 0.00);
    return 1;
}
function Tiempoarbolxx(playerid)
{
    DestroyObject(Arbolmuerto[2]);
    Arbolvivo[2] = CreateObject(771, -147.37, -1193.02, 2.71,   0.00, 0.00, 0.00);
    return 1;
}
function Tiempoarbolxxx(playerid)
{
    DestroyObject(Arbolmuerto[3]);
    Arbolvivo[3] = CreateObject(730, -186.97, -1173.81, 4.11,   0.00, 0.00, -0.06);
    return 1;
}
function Tiempoarbolxxxx(playerid)
{
    DestroyObject(Arbolmuerto[3]);
    Arbolvivo[3] = CreateObject(771, -161.41, -1207.32, 4.98,   0.00, 0.00, 0.00);
    return 1;
}

function espera(playerid)
{
    new string[256];
	if(TrabajoL[playerid]==true)
	{
		SetPlayerAttachedObject(playerid, 9, 1463, 1,0.20,0.36,0.0,0.0,90.0, 0.0, 0.4, 0.3, 0.6);
		ApplyAnimation(playerid,"CARRY","crry_prtial",4.0,1,0,0,1,1,1);
		format(string, sizeof(string), "[Leñador] Recogiste %d troncos de madera, llevalos al aserradero.",gcorte[playerid]);
 		SendClientMessageEx(playerid, COLOR_GREY, string);
 		SetPlayerCheckpoint(playerid, -144.7257,-1165.5654,3.4364, 3.0);
	}
	return 1;
}

function arbol1(playerid)
{
	DestroyObject(Arbolvivo[0]);
	Arbolmuerto[0] = CreateObject(684, -172.36, -1175.49, 4.55,   -5.00, 0.00, 306.35);
 	SetTimerEx("Tiempoarbol0", 10000, false, "i", playerid);
 	RemovePlayerAttachedObject(playerid, 9);
  	return 1;
}

function arbol2(playerid)
{
	DestroyObject(Arbolvivo[1]);
 	Arbolmuerto[1] = CreateObject(684, -171.52, -1193.67, 5.27,   -5.00, 0.00, 306.35);
	SetTimerEx("Tiempoarbolx", 10000, false, "i", playerid);
 	RemovePlayerAttachedObject(playerid, 9);
  	return 1;
}

function arbol3(playerid)
{
	DestroyObject(Arbolvivo[2]);
 	Arbolmuerto[2] = CreateObject(684, -150.08, -1196.10, 3.78,   -7.00, 0.00, 318.08);
	SetTimerEx("Tiempoarbolxx", 10000, false, "i", playerid);
 	RemovePlayerAttachedObject(playerid, 9);
  	return 1;
}

function arbol4(playerid)
{
	DestroyObject(Arbolvivo[3]);
 	Arbolmuerto[3] = CreateObject(684, -189.75, -1176.79, 5.80,   -10.00, 0.00, 318.08);
    SetTimerEx("Tiempoarbolxxx", 10000, false, "i", playerid);
  	RemovePlayerAttachedObject(playerid, 9);
  	return 1;
}

function arbol5(playerid)
{
	DestroyObject(Arbolvivo[4]);
 	Arbolmuerto[4] = CreateObject(684, -164.26, -1210.41, 5.79,   -5.00, 0.00, 318.08);
  	SetTimerEx("Tiempoarbolxxxx", 10000, false, "i", playerid);
  	RemovePlayerAttachedObject(playerid, 9);
  	return 1;
}
// Luces intermitentes
function LucesIntermitentes(playerid)
{
	if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 )
	{
		new Panels, Doors1, Lights, Tires;
		GetVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, Lights, Tires);
		UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, encode_lights(0,0,1,1), Tires);
        TLI = SetTimerEx("TimerLucesIntermitentes", 100, false, "d", GetPlayerVehicleID(playerid));
	}
}
function ApagarLucesIntermitentes(playerid)
{
	if ( IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 )
	{
	   KillTimer(TLI);
	   KillTimer(TLI2);
	   new Panels, Doors1, Lights, Tires;
	   GetVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, Lights, Tires);
	   UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), Panels, Doors1, encode_lights(0,0,0,0), Tires);
	}
}
function encode_lights(light1, light2, light3, light4)
{
	return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);
}
function TimerLucesIntermitentes(vehicleid)
{
		new Panels, Doors1, Lights, Tires;
		GetVehicleDamageStatus(vehicleid, Panels, Doors1, Lights, Tires);
		UpdateVehicleDamageStatus(vehicleid, Panels, Doors1, encode_lights(1,1,0,0), Tires);
		TLI2 = SetTimerEx("TimerLucesIntermitentes2", 100, false, "d", vehicleid);
}
function TimerLucesIntermitentes2(vehicleid)
{
		new Panels, Doors1, Lights, Tires;
		GetVehicleDamageStatus(vehicleid, Panels, Doors1, Lights, Tires);
		UpdateVehicleDamageStatus(vehicleid, Panels, Doors1, encode_lights(0,0,1,1), Tires);
		TLI = SetTimerEx("TimerLucesIntermitentes", 100, false, "d", vehicleid);
}
function qdni(playerid)
{
	TextDrawHideForPlayer(playerid, DNI0);
	TextDrawHideForPlayer(playerid, DNI1);
	TextDrawHideForPlayer(playerid, DNI2);
	TextDrawHideForPlayer(playerid, DNI3[playerid]);
	TextDrawHideForPlayer(playerid, DNI4);
	TextDrawHideForPlayer(playerid, DNI5);
	TextDrawHideForPlayer(playerid, DNI6);
	TextDrawHideForPlayer(playerid, DNI7);
	TextDrawHideForPlayer(playerid, DNI8[playerid]);
	TextDrawHideForPlayer(playerid, DNI9[playerid]);
	TextDrawHideForPlayer(playerid, DNI10[playerid]);
	TextDrawHideForPlayer(playerid, DNI11[playerid]);
	TextDrawHideForPlayer(playerid, DNI12[playerid]);
	Mostrando[playerid] = 0;
	return 1;
}
// Obrero

function hand(playerid)
{
	new string[256];
	ClearAnimations(playerid);
    if(IsPlayerAttachedObjectSlotUsed(playerid,9)) RemovePlayerAttachedObject(playerid,9);
    if(IsPlayerAttachedObjectSlotUsed(playerid,7)) RemovePlayerAttachedObject(playerid,7);
    if(IsPlayerAttachedObjectSlotUsed(playerid,8)) RemovePlayerAttachedObject(playerid,8);
    SetPlayerAttachedObject(playerid,7, 1458, 1, -1.034844, 1.116571, -0.065124, 76.480148, 75.781570, 280.952545, 0.575599, 0.604554, 0.624122);
    SetPlayerAttachedObject(playerid,8, 905, 1, -0.275758, 1.305280, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
    format(string, sizeof(string), "[Obrero] Recogiste %d escombros, entregalos en el checkpoint.",escombros[playerid]);
 	SendClientMessageEx(playerid, COLOR_GREY, string);
 	SetPlayerCheckpoint(playerid,-77.8987,-1104.5708,1.0781, 5.0);
	return 1;
}

stock Expulsar(playerid) return SetTimerEx("KickFix", 10, 0, "d", playerid);

stock PlayerPlaySoundEx(soundid, Float:x, Float:y, Float:z)
{ // Realistic sound playback
	foreach(Player, i)
	{
		if(IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) PlayerPlaySound(i, soundid, x, y, z);
	}
	return 1;
}

//------------------------------------------------------------------------------------------------------

public OnPlayerRequestClass(playerid, classid)
{
	if(IsPlayerNPC(playerid))
    {
    SpawnPlayer(playerid);
    return 1; 
    }
	if(IsPlayerNPC(playerid)) return 1;
    return 1;
}

public OnPlayerConnect(playerid)
{
	SetPVarInt(playerid, "tempfixac", 1);
    if(IsPlayerNPC(playerid)) return 1;
	new playerIP[16];
	GetPlayerIp(playerid, playerIP, sizeof(playerIP));
    ClearChatbox(playerid);
	if(CheckBan(playerIP) == 1)
	{
	    SetPlayerName(playerid, "BannedPlayer");
	    SendClientMessage(playerid, COLOR_GENERAL, "SERVER: Lo sentimos, su cuenta se encuentra baneada. Si cree que fue un error, por favor, reportelo via foro o TS3.");
		Expulsar(playerid);
		return 1;
	}
	SetPlayerColor(playerid,COLOR_GRAD2);
	Tag_Load(playerid);
	PlayAudioStreamForPlayer(playerid, RandMusic[random(sizeof(RandMusic))]);
	FPS[playerid] = CreateObject(19300, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	TotalConnect++;
	resetPlayerVariables(playerid);
	CreateTextdrawsProgressBar(playerid);
	ClearMarriage(playerid);
	SyncPlayerTime(playerid);
	if(Iter_Count(Player) > MaxPlayersConnected)
	{
		MaxPlayersConnected = Iter_Count(Player);
		gettime(MPHour,MPMinute);
		getdate(MPYear,MPMonth,MPDay);
	}
	if(MaxPlayersConnected > 200) MaxPlayersConnected = 200; // Temp good fix
	SetTimerEx("SafeLogin", 4000, 0, "d", playerid);
	return 1;
}

stock CreateTextdrawsProgressBar(i)
{
    DestroyProgressBar(BarraNec[i][0]);
    DestroyProgressBar(BarraNec[i][1]);
    DestroyProgressBar(BarraNec[i][2]);
    DestroyProgressBar(BarraNec[i][3]);
    DestroyProgressBar(VelocimetroBAR[i][0]);
    DestroyProgressBar(VelocimetroBAR[i][1]);
    DestroyProgressBar(LicenciasBAR[i][0]);
    DestroyProgressBar(LicenciasBAR[i][1]);
    TextDrawDestroy(VelocimetroTDP[i][0]);
    TextDrawDestroy(VelocimetroTDP[i][1]);
    TextDrawDestroy(DNI3[i]);
    TextDrawDestroy(DNI8[i]);
    TextDrawDestroy(DNI9[i]);
    TextDrawDestroy(DNI10[i]);
    TextDrawDestroy(DNI11[i]);
    TextDrawDestroy(DNI12[i]);
    TextDrawDestroy(InfoText[i]);
	BarraNec[i][0] = CreateProgressBar(557.00, 440.00, 74.50, 3.20, 426558975, 100.0);
	BarraNec[i][1] = CreateProgressBar(457.00, 440.00, 74.50, 3.20, -104070913, 100.0);
	BarraNec[i][2] = CreateProgressBar(354.00, 440.00, 74.50, 3.20, -1040187137, 100.0);
	BarraNec[i][3] = CreateProgressBar(4.00, 438.00, 219.50, 5.19, 884951295, 100.0);
	VelocimetroBAR[i][0] = CreateProgressBar(575.00, 332.00, 55.50, 1.50, -1040187137, 300.0);
	VelocimetroBAR[i][1] = CreateProgressBar(575.00, 371.00, 55.50, 1.50, -1040187137, 240.0);
	LicenciasBAR[i][0] = CreateProgressBar(44.00, 263.00, 119.50, 2.20, -16776961, 90.0);
	LicenciasBAR[i][1] = CreateProgressBar(44.00, 295.00, 119.50, 2.20, -16776961, 1000.0);
	VelocimetroTDP[i][0] = TextDrawCreate(583.000000, 316.000000, "777/777");TextDrawBackgroundColor(VelocimetroTDP[i][0], -553567489);TextDrawFont(VelocimetroTDP[i][0], 2);TextDrawLetterSize(VelocimetroTDP[i][0], 0.209999, 1.299999);TextDrawColor(VelocimetroTDP[i][0], 255);TextDrawSetOutline(VelocimetroTDP[i][0], 1);TextDrawSetProportional(VelocimetroTDP[i][0], 1);TextDrawSetSelectable(VelocimetroTDP[i][0], 0);
	VelocimetroTDP[i][1] = TextDrawCreate(600.000000, 354.000000, "777");TextDrawAlignment(VelocimetroTDP[i][1], 3);TextDrawBackgroundColor(VelocimetroTDP[i][1], -553567489);TextDrawFont(VelocimetroTDP[i][1], 2);TextDrawLetterSize(VelocimetroTDP[i][1], 0.199999, 1.399999);TextDrawColor(VelocimetroTDP[i][1], 255);TextDrawSetOutline(VelocimetroTDP[i][1], 1);TextDrawSetProportional(VelocimetroTDP[i][1], 1);TextDrawSetSelectable(VelocimetroTDP[i][1], 0);
	DNI3[i] = TextDrawCreate(196.000000, 180.195556, "LD_SPAC:white");TextDrawBackgroundColor(DNI3[i], 0);TextDrawTextSize(DNI3[i], 77.777770, 136.391113);TextDrawUseBox(DNI3[i], 1);TextDrawBoxColor(DNI3[i], 0x00000000);TextDrawColor(DNI3[i], -1);TextDrawFont(DNI3[i], TEXT_DRAW_FONT_MODEL_PREVIEW);
	DNI8[i] = TextDrawCreate(384.889221, 168.249038, "596412235");TextDrawLetterSize(DNI8[i], 0.233111, 0.903110);TextDrawAlignment(DNI8[i], 1);TextDrawColor(DNI8[i], -1);TextDrawSetShadow(DNI8[i], 0);TextDrawSetOutline(DNI8[i], 1);TextDrawBackgroundColor(DNI8[i], 51);TextDrawFont(DNI8[i], 2);TextDrawSetProportional(DNI8[i], 1);
	DNI9[i] = TextDrawCreate(290.221862, 215.040100, "nombre apellido");TextDrawLetterSize(DNI9[i], 0.227333, 1.151998);TextDrawAlignment(DNI9[i], 1);TextDrawColor(DNI9[i], -1);TextDrawSetShadow(DNI9[i], 0);TextDrawSetOutline(DNI9[i], 1);TextDrawBackgroundColor(DNI9[i], 51);TextDrawFont(DNI9[i], 2);TextDrawSetProportional(DNI9[i], 1);
	DNI10[i] = TextDrawCreate(309.777832, 250.382293, "99");TextDrawLetterSize(DNI10[i], 0.227332, 1.151998);TextDrawAlignment(DNI10[i], 1);TextDrawColor(DNI10[i], -1);TextDrawSetShadow(DNI10[i], 0);TextDrawSetOutline(DNI10[i], 1);TextDrawBackgroundColor(DNI10[i], 51);TextDrawFont(DNI10[i], 2);TextDrawSetProportional(DNI10[i], 1);
	DNI11[i] = TextDrawCreate(371.555664, 250.382263, "Masculino");TextDrawLetterSize(DNI11[i], 0.227332, 1.151998);TextDrawAlignment(DNI11[i], 1);TextDrawColor(DNI11[i], -1);TextDrawSetShadow(DNI11[i], 0);TextDrawSetOutline(DNI11[i], 1);TextDrawBackgroundColor(DNI11[i], 51);TextDrawFont(DNI11[i], 2);TextDrawSetProportional(DNI11[i], 1);
	DNI12[i] = TextDrawCreate(291.999847, 285.226684, "San Andreas");TextDrawLetterSize(DNI12[i], 0.227332, 1.151998);TextDrawAlignment(DNI12[i], 1);TextDrawColor(DNI12[i], -1);TextDrawSetShadow(DNI12[i], 0);TextDrawSetOutline(DNI12[i], 1);TextDrawBackgroundColor(DNI12[i], 51);TextDrawFont(DNI12[i], 2);TextDrawSetProportional(DNI12[i], 1);
	InfoText[i] = TextDrawCreate(221.000000, 363.000000, "_");TextDrawBackgroundColor(InfoText[i], 255);TextDrawFont(InfoText[i], 1);TextDrawLetterSize(InfoText[i], 0.390000, 1.599999);TextDrawColor(InfoText[i], -1);TextDrawSetOutline(InfoText[i], 0);TextDrawSetProportional(InfoText[i], 1);TextDrawSetShadow(InfoText[i], 2);TextDrawSetSelectable(InfoText[i], 0);
	return 1;
}

function SafeLogin(playerid)
{
	ClearChatbox(playerid);
	ShowMenuLogin(playerid);
	new cam = Random(1,4);
	SetPlayerJoinCamera(playerid, cam);
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
    if(INI_Exist(playername))
	{
	    gPlayerAccount[playerid] = 1;
        ShowMainMenuDialog(playerid, 1);
		return 1;
	}
	else
	{
	    if(strfind( playername, "_", true) == -1)
		{
		    SetPlayerName(playerid, "InvalidNick");
			SendClientMessageEx(playerid, COLOR_WHITE, "Porfavor usa el formato correcto: Nombre_Apellido");
			SendClientMessageEx(playerid, COLOR_WHITE, "Vuelve a entrar con el formato indicado." );
			Kick(playerid);

	    }
        else
		{
            gPlayerAccount[playerid] = 0;
        	ShowMainMenuDialog(playerid, 2);
	    }
	    return 1;
	}

}
ShowMainMenuDialog(playerid, frame)
{
	new titlestring[400];
	new string[400];
	InsideMainMenu[playerid] = true;
	switch(frame)
	{
		case 1:
		{
		    INI_ParseFile(UserPath(playerid), "LoadUser_pass", .bExtra = true, .extra = playerid);
			new ip[32];
			GetPlayerIp(playerid, ip, 32);
			format(titlestring, sizeof(titlestring), "Panel de ingreso");
			format(string, sizeof(string), "{FFFFFF}Ingresa una contraseña para ingresar al servidor.\n\n"COL_GENERAL"Foro: "COL_WHITE"www.newparadise-rp.net\n"COL_GENERAL"Página Facebook: "COL_WHITE"www.facebook.com/pages/New-Paradise-RP/652087754914075\n"COL_GENERAL"TeamSpeak 3: "COL_WHITE"%s\n\n{FFFFFF}¡Recuerda visitanos en nuestros medios!, más información en el foro.", SERVER_TS3_IP);
			ShowPlayerDialog(playerid,DLOGIN,DIALOG_STYLE_PASSWORD ,titlestring,string,"Ingresar","Salir");
			SetPlayerVirtualWorld(playerid, 20);
		}
		case 2:
		{
			new ip[32];
			GetPlayerIp(playerid, ip, 32);
			format(titlestring, sizeof(titlestring), "Panel de registro");
			format(string, sizeof(string), "{FFFFFF}Ingresa una contraseña para crearte una cuenta en el servidor.\n\n"COL_GENERAL"Foro: "COL_WHITE"www.newparadise-rp.net\n"COL_GENERAL"Página Facebook: "COL_WHITE"www.facebook.com/pages/New-Paradise-RP/652087754914075\n"COL_GENERAL"TeamSpeak 3: "COL_WHITE"%s\n\n{FFFFFF}¡Recuerda visitanos en nuestros medios!, más información en el foro.", SERVER_TS3_IP);
			ShowPlayerDialog(playerid,DREGISTER,DIALOG_STYLE_INPUT ,titlestring,string,"Registrar","Salir");
	    	SetPlayerVirtualWorld(playerid, 20);
		}
	}
}
ShowMenuLogin(playerid)
{
	ClearChatbox(playerid);
	SelectTextDraw(playerid, COLOR_WHITE);
	TextDrawShowForPlayer(playerid, TDIntro[0]);
	TextDrawShowForPlayer(playerid, TDIntro[1]);
	TextDrawShowForPlayer(playerid, TDIntro[2]);
	TextDrawShowForPlayer(playerid, TDIntro[3]);
 	TextDrawHideForPlayer(playerid, TDHUD[0]);
	TextDrawHideForPlayer(playerid, TDHUD[1]);
	return 1;
}

HideMenuLogin(playerid)
{

	TextDrawHideForPlayer(playerid, TDIntro[0]);
	TextDrawHideForPlayer(playerid, TDIntro[1]);
	TextDrawHideForPlayer(playerid, TDIntro[2]);
	TextDrawHideForPlayer(playerid, TDIntro[3]);
	TextDrawShowForPlayer(playerid, TDHUD[0]);
	TextDrawShowForPlayer(playerid, TDHUD[1]);
	ShowNecesidades(playerid);
	return 1;
}
function Lotto(number)
{
	new JackpotFallen = 0;
	format(szMessage, sizeof(szMessage), "Loteria Nacional: {FFFFFF}El numero ganador es..... %d", number);
	OOCNews(COLOR_BLUED, szMessage);
	foreach(Player, i)
	{
		if(IsPlayerConnectedEx(i))
		{
		    if(Info[i][pLottoNr] > 0)
			{
			    if(Info[i][pLottoNr] == number)
				{
			        JackpotFallen = 1;
					format(szMessage, sizeof(szMessage), "Loteria Nacional: {FFFFFF}%s ha ganado el acumulado de $%d .", GetPlayerNameEx(i), Jackpot);
					OOCNews(COLOR_BLUED, szMessage);
					format(szMessage, sizeof(szMessage), "SMS: Has ganado $%d con tu boleta de loteria - Felicitaciones. De: 9891 - (Loteria Nacional)", Jackpot);
					SendClientMessageEx(i, COLOR_GRAD1, szMessage);
					GivePlayerCash(i, Jackpot);
					PlayerPlayMusic(i);
					Jackpot = 0;
					SaveStuff();
			    }
			    else SendClientMessageEx(i, COLOR_GREY, "* No has ganado la loteria, suerte la próxima vez!");
			}
			Info[i][pLottoNr] = 0;
		}
	}
	if(JackpotFallen == 0)
	{
	    format(szMessage, sizeof(szMessage), "Loteria Nacional: {FFFFFF}El premio se mantiene en %d, compra loterías para aumentar el pozo.", Jackpot);
		OOCNews(COLOR_BLUED, szMessage);
	}
	return 1;
}
//------------------------------------------------------------------------------------------------------

stock resetPlayerVariables(const playerid)
{
	SetPVarInt(playerid, "tempfixac", 0);   	SetPVarFloat(playerid, "pACPX", 0); SetPVarFloat(playerid, "pACPY", 0); SetPVarInt(playerid, "editingcdveh", -1);
	SetPVarFloat(playerid, "pACPZ", 0);   		SetPVarFloat(playerid, "pACVX", 0);	SetPVarFloat(playerid, "pACVY", 0); SetPVarFloat(playerid, "pACVZ", 0);
	lena1[playerid] = 0;						SetPVarInt(playerid,"Lena",0);      SetPVarInt(playerid,"Dandoarma",0);	KillTimer(RobarTiempoTimer[playerid]);
	SetPVarInt(playerid,"Miner", 0);			entregare[playerid] = 0;			Viendocuenta[playerid] = 0;			SetPVarInt(playerid, "shrequest", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "IsInArena", 0);		SetPVarInt(playerid, "FirstSpawn", 1);SetPVarInt(playerid, "ArenaMode", 0);SetPVarInt(playerid, "editingcd", -1);
	TEL_INPUT_ID[playerid] = 0;					OOCTimer[playerid] = 0;				Robo[playerid] = 0;                 ExamenNav[playerid] = 0;
	IsPractising[playerid] = 0;                 ErroresLic[playerid] = 0;           ExamenManejo[playerid] = 0;         ExamenVuelo[playerid] = 0;
	ForzarTimer[playerid] = 0;                  RobarTiempo[playerid] = -1;         DineroRobado[playerid] = 0;         ropapizzero[playerid] = 0;
	UsedCrack[playerid] = 0; 					UsedWeed[playerid] = 0;             PLuces[playerid] = 0;               InfoTextShowing[playerid] = 0;
	CrackOffer[playerid] = 999; 				CrackGram[playerid] = 0; 			CrackPrice[playerid] = 0;           PlayerStoned[playerid] = 0;
	PotPrice[playerid] = 0; 					PotGram[playerid] = 0;              PotOffer[playerid] = 999;           AdminChat[playerid] = 0;
	gOoc[playerid] = 0; 						gNews[playerid] = 0; 				gFam[playerid] = 0;
	gPlayerLogged{playerid} = 0;                NewbieTimer[playerid] = 0; 			VIPTimer[playerid] = 0;             gNewbie[playerid] = 1;
	gPlayerSpawned[playerid] = 0; 				gLastCar[playerid] = 0;             gPlayerAccount[playerid] = 0;       gPlayerLogTries[playerid] = 0;
	TicketOffer[playerid] = 999; 				TicketMoney[playerid] = 0;          InsideMainMenu[playerid] = 0;       PlayerTazeTime[playerid] = 0;
	Paquetes[playerid] = 0; 					TutTime[playerid] = 0; 				HireKey[playerid] = 9999;			LocalTarifa[playerid] = 0;
	ReduceTime[playerid] = 0;           		KnockedDown[playerid] = 0; 			UnidentifedCall[playerid] = 0;      Vortex[playerid] = 0;
	Viendocuenta[playerid] = 0;                 LocalOOC[playerid] = 0;             PosibleFlood[playerid] = 0;			OwnableCarOffer[playerid] = 999;
	OwnableCarID[playerid] = 999; 				OwnableCarPrice[playerid] = 0; 		BlindFold[playerid] = 0;            CraftMats[playerid] = 0;
	AdminDuty[playerid] = 0; 					PlayerNeedsHelp[playerid] = 0; 		IsSmoking[playerid] = 0;            Speedlimit[playerid] = 0;
	HelpingNewbie[playerid] = 999;				RadioOn[playerid] = 0;              JugadorFac[playerid] = 0;           ColorAdmin[playerid] = 99;
	NewUsed[playerid] = 0; 						gRadio[playerid] = 1;				slotselection[playerid] = 0;		JobDuty[playerid] = 0;
	PuedeP[playerid] = 0; 						PuedeD[playerid] = 0;				TelfRob[playerid] = 0;      		duda[playerid] = 0;
	Facturing[playerid] = 0; 					fPay[playerid] = 0; 				fDest[playerid] = 0; 				fFacturer[playerid] = 0;
	Refueling[playerid] = -1;					courtjail[playerid] = 0;    		RequestingBackup[playerid] = 0; 	PlayersChannel[playerid] = 999;
	TaxiOnDuty[playerid] = 0;                   TaxiTarifa[playerid] = 0;           TaxiTiempo[playerid] = 0;           TaxiCliente[playerid] = -1;
	TransferNroAcc[playerid] = -1; 				TransferTo[playerid] = -1; 			TransferMoney[playerid] = -1;       TaxiDriver[playerid] = -1;
	Lineas[playerid] = 0; 						Carnada[playerid] = 0;				MedicAccepted[playerid] = 999;		MedicCallTime[playerid] = 0;
	RegText[playerid] = 0;						RegConfig[playerid] = 0;			HidePM[playerid] = 0; 				PhoneOnline[playerid] = 0;
	FishCount[playerid] = 0;					UsedFind[playerid] = 0;				FreezeLast[playerid] = 0; 			MoneyMessage[playerid] = 0;
	Condom[playerid] = 0; 						LoadTruckTime[playerid] = 0; 		TruckDeliver[playerid] = 0; 		TruckUsed[playerid] = INVALID_VEHICLE_ID;
	LiveOffer[playerid] = 999;					TakingLesson[playerid] = 0;         RStep[playerid] = 0;                LoadTruckBar[playerid] = INVALID_BAR_ID;
	PlayerCuffedTime[playerid] = 0; 			TazerTimeout[playerid] = 0; 		pTazer[playerid] = 0; 				pTazerReplace[playerid] = 0;// tazer
	advisorchat[playerid] = 1;                  TalkingLive[playerid] = INVALID_PLAYER_ID;                              PlayerPressedJump[playerid] = 0;
	Ipadon[playerid] = 0;                       OnDuty[playerid] = 0;               arr_Towing[playerid] = INVALID_VEHICLE_ID;
	Muted[playerid] = 0;                        pCurrentWeapon[playerid] = 0;       DrugFarming[playerid] = 0;          gPlayerCheckpointStatus[playerid] = 0;
	TutStep[playerid] = 0;                      gPlayerAnimLibsPreloaded[playerid] = 0;                                 TaxiCosto[playerid] = 0;
	MatsOffer[playerid] = 999;                  MatsPrice[playerid] = 0;            MatsAmount[playerid] = 0;           gPlayerUsingLoopingAnim[playerid] = 0;
	EventLastInt[playerid] = 0;         		EventLastVW[playerid] = 0;			Mobile[playerid] = -1;              IsaRent[playerid] = 0;
	GuardOffer[playerid] = 999;                 GuardPrice[playerid] = 0;           JetPack[playerid] = 0;              MechanicCallTime[playerid] = 0;
	CurrentMoney[playerid] = 0;                 EMSAccepted[playerid] = 999;        EMSCallTime[playerid] = 0;          RefillOffer[playerid] = 499;
	RepairCar[playerid] = 0;                    RepairOffer[playerid] = 999;        RepairPrice[playerid] = 0;          PlayerDuda[playerid] = 0;
	RefillPrice[playerid] = 0;                  GoChase[playerid] = 999;            GetChased[playerid] = 999;          format(QFA[playerid],24,"Nadie");
	InviteOffer[playerid] = 999;                InviteFaction[playerid] = 0;        InviteFamily[playerid] = 255;       CraftId[playerid] = 0;
	GunOffer[playerid] = 999;                   GunMats[playerid] = 0;              GunId[playerid] = 0;                CraftOffer[playerid] = 999;
	VehicleOffer[playerid] = 999;               VehiclePrice[playerid] = 0;         VehicleId[playerid] = -1;           HitToGet[playerid] = 999;
	HouseOffer[playerid] = 999;                 HousePrice[playerid] = 0;           House[playerid] = -1;               HitOffer[playerid] = 999;
	JailPrice[playerid] = 0;                    duda[playerid] = 3;                 Unspec[playerid][sLocal] = 255;     CommandSpamUnmute[playerid] = 0;
	PlayerDrunkTime[playerid] = 0;           	PlayerDrunk[playerid] = 0;          Editing[playerid] = 0;              CommandSpamTimes[playerid] = 0;
	Blinded[playerid] = 0; 						Tied[playerid] = 0;                 RulesTime[playerid] = 0;            ShowRules[playerid] = 0;
	MBasura[playerid] = false;                  RBasura[playerid] = false;          CBasura[playerid] = INVALID_PLAYER_ID;
	RutaBasura[playerid] = 0;                   CheckBasura[playerid] = 0;          PlayerSurfing[playerid] = 0;        AdvertenciaAviso[playerid] = false;
	TaxiCallReady[playerid] = -1;
	new ex;
	while(ex < 13)
	{
		Info[playerid][pWeapons][ex] = 0;
		Info[playerid][pMunicion][ex] = 0;
		ex++;
	}
	ex = 0;
	while(ex < 5)
	{
		Info[playerid][pPlayerVehiclesID][ex] = 0;
		ex++;
	}
	ex = 0;
	while(ex < 6)
	{
	    EventFloats[playerid][ex] = 0.0;
	    ex++;
	}
	//Player Variables
	Info[playerid][pRolPuntos] = 0;				Info[playerid][pLevel] = 0;					Info[playerid][pAdmin] = 0;			Info[playerid][pFactionModerator] = 0;
	Info[playerid][pHelper] = 0;           		Info[playerid][pBanAppealer] = 0;
	Info[playerid][pConnectTime] = 0;			Info[playerid][pReg] = 0;					Info[playerid][pSex] = 0;           Info[playerid][pVIPInviteDay] = 0;
	Info[playerid][pAge] = 0;                   Info[playerid][pStaffManager] = 0;			Info[playerid][pExp] = 0;			Info[playerid][pMoneyBank] = 0;
	Info[playerid][pPinBank] = -1;				Info[playerid][pNrCuenta] = 0;				Info[playerid][pDeaths] = 0;		Info[playerid][pArrested] = 0;
	Info[playerid][pJailAdmin] = 0; 			Info[playerid][pOrder] = 0;					Info[playerid][pTempVIP] = 0; 		Info[playerid][pBuddyInvited] = 0;
	Info[playerid][pJob2] = 0;					Info[playerid][pTypeSpawn] = 0;				Info[playerid][pShopTech] = 0;		Info[playerid][pEstado] = 0;
	Info[playerid][pVIPDateM] = -1;				Info[playerid][pVIPDateD] = -1;				Info[playerid][pRegalo] = -1;		Info[playerid][pTaxDeuda] = 0;
	Info[playerid][pTimePayDay] = 0;			Info[playerid][pLottoNr] = 0;				Info[playerid][pJob] = 0;			Info[playerid][pDudaMute] = 0;
	Info[playerid][pWarn] = 0;                  Info[playerid][pCashGo] = 0;				Info[playerid][pBoombox] = 0;		Info[playerid][pVehicleKeysFrom] = INVALID_PLAYER_ID;
	Info[playerid][pWRestricted] = 0;			Info[playerid][pJailed] = 0;				Info[playerid][pJailTime] = 0;		Info[playerid][pMats] = 0;
	Info[playerid][pDrugs] = 0;					Info[playerid][pCosecha] = 0;				Info[playerid][pCrack] = 0;			Info[playerid][pPot] = 0;
	Info[playerid][pAdiccion] = 0;				Info[playerid][pPackages] = 0;				Info[playerid][pLeader] = 0;		Info[playerid][pMember] = 0;
	Info[playerid][pDivision] = 0;				Info[playerid][pFMember] = 255;				Info[playerid][pRank] = 0;          Info[playerid][pSpectating] = -1;
	Info[playerid][pChar] = 299;				Info[playerid][pHealth] = 50.0;				Info[playerid][pArmour] = 0.0;		Info[playerid][pPos_x] = 1612.3240;
	Info[playerid][pPos_y] = -2330.1670;		Info[playerid][pPos_z] = 13.5469;			Info[playerid][pInt] = 0;			Info[playerid][pSprunk] = 0;
	Info[playerid][pPnumber] = 0;				Info[playerid][pPhoneBook] = 0;				Info[playerid][pLibreta] = 0;		Info[playerid][pContactoAgendar] = 0;
	Info[playerid][pNumeroLibreta1] = 0;		Info[playerid][pNumeroLibreta2] = 0;		Info[playerid][pPalanca] = 0;		Info[playerid][pNumeroLibreta7] = 0;
	Info[playerid][pNumeroLibreta5] = 0;		Info[playerid][pNumeroLibreta6] = 0;		Info[playerid][pHideNumber] = 0;	Info[playerid][pNumeroLibreta8] = 0;
	Info[playerid][pNumeroLibreta9] = 0;		Info[playerid][pNumeroLibreta10] = 0;		Info[playerid][pPhousekey]= -1;     Info[playerid][pRequestingBackup] = 0;
	Info[playerid][pCarLic] = 0;				Info[playerid][pFlyLic] = 0;				Info[playerid][pBoatLic] = 0;		Info[playerid][pNumeroLibreta3] = 0;
	Info[playerid][pGafas] = 0;					Info[playerid][pTut] = 0;					Info[playerid][pLighter] = 0;       Info[playerid][pNumeroLibreta4] = 0;
	Info[playerid][pCigarettes] = 0;			Info[playerid][pMask] = 0;					Info[playerid][pMaskuse] = 0;       Info[playerid][pAdminDuty] = 0;
	Info[playerid][pSpeaker] = 0;				Info[playerid][pBanned] = 0;				Info[playerid][pDisabled] = 0;		Info[playerid][pBlockBug] = 0;
	new dni = 100000 + random(899999);			Info[playerid][pDNI] = dni;					Info[playerid][pArmsSkill] = 0;		Info[playerid][pTruckSkill] = 0;
	Info[playerid][pSmugSkill] = 0;				Info[playerid][pDrugsSkill] = 0;			Info[playerid][pPaintTokens] = 0;   Info[playerid][pPaintTeam] = 0;
	Info[playerid][pWantedLevel] = 0;			Info[playerid][pRenting] = -1				;Info[playerid][p_Pr_Money] = 0;	Info[playerid][p_Pr_Time] = 0;
	Info[playerid][pRob] = 0;					Info[playerid][pVIP] = 0;					Info[playerid][pBanDuda] = 0;		Info[playerid][pRMuted] = 0;
	Info[playerid][pRMutedTotal] = 0;			Info[playerid][pRMutedTime] = 0;			Info[playerid][pPasaporte] = 0;		Info[playerid][pRadio] = 0;
	Info[playerid][pRadioFreq] = 0;				Info[playerid][pIpadMusic] = 0;				Info[playerid][pCansancioNN] = 0;   Info[playerid][pOrinaNN] = 0;
	Info[playerid][pHambreNN] = 0;              Info[playerid][pWTimer] = -1;               Info[playerid][pSpraycan] = 0;      Info[playerid][pLockCar] = INVALID_VEHICLE_ID;
	Info[playerid][pVIPCHAT] = 0;               Info[playerid][pCoinsVip] = 0;  			Info[playerid][pCoinsPIN] = 0;      Info[playerid][pBeingSentenced] = 0;
	Info[playerid][pServiceTime] = 0; 			Info[playerid][pTriageTime] = 0;			Info[playerid][pTaxiLicense] = 0;	Info[playerid][pLock] = 0;
	Info[playerid][pHead] = 0; 					Info[playerid][pVehicleKeys] = -1;			Info[playerid][pCHits] = 0;			Info[playerid][pFHits] = 0;
	Info[playerid][pJudgeJailTime] = 0;			Info[playerid][pJudgeJailType] = 0;			Info[playerid][pGunLic] = 0;		Info[playerid][pProbationTime] = 0;
	Info[playerid][pWExists] = 0;				Info[playerid][pWX] = 0;					Info[playerid][pWY] = 0;			Info[playerid][pWZ] = 0;
	Info[playerid][pWZ2] = 0;					Info[playerid][pWVW] = 0;					Info[playerid][pWInt] = 0;			Info[playerid][pWValue] = -1;
	Info[playerid][pWSeeds] = 0;				Info[playerid][pGBloq] = 0;					Info[playerid][pADMute] = 0;		Info[playerid][pADMuteTotal] = 0;
	Info[playerid][pFishSkill] = 0;				Info[playerid][pFishes] = 0;				Info[playerid][pBiggestFish] = 0;	Info[playerid][pADTime] = 0;
	Info[playerid][pGTokens] = 0;				Info[playerid][pDobleExp] = 0;				Info[playerid][pAdverID] = -1;      Info[playerid][pTimePlay] = 0;
	Info[playerid][pScrewdriver] = 0;           Info[playerid][pFirstaid] = 0;				Info[playerid][pSurveillance] = 0;  Info[playerid][pTempName] = 0;
	Info[playerid][pMoneyBankT] = 0;			Info[playerid][pBorrowedMoney] = 0;			Info[playerid][pFeesBank] = 0;
	format(Info[playerid][pAcento], 40, "Latino");
	format(Info[playerid][pAgenda1], 40, "Ninguno");
	format(Info[playerid][pAgenda2], 40, "Ninguno");
	format(Info[playerid][pAgenda3], 40, "Ninguno");
	format(Info[playerid][pAgenda4], 40, "Ninguno");
	format(Info[playerid][pAgenda5], 40, "Ninguno");
	strmid(Info[playerid][pAntecedente1], "Ninguno", 0,strlen("Ninguno"), 12);
	strmid(Info[playerid][pAntecedente2], "Ninguno", 0,strlen("Ninguno"), 12);
	strmid(Info[playerid][pAntecedente3], "Ninguno", 0, strlen("Ninguno"), 12);
	format(Info[playerid][pAutoTextReply], 64, "Nada");
	format(Info[playerid][pAdminName], MAX_PLAYER_NAME, "(null)");
	GetPlayerName(playerid, Info[playerid][pNormalName], MAX_PLAYER_NAME);
	format(Info[playerid][pContractBy], 32, "");
	format(Info[playerid][pContractDetail], 64, "");
	format(Info[playerid][pWarrant], 128, "");
	ex = 0;
	while(ex < MAX_PLAYERTOYS)
	{
	    PlayerToyInfo[playerid][ex][ptModelID] = 0;
	    PlayerToyInfo[playerid][ex][ptBone] = 0;
	    PlayerToyInfo[playerid][ex][ptPosX] = 0.0;
	    PlayerToyInfo[playerid][ex][ptPosY] = 0.0;
	    PlayerToyInfo[playerid][ex][ptPosZ] = 0.0;
	    PlayerToyInfo[playerid][ex][ptRotX] = 0.0;
	    PlayerToyInfo[playerid][ex][ptRotY] = 0.0;
	    PlayerToyInfo[playerid][ex][ptRotZ] = 0.0;
	    PlayerToyInfo[playerid][ex][ftscaleX] = 1;
	    PlayerToyInfo[playerid][ex][ftscaleY] = 1;
	    PlayerToyInfo[playerid][ex][ftscaleZ] = 1;
	    ex++;
	}
	return true;
}

public OnPlayerDisconnect(playerid, reason)
{
    HideNecesidades(playerid);
	KillTimer(TimerDurmiendo[playerid]);
	KillTimer(TimerMuriendoHambre[playerid]);
	if(RobarTiempo[playerid] > 0)
 	{
 		GivePlayerCash(playerid, -DineroRobado[playerid]);
 		DineroRobado[playerid] = 0;
 		RobarTiempo[playerid] = -1;
 		KillTimer(RobarTiempoTimer[playerid]);
 	}
    GuardarArmas(playerid);
	new plname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, plname, sizeof(plname));
	if(!strcmp(plname, "BannedPlayer", true)) return 1;
	if(!strcmp(plname, "InvalidNick", true)) return 1;
	if(playerid == MAX_PLAYERS) return 1;
	if(Info[playerid][pTempName] == 1)
	{
		SetPlayerName(playerid, Info[playerid][pNormalName]);
	    Info[playerid][pTempName] = 0;
	}
	GetPlayerPos(playerid, Info[playerid][pPos_x], Info[playerid][pPos_y], Info[playerid][pPos_z]);
	foreach(Player, x)
	{
		if(Info[x][pSpectating] == playerid)
		{
			Info[x][pSpectating] = -1;
			TogglePlayerSpectating(x, false);
			SetCameraBehindPlayer(x);
			SetPlayerPos(x, Info[x][pPos_x], Info[x][pPos_y], Info[x][pPos_z]);
			SetPlayerInterior(x, Info[x][pInt]);
			SetPlayerVirtualWorld(x, Info[x][pVW]);
			SendClientMessageEx(x, COLOR_GREY, "* El jugador que estabas espectando se desconectó del servidor.");
		}
	}
    if(GetPVarType(playerid, "PlacedBB"))
    {
        DestroyDynamicObject(GetPVarInt(playerid, "PlacedBB"));
        DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "BBLabel"));
        if(GetPVarType(playerid, "BBArea"))
        {
            foreach(Player,i)
            {
                if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
                {
                    StopAudioStreamForPlayer(i);
                    SendClientMessage(i, COLOR_GREY, "(( El propietario del Estereo se ha desconectado ))");
                }
            }
        }
    }
	if(GetPVarType(playerid, "MusicaOn"))
    {
        if(GetPVarType(playerid, "MusicaArea"))
        {
            foreach(Player,i)
            {
                if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "MusicaArea")))
                {
                    StopAudioStreamForPlayer(i);
					SendClientMessage(i, COLOR_GREY, "* El DJ ha salido de el servidor");
                }
            }
			DeletePVar(playerid, "MusicaStation");
			DeletePVar(playerid, "MusicaOn");
			DeletePVar(playerid, "MusicaArea");
        }
    }
	if(Info[playerid][pWExists] == 1)
	{
		WeedLogout(playerid);
	}
	if(pTazer[playerid] == 1) GivePlayerValidWeapon(playerid, pTazerReplace[playerid], pTazerMunicion[playerid]);
	if(GetPVarInt(playerid, "SpeedRadar") == 1) GivePlayerValidWeapon(playerid, GetPVarInt(playerid, "RadarReplacement"), GetPVarInt(playerid, "RadarMunicion"));
	if(GetPVarInt(playerid, "Injured") == 1)
	{
	    Info[playerid][pHospital] = 1;
	    KillEMSQueue(playerid);
	    ResetPlayerWeaponsEx(playerid);
	}
	if(Info[playerid][pLockCar] != INVALID_VEHICLE_ID)
	{
		vehicle_unlock_doors(Info[playerid][pLockCar]);
	}
	switch (reason)
	{
	   	case 0:
	   	{
		   	format(szMessage, sizeof(szMessage), ""COL_WHITE"[ %s salio del servidor ] "COL_WHITE"("COL_BLUE"Crash"COL_WHITE")", GetPlayerNameEx(playerid));
		   	NearMsg(playerid, COLOR_GRAD1, szMessage,8.0);
		   	if(Info[playerid][pEstado] == 2)
		   	{
	            Info[playerid][pJailed] = 1;
				Info[playerid][pJailTime] += 20*60;
			}
	   	}
	   	case 1:
	  	{
		   	format(szMessage, sizeof(szMessage), ""COL_WHITE"[ %s salio del servidor ] "COL_BLUE"Voluntad propia"COL_WHITE"", GetPlayerNameEx(playerid));
		   	NearMsg(playerid, COLOR_GRAD1, szMessage,8.0);
		   	if(Info[playerid][pEstado] == 2)
		   	{
	            Info[playerid][pJailed] = 1;
				Info[playerid][pJailTime] += 20*60;
			}
		}
		case 2:
	    {
			format(szMessage, sizeof(szMessage), "[ %s salio del servidor ] "COL_BLUE"Expulsado"COL_WHITE"", GetPlayerNameEx(playerid));
			NearMsg(playerid, COLOR_GRAD1, szMessage,8.0);
	   	}
	}
	if(InfoEvento[EventRequest] == playerid)
	{
	    InfoEvento[EventRequest] = 999;
		ABroadCast( COLOR_GENERAL, ""COL_BLUE"Administración >"COL_WHITE" El jugador que estaba solicitando un evento se ha desconectado/crashed.", 4 );
	}
	if(InfoEvento[EventCreator] == playerid)
	{
	    InfoEvento[EventCreator] = 999;
		ABroadCast( COLOR_GRAD1, ""COL_BLUE"Administración >"COL_WHITE" El jugador que creó el evento se ha desconectado/crashed.", 4 );
	}
	if(InfoEvento[EventStaff][0] == playerid)
	{
	    InfoEvento[EventStaff][0] = 999;
	}
	else if(InfoEvento[EventStaff][1] == playerid)
	{
	    InfoEvento[EventStaff][1] = 999;
	}
	else if(InfoEvento[EventStaff][2] == playerid)
	{
	    InfoEvento[EventStaff][2] = 999;
	}
	else if(InfoEvento[EventStaff][3] == playerid)
	{
	    InfoEvento[EventStaff][3] = 999;
	}
	else if(InfoEvento[EventStaff][4] == playerid)
	{
	    InfoEvento[EventStaff][4] = 999;
	}
	if(GetPVarInt(playerid, "IsInArena") == 1)
	{
	    PaintballDisconnect(playerid);
		Info[playerid][pPos_x] = GetPVarFloat(playerid, "pbOldX");
		Info[playerid][pPos_y] = GetPVarFloat(playerid, "pbOldY");
		Info[playerid][pPos_z] = GetPVarFloat(playerid, "pbOldZ");
		Info[playerid][pInt] = GetPVarInt(playerid, "pbOldInt");
		Info[playerid][pVW] = GetPVarInt(playerid, "pbOldVW");
		Info[playerid][pHealth] = GetPVarFloat(playerid, "pbOldHealth");
		Info[playerid][pArmour] = GetPVarFloat(playerid, "pbOldArmor");
		SetHP(playerid,GetPVarFloat(playerid, "pbOldHealth"));
		GiveArmorToPlayer(playerid,GetPVarFloat(playerid, "pbOldArmor"));
	}
	else if(GetPVarInt(playerid, "EventToken") == 0)
	{
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		Info[playerid][pPos_x] = x;
		Info[playerid][pPos_y] = y;
		Info[playerid][pPos_z] = z;
		GetPlayerFacingAngle(playerid, Info[playerid][pPos_r]);
		Info[playerid][pInt] = GetPlayerInterior(playerid);
		Info[playerid][pVW] = GetPlayerVirtualWorld(playerid);
		Info[playerid][pChar] = GetPlayerSkin(playerid);
		if(Info[playerid][pChar] == 0) Info[playerid][pChar] = 299;
	}
	else if(GetPVarInt(playerid, "EventToken") == 1)
	{
	    Info[playerid][pInt] = EventLastInt[playerid];
		Info[playerid][pVW] = EventLastVW[playerid];
		Info[playerid][pChar] = Info[playerid][pChar];
		Info[playerid][pPos_r] = EventFloats[playerid][0];
		Info[playerid][pPos_x] = EventFloats[playerid][1];
		Info[playerid][pPos_y] = EventFloats[playerid][2];
		Info[playerid][pPos_z] = EventFloats[playerid][3];
	}
	else if(ShowRules[playerid] == 1)
	{
		Info[playerid][pVW] = GetPVarInt(playerid, "rOldVW");
		Info[playerid][pInt] = GetPVarInt(playerid, "rOldInt");
	    Info[playerid][pPos_x] = GetPVarFloat(playerid, "rOldX");
	    Info[playerid][pPos_y] = GetPVarFloat(playerid, "rOldY");
	    Info[playerid][pPos_z] = GetPVarFloat(playerid, "rOldZ");
	}
	if(Info[playerid][pAdverID] != -1) ClearAd(Info[playerid][pAdverID]);
	if(HireKey[playerid] != 9999)
	{
	    SetVehicleToRespawn(HireKey[playerid]);
	}
	if(Interview != 0)
	{
		if(strcmp(Interviewer,plname,true) == 0 )
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "Se canceló tu entrevista!");
		    Interviewer = "Nadie";
		    Interview = 0;
		}
	}
	if(TaxiCliente[playerid] >= 0)
	{
		if(IsPlayerConnectedEx(TaxiCliente[playerid]))
		{
	    	new giveplayeridex = TaxiCliente[playerid];
			new precio = TaxiCosto[TaxiCliente[playerid]];
			format(szMessage, sizeof(szMessage), "Taxista se desconectó, son $%d por el servicio de taxi.", precio);
			SendClientMessageEx(giveplayeridex, COLOR_WHITE, szMessage);
			GivePlayerCash(playerid, precio);
			GivePlayerCash(giveplayeridex, -precio);
			TaxiCliente[playerid] = -1;
			TaxiTiempo[giveplayeridex] = 0;
			TaxiDriver[giveplayeridex] = -1;
			TaxiCosto[giveplayeridex] = 0;
		}
	}
	if(TaxiDriver[playerid] >= 0)
	{
		if(IsPlayerConnectedEx(TaxiDriver[playerid]))
		{
	    	new giveplayeridex = TaxiDriver[playerid];
			new precio = TaxiCosto[playerid];
			format(szMessage, sizeof(szMessage), "Pasajero salió de tu taxi y ganaste $%d por el servicio de taxi.", precio);
			SendClientMessageEx(giveplayeridex, COLOR_WHITE, szMessage);
			GivePlayerCash(playerid, -precio);
			GivePlayerCash(giveplayeridex, precio);
			TaxiCliente[giveplayeridex] = -1;
			TaxiTiempo[playerid] = 0;
			TaxiDriver[playerid] = -1;
			TaxiCosto[playerid] = 0;
		}
	}
	OnPlayerSavedStats(playerid);
	ResetPlayerWeapons(playerid);
	SavePlayerVehiclesx(playerid);
	foreach(Player, i)
	{
		if(TaxiCallReady[i] == playerid)
		{
		    TaxiCallReady[i] = -1;
		    GameTextForPlayer(i, "~w~Jugador~n~~r~se desconecto", 5000, 1);
		    DisablePlayerCheckpoint(i);
		}
		if(EMSAccepted[i] == playerid)
		{
			EMSAccepted[i] = 999;
			GameTextForPlayer(i, "~w~Jugador~n~~r~se desconecto", 5000, 1);
			EMSCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
		if(MedicAccepted[i] == playerid)
		{
			MedicAccepted[playerid] = 999;
			GameTextForPlayer(i, "~w~Jugador~n~~r~se desconecto", 5000, 1);
			MedicCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
	}
	if(GotHit[playerid] > 0)
	{
		if(GetChased[playerid] < 999)
		{
			if(IsPlayerConnectedEx(GetChased[playerid]))
			{
				SendClientMessageEx(GetChased[playerid], COLOR_GRAD1, "Tu hit salio del servidor.");
				GoChase[GetChased[playerid]] = 999;
			}
		}
	}
	if(GoChase[playerid] < 999)
	{
	  GetChased[GoChase[playerid]] = 999;
	  GotHit[GoChase[playerid]] = 999;
	}
	if(GetPVarInt(playerid, "AdvisorDuty") == 1) { Advisors--; }
	if(Team_Mecanicos(playerid))
	{
		if(OnDuty[playerid] == 1) { Mechanics -= 1; }
	}
	DestroyTextDrawTutorial(playerid);
	TextDrawDestroy(VelocimetroTDP[playerid][0]);
	TextDrawDestroy(VelocimetroTDP[playerid][1]);
	DestroyProgressBar(VelocimetroBAR[playerid][0]);
	DestroyProgressBar(VelocimetroBAR[playerid][1]);
	TextDrawDestroy(InfoText[playerid]);
	return 1;
}

function MissileLaunchEx(Float:x, Float:y, Float:z, Float:radius, type)
{
	CreateExplosion(x, y, z, type, radius);
	Misile_Launcher --;
	format(szMessage, sizeof(szMessage), "** Lanzamiento detonado en %0.2f - %0.2f - %0.2f, radio %d",x,y,z,radius);
	SendRadioMessage(3, TEAM_RADIO_COLOR, szMessage);
	return 1;
}

function MissileLaunch(vehicleid)
{
	new Float:x,Float:y,Float:z;
	GetVehiclePos(vehicleid, x, y, z);
	CreateExplosion(x, y, z, 2, 10.0);  CreateExplosion(x, y, z, 2, 10.0);  CreateExplosion(x, y, z, 2, 10.0);
	Misile_Launcher --;
	format(szMessage, sizeof(szMessage), "** Lanzamiento detonado en objetivo vehículo %d",vehicleid);
	SendRadioMessage(3, TEAM_RADIO_COLOR, szMessage);
	return 1;
}

function CerrarP1Banco1() return MoveDynamicObject(puertasbanco1[0],1438.0670, -992.9431, 995.1141,4);

function CerrarP2Banco1() return MoveDynamicObject(puertasbanco1[1],1438.1071, -1002.6318, 995.1141,4);

function peaje1() return SetDynamicObjectRot(pea1, 0.00000000,91.00015259,341.50000000);

function peaje3() return SetDynamicObjectRot(pea3, 0.00000000,90.50006104,34.25000000);

function peaje4() return SetDynamicObjectRot(pea4, 0.00000000,270.00000000,37.99621582);

function peaje2() return SetDynamicObjectRot(pea2, 0.00546265,268.75024414,339.49902344);

function peaje5() return SetDynamicObjectRot(pea5, 0.01754761,90.49975586,344.99993896);

function peaje6() return SetDynamicObjectRot(pea6, 359.96047974,269.00064087,345.24826050);

function peaje7() return SetDynamicObjectRot(pea7, 0.0000, 270.0000, 265.1184);

function peaje8() return SetDynamicObjectRot(pea8, 0.0000, 270.0000, 84.4490);

function CloseCourtGate1() return MoveDynamicObject(courtgates[0],2138.00000000,1316.72106934,7698.23632812,4);

function CloseCourtGate2() return MoveDynamicObject(courtgates[1],2138.00292969,1290.96386719,7698.24169922,4);

function CloseCell1() return MoveDynamicObject(fen1,1417.90002441,-1554.90002441,4334.70019531,4);

function CloseCell2() return MoveDynamicObject(fen2,1425.90002441,-1555.00000000,4334.70019531,4);

function CloseCell3() return MoveDynamicObject(fen3,1429.50000000,-1554.80004883,4334.70019531,4);

function CloseCell4() return MoveDynamicObject(fen4,1422.19995117,-1567.00000000,4334.60009766,4);

function CloseCell5() return MoveDynamicObject(fen6,1430.19995117,-1566.69995117,4334.70019531,4);

function CloseCell6() return MoveDynamicObject(fen5,1414.80004883,-1566.69995117,4334.60009766,4);

function GateClose(playerid)
{
	MoveDynamicObject(pdgate1,1589.053344,-1638.123168,14.122960, 0.97);
  	PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
  	return 1;
}

function GateClose4() return MoveDynamicObject(hospitalgate,1141.40002441,-1293.69995117,15.39999962, 1.5);

function GateClose5() return MoveDynamicObject(pdgate2, 1545.90002441,-1627.80004883,16.29999924, 3.0);

function GateCloseCNN() return MoveDynamicObject(tvp, 781.77209500,-1330.31884800,12.68660500,5.0);

function CloseHitman() return MoveDynamicObject(hitman, -283.8739, -2190.3965, 30.4236,5.0);

function OpenDoorNG3() return MoveDynamicObject(saem3, 2720.218505,-2405.194580,16.481236,5.0);

function GateCloseCNN1() return MoveDynamicObject(tvp1, 774.11425781,-1384.98632812,12.92022705,5.0);

function reja1rusa() return MoveDynamicObject(rusa1,659.65, -1227.13, 17.70, 1.5);

function reja2rusa() return MoveDynamicObject(rusa2,664.91, -1309.20, 15.31, 1.5);

function reja3rusa()
{
  MoveDynamicObject(rusa3,785.31, -1152.45, 25.37, 1.5);
  return 1;
}

function rejalcn() return MoveDynamicObject(lcnpuerta,1426.85, -1885.90, 15.28, 1.5);

function GateCloseGob() return MoveDynamicObject(gobiernogate, 1390.39941406,-1649.69921875,16.29999924,5.0);

function GateCloseGob1() return MoveDynamicObject(gobiernogate1, 1391.29980469,-1629.89941406,12.52500343,5.0);

function depositogate() return MoveDynamicObject(depgate, 1619.69995117,-1852.59997559,12.50000000, 2.5);

SetPlayerSpawn(playerid)
{
if(IsPlayerConnectedEx(playerid))
{
    SetPlayerSkin(playerid, Info[playerid][pChar]);
	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid, x, y, z);
	if(x == 0.0 && y == 0.0 && z == 0.0)
	{
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid, 1715.1201,-1903.1711,13.5665);
		SetPlayerFacingAngle(playerid, 359.4621);
		SetCameraBehindPlayer(playerid);
	}
    if(GetPVarInt(playerid, "IsInArena") == 1)
	{
		SpawnPaintballArena(playerid);
		return 1;
 }
    if(Info[playerid][pReg] == 0)
    {
		SetTimerEx("FreezePlayer", 1000, false, "i", playerid);
		gNewbie[playerid]=1; gOoc[playerid] = 1; gNews[playerid] = 1; gFam[playerid] = 1;
		new vwper;
		vwper = (3000 + playerid);
		TogglePlayerControllable(playerid, 0);
        ClearChatbox(playerid);
		SetPlayerPos(playerid, 2224.10, -1142.24, 1025.79);
		SetPlayerInterior(playerid, 15);
		SetPlayerVirtualWorld(playerid, vwper);
		SetPlayerCameraPos(playerid, 2224.25, -1145.53, 1025.79);
		SetPlayerCameraLookAt(playerid, 2224.10, -1142.24, 1025.79);
		SetPlayerFacingAngle(playerid, 170);
        Info[playerid][pAge] = 18; Info[playerid][pSex] = 1;
	 	format(szDialog, sizeof(szDialog), ""COL_WHITE"Hola %s, antes de empezar tienes que ingresar la edad\nde tu personaje.\n\nMínimo 18 y Máximo 99", GetPlayerNameEx(playerid));
		ShowPlayerDialog(playerid, REG_AGE, DIALOG_STYLE_INPUT,""COL_GENERAL"New Paradise Roleplay - "COL_WHITE"1/4", szDialog,">","");
	   
		return 1;
    }
    if(Info[playerid][pTut] == 0)
    {
        ClearChatbox(playerid);
        SetPlayerVirtualWorld(playerid, playerid); Info[playerid][pReg] = 1;
	    TutStep[playerid] = 1;
		TutTime[playerid] = 13;
		Tutorial_Inside(playerid);

		return 1;
	}

	new rand;
	if(Info[playerid][pBeingSentenced] > 0)
	{
	    PhoneOnline[playerid] = 1;
	    rand = random(sizeof(WarrantJail));
		SetPlayerPos(playerid, WarrantJail[rand][0], WarrantJail[rand][1], WarrantJail[rand][2]);
		if(rand != 0) courtjail[playerid] = 2;
		else courtjail[playerid] = 1;
		LoadObjects(playerid);
		SetPlayerInterior(playerid, 0);
		Info[playerid][pInt] = 0;
		return 1;
	}
	switch(Info[playerid][pJailed])
	{
	    case 1:
	    {
	    	Info[playerid][pEstado] = 0;
		    PhoneOnline[playerid] = 1;
		    SetPlayerInterior(playerid, 0);
			rand = random(sizeof(OOCJail));
			LoadObjects(playerid);
			SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
			SetPlayerVirtualWorld(playerid, 1000);
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "Estás en la prisión federal, espera acabar tu condena.");
			SetPlayerColor(playerid,TEAM_GREEN_COLOR);
			return 1;
	    }
	    case 2:
	    {
		    PhoneOnline[playerid] = 1;
		    rand = random(sizeof(SAPDPrisonSpawns));
		    SetPlayerPos(playerid, SAPDPrisonSpawns[rand][0], SAPDPrisonSpawns[rand][1], SAPDPrisonSpawns[rand][2]);
		    LoadObjects(playerid);
			SetPlayerToTeamColor(playerid);
			Info[playerid][pInt] = 10;
			SetPlayerInterior(playerid, 10);
			Info[playerid][pVW] = 500;
			SetPlayerVirtualWorld(playerid, 500);
			return 1;
	    }
	    case 3:
	    {
			LoadObjects(playerid);
		    PhoneOnline[playerid] = 1;
			SetPlayerInterior(playerid, 1);
			Info[playerid][pVW] = 600;
			Info[playerid][pInt] = 1;
			SetPlayerVirtualWorld(playerid, 600);
			SetPlayerInterior(playerid, 1);
			SetPlayerPos(playerid,315.1677,-1451.5564,-33.5292);
			return 1;
	    }
	    case 4:
	    {
		    PhoneOnline[playerid] = 1;
		    Info[playerid][pInt] = 0;
			rand = random(sizeof(OOCJail));
			LoadObjects(playerid);
			SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
			SetPlayerVirtualWorld(playerid, 1000);
			SetPlayerInterior(playerid, 0);
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "Un administrador te pusó en prisión cuando estabas OFF-Line, razón: Reporte en el Foro o Evasión de ROL.");
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "Nota: Si crees que fue un error solicita a un administrador inmediatamente.");
			SetPlayerToTeamColor(playerid);
			return 1;
	    }
	    case 5:
	    {
		    PhoneOnline[playerid] = 1;
	  		LoadObjects(playerid);
			SetPlayerInterior(playerid, 0);
			Info[playerid][pInt] = 0;
			rand = random(sizeof(ICPrisonSpawns));
			SetPlayerPos(playerid, ICPrisonSpawns[rand][0], ICPrisonSpawns[rand][1], ICPrisonSpawns[rand][2]);
			SetPlayerVirtualWorld(playerid, 1000);
			SetPlayerSkin(playerid, 50);
			SetPlayerColor(playerid, TEAM_ORANGE_COLOR);
			return 1;
	    }
	    case 6:
	    {
	    	PhoneOnline[playerid] = 1;
			SetPlayerInterior(playerid, 5);
			Info[playerid][pInt] = 5;
			rand = random(sizeof(PrisonDillmore));
			SetPlayerPos(playerid, PrisonDillmore[rand][0], PrisonDillmore[rand][1], PrisonDillmore[rand][2]);
			SetPlayerVirtualWorld(playerid, 400);
			SetPlayerColor(playerid, TEAM_ORANGE_COLOR);
			return 1;
	    }
	    case 0: { }
	}
	if(GetPVarInt(playerid, "EventToken") == 1)
	{
	    DeletePVar(playerid, "EventToken");
	    SetPlayerWeapons(playerid);
	    SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
		//Info[playerid][pInterior] = Info[playerid][pInt];
		SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
		SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
		SetPlayerInterior(playerid,EventLastInt[playerid]);
		SetHP(playerid, EventFloats[playerid][4]);
		GiveArmorToPlayer(playerid, EventFloats[playerid][5]);
		for(new i = 0; i < 6; i++)
		{
		    EventFloats[playerid][i] = 0.0;
		}
		EventLastVW[playerid] = 0;
		EventLastInt[playerid] = 0;
		return 1;
	}
	for(new i; i < 5; i++)
	{
	    if(InfoEvento[EventStaff][i] == playerid)
	    {
	        SetPlayerWeapons(playerid);
		    SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
			//Info[playerid][pInterior] = Info[playerid][pInt];
			SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
			SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
			SetPlayerInterior(playerid,EventLastInt[playerid]);
			SetHP(playerid, EventFloats[playerid][4]);
			GiveArmorToPlayer(playerid, EventFloats[playerid][5]);
			for(new d = 0; d < 6; d++)
			{
			    EventFloats[playerid][d] = 0.0;
			}
			EventLastInt[playerid] = 0;
			EventLastVW[playerid] = 0;
			InfoEvento[EventStaff][i] = 999;
	    }
	}
	if(GetPVarInt(playerid, "FirstSpawn") == 2 && GetPVarInt(playerid, "Injured") == 1)
	{
	    SendEMSQueue(playerid,1);
	    return 1;
	}
	if(GetPVarInt(playerid, "FirstSpawn") == 1 && GetPVarInt(playerid, "Hospital") != 0)
	{
	    DeletePVar(playerid, "Hospital");
		if(Info[playerid][pTypeSpawn] == 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "El staff de SAMD confiscó las armas y lo ilegal que tenias.");
			SendClientMessageEx(playerid, COLOR_GRAD1, "VIP: Te llevaron a tu casa por la caracteristica Platinum activada.");
			for(new i = 0; i < sizeof(HouseInfo); i++)
            {
				if(Info[playerid][pPhousekey] == i)
				{
					Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
					SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
					LoadObjects(playerid);
					SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
					GameTextForPlayer(playerid, "~w~Bienvenido a Casa", 5000, 1);
					Info[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
					Info[playerid][pVW] = i+6000;
					SetPlayerVirtualWorld(playerid, i+6000);
				}
			}
			ResetPlayerWeaponsEx(playerid);
			return 1;
		}
 		if(RobarTiempo[playerid] > 0)
        {
            SendClientMessageEx(playerid, COLOR_GREY, "Nota: Has resultado herido en un intento de robo al banco, la policia te ha quitado el dinero.");
            GivePlayerCash(playerid, -DineroRobado[playerid]);
            DineroRobado[playerid] = 0;
            RobarTiempo[playerid] = -1;
            KillTimer(RobarTiempoTimer[playerid]);
		    return 1;
        }
	    if(Info[playerid][pWantedLevel] > 0)
	    {
	        Info[playerid][pJailed] = 2; Info[playerid][pJailTime] = 15*60; GivePlayerCash(playerid, -1000);
	        Tax += 1000;
	    	SendClientMessageEx(playerid, COLOR_WHITE, "Figuras como sospechoso es el sistema del gobierno.");
	    	SendClientMessageEx(playerid, COLOR_WHITE, "Estás en la prisión federal de los santos.");
	    	SendClientMessageEx(playerid, COLOR_WHITE, "Tienes una condena de 15 días. (15 minutos)");
			SetPlayerColor(playerid,TEAM_GREEN_COLOR);
			SetPlayerInterior(playerid, 10);
			Info[playerid][pInt] = 10;
	    	rand = random(sizeof(SAPDPrisonSpawns));
	    	SetPlayerPos(playerid, SAPDPrisonSpawns[rand][0], SAPDPrisonSpawns[rand][1], SAPDPrisonSpawns[rand][2]);
	    	LoadObjects(playerid);
			StopAudioStreamForPlayer(playerid);
			ResetPlayerWeaponsEx(playerid);
	    	return 1;
	    }
	    else
	    {
			SetPlayerCameraPos(playerid, 1207.39, -1294.71, 24.61);
			SetPlayerCameraLookAt(playerid, 1181.72, -1322.65, 13.58);
            SetPosEx(playerid, 1175.3918,-1323.8729,14.3906,266.9758,0,playerid);
			SendClientMessageEx(playerid, COLOR_WHITE,"Parte médico: Perdiste el conocimiento y te hemos traido al hospital, por suerte has logrado recuperarte, puedes irte.");SetTimerEx("HospitalFun", 15000, false, "i", playerid); StopAudioStreamForPlayer(playerid);
	      	ResetPlayerWeaponsEx(playerid);
	  		return 1;
	  	}
	}
    if(GetPVarInt(playerid, "FirstSpawn") == 1 && GetPVarInt(playerid, "Hospital") == 0)
	{
		SetPlayerPos(playerid,Info[playerid][pPos_x],Info[playerid][pPos_y],Info[playerid][pPos_z]);
		SetPlayerVirtualWorld(playerid, Info[playerid][pVW]);
		SetPlayerFacingAngle(playerid, Info[playerid][pPos_r]);
    	SetPlayerInterior(playerid,Info[playerid][pInt]);
    	SetHP(playerid, Info[playerid][pHealth]);
		GiveArmorToPlayer(playerid, Info[playerid][pArmour]);
		SetCameraBehindPlayer(playerid);
		if(Info[playerid][pInt] > 0 || Info[playerid][pVW] > 0)
		{
		    //SendClientMessageEx(playerid, COLOR_WHITE, "Te desconectaste en un interior, y están cargando los objetos, espera un momento por favor.");
			LoadObjects(playerid);
		}
	    return 1;
	}
	SetPlayerToTeamColor(playerid);
}
return 1;
}

function firstaid5(playerid){
if(GetPVarInt(playerid, "usingfirstaid") == 1){
	new Float:health;
	GetPlayerHealth(playerid, health);
	if(health < 100.0){
	    if((health+5.0) <= 100.0) { SetHP(playerid, health+5.0); }
	}
}
}
function firstaidexpire(playerid)
{
	SendClientMessageEx(playerid, COLOR_WHITE, "Tu kit de primeros auxilos ya no te hará efecto.");
	KillTimer(GetPVarInt(playerid, "firstaid5"));
	SetPVarInt(playerid, "usingfirstaid", 0);
}
//------------------------------------------------------------------------------------------------------

public OnPlayerDeath(playerid, killerid, reason)
{

if(IsPlayerConnectedEx(killerid) && GetPVarInt(playerid, "IsInArena") == 0)
{
    format(QFA[playerid],24,"%s",GetPlayerNameEx(killerid));
}
if(pTazer[playerid] == 1) { GivePlayerValidWeapon(playerid, pTazerReplace[playerid], pTazerMunicion[playerid]); pTazer[playerid] = 0; }
if(GetPVarInt(playerid, "SpeedRadar") == 1) { GivePlayerValidWeapon(playerid, GetPVarInt(playerid, "RadarReplacement"), GetPVarInt(playerid, "RadarMunicion")); DeletePVar(playerid, "SpeedRadar"); }
PLuces[playerid] = 0;
Info[playerid][pArmour] = 0.0;
PlayerDrunk[playerid] = 0;
PlayerDrunkTime[playerid] = 0;
DeletePVar(playerid, "SpeedRadar");
DeletePVar(playerid, "UsingSprunk");
KillTimer(GetPVarInt(playerid, "firstaid5"));
DeletePVar(playerid, "usingfirstaid");
GuardarArmas(playerid);
foreach(Player, i)
{
	if(EMSAccepted[i] < 999)
	{
		if(EMSAccepted[i] == playerid)
		{
 			EMSAccepted[i] = 999;
   			GameTextForPlayer(i, "~w~Paciente~n~~r~ha muerto", 5000, 1);
        	EMSCallTime[i] = 0;
        	DisablePlayerCheckpoint(i);
		}
	}
}
for(new x;x<MAX_PLAYERTOYS;x++) RemovePlayerAttachedObject(playerid, x);
new Float:px,Float:py,Float:pz;
if(GetPVarInt(playerid, "EventToken") == 0)
{
	if(GetPVarInt(playerid, "IsInArena") == 0)
	{
		SetPVarInt(playerid, "Injured", 1);
		SetPVarInt(playerid, "FirstSpawn", 2);
		new Float:mX, Float:mY, Float:mZ;
		GetPlayerPos(playerid, mX, mY, mZ);
		SetPVarFloat(playerid, "MedicX", mX);
		SetPVarFloat(playerid, "MedicY", mY);
		SetPVarFloat(playerid, "MedicZ", mZ);
		SetPVarInt(playerid, "MedicVW", GetPlayerVirtualWorld(playerid));
		SetPVarInt(playerid, "MedicInt", GetPlayerInterior(playerid));
	}
}
gPlayerSpawned[playerid] = 0;
if(GetPVarInt(playerid, "IsInArena") == 1){
	if(reason >= 0 && reason <= 46){
	    new weapon[24];
	    Info[killerid][pKills] += 1;
		if(Info[killerid][pPaintTeam] == 1){
		    if(Info[killerid][pPaintTeam] == Info[playerid][pPaintTeam]){
		        TRedKills -= 1;
		        TBlueKills += 1;
		        SetHP(killerid, 0);
		        Info[killerid][pKills] -= 2;
		        Info[killerid][pDeaths] += 1;
	    		Info[playerid][pDeaths] -= 1;
		        SendClientMessageEx(killerid, COLOR_WHITE, "ADVERTENCIA! No mates a los de tu mismo equipo!");
		    }
		    else{
	    		TRedKills += 1;
	    		//PaintBallArena[GetPVarInt(playerid, "IsInArena")][pbTeamBlueDeaths] += 1;
			}
		}
		if(Info[killerid][pPaintTeam] == 2){
		    if(Info[killerid][pPaintTeam] == Info[playerid][pPaintTeam]){
		        TRedKills += 1;
		        TBlueKills -= 1;
		        SetHP(killerid, 0);
		        Info[killerid][pKills] -= 2;
		        Info[killerid][pDeaths] += 1;
	    		Info[playerid][pDeaths] -= 1;
		        SendClientMessageEx(killerid, COLOR_WHITE, "ADVERTENCIA! No mates a los de tu mismo equipo!");
		    }
    		TBlueKills += 1;
		}
	    GetWeaponName(reason,weapon,sizeof(weapon));
		if(reason == 0){
			Info[killerid][pPaintTokens] += 16;
			Info[playerid][pPaintTokens] -= 16;
			if(Info[playerid][pPaintTokens] < 0) Info[playerid][pPaintTokens] = 0;
		    format(szMessage,sizeof(szMessage),"[Paintball Arena] %s ganó 16 fichas de bonus por un kill a mano!",GetPlayerNameEx(killerid));
			SendPaintballArenaMessage(GetPVarInt(killerid,"ArenaMode"), COLOR_GRAD1, szMessage);
			GameTextForPlayer(playerid,"-16 fichas", 3000, 1);
			PlayerPlaySound(killerid, 1052, 0.0, 0.0, 0.0);
    		format(szMessage,sizeof(szMessage),"[Paintball Arena] %s mató a %s con sus propias manos!",GetPlayerNameEx(killerid),GetPlayerNameEx(playerid));
		}
		else{
			Info[killerid][pPaintTokens] += 8;
			Info[playerid][pPaintTokens] -= 8;
			if(Info[playerid][pPaintTokens] < 0) Info[playerid][pPaintTokens] = 0;
		    format(szMessage,sizeof(szMessage),"[Paintball Arena] %s ganó 8 fichas de bonus por un kill!",GetPlayerNameEx(killerid));
			SendPaintballArenaMessage(GetPVarInt(killerid,"ArenaMode"), COLOR_GRAD1, szMessage);
			GameTextForPlayer(playerid,"-8 fichas", 3000, 1);
			PlayerPlaySound(killerid, 1052, 0.0, 0.0, 0.0);
		    format(szMessage,sizeof(szMessage),"[Paintball Arena] %s mató a %s con una %s.",GetPlayerNameEx(killerid),GetPlayerNameEx(playerid),weapon);
		}
	}
	else{
	    Info[playerid][pDeaths] += 1;
		format(szMessage,sizeof(szMessage),"[Paintball Arena] %s ha muerto.",GetPlayerNameEx(playerid));
	}
    SendPaintballArenaMessage(GetPVarInt(playerid,"ArenaMode"), COLOR_RED, szMessage);
}
GetPlayerPos(playerid, px, py, pz);
if(GetPVarInt(playerid, "Injured") == 0)
{
	if( GetPVarInt(playerid, "EventToken") >= 1 || GetPVarInt(playerid, "IsInArena") == 1){ ResetPlayerWeapons(playerid); }
	else { ResetPlayerWeaponsEx(playerid); }
}
new caller = Mobile[playerid];
if(caller != -1)
{
	if(caller > -1)
	{
		SendClientMessageEx(caller,  COLOR_GREY, "* La línea se perdió.");
		CellTime[caller] = 0;
		CellTime[playerid] = 0;
		Mobile[caller] = -1;
	}
	Mobile[playerid] = -1;
	CellTime[playerid] = 0;
}
if(Info[playerid][pHead] >= 1)
{
	if(IsPlayerConnectedEx(killerid))
	{
		if(GoChase[killerid] == playerid)
		{
		    new asesino[MAX_PLAYER_NAME],
				nombre[MAX_PLAYER_NAME];

			nombre = GetPlayerNameEx(playerid);
			asesino = GetPlayerNameEx(killerid);

			new takemoney = Info[playerid][pHead] / 4 * 2;
			//Info[killerid][pTaxDeuda] += takemoney;
			GivePlayerCash(killerid, takemoney);
			GivePlayerCash(playerid, -takemoney);
			format(szMessage,128,"Hitman %s ha cumplido con el contrato de %s y recaudó $%d.",asesino,nombre,Info[playerid][pHead] / 4 * 2);
			SendFamilyMessage(8, COLOR_GRAD1, szMessage);
			format(szMessage,128,"Has sido gravemente herido por un asesino a sueldo y pérdiste $%d.",takemoney);
			SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
			ResetPlayerWeaponsEx(playerid);
			Info[playerid][pHead] = 0;
			Info[killerid][pCHits] += 1;
			GotHit[playerid] = 0;
			GetChased[playerid] = 999;
			GoChase[killerid] = 999;
		}
	}
}
if(IsPlayerConnectedEx(killerid))
{
	if(GoChase[playerid] == killerid)
	{
	    new asesino[MAX_PLAYER_NAME], nombre[MAX_PLAYER_NAME];

	    nombre = GetPlayerNameEx(playerid);
		asesino = GetPlayerNameEx(killerid);

		new takemoney = Info[playerid][pHead] / 4 * 2;
		GivePlayerCash(killerid, takemoney);
		format(szMessage,128,"Hitman %s ha fallado el contrato de %s y perdió $%d.",nombre,asesino,Info[killerid][pHead] / 4 * 2);
		SendFamilyMessage(8, COLOR_GRAD1, szMessage);
		GivePlayerCash(playerid, -takemoney);
	   	format(szMessage,128,"Has matado a un asesino a sueldo y ganaste $%d, fuiste removido de la lista.",Info[killerid][pHead] / 4 * 2);
		SendClientMessageEx(killerid, COLOR_GRAD1, szMessage);
		Info[killerid][pHead] = 0;
		Info[playerid][pFHits] += 1;
		GotHit[playerid] = 0;
		GetChased[killerid] = 999;
		GoChase[playerid] = 999;
	}
}
// if they die whilst performing a looping anim, we should reset the state
if(gPlayerUsingLoopingAnim[playerid] == 1)
{
    gPlayerUsingLoopingAnim[playerid] = 0;
    TextDrawHideForPlayer(playerid,txtAnimHelper);
}
killerid = INVALID_PLAYER_ID;
SetPlayerColor(playerid,TEAM_HIT_COLOR);
return 1;
}

public OnPlayerSpawn(playerid)
{
	if(!IsPlayerConnectedEx(playerid))
	{
	   	SendClientMessageEx(playerid, COLOR_GENERAL, ""COL_BLUE"ATENCIÓN:"COL_WHITE" Fuiste expulsado automáticamente, no has ingresado correctamente.");
	    Expulsar(playerid);
	    return 1;
	}
	if(IsPlayerNPC(playerid)) return 1;
	if(!gPlayerAnimLibsPreloaded[playerid])
	{
	    LoadAnimLibs(playerid);
		gPlayerAnimLibsPreloaded[playerid] = 1;
	}
	CancelSelectTextDraw(playerid);
	StopAudioStreamForPlayer(playerid);
	SetPlayerWantedLevel(playerid, Info[playerid][pWantedLevel]);
	SetPlayerSpawn(playerid);
	SetPlayerWeapons(playerid);
	OnDuty[playerid] = 0;
	SetPlayerToTeamColor(playerid);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
	SyncPlayerTime(playerid);
	SetPVarInt(playerid,"Dandoarma",0);
	SetTimerEx("HackCheck", 5 * 1000, 0, "i", playerid);
	TogglePlayerControllable(playerid, 0);
	ShowInfoForPlayer(playerid, "~r~Espera porfavor...", 5000);
	SleepEx(3000);
	SetPVarInt(playerid, "tempfixac", 0);
	return 1;
}

public OnVehicleDeath(vehicleid)
{
	if(Lamp[vehicleid] == 1)
	{
		DestroyObject(light[vehicleid]);
	    Lamp[vehicleid] = 0;
	}
	VehicleStatus{vehicleid} = 1;
	arr_Engine{vehicleid} = 0;
	return 1;
}

Log(sz_fileName[], sz_input[])
{
	new sz_logEntry[156], i_dateTime[2][3], File: fileHandle = fopen(sz_fileName, io_append);
	gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);
	format(sz_logEntry, sizeof(sz_logEntry), "[%i/%i/%i - %i:%i:%i] %s\r\n", i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2], i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2], sz_input);
	fwrite(fileHandle, sz_logEntry);
	return fclose(fileHandle);
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(ExamenVuelo[playerid] != 0)
	{
	switch(ExamenVuelo[playerid])
	{
	case 1:
	{
	    GameTextForPlayer(playerid, "~r~Checkpoint 1/10 alcanzado",2000,4);
	    ExamenVuelo[playerid] = 2;
        SetPlayerRaceCheckpoint(playerid, 3, -166.1240, 2352.7434, 104.8213, -536.6510,2505.9268,156.8790, 5.0);
        return 1;
	}
	case 2:
	{
		GameTextForPlayer(playerid, "~r~Checkpoint 2/10 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 3, -536.6510, 2505.9268, 156.8790, -393.9685, 2807.0476, 149.3094, 5.0);
        ExamenVuelo[playerid] = 3;
        return 1;
	}
	case 3:
	{
		GameTextForPlayer(playerid, "~r~Checkpoint 3/10 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 3, -393.9685, 2807.0476, 149.3094, -129.3514, 2743.7505, 126.5114, 5.0);
        ExamenVuelo[playerid] = 4;
        return 1;
	}
	case 4:
	{
		GameTextForPlayer(playerid, "~r~Checkpoint 4/10 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 3, -129.3514, 2743.7505, 126.5114, 396.6925, 2503.6445, 17.2114, 5.0);
        ExamenVuelo[playerid] = 5;
        return 1;
	}
	case 5:
	{
		GameTextForPlayer(playerid, "~r~Checkpoint 5/10 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, 396.6925, 2503.6445, 17.2114, 286.1333, 2516.8315, 81.4773, 5.0);
        ExamenVuelo[playerid] = 6;
        return 1;
	}
	case 6:
	{
	    new veh = GetPlayerVehicleID(playerid);
        SetVehicleToRespawn(veh);
		RemovePlayerFromVehicle(playerid);
		GameTextForPlayer(playerid, "~r~Checkpoint 6/10 alcanzado",2000,4);
		SendClientMessage(playerid, COLOR_WHITE, "Continua con este Sparrow.");
        ExamenVuelo[playerid] = 7;
		foreach(Player,i)
  		{
  			for(new v = 0 ; v < 6 ; v++)
  			{
  				if(!IsPlayerInVehicle(playerid, VehiculosExamen[4][v]))
				{
					PutPlayerInVehicle(playerid, VehiculosExamen[4][v], 0);
					SetVehiclePos(VehiculosExamen[4][v], 396.6925, 2503.6445, 17.2114);
					SetVehicleZAngle(VehiculosExamen[4][v], 90);
					break;
				}
			}
		}
		new engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(veh,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		arr_Engine{veh} = 1;
		SetPlayerRaceCheckpoint(playerid, 3, 286.1333, 2516.8315, 81.4773, 152.0973, 2780.2485, 123.9844, 5.0);
		return 1;
	}
	case 7:
	{
		GameTextForPlayer(playerid, "~r~Checkpoint 7/10 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 3, 152.0973, 2780.2485, 123.9844, -99.1168,2631.6968,48.3333, 5.0);
        ExamenVuelo[playerid] = 8;
        return 1;
	}
	case 8:
	{
		GameTextForPlayer(playerid, "~r~Checkpoint 8/10 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 3, -99.1168,2631.6968,48.3333, -89.4226, 2542.1416, 147.5883, 5.0);
        ExamenVuelo[playerid] = 9;
        return 1;
	}
	case 9:
	{
		GameTextForPlayer(playerid, "~r~Checkpoint 9/10 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 4, -89.4226, 2542.1416, 147.5883, 69.8749, 2503.1758, 17.0606, 5.0);
        ExamenVuelo[playerid] = 10;
        return 1;
	}
	case 10:
	{
	    new vehc = GetPlayerVehicleID(playerid), Float:vidaheli;
		GetVehicleHealth(vehc, vidaheli);
        GameTextForPlayer(playerid, "~r~Checkpoint 10/10 alcanzado",2000,4);
        if(IsPlayerInAnyVehicle(playerid))
        {
	        if(vidaheli > 600)
	        {
		        SendClientMessage(playerid, COLOR_WHITE, "Felicidades! Completaste el examen de vuelo con éxito.");
		        Info[playerid][pFlyLic] = 1;
			}
			else { SendClientMessage(playerid, COLOR_WHITE, "Has dañado demasiado el helicoptero. Debes volver a intentar el examen con mas cuidado."); }
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Te bajaste del helicoptero.");
		    SetPlayerPos(playerid, 1115.2238, -1779.4194, 17.9884);
			return 1;
		}
		RemovePlayerFromVehicle(playerid);
		SetVehicleToRespawn(vehc);
		SetPlayerInterior(playerid, 10);
		SetPlayerPos(playerid,252.1511,117.4176,1003.21889);
		SetPlayerVirtualWorld(playerid, 500);
		ExamenVuelo[playerid] = 0;
	}
	}
	}
	if(ExamenManejo[playerid] != 0)
	{
	switch(ExamenManejo[playerid])
	{
	case 1:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 1/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2063.0195,-209.9654,35.0267, -2018.4576,-255.9293,35.0271, 5.0);
        ExamenManejo[playerid] = 2;
        return 1;
	}
	case 2:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 2/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2018.4576,-255.9293,35.0271, -2068.6323,-272.3898,35.0281, 5.0);
        ExamenManejo[playerid] = 3;
        return 1;
	}
	case 3:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 3/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2068.6323,-272.3898,35.0281, -2086.3792,-209.0499,35.0267, 5.0);
        ExamenManejo[playerid] = 4;
        return 1;
	}
	case 4:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 4/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2086.3792,-209.0499,35.0267, -2032.4680,-188.0736,35.0281, 5.0);
        ExamenManejo[playerid] = 5;
        return 1;
	}
	case 5:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 5/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2032.4680,-188.0736,35.0281, -2022.7715,-151.0577,35.0276, 5.0);
        ExamenManejo[playerid] = 6;
        return 1;
	}
	case 6:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 6/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2022.7715,-151.0577,35.0276, -2038.1349,-139.3190,35.0173, 5.0);
        ExamenManejo[playerid] = 7;
        return 1;
	}
	case 7:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 7/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2038.1349,-139.3190,35.0173, -2060.4731,-170.3410,35.0276, 5.0);
        ExamenManejo[playerid] = 8;
        return 1;
	}
	case 8:
    {
        new veh = GetPlayerVehicleID(playerid);
        SetVehicleToRespawn(veh);
        RemovePlayerFromVehicle(playerid);
        GameTextForPlayer(playerid, "~r~Checkpoint 8/24 alcanzado",2000,4);
        SendClientMessage(playerid, COLOR_WHITE, "Continua con este Turismo la proxima vuelta.");
        ExamenManejo[playerid] = 9;
        foreach(Player,i)
  		{
    		for(new v = 0 ; v < 6 ; v++)
      		{
      		    if(!IsPlayerInVehicle(playerid, VehiculosExamen[1][v]))
      			{
      			    PutPlayerInVehicle(playerid, VehiculosExamen[1][v], 0);
      			    SetVehiclePos(VehiculosExamen[1][v], -2037.9586,-139.0939,34.9941);
					SetVehicleZAngle(VehiculosExamen[1][v], 89.2960);
					break;
				}
			}
		}
		new engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(veh,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		arr_Engine{veh} = 1;
		SetPlayerRaceCheckpoint(playerid, 0, -2060.4731,-170.3410,35.0276, -2061.9673,-208.7964,35.0299, 5.0);
		return 1;
	}
	case 9:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 9/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2061.9673,-208.7964,35.0299, -2021.1606,-242.4267,35.0290, 5.0);
        ExamenManejo[playerid] = 10;
        return 1;
	}
	case 10:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 10/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2021.1606,-242.4267,35.0290, -2070.8943,-273.5653,35.0278, 5.0);
        ExamenManejo[playerid] = 11;
        return 1;
	}
	case 11:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 11/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2070.8943,-273.5653,35.0278, -2087.8103,-208.3337,35.0267, 5.0);
        ExamenManejo[playerid] = 12;
        return 1;
	}
	case 12:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 12/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2087.8103,-208.3337,35.0267, -2034.7756,-189.4877,35.0281, 5.0);
        ExamenManejo[playerid] = 13;
        return 1;
	}
	case 13:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 13/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2034.7756,-189.4877,35.0281, -2023.1851,-152.5119,35.0274, 5.0);
        ExamenManejo[playerid] = 14;
        return 1;
	}
	case 14:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 14/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2023.1851,-152.5119,35.0274, -2038.9297,-139.0689,35.0161, 5.0);
        ExamenManejo[playerid] = 15;
        return 1;
	}
	case 15:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 15/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2038.9297,-139.0689,35.0161, -2061.0977,-170.9714,35.0275, 5.0);
        ExamenManejo[playerid] = 16;
        return 1;
	}
	case 16:
    {
		new veh = GetPlayerVehicleID(playerid);
		SetVehicleToRespawn(veh);
		RemovePlayerFromVehicle(playerid);
		GameTextForPlayer(playerid, "~r~Checkpoint 16/24 alcanzado",2000,4);
        SendClientMessage(playerid, COLOR_WHITE, "Continua con esta BF-400 la proxima vuelta.");
        ExamenManejo[playerid] = 17;
        foreach(Player,i)
  		{
    		for(new v = 0 ; v < 6 ; v++)
      		{
      		    if(!IsPlayerInVehicle(playerid, VehiculosExamen[2][v]))
      			{
      			    PutPlayerInVehicle(playerid, VehiculosExamen[2][v], 0);
      			    SetVehiclePos(VehiculosExamen[2][v], -2037.9586,-139.0939,34.9941);
					SetVehicleZAngle(VehiculosExamen[2][v], 90);
					break;
				}
			}
		}
		new engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(veh,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		arr_Engine{veh} = 1;
        SetPlayerRaceCheckpoint(playerid, 0, -2061.0977,-170.9714,35.0275, -2061.8682,-210.0159,35.0273, 5.0);
        return 1;
	}
	case 17:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 17/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2061.8682,-210.0159,35.0273, -2022.0605,-240.3800,35.0325, 5.0);
        ExamenManejo[playerid] = 18;
        return 1;
	}
	case 18:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 18/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2022.0605,-240.3800,35.0325, -2069.6611,-272.7234,35.0275, 5.0);
        ExamenManejo[playerid] = 19;
        return 1;
	}
	case 19:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 19/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2069.6611,-272.7234,35.0275, -2087.2146,-206.2604,35.0274, 5.0);
        ExamenManejo[playerid] = 20;
        return 1;
	}
	case 20:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 240/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2087.2146,-206.2604,35.0274, -2033.7008,-187.7106,35.0271, 5.0);
        ExamenManejo[playerid] = 21;
        return 1;
	}
	case 21:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 21/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2033.7008,-187.7106,35.0271, -2023.3132,-150.5892,35.0274, 5.0);
        ExamenManejo[playerid] = 22;
        return 1;
	}
	case 22:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 22/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 0, -2023.3132,-150.5892,35.0274, -2038.1909,-138.9588,35.0156, 5.0);
        ExamenManejo[playerid] = 23;
        return 1;
	}
	case 23:
    {
        GameTextForPlayer(playerid, "~r~Checkpoint 23/24 alcanzado",2000,4);
        SetPlayerRaceCheckpoint(playerid, 1, -2038.1909,-138.9588,35.0156, -2038.1909,-138.9588,35.0156, 5.0);
        ExamenManejo[playerid] = 24;
        return 1;
	}
	case 24:
    {
        new veh = GetPlayerVehicleID(playerid);
        GameTextForPlayer(playerid, "~r~Checkpoint 24/24 alcanzado",2000,4);
        ExamenManejo[playerid] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "Felicidades! Completaste el examen de manejo con éxito.");
  		Info[playerid][pCarLic] = 1;
		SetVehicleToRespawn(veh);
		RemovePlayerFromVehicle(playerid);
		SetPlayerInterior(playerid, 10);
		SetPlayerPos(playerid,252.1511,117.4176,1003.21889);
		SetPlayerVirtualWorld(playerid, 500);
		ExamenManejo[playerid] = 0;
	}
	}
	}
	if(ExamenNav[playerid] != 0)
	{
	switch(ExamenNav[playerid])
	{
	case 1:
	{
	    GameTextForPlayer(playerid, "~r~Checkpoint 1/6 alcanzado",2000,4);
	    SetPlayerRaceCheckpoint(playerid, 0, -158.6945, -795.5346, 0.0, -171.8379, -707.2455, 0.0, 7.0);
        ExamenNav[playerid] = 2;
        return 1;
	}
	case 2:
	{
	    GameTextForPlayer(playerid, "~r~Checkpoint 2/6 alcanzado",2000,4);
	    SetPlayerRaceCheckpoint(playerid, 0, -171.8379, -707.2455, 0.0, -210.0125, -536.8519, 0.0, 7.0);
        ExamenNav[playerid] = 3;
        return 1;
	}
	case 3:
	{
	    GameTextForPlayer(playerid, "~r~Checkpoint 3/6 alcanzado",2000,4);
	    SetPlayerRaceCheckpoint(playerid, 0, -210.0125, -536.8519, 0.0, -129.9124, -602.3821, 0.0, 7.0);
        ExamenNav[playerid] = 4;
        return 1;
	}
	case 4:
	{
	    GameTextForPlayer(playerid, "~r~Checkpoint 4/6 alcanzado",2000,4);
	    SetPlayerRaceCheckpoint(playerid, 0, -129.9124, -602.3821, 0.0, -44.2260, -644.6091, 0.0, 7.0);
        ExamenNav[playerid] = 5;
        return 1;
	}
	case 5:
	{
	    GameTextForPlayer(playerid, "~r~Checkpoint 5/6 alcanzado",2000,4);
	    SetPlayerRaceCheckpoint(playerid, 1, -44.2260, -644.6091, 0.0, 0.0, 0.0, 0.0, 7.0);
        ExamenNav[playerid] = 6;
        return 1;
	}
	case 6:
	{
	    new veh = GetPlayerVehicleID(playerid);
        GameTextForPlayer(playerid, "~r~Checkpoint 6/6 alcanzado",2000,4);
        ExamenNav[playerid] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "Felicidades! Completaste el examen de navegación con éxito.");
  		Info[playerid][pBoatLic] = 1;
		SetVehicleToRespawn(veh);
		RemovePlayerFromVehicle(playerid);
		SetPlayerInterior(playerid, 10);
		SetPlayerPos(playerid,252.1511,117.4176,1003.21889);
		SetPlayerVirtualWorld(playerid, 500);
	}
	}
	}
	DisablePlayerRaceCheckpoint(playerid);
    return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(CheckBasura[playerid] != 0)
	{
	    DisablePlayerCheckpoint(playerid);
	    switch(CheckBasura[playerid])
		{
		    case 1:
		    {
		        CheckBasura[playerid] = 2;
		        if(MBasura[playerid])
				{
					SetPlayerCheckpoint(CBasura[playerid], 2227.6, -1908, 13.4, 3.0);
					SendClientMessage(CBasura[playerid], -1, "Baja del camión y recolecta la basura.");
					SendClientMessage(playerid, -1, "Espera que tu compañero termine de recolectar la basura.");
				}
				else
				{
				    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				    switch(RutaBasura[playerid])
				    {
				        case 1: SetPlayerCheckpoint(CBasura[playerid], 2318.2336, -1973.8715, 12.9997, 5.0);
				        case 2: SetPlayerCheckpoint(CBasura[playerid], 2097.1301, -1890.9351, 12.9850, 5.0);
				        case 3: SetPlayerCheckpoint(CBasura[playerid], 2204.3030, -1632.0050, 15.1761, 5.0);
					}
				}
			}
			case 2:
		    {
		        CheckBasura[playerid] = 3;
		        if(MBasura[playerid])
				{
				    SendClientMessage(CBasura[playerid], -1, "Baja del camión y recolecta la basura.");
					SendClientMessage(playerid, -1, "Espera que tu compañero termine de recolectar la basura.");
				    switch(RutaBasura[playerid])
				    {
				        case 1: SetPlayerCheckpoint(CBasura[playerid], 2318.1001000,-1981.5000000,13.4000000, 3.0);
				        case 2: SetPlayerCheckpoint(CBasura[playerid], 2097.1001000,-1900.9000000,13.4000000, 3.0);
				        case 3: SetPlayerCheckpoint(CBasura[playerid], 2194.8999000,-1629.0000000,15.5000000, 3.0);
					}
				}
				else
				{
				    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				    switch(RutaBasura[playerid])
				    {
				        case 1: SetPlayerCheckpoint(CBasura[playerid], 2415.9675,-1998.7379,13.0209, 5.0);
				        case 2: SetPlayerCheckpoint(CBasura[playerid], 1828.6317,-1925.6659,13.0888, 3.0);
				        case 3: SetPlayerCheckpoint(CBasura[playerid], 2204.9260,-1381.4868,23.4530, 3.0);
					}
				}
			}
			case 3:
		    {
		        CheckBasura[playerid] = 4;
		        if(MBasura[playerid])
				{
				    SendClientMessage(CBasura[playerid], -1, "Baja del camión y recolecta la basura.");
					SendClientMessage(playerid, -1, "Espera que tu compañero termine de recolectar la basura.");
				    switch(RutaBasura[playerid])
				    {
				        case 1: SetPlayerCheckpoint(CBasura[playerid], 2423.2000000,-1998.3000000,13.4000000, 3.0);
				        case 2: SetPlayerCheckpoint(CBasura[playerid], 1815.8000000,-1934.4000000,13.4000000, 3.0);
				        case 3: SetPlayerCheckpoint(CBasura[playerid], 2204.8999000,-1375.0000000,23.8000000, 3.0);
					}
				}
				else
				{
				    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				    switch(RutaBasura[playerid])
				    {
				        case 1: SetPlayerCheckpoint(CBasura[playerid], 2417.2988,-1882.0437,13.0051, 5.0);
				        case 2: SetPlayerCheckpoint(CBasura[playerid], 1692.9535,-1824.0237,13.0078, 3.0);
				        case 3: SetPlayerCheckpoint(CBasura[playerid], 2169.7573,-1272.4938,23.4453, 3.0);
					}
				}
			}
			case 4:
		    {
		        CheckBasura[playerid] = 5;
		        if(MBasura[playerid])
				{
				    SendClientMessage(CBasura[playerid], -1, "Baja del camión y recolecta la basura.");
					SendClientMessage(playerid, -1, "Espera que tu compañero termine de recolectar la basura.");
				    switch(RutaBasura[playerid])
				    {
				        case 1: SetPlayerCheckpoint(CBasura[playerid], 2404.7000000,-1882.2000000,13.4000000, 3.0);
				        case 2: SetPlayerCheckpoint(CBasura[playerid], 1683.8000000,-1824.9000000,13.4000000, 3.0);
				        case 3: SetPlayerCheckpoint(CBasura[playerid], 2173.6001000,-1272.8000000,23.8000000, 3.0);
					}
				}
				else
				{
				    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				    switch(RutaBasura[playerid])
				    {
				        case 1: SetPlayerCheckpoint(CBasura[playerid], 2417.1411,-1741.9281,13.0077, 5.0);
				        case 2: SetPlayerCheckpoint(CBasura[playerid], 1404.0438,-1870.2589,13.0078, 3.0);
				        case 3: SetPlayerCheckpoint(CBasura[playerid], 2194.7810,-1127.0181,24.7144, 3.0);
					}
				}
			}
			case 5:
		    {
		    	CheckBasura[playerid] = 6;
		        if(MBasura[playerid])
				{
				    SendClientMessage(CBasura[playerid], -1, "Baja del camión y recolecta la basura.");
					SendClientMessage(playerid, -1, "Espera que tu compañero termine de recolectar la basura.");
				    switch(RutaBasura[playerid])
				    {
				        case 1: SetPlayerCheckpoint(CBasura[playerid], 2404.0000000,-1741.7000000,13.4000000, 3.0);
				        case 2: SetPlayerCheckpoint(CBasura[playerid], 1403.5000000,-1866.6000000,13.4000000, 3.0);
				        case 3: SetPlayerCheckpoint(CBasura[playerid], 2192.8999000,-1130.2000000,25.2000000, 3.0);
					}
				}
				else
				{
				    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				    switch(RutaBasura[playerid])
				    {
				        case 1: SetPlayerCheckpoint(CBasura[playerid], 2476.6316,-1736.1296,13.0078, 5.0);
				        case 2: SetPlayerCheckpoint(CBasura[playerid], 1431.8241,-1703.7578,13.0078, 3.0);
				        case 3: SetPlayerCheckpoint(CBasura[playerid], 2367.8308,-1185.5667,27.0546, 3.0);
					}
				}
			}
			case 6:
		    {
		    	CheckBasura[playerid] = 7;
		        if(MBasura[playerid])
				{
				    SendClientMessage(CBasura[playerid], -1, "Baja del camión y recolecta la basura.");
					SendClientMessage(playerid, -1, "Espera que tu compañero termine de recolectar la basura.");
				    switch(RutaBasura[playerid])
				    {
				        case 1: SetPlayerCheckpoint(CBasura[playerid], 2476.0000000,-1722.9004000,13.4000000, 3.0);
				        case 2: SetPlayerCheckpoint(CBasura[playerid], 1435.3000000,-1703.7000000,13.4000000, 3.0);
				        case 3: SetPlayerCheckpoint(CBasura[playerid], 2380.5000000,-1185.3000000,27.2000000, 3.0);
					}
				}
				else
				{
				    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				    switch(RutaBasura[playerid])
				    {
				        case 1: SetPlayerCheckpoint(CBasura[playerid], 2645.6748,-1680.3087,10.4021, 5.0);
				        case 2: SetPlayerCheckpoint(CBasura[playerid], 1595.4576,-1594.3849,13.0360, 3.0);
				        case 3: SetPlayerCheckpoint(CBasura[playerid], 2388.4541,-1398.6697,23.4725, 3.0);
					}
				}
			}
			case 7:
		    {
		        CheckBasura[playerid] = 8;
		        if(MBasura[playerid])
				{
				    SendClientMessage(CBasura[playerid], -1, "Baja del camión y recolecta la basura.");
					SendClientMessage(playerid, -1, "Espera que tu compañero termine de recolectar la basura.");
				    switch(RutaBasura[playerid])
				    {
				        case 1: SetPlayerCheckpoint(CBasura[playerid], 2652.3000000,-1680.2000000,10.7000000, 3.0);
				        case 2: SetPlayerCheckpoint(CBasura[playerid], 1595.5000000,-1600.1000000,13.4000000, 3.0);
				        case 3: SetPlayerCheckpoint(CBasura[playerid], 2381.7002000,-1398.7998000,23.9000000, 3.0);
					}
				}
				else
				{
				    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				    switch(RutaBasura[playerid])
				    {
				        case 1: SetPlayerCheckpoint(CBasura[playerid], 2646.2288,-1450.5420,29.9062, 5.0);
				        case 2: SetPlayerCheckpoint(CBasura[playerid], 1808.3978,-1614.9381,12.9764, 3.0);
				        case 3: SetPlayerCheckpoint(CBasura[playerid], 2429.0359,-1456.0597,23.4484, 3.0);
					}
				}
			}
			case 8:
		    {
		        CheckBasura[playerid] = 9;
		        if(MBasura[playerid])
				{
				    SendClientMessage(CBasura[playerid], -1, "Baja del camión y recolecta la basura.");
					SendClientMessage(playerid, -1, "Espera que tu compañero termine de recolectar la basura.");
				    switch(RutaBasura[playerid])
				    {
				        case 1: SetPlayerCheckpoint(CBasura[playerid], 2651.6001000,-1450.7000000,30.4000000, 3.0);
				        case 2: SetPlayerCheckpoint(CBasura[playerid], 1808.3000000,-1606.3000000,13.4000000, 3.0);
				        case 3: SetPlayerCheckpoint(CBasura[playerid], 2425.1001000,-1456.4000000,23.9000000, 3.0);
					}
				}
				else
				{
				    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
				    switch(RutaBasura[playerid])
				    {
				        case 1: SetPlayerCheckpoint(CBasura[playerid], 2439.7876,-1440.9734,23.4530, 5.0);
				        case 2: SetPlayerCheckpoint(CBasura[playerid], 1927.6715,-1749.2977,13.0078, 3.0);
				        case 3: SetPlayerCheckpoint(CBasura[playerid], 2428.7468,-1518.3564,23.4693, 3.0);
					}
				}
			}
			case 9:
		    {
		        CheckBasura[playerid] = 10;
		        if(MBasura[playerid])
				{
				    SendClientMessage(CBasura[playerid], -1, "Baja del camión y recolecta la basura.");
					SendClientMessage(playerid, -1, "Espera que tu compañero termine de recolectar la basura.");
				    switch(RutaBasura[playerid])
				    {
				        case 1: SetPlayerCheckpoint(CBasura[playerid], 2439.6001000,-1435.0000000,23.9000000, 3.0);
				        case 2: SetPlayerCheckpoint(CBasura[playerid], 1928.4004000,-1758.5000000,13.4000000, 3.0);
				        case 3: SetPlayerCheckpoint(CBasura[playerid], 2436.8999000,-1517.2000000,23.9000000, 3.0);
					}
				}
				else
				{
				    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
					SendClientMessage(CBasura[playerid], COLOR_WHITE, "Vuelve con el camion y tu compañero a el basurero de LS.");
					SetPlayerCheckpoint(CBasura[playerid], 2201.5054,-1977.5049,13.1824, 3.0);
				}
			}
			case 10:
		    {
				new veh = GetPlayerVehicleID(playerid);
				if(!IsPlayerInVehicle(CBasura[playerid], veh))
				{
				    SetVehicleToRespawn(veh);
				    RemovePlayerFromVehicle(playerid);
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Llegaste sin tu compañero! Pierdes el pago.");
				    SendClientMessage(CBasura[playerid], COLOR_LIGHTRED, "Tu compañero de trabajo llegó sin ti al lugar de pago, pierdes la paga.");
				    CheckBasura[playerid] = 0;
				    CheckBasura[CBasura[playerid]] = 0;
				    MBasura[playerid] = false;
				    MBasura[CBasura[playerid]] = false;
				    RBasura[playerid] = false;
				    RBasura[CBasura[playerid]] = false;
				    RutaBasura[playerid] = 0;
				    RutaBasura[CBasura[playerid]] = 0;
				    CBasura[CBasura[playerid]] = -1;
				    CBasura[playerid] = -1;
				    return 1;
				}
				if(GetVehicleModel(veh) != 408)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Llegaste en otro vehiculo! Pierdes el pago.");
				    SendClientMessage(CBasura[playerid], COLOR_LIGHTRED, "Tu compañero de trabajo llegó en otro vehiculo al lugar de pago, pierdes la paga.");
				    CheckBasura[playerid] = 0;
				    CheckBasura[CBasura[playerid]] = 0;
				    MBasura[playerid] = false;
				    MBasura[CBasura[playerid]] = false;
				    RBasura[playerid] = false;
				    RBasura[CBasura[playerid]] = false;
				    RutaBasura[playerid] = 0;
				    RutaBasura[CBasura[playerid]] = 0;
				    CBasura[CBasura[playerid]] = -1;
				    CBasura[playerid] = -1;
				    return 1;
				}
				SendClientMessage(playerid, 0xD900D3C8, "Recibes $1500 por limpiar las calles de Los Santos.");
				SendClientMessage(CBasura[playerid], 0xD900D3C8, "Recibes $1500 por limpiar las calles de Los Santos.");
				GivePlayerCash(playerid, 1500);
				GivePlayerCash(CBasura[playerid], 1500);
				CheckBasura[playerid] = 0;
    			CheckBasura[CBasura[playerid]] = 0;
    			MBasura[playerid] = false;
    			MBasura[CBasura[playerid]] = false;
    			RBasura[playerid] = false;
    			RBasura[CBasura[playerid]] = false;
    			RutaBasura[playerid] = 0;
    			RutaBasura[CBasura[playerid]] = 0;
    			RemovePlayerFromVehicle(CBasura[playerid]);
    			CBasura[CBasura[playerid]] = -1;
    			CBasura[playerid] = -1;
        		SetVehicleToRespawn(veh);
        		RemovePlayerFromVehicle(playerid);
			}
		}
		return 1;
	}
	if(spraytag_find[playerid])
	{
		SendClientMessage(playerid, COLOR_GRAD1, "[NP:RP] Has llegado a tu graffiti.");
		DisablePlayerCheckpoint(playerid);
	}
	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
	new carid = GetPlayerVehicleID(playerid);
	if(GetPVarInt(playerid,"FindJob") == 1)
	{
		DeletePVar(playerid, "FindJob");
		DisablePlayerCheckpoint(playerid);
	}
	if(GetPVarInt(playerid,"FINDNAME") == 1)
	{
		DeletePVar(playerid, "FINDNAME");
		DisablePlayerCheckpoint(playerid);
		SendClientMessageEx(playerid, COLOR_GRAD1, "Llegaste! Usa /cambiarnombre para cambiar tu nombre.");
	}
	if(GetPVarInt(playerid,"FINDHQ") == 1)
	{
		DeletePVar(playerid, "FINDHQ");
		DisablePlayerCheckpoint(playerid);
		SendClientMessageEx(playerid, COLOR_GRAD1, "Usted ha llegado al checkpoint, bienvenido a su HQ.");
	}
	if(MechanicCallTime[playerid] > 0)
	{
	    if(Team_Mecanicos(playerid))
		{
			MechanicCallTime[playerid] = 0;
			GameTextForPlayer(playerid, "~r~Llegaste!", 2500, 1);
			DisablePlayerCheckpoint(playerid);
		}
	}
	if(GetPVarInt(playerid, "Pizza") > 0 && IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorX], HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorY], HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorZ]))
	{
		if (GetPVarInt(playerid, "tpPizzaTimer") != 0)
		{
			format(szMessage, sizeof(szMessage), "{E3E4ED}[ATECIÓN]{FFFFFF}: %s (ID %d) posiblemente tenga cheats. Spectearlo.", GetPlayerNameEx(playerid), playerid);
			ABroadCast( COLOR_GRAD1, szMessage, 2 );
			format(szMessage, sizeof(szMessage), "%s (ID %d) is possibly teleport pizzarunning.", GetPlayerNameEx(playerid), playerid);
	    	Log("logs/hack.log", szMessage);
		}
		new pay = (GetPVarInt(playerid, "pizzaTimer") * 2);
		Tax -= pay;
		SaveStuff();
		GivePlayerCash(playerid,pay);
		format(szMessage, sizeof(szMessage), "Has entregado la pizza en su destino! Ganaste $%d.", pay);
  		SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
		DestroyProgressBar(PizzaBar[playerid]);
		SetPVarInt(playerid, "Pizza", 0);
		DisablePlayerCheckpoint(playerid);
	}
	for(new h = 0; h < MAX_POINTS; h++)
	{
		if(Points[h][Type] == 3 && GetPVarInt(playerid, "CrateDeliver") == 1 && IsPlayerInRangeOfPoint(playerid, 6.0, 1265.0209,286.1703,19.5547)) // POT
		{
    	if(GetPVarInt(playerid, "tpDrugRunTimer") != 0)
   		{
	   		format(szMessage, sizeof(szMessage), "{E3E4ED}[ATENCIÓN]{FFFFFF}: %s (ID %d) posiblemente tenga cheats. Spectearlo.", GetPlayerNameEx(playerid), playerid);
	   		ABroadCast( COLOR_GRAD1, szMessage, 2 );
	   		format(szMessage, sizeof(szMessage), "%s (ID %d) posiblemente usa teleport drugrunning (Teleport).", GetPlayerNameEx(playerid), playerid);
	   		Log("logs/hack.log", szMessage);
		}
		RemovePlayerAttachedObject(playerid, 9);
		DisablePlayerCheckpoint(playerid);
		new level = Info[playerid][pSmugSkill], pay;
		switch(level)
		{
		    case 1 .. 20: pay = 330;
		    case 21 .. 50: pay = 410;
		    case 51 .. 100: pay = 480;
		    case 101 .. 200: pay = 560;
		    default: pay = 640;
		}
		DeletePVar(playerid, "CrateDeliver");
		Info[playerid][pCrates] = 0;
		//Info[playerid][pSmugSkill]++; //CAMBIAR
        if(Info[playerid][pDobleExp] == 0)
		{
          	Info[playerid][pSmugSkill]++;
		}
		else
		{
			Info[playerid][pSmugSkill] += 2;
			SendClientMessageEx(playerid, COLOR_GRAD1, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
		}
		Points[h][Stock] += 10;
		format(szMessage, sizeof(szMessage), " HIERBA DISPONIBLE: %d\n(/SEMILLAS)", Points[h][Stock]);
		UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_GRAD1, szMessage);
		format(szMessage, sizeof(szMessage), "* Ganaste $%d por traficar paquetes de hierba.", pay);
		SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
		GivePlayerCash(playerid, pay);
		return 1;
	}
	if(Points[h][Type] == 4 && GetPVarInt(playerid, "CrateDeliver") == 2 && IsPlayerInRangeOfPoint(playerid, 6.0, 309.4637,43.6719,2.8072)) // CRACK
	{
	    if(GetPVarInt(playerid, "tpDrugRunTimer") != 0)
	   	{
		   	format(szMessage, sizeof(szMessage), "{E3E4ED}[ATECIÓN]{FFFFFF}: %s (ID %d) posiblemente usa teleport drugrunning (Teleport).", GetPlayerNameEx(playerid), playerid);
		   	ABroadCast( COLOR_GRAD1, szMessage, 2 );
		   	format(szMessage, sizeof(szMessage), "%s (ID %d) posiblemente usa teleport drugrunning (Teleport).", GetPlayerNameEx(playerid), playerid);
		   	Log("logs/hack.log", szMessage);
		}
		RemovePlayerAttachedObject(playerid, 9);
		DisablePlayerCheckpoint(playerid);
		new level = Info[playerid][pSmugSkill], pay;
		switch(level)
		{
		    case 1 .. 20: pay = 380;
		    case 21 .. 50: pay = 500;
		    case 51 .. 100: pay = 620;
		    case 101 .. 200: pay = 700;
		    default: pay = 790;
		}
		DeletePVar(playerid, "CrateDeliver");
		Info[playerid][pCrates] = 0;
		//Info[playerid][pSmugSkill]++; //CAMBIAR
        if(Info[playerid][pDobleExp] == 0)
		{
          	Info[playerid][pSmugSkill]++;
		}
		else
		{
			Info[playerid][pSmugSkill] += 2;
			SendClientMessageEx(playerid, COLOR_GRAD1, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
		}
		Points[h][Stock] += 10;
		format(szMessage, sizeof(szMessage), " CRACK DISPONIBLE: %d\n(/COMPRARCRACK)", Points[h][Stock]);
		UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_GRAD1, szMessage);
		format(szMessage, sizeof(szMessage), "* Ganaste $%d por traficar paquetes de crack.", pay);
		SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
		GivePlayerCash(playerid, pay);
		return 1;
	}
	else if(Points[h][Type] == 2 && GetPVarInt(playerid, "MatDeliver") == 555 && IsPlayerInRangeOfPoint(playerid, 6.0, 2317.739990,-2303.850830,13.545999))
	{
		if(GetPVarInt(playerid, "Packages") > 0)
		{
			if(GetPVarInt(playerid, "tpMatRunTimer") != 0)
		    {
		    	format(szMessage, sizeof(szMessage), "{E3E4ED}[ATECIÓN]{FFFFFF}: %s (ID %d) posiblemente tenga cheats. Spectearlo.", GetPlayerNameEx(playerid), playerid);
		    	ABroadCast( COLOR_GRAD1, szMessage, 2 );
		    	format(szMessage, sizeof(szMessage), "%s (ID %d) Es posiblemente hacker de teleport.", GetPlayerNameEx(playerid), playerid);
		    	Log("logs/hack.log", szMessage);
			}
			if(Info[playerid][pVIP] == 1)
			{
			    Info[playerid][pMats] += 375;
				SendClientMessageEx(playerid, COLOR_GENERAL, "* La factoría te da 375 materiales por tu paquete de 15 materiales.");
				SendClientMessageEx(playerid, COLOR_GRAD1,"VIP Bronze: Recibes 1.5x más materiales de lo normal.");

			}
			else if(Info[playerid][pVIP] == 2)
			{
			    Info[playerid][pMats] += 500;
				SendClientMessageEx(playerid, COLOR_GENERAL, "* La factoría te da 500 materiales por tu paquete de 20 materiales.");
				SendClientMessageEx(playerid, COLOR_GRAD1,"VIP Silver: Recibes 2x más materiales de lo normal.");

			}
			else if(Info[playerid][pVIP] == 3)
			{
			    Info[playerid][pMats] += 625;
				SendClientMessageEx(playerid, COLOR_GENERAL, "* La factoría te da 625 materiales por tu paquete de 20 materiales.");
				SendClientMessageEx(playerid, COLOR_GRAD1,"VIP Gold: Recibes 2.5x más materiales de lo normal.");

			}
			else
			{
				Info[playerid][pMats] += 100;
				SendClientMessageEx(playerid, COLOR_GENERAL, "* La factoria te dió 100 materiales por tus 10 paquetes.");
			}
			DeletePVar(playerid, "Packages");
			DeletePVar(playerid, "MatDeliver");
			DisablePlayerCheckpoint(playerid);
			return 1;
		}
	}
	else if(GetPVarInt(playerid, "MatDeliver") == 333 && IsPlayerInRangeOfPoint(playerid, 6.0, 1083.0131,-1226.7869,15.8203))
	{
		if(GetPVarInt(playerid, "Packages") > 0)
		{
			if(Info[playerid][pVIP] == 1)
			{
		    	Info[playerid][pMats] += 675;
				SendClientMessageEx(playerid, COLOR_GENERAL, "* La factoría te da 675 materiales por tu paquete de 23 materiales.");
				SendClientMessageEx(playerid, COLOR_GRAD1,"VIP Bronze: Recibes 1.5x más materiales de lo normal.");
			}
			else if(Info[playerid][pVIP] == 2)
			{
		    	Info[playerid][pMats] += 900;
				SendClientMessageEx(playerid, COLOR_GENERAL, "* La factoría te da 900 materiales por tu paquete de 30 materiales.");
				SendClientMessageEx(playerid, COLOR_GRAD1,"VIP Silver: Recibes 2x más materiales de lo normal.");
			}
			else if(Info[playerid][pVIP] == 3)
			{
		    	Info[playerid][pMats] += 1125;
				SendClientMessageEx(playerid, COLOR_GENERAL, "* La factoría te da 1125 materiales por tu paquete de 30 materiales.");
				SendClientMessageEx(playerid, COLOR_GRAD1,"VIP Gold: Recibes 2.5x más materiales de lo normal.");
			}
			else
			{
				Info[playerid][pMats] += 150;
				SendClientMessageEx(playerid, COLOR_GENERAL, "* La factoria te dió 150 materiales por tus 15 paquetes.");
			}
			DeletePVar(playerid, "Packages");
			DeletePVar(playerid, "MatDeliver");
			DisablePlayerCheckpoint(playerid);
		}
		if(GetPVarInt(playerid, "tpMatRunTimer") != 0)
		{
		   	format(szMessage, sizeof(szMessage), "{E3E4ED}[ATECIÓN]{FFFFFF}: %s (ID %d) posiblemente tenga cheats. Spectearlo.", GetPlayerNameEx(playerid), playerid);
		   	ABroadCast( COLOR_GRAD1, szMessage, 2 );
		   	format(szMessage, sizeof(szMessage), "%s (ID %d) Es posiblemente hacker de teleport.", GetPlayerNameEx(playerid), playerid);
		   	Log("logs/hack.log", szMessage);
		}
	}
	else if(GetPVarInt(playerid, "MatDeliver") == 444 && IsPlayerInRangeOfPoint(playerid, 6.0, 2288.2263,-1104.6658,38.5870))
	{
		if(GetPVarInt(playerid, "Packages") > 0)
		{
			if(Info[playerid][pVIP] == 1)
			{
			    Info[playerid][pMats] += 450;
				SendClientMessageEx(playerid, COLOR_GENERAL, "* La factoría te da 450 materiales por tu paquete de 18 materiales.");
				SendClientMessageEx(playerid, COLOR_GRAD1,"VIP Bronze: Recibes 1.5x más materiales de lo normal.");

			}
			else if(Info[playerid][pVIP] == 2)
			{
			    Info[playerid][pMats] += 600;
				SendClientMessageEx(playerid, COLOR_GENERAL, "* La factoría te da 600 materiales por tu paquete de 24 materiales.");
				SendClientMessageEx(playerid, COLOR_GRAD1, "VIP Silver: Recibes 2x más materiales de lo normal.");
			}
			else if(Info[playerid][pVIP] == 3)
			{
			    Info[playerid][pMats] += 750;
				SendClientMessageEx(playerid, COLOR_GENERAL, "* La factoría te da 750 materiales por tu paquete de 24 materiales.");
				SendClientMessageEx(playerid, COLOR_GRAD1, "VIP Gold: Recibes 2x más materiales de lo normal.");
			}
			else
			{
		    	Info[playerid][pMats] += 180;
				SendClientMessageEx(playerid, COLOR_GENERAL, "*La factoria te dió 180 materiales por tus 18 paquetes.");
			}
			DeletePVar(playerid, "Packages");
			DeletePVar(playerid, "MatDeliver");
			DisablePlayerCheckpoint(playerid);
			if(GetPVarInt(playerid, "tpMatRunTimer") != 0)
		    {
		    	format(szMessage, sizeof(szMessage), "{E3E4ED}[ATECIÓN]{FFFFFF}: %s (ID %d) is possibly teleport matrunning.", GetPlayerNameEx(playerid), playerid);
		    	ABroadCast( COLOR_GRAD1, szMessage, 2 );
		    	format(szMessage, sizeof(szMessage), "%s (ID %d) is possibly teleport matrunning.", GetPlayerNameEx(playerid), playerid);
		    	Log("logs/hack.log", szMessage);
			}
			return 1;
		}
	}
	}
	if(GetPVarInt(playerid,"TrackCar") != 0)
	{
	    DisablePlayerCheckpoint(playerid);
		DeletePVar(playerid, "TrackCar");
		return 1;
	}
	if(TaxiCallReady[playerid] >= 0)
	{
		GameTextForPlayer(playerid, "~y~llegaste!", 5000, 1);
		TaxiCallReady[playerid] = -1;
		DisablePlayerCheckpoint(playerid);
	}
	if(GetPVarInt(playerid, "TruckDeliver") > 0 && gPlayerCheckpointStatus[playerid] != CHECKPOINT_RETURNTRUCK)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_WHITE, "Este no es un camión!");
	    if(TruckUsed[playerid] != INVALID_VEHICLE_ID && vehicleid != TruckUsed[playerid]) return SendClientMessageEx(playerid, COLOR_WHITE, "Este no es tu camión con la mercancía que debes entregar.");
		if(!IsAtTruckDeliveryPoint(playerid))
		{// En está condición se usa para que los jugadores no puedan hacer uso de exploit en los checkpoints
			CancelTruckDelivery(playerid);
			SendClientMessageEx(playerid, COLOR_REALRED, "ERROR: Entraste a un checkpoint erronéo. No se completó la entrega.");
			return 1;
		}
		if(GetPVarInt(playerid, "tpTruckRunTimer") != 0)
		{
			format(szMessage, sizeof(szMessage), "{E3E4ED}[ATECIÓN]{FFFFFF}: %s (ID %d) posiblemente tenga cheats. Spectearlo.", GetPlayerNameEx(playerid), playerid);
			ABroadCast( COLOR_GRAD1, szMessage, 2 );
			format(szMessage, sizeof(szMessage), "%s (ID %d) is possibly teleport truckrunning.", GetPlayerNameEx(playerid), playerid);
	    	Log("logs/hack.log", szMessage);
		}
		new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
		TruckContents[vehicleid] = 0;
	if(truckdeliver >= 1 && truckdeliver <= 3)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL, "* Has entregado la comida y bebidas, regresa para recolectar tu paga.");
	}
	else if(truckdeliver >= 4 && truckdeliver <= 6)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL, "* Has entregado la ropa y calzado, regresa para recolectar tu paga.");
	}
	else if(truckdeliver == 7)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL, "* Has entregado los materiales, regresa para recolectar tu paga.");
	}
	else if(truckdeliver >= 8 && truckdeliver <= 10)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL, "* Has entregado los objetos del 24/7, regresa para recolectar tu paga.");
	}
	else if(truckdeliver >= 11 && truckdeliver <= 15)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL, "* Has entregado las armas, regresa para recolectar tu paga.");
	}
	else if(truckdeliver >= 16 && truckdeliver <= 20)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL, "* Has entregado las drogas, regresa para recolectar tu paga.");
	}
	else if(truckdeliver >= 21 && truckdeliver <= 25)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL, "* Has entregado los materiales ilegales, regresa para recolectar tu paga.");
	}
	DisablePlayerCheckpoint(playerid);
    Info[playerid][p_Pr_Time] += 1;
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_RETURNTRUCK;
	SetPlayerCheckpoint(playerid, 2185.3267,-2288.3525,13.5469, 5);
	SendClientMessageEx(playerid, COLOR_WHITE, "Regresa a camioneros (Mira el checkpoint en el radar).");
	SetPVarInt(playerid, "tpTruckRunTimer", 30);
	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
	return 1;
}
else if(EMSCallTime[playerid] > 0 && EMSAccepted[playerid] < 999)
{
    if(GetPVarInt(EMSAccepted[playerid], "Injured") == 1)
    {
    	SendEMSQueue(EMSAccepted[playerid],2);
    	EMSAccepted[playerid] = 999;
    	GameTextForPlayer(playerid, "~w~Llegaste", 5000, 1);
    	EMSCallTime[playerid] = 0;
    	DisablePlayerCheckpoint(playerid);
	}
	else
	{
        EMSAccepted[playerid] = 999;
	    GameTextForPlayer(playerid, "~r~Paciente ha muerto", 5000, 1);
	    EMSCallTime[playerid] = 0;
    	DisablePlayerCheckpoint(playerid);
	}
}
else if(Info[playerid][pJob] == 4  || Info[playerid][pJob2] == 4)
{
    if(DrugFarming[playerid] == 1)
    {
        if(IsAHarvest(carid) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
        {
            if(Info[playerid][pCosecha] <= 100)
            {
            	new cos = random(6);
     	    	DisablePlayerCheckpoint(playerid);
            	format(szMessage, sizeof(szMessage), "¡Has cosechado y has conseguido %i Kg de cosecha!", cos+1);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				Info[playerid][pCosecha] += cos+1;
				new randomize = random(sizeof(gDrugFarmVar));
      			SetPlayerCheckpoint(playerid, gDrugFarmVar[randomize][0], gDrugFarmVar[randomize][1], gDrugFarmVar[randomize][2], 5.0);
				return 1;
			}
			else
			{
			    DisablePlayerCheckpoint(playerid);
				format(szMessage, sizeof(szMessage), "Tienes %d Kg de cosecha en tu mochila, puedes vender la cosecha a los 24/7. ("COL_BLUE"/vendercosecha"COL_WHITE")", Info[playerid][pCosecha]);
				SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
			    DrugFarming[playerid] = 0;
			    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			    return 1;
			}
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD1, "No estás en el coche de cosechador.");
		    DrugFarming[playerid] = 0;
		    DisablePlayerCheckpoint(playerid);
		    return 1;
		}
    }
}
else
{
	switch (gPlayerCheckpointStatus[playerid])
	{
		case CHECKPOINT_LOADTRUCK:
		{
		    if(IsPlayerInRangeOfPoint(playerid, 6, 2173.9336,-2267.3589,13.3802))
		    {
			    new vehicleid = GetPlayerVehicleID(playerid);
   				if(IsATruckerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    		{
	    		    DisablePlayerCheckpoint(playerid);
			    	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			    	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;

					SetPVarInt(playerid, "IsFrozen", 1);
					ShowPlayerDialog(playerid,DIALOG_LOADTRUCK,DIALOG_STYLE_LIST,"¿Que quieres transportar?","{00F70C}Mercancía Legal {FFFFFF}(Ningún riesgo)\n"COL_GENERAL"Mercancía Ilegal {FFFFFF}(Riesgo de quedar encarcelado)","Ok","Cancelar");
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "* No estás en un camión para transportar.");
			}
		}
		case CHECKPOINT_RETURNTRUCK:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 6, 2185.3267,-2288.3525,13.5469))// In the case the player finds a way to exploit the checkpoint to different location
		    {
                CancelTruckDelivery(playerid);
                SendClientMessageEx(playerid, COLOR_REALRED, "ERROR: Fuiste a un checkpoint erronéo, la entrega no se completo.");
				return 1;
		    }
			if(GetPVarInt(playerid, "tpTruckRunTimer") != 0)
			{
				format(szMessage, sizeof(szMessage), ""COL_BLUE"Atención > %s (ID %d) posiblemente tenga cheats. Spectearlo.", GetPlayerNameEx(playerid), playerid);
				ABroadCast( COLOR_GRAD1, szMessage, 2 );
				format(szMessage, sizeof(szMessage), ""COL_GENERAL" Porfavor spectear a %s "COL_BLUE"(%d)", GetPlayerNameEx(playerid), playerid);
    			Log("logs/hack.log", szMessage);
			}
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
    		{
        		SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un camión!");
        		return 1;
    		}
    		if(TruckUsed[playerid] != INVALID_VEHICLE_ID && vehicleid != TruckUsed[playerid])
    		{
        		SendClientMessageEx(playerid, COLOR_WHITE, "Este no es el camion que utilizas, devuelve el camión para recibir su pago!");
        		return 1;
    		}
    		
		    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		    DisablePlayerCheckpoint(playerid);
		    gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
		    SetVehicleToRespawn(vehicleid);
		    
			new payment;
			new level = Info[playerid][pTruckSkill];
			if(level >= 0 && level <= 50) payment = 305;
			else if(level >= 51 && level <= 100) payment = 382;
			else if(level >= 101 && level <= 200) payment = 482;
			else if(level >= 201 && level <= 400) payment = 665;
			else if(level >= 401) payment = 712;

            new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
			if(truckdeliver == 16)
			{
       			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 3gr de droga por entregar mercancía ilegal.");
			    Info[playerid][pCrack] += 3;
			}
			else if(truckdeliver == 17)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 5gr de droga por entregar mercancía ilegal.");
			    Info[playerid][pCrack] += 5;
			}
			else if(truckdeliver == 18)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 8gr de hierba por entregar mercancía ilegal.");
			    Info[playerid][pPot] += 8;
			}
			else if(truckdeliver == 19)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 10gr de hierba por entregar mercancía ilegal.");
			    Info[playerid][pPot] += 10;
			}
			else if(truckdeliver == 20)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dio 15gr de droga por entregar mercancía ilegal.");
			    Info[playerid][pCrack] += 15;
			}
			else if(truckdeliver == 21)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dió 25 Materiales por entregar mercancía ilegal.");
				Info[playerid][pMats] += 25;
			}
			else if(truckdeliver == 22)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dió 55 Materiales por entregar mercancía ilegal.");
				Info[playerid][pMats] += 55;
			}
			else if(truckdeliver == 23)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dió 100 Materiales por entregar mercancía ilegal.");
				Info[playerid][pMats] += 100;
			}
			else if(truckdeliver == 24)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dió 150 Materiales por entregar mercancía ilegal.");
				Info[playerid][pMats] += 150;
			}
			else if(truckdeliver == 25)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Se te dió 200 Materiales por entregar mercancía ilegal.");
				Info[playerid][pMats] += 200;
			}
			if(Tax < 10000)
			{
				SendClientMessageEx(playerid, COLOR_GENERAL, "El gobierno no tiene fondos suficientes para pagarte por tu trabajo.");
                SendClientMessageEx(playerid, COLOR_GENERAL, "Puedes acercarte al ayuntamiento a cobrar en cualquier momento. (Pickup Cobrar)");
                Info[playerid][pCashGo] += payment;
			}
			else
			{
			    Tax -= payment;
				SaveStuff();
				GivePlayerCash(playerid, payment);
				format(szMessage, sizeof(szMessage), "* Ganaste $%d por entregar mercancías y devolver el camión.", payment);
		    	SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
		    }
			TruckUsed[playerid] = INVALID_VEHICLE_ID;
			DeletePVar(playerid, "TruckDeliver");
            if(Info[playerid][pDobleExp] == 0)
			{
               	Info[playerid][pTruckSkill]++;
			}
			else
			{
				Info[playerid][pTruckSkill] += 2;
				SendClientMessageEx(playerid, COLOR_GRAD1, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
			}
		}
	}
}
DisablePlayerCheckpoint(playerid);
return 1;
}

stock SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num){
foreach(Player, i)	{
	if(IsPlayerConnectedEx(i))		{
		SetPlayerCheckpoint(i,allx,ally,allz, radi);
	}
}

}

SendClientMessageEx(playerid, color, string[]){
if(InsideMainMenu[playerid] == 1 || TutStep[playerid] == 1)
	return 0;
else SendClientMessage(playerid, color, string);
return 1;
}

SendClientMessageToAllEx(color, string[]){
foreach(Player, i)	{
	if(InsideMainMenu[i] == 1 || TutStep[i] == 1) {}
	else SendClientMessage(i, color, string);
}
return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	new engine,lights,alarm,doors,bonnet,boot,objective, vehicleid = GetPlayerVehicleID(playerid);
	if(IsPlayerNPC(playerid))
	{
	    if(newstate == PLAYER_STATE_SPECTATING)
	    {
	    	TogglePlayerSpectating(playerid, false);
		}
		return 1;
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
		pvehicleid[playerid] = GetPlayerVehicleID(playerid);
		pmodelid[playerid] = GetVehicleModel(pvehicleid[playerid]);
	}
	else
	{
		pvehicleid[playerid] = 0;
		pmodelid[playerid] = 0;
	}
	
	if(IsABasureroVehicle(vehicleid) && (Info[playerid][pJob] == 8 || Info[playerid][pJob2] == 8) && GetPlayerSkin(playerid) == 50 && CheckBasura[playerid] == 0)
	{
		if(newstate == PLAYER_STATE_DRIVER)
		{
		    for(new i = 0 ; i < MAX_PLAYERS ; i++)
		    {
		        if(IsPlayerInAnyVehicle(i) && IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) != 0 && GetPlayerVehicleSeat(i) != 128)
		        {
		            MBasura[playerid] = true;
					RBasura[playerid] = false;
					MBasura[i] = false;
					RBasura[i] = true;
					CBasura[playerid] = i;
					CBasura[i] = playerid;
					EmpezarBasura(playerid, i);
				}
			}
		}
		else if(newstate == PLAYER_STATE_PASSENGER)
		{
		    for(new i = 0 ; i < MAX_PLAYERS ; i++)
		    {
		        if(IsPlayerInAnyVehicle(i) && IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == 0)
		        {
		            MBasura[playerid] = false;
					RBasura[playerid] = true;
					MBasura[i] = true;
					RBasura[i] = false;
					CBasura[playerid] = i;
					CBasura[i] = playerid;
					EmpezarBasura(i, playerid);
				}
			}
		}
	}
	if(oldstate == PLAYER_STATE_DRIVER)
	{
		//SetPlayerWeaponsEx(playerid);
		HideProgressBarForPlayer(playerid, VelocimetroBAR[playerid][0]);
		HideProgressBarForPlayer(playerid, VelocimetroBAR[playerid][1]);
		TextDrawHideForPlayer(playerid, VelocimetroTDP[playerid][0]);
		TextDrawHideForPlayer(playerid, VelocimetroTDP[playerid][1]);
		TextDrawHideForPlayer(playerid, VelocimetroTD[0]);
		TextDrawHideForPlayer(playerid, VelocimetroTD[1]);
		TextDrawHideForPlayer(playerid, VelocimetroTD[2]);
		TextDrawHideForPlayer(playerid, VelocimetroTD[3]);
		TextDrawHideForPlayer(playerid, VelocimetroTD[4]);
		StopAudioStreamForPlayer(playerid);
	}
	else if(oldstate == PLAYER_STATE_PASSENGER) //SetPlayerWeaponsEx(playerid);
	if(newstate == PLAYER_STATE_ONFOOT)
	{
	    if(TaxiOnDuty[playerid] > 0)
		{
			TaxiDrivers -= 1;
			TaxiOnDuty[playerid] = 0;
			TaxiTarifa[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Ahora estás fuera de servicio.");
			SetPlayerColor(playerid, TEAM_HIT_COLOR);
		}
		if(TaxiTiempo[playerid] >= 1)
		{
		    new giveplayeridex = TaxiDriver[playerid];
			new precio = TaxiCosto[playerid];
			format(szMessage, sizeof(szMessage), "Servicio de Taxi: $%d", precio);
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			format(szMessage, sizeof(szMessage), "Pasajero salió de tu taxi y ganaste $%d por el servicio de taxi.", precio);
			SendClientMessageEx(giveplayeridex, COLOR_WHITE, szMessage);
			GivePlayerCash(playerid, -precio);
			GivePlayerCash(giveplayeridex, precio);
			TaxiTiempo[playerid] = 0;
			TaxiDriver[playerid] = -1;
			TaxiCosto[playerid] = 0;
			TaxiCliente[giveplayeridex] = -1;
		}
		if(DrugFarming[playerid] == 1)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 	    DrugFarming[playerid] = 0;
	 	    SendClientMessageEx(playerid, COLOR_WHITE, "¡Dejaste de cosechar!");
		    if(IsAHarvest(GetPlayerVehicleID(playerid)))
			{
		 		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			}
		}
	}
	if((newstate == 2 || newstate == 3 || newstate == 7 || newstate == 9) && pTazer[playerid] == 1)
	{
		GivePlayerValidWeapon(playerid, pTazerReplace[playerid], 99999);
		pTazer[playerid] = 0;
	}
	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    fVehSpeed[playerid] = 0.0;
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, sizeof(name));
	    if(Info[playerid][pWeapons][4] > 0)	SetPlayerArmedWeapon(playerid,Info[playerid][pWeapons][4]);
		else SetPlayerArmedWeapon(playerid,0);
		gLastCar[playerid] = vehicleid;
		foreach(Player, i)
	    {
	 		if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TaxiOnDuty[i] == 1)
	   		{
				if(GetPlayerCash(playerid) < TaxiTarifa[i])
				{
					format(szMessage, sizeof(szMessage), "* Necesitas $%d para entrar al taxi.", TaxiTarifa[i]);
					SendClientMessageEx(playerid, COLOR_GREY, szMessage);
					RemovePlayerFromVehicle(playerid);
					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(playerid, X, Y, Z);
					SetPlayerPos(playerid, X, Y, Z+2);
					TogglePlayerControllable(playerid, 1);
				}
				else
				{
					if(TaxiOnDuty[i] == 1)
					{
						format(szMessage, sizeof(szMessage), "* Entraste al taxi de %s.", GetPlayerNameEx(i));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "* %s ha entrado a tu taxi.", GetPlayerNameEx(playerid));
						SendClientMessageEx(i, COLOR_GENERAL, szMessage);
						TaxiTiempo[playerid] = 1;
						TaxiCliente[i] = playerid;
						TaxiDriver[playerid] = i;
						TaxiCosto[playerid] = TaxiTarifa[i];
					}
	            }
	        }
	    }
	    if( GetPVarInt( playerid, "ToBeEjected" ) >= 1 )
		{
	       	SetPVarInt( playerid, "ToBeEjected", 0 );
	       	RemovePlayerFromVehicle( playerid );
	       	new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPlayerPos(playerid, X, Y, Z+2);
			if(GetPVarInt(playerid, "Injured") == 1)
			{
			    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
		   		SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
				SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
				SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));
				ClearAnimations(playerid);
	            ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);
			}
		}
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
		SetPlayerArmedWeapon(playerid, 0);
	    fVehSpeed[playerid] = 0.0;
		new newcar = GetPlayerVehicleID(playerid);
		GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(newcar,arr_Engine{newcar},lights,alarm,doors,bonnet,boot,objective);
		if(IsABike(newcar) && !IsARentCar(newcar))
		{
		    SetVehicleParamsEx(newcar,1,lights,alarm,doors,bonnet,boot,objective);
		}
		new pnamep[MAX_PLAYER_NAME];
		format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
		for(new v = 0 ; v < MAX_PLAYERVEHICLES ; v++)
		{
			if(newcar == PlayerVehicleInfo[v][pvId] && PlayerVehicleInfo[v][pvEnVenta])
			{
			    if(strcmp(PlayerVehicleInfo[v][pvOwner], pnamep) != 0)
			    {
					format(szMessage, sizeof(szMessage), "{FFFFFF}Este vehículo está en venta.\n\nDueño: %s\nModelo: %s\nPrecio: %d\n\n¿Quieres comprar este vehículo?", PlayerVehicleInfo[v][pvOwner],GetVehicleName(newcar),PlayerVehicleInfo[v][pvEnVentaP]);
					ShowPlayerDialog(playerid, DIALOG_ENVENTA, DIALOG_STYLE_MSGBOX, "NP:RP - Comprar vehículo",szMessage,"Comprar","Cancelar");
                	TogglePlayerControllable(playerid, false);
				}
			}
		}
	    if(GetCarSale(newcar) != -1)
	    {
			format(szMessage, sizeof(szMessage),""COL_WHITE"Este vehículo está en venta.\n\nModelo: %s\nPrecio: %d\n\n¿Quieres comprar este vehículo?", GetVehicleName(newcar), varCarSale[GetCarSale(newcar)][CSVehCost]);
			ShowPlayerDialog(playerid,DIALOG_CDBUY,DIALOG_STYLE_MSGBOX,""COL_GENERAL"NP:RP - "COL_WHITE"Adquirir vehículo",szMessage,"Comprar","Cancelar");
		    TogglePlayerControllable(playerid, false);
		    return 1;
	    }
	    GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
		if((engine == VEHICLE_PARAMS_UNSET || engine == VEHICLE_PARAMS_OFF) && GetVehicleModel(newcar) != 509 && GetVehicleModel(newcar) != 481 && GetVehicleModel(newcar) != 510)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Este vehiculo tiene el motor apagado - si quieres prenderlo, utiliza la letra 'N'.");
		}
		if((engine == VEHICLE_PARAMS_UNSET || engine == VEHICLE_PARAMS_ON) && GetVehicleModel(newcar) != 509 && GetVehicleModel(newcar) != 481 && GetVehicleModel(newcar) != 510)
		{
			ShowProgressBarForPlayer(playerid, VelocimetroBAR[playerid][0]);
			ShowProgressBarForPlayer(playerid, VelocimetroBAR[playerid][1]);
			TextDrawShowForPlayer(playerid, VelocimetroTDP[playerid][0]);
			TextDrawShowForPlayer(playerid, VelocimetroTDP[playerid][1]);
			TextDrawShowForPlayer(playerid, VelocimetroTD[0]);
			TextDrawShowForPlayer(playerid, VelocimetroTD[1]);
			TextDrawShowForPlayer(playerid, VelocimetroTD[2]);
			TextDrawShowForPlayer(playerid, VelocimetroTD[3]);
			TextDrawShowForPlayer(playerid, VelocimetroTD[4]);
		}
		if(IsARentCar(newcar))
		{
  			if(IsaRent[playerid] == 0)
		    {
				TogglePlayerControllable(playerid,0);
				ShowPlayerDialog(playerid, RENT_BIKE, DIALOG_STYLE_MSGBOX, ""COL_GENERAL"Renta",""COL_WHITE"Tiempo de Renta: "COL_BLUE"15 "COL_WHITE"Minutos\n"COL_WHITE"Precio: "COL_BLUE"200 "COL_WHITE"Dolares", "Rentar", "Cancelar");
				return 1;
			}
			else TogglePlayerControllable(playerid,1);
		}
	    if( GetPVarInt( playerid, "ToBeEjected" ) >= 1 )
		{
	       	SetPVarInt( playerid, "ToBeEjected", 0 );
	       	RemovePlayerFromVehicle( playerid );
	       	new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPlayerPos(playerid, X, Y, Z+2);
			if(GetPVarInt(playerid, "Injured") == 1)
			{
			    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
		   		SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
				SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
				SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));
				ClearAnimations(playerid);
				ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);
			}
		}
		gLastCar[playerid] = newcar;
	 	foreach(Player, i)
		{
	  		new v = GetPlayerVehicle(i, newcar);
		    if(v != -1)
			{
				new pname[MAX_PLAYER_NAME];
				format(pname, sizeof(pname), "%s", GetPlayerNameEx(playerid));
				if(strcmp(PlayerVehicleInfo[v][pvOwner], pname, true) == 0)
				{
					format(szMessage, sizeof(szMessage),"Eres el dueño de éste: %s", GetVehicleName(newcar));
					SendClientMessageEx(playerid, COLOR_GREY, szMessage);
					if(PlayerVehicleInfo[v][pvTicket] != 0)
					{
						format(szMessage, sizeof(szMessage),"Tienes una multa de $%d en tu vehículo. Debes pagar la multa en la central de SAPD.", PlayerVehicleInfo[v][pvTicket]);
						SendClientMessageEx(playerid, COLOR_GREY, szMessage);
					}
				}
				else if(strcmp(PlayerVehicleInfo[v][pvAllowPlayer], pname, true) == 0)
				{
					format(szMessage, sizeof(szMessage),"Usted tiene las llaves de este %s del dueño %s.", GetVehicleName(newcar), GetPlayerNameEx(i));
					SendClientMessageEx(playerid, COLOR_GREY, szMessage);
				}
				else
				{
	    			format(szMessage, sizeof(szMessage), "Este %s es de %s.", GetVehicleName(newcar), PlayerVehicleInfo[v][pvOwner]);
	      			SendClientMessageEx(playerid, COLOR_GREY, szMessage);
	      			GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
					if(doors == VEHICLE_PARAMS_ON)
					{
						format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" Usuario %s con ID: %d ha entrado a un vehículo con el seguro cerrado. (Posible hack)", GetPlayerNameEx(playerid), playerid);
						ABroadCast(-1, szMessage, 1);
	        			Log("logs/vehiculohack.log", szMessage);
					}
				}
				if(PlayerVehicleInfo[v][pvLocked] == 1 && PlayerVehicleInfo[v][pvLock] == 1)
				{
    				GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(newcar,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
					SetTimerEx("DisableVehicleAlarm", 20000, 0, "d",  newcar);
				}
				return 1;
			}
		}
	}
	if(newstate == PLAYER_STATE_SPAWNED) gPlayerSpawned[playerid] = 1;
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(ExamenManejo[playerid] != 0 || ExamenVuelo[playerid] != 0 || ExamenNav[playerid] != 0)
	{
        new veh = GetPlayerVehicleID(playerid);
	    OcultarTDLic(playerid);
		SendClientMessage(playerid, -1, ""COL_GENERAL"Te bajaste del vehiculo! Vuelve a intentarlo cuando te sientas listo!");
		SetVehicleToRespawn(veh);
		RemovePlayerFromVehicle(playerid);
		SetPlayerInterior(playerid, 10);
		SetPlayerPos(playerid,252.1511,117.4176,1003.21889);
		SetPlayerVirtualWorld(playerid, 500);
		ExamenManejo[playerid] = 0;
		ExamenVuelo[playerid] = 0;
		ExamenNav[playerid] = 0;
		return 1;
	}
	if (GetPlayerState(playerid) == 1) return 1;
	switch(Seatbelt[playerid])
	{
    	case 1:
    	{
        	if(IsABike(vehicleid)) format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s pone las manos en su casco, y se lo quita.", GetPlayerNameEx(playerid));
			else format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s pone las manos en su cinturón y se lo quita.", GetPlayerNameEx(playerid));
	    	NearMsg(playerid, -1, szMessage,20.0);
   	    	Seatbelt[playerid] = 0;
    	}
	}
	return 1;
}

function SetPlayerWeapons(playerid){
	ResetPlayerWeapons(playerid);
	for(new s = 0; s < 12; s++)
	{
		if(Info[playerid][pWeapons][s] > 0)
		{
			GivePlayerValidWeapon(playerid, Info[playerid][pWeapons][s], Info[playerid][pMunicion][s]);
		}
	}
	return 1;
}

function SetPlayerWeaponsEx(playerid){
	ResetPlayerWeapons(playerid);
	for(new s = 0; s < 12; s++)
	{
		if(Info[playerid][pWeapons][s] > 0)
		{
			GivePlayerValidWeapon(playerid, Info[playerid][pWeapons][s], Info[playerid][pMunicion][s]);
		}
	}
	SetPlayerArmedWeapon(playerid, GetPVarInt(playerid, "LastWeapon"));
}

stock GetPlayerFactionInfo(targetid, rank[64], division[64], employer[64])
{
switch (Info[targetid][pMember]) // employer/rank/division data is pulled from here
{
    case 1:
	{
        employer = "SAPD";
		switch(Info[targetid][pRank])
		{
		    case 1: rank = "Cadete";
		    case 2: rank = "Oficial";
		    case 3: rank = "Detective";
		    case 4: rank = "Sargento";
		    case 5: rank = "Teniente";
		    case 6: rank = "Comandante";
		    default: rank = "Cadete";
		}
		switch(Info[targetid][pDivision])
		{
		    case 1: division = "General";
		    case 2: division = "DIVCRI";
		    case 3: division = "DIVOES";
		    case 4: division = "DIVANDRO";
		    case 5: division = "SWAT";
		    case 6: division = "UL";
		    default: division = "Ninguna";
		}
	}
	case 2:
	{
        employer = "FBI";
		switch(Info[targetid][pRank])
		{
		    case 1: rank = "Agente";
		    case 2: rank = "Agente Superior";
		    case 3: rank = "Agente Especial";
		    case 4: rank = "Agente Especializado";
		    case 5: rank = "Sub/Director";
		    case 6: rank = "Director";
		    default: rank = "Agente";
		}
		switch(Info[targetid][pDivision])
		{
		    case 1: division = "General";
		    case 2: division = "DIVHO";
		    case 3: division = "UCO";
		    case 4: division = "UI";
		    case 5: division = "RR.HH";
		    default: division = "DIVHO";
		}
	}
	case 3:
	{
        employer = "SAEM";
		switch(Info[targetid][pRank])
		{
			case 1: rank = "Cabo";
			case 2: rank = "Soldado";
			case 3: rank = "Sargento";
			case 4: rank = "Capitan";
			case 5: rank = "Mayor";
			case 6: rank = "Coronel";
			default: rank = "Cabo";
		}
		switch(Info[targetid][pDivision])
		{
		    case 1: division = "General";
			case 2: division = "FASA";
		    case 3: division = "EMM";
		    case 4: division = "BO";
		    case 5: division = "FMSA";
		    default: division = "Ninguna";
		}
	}
	case 4:
	{
        employer = "SAMC";
		switch(Info[targetid][pRank])
		{
			case 1: rank = "Prácticante";
			case 2: rank = "Paramédico";
			case 3: rank = "Médico";
			case 4: rank = "Supervisor";
			case 5: rank = "Responsable Técnico";
			case 6: rank = "Director";
			default: rank = "Prácticante";
		}
	}
	case 5:
	{
        employer = "Cable News Network";
		switch(Info[targetid][pRank])
		{
			case 1: rank = "Becario";
			case 2: rank = "Redactor";
			case 3: rank = "Periodista";
			case 4: rank = "Enviado Especial";
			case 5: rank = "Presentador";
			case 6: rank = "Director";
			default: rank = "Becario";
		}
		division = "Ninguna";
	}
	case 6:
	{
        employer = "Mecánicos";
		switch(Info[targetid][pRank])
		{
			case 1: rank = "Ayudante";
			case 2: rank = "Trucker";
			case 3: rank = "Mecánico";
			case 4: rank = "Ingeniero";
			case 5: rank = "Supervisor";
			case 6: rank = "Director";
			default: rank = "Ayudante";
		}
		division = "Ninguna";
	}
	case 7:
	{
        employer = "Gobierno";
		switch(Info[targetid][pRank])
		{
			case 1: rank = "Staff";
			case 2: rank = "Secretario";
			case 3: rank = "Alcalde de LS";
			case 4: rank = "Ministro de";
			case 5: rank = "Vice-Presidente";
			case 6: rank = "Presidente";
			default: rank = "Staff";
		}
		switch(Info[targetid][pDivision])
		{
		    case 2: division = "Chofer";
		    case 3: division = "UG";
		    case 4: division = "Defensa";
		    case 5: division = "Justicia";
		    case 6: division = "Economía";
		    default: division = "Ninguna";
		}
		division = "Ninguna";
	}
	case 8:
	{
	    employer = "Agencia Hitman";
	    switch(Info[targetid][pRank])
	    {
			case 1: rank = "Novato";
			case 2: rank = "Asesino";
			case 3: rank = "Sicario";
			case 4: rank = "Agente Especial";
			case 5: rank = "Vice Director";
			case 6: rank = "Director";
			default: rank = "Novato";
		}
		division = "Ninguna";
	}
	case 9:
	{
	    employer = "Mafia Rusa";
		switch(Info[targetid][pRank])
		{
			case 1: rank = "Shestorka";
			case 2: rank = "Okhrannik";
			case 3: rank = "Boevik";
			case 4: rank = "Sovetnik";
			case 5: rank = "Brigadier";
			case 6: rank = "Pakhan";
			default: rank = "[ERROR]";
		}
		division = "Ninguna";
	}
	case 10:
	{
	    employer = "Mafia Italiana";
		switch(Info[targetid][pRank])
		{
			case 1: rank = "Asociado";
			case 2: rank = "Soldado";
			case 3: rank = "Consigliere";
			case 4: rank = "Sottocapo";
			case 5: rank = "Don";
			case 6: rank = "Capo di tutti capi";
			default: rank = "[ERROR]";
		}
		division = "Ninguna";
	}
	case 11:
	{
	    employer = "Grove Street";
		switch(Info[targetid][pRank])
		{
			case 1: rank = "Outsider";
			case 2: rank = "Young Bully";
			case 3: rank = "Young Dealer";
			case 4: rank = "Gangster";
			case 5: rank = "Original Gangster";
			case 6: rank = "Real G";
			default: rank = "[ERROR]";
		}
		division = "Ninguna";
	}
	case 12:
	{
	    employer = "Ballas";
		switch(Info[targetid][pRank])
		{
			case 1: rank = "Outsider";
			case 2: rank = "Little Gangster";
			case 3: rank = "Young Gangster";
			case 4: rank = "Original Gangster";
			case 5: rank = "Loc";
			case 6: rank = "Rollin G";
			default: rank = "[ERROR]";
		}
		division = "Ninguna";
	}
	case 13:
	{
	    employer = "Los Santos Vagos";
		switch(Info[targetid][pRank])
		{
			case 1: rank = "Forastero";
			case 2: rank = "Latin";
			case 3: rank = "Tercera Corona";
			case 4: rank = "Segunda Corona";
			case 5: rank = "Primera Corona";
			case 6: rank = "Corona Real";
			default: rank = "[ERROR]";
		}
		division = "Ninguna";
	}
    default: { employer = "Ninguna"; division = "Ninguna"; rank = "N/A"; }
}
return 1;
}

ShowStats(playerid,targetid)
{
	if(IsPlayerConnectedEx(targetid))
	{
	    new title[55], l1[300], l2[300], l3[300], l4[50], string[950], string2[950];
	    new age = Info[targetid][pAge], level = Info[targetid][pLevel],atext[20];
	    switch(Info[targetid][pSex])
		{
			case 1: atext = "Hombre";
			case 2: atext = "Mujer";
		}
		new nxtlevel = Info[targetid][pLevel]+1;
		new exp = Info[targetid][pExp],expamount = nxtlevel*explevel,facfam[20], employer[64],division[64], rank[64], rango = Info[targetid][pRank];
		facfam = "Facción";
		GetPlayerFactionInfo(targetid, rank, division, employer);
		new jtext[21], jtext2[21];
		switch(Info[targetid][pJob])
		{
			case 0: jtext = "Ninguno";
	        case 1: jtext = "Pizzero";
	        case 2: jtext = "Camionero";
	        case 3: jtext = "Taxista";
	        case 4: jtext = "Cosechador";
	        case 5: jtext = "Bodyguard";
	        case 6: jtext = "Leñador";
	        case 7: jtext = "Obrero";
	        case 8: jtext = "Basurero";
		}
		switch(Info[targetid][pJob2])
		{
   			case 0: jtext2 = "Ninguno";
	        case 1: jtext2 = "Pizzero";
	        case 2: jtext2 = "Camionero";
	        case 3: jtext2 = "Taxista";
	        case 4: jtext2 = "Cosechador";
	        case 5: jtext2 = "Bodyguard";
	        case 6: jtext2 = "Leñador";
	        case 7: jtext2 = "Obrero";
	        case 8: jtext2 = "Basurero";
		}
		new dotext[16];
		switch(Info[targetid][pVIP])
		{
			case 1: dotext = "Bronze";
			case 2: dotext = "Silver";
			case 3: dotext = "Gold";
			default: dotext = "No";
		}
		new arrest = Info[targetid][pArrested], housekey = Info[targetid][pPhousekey], hirekey = HireKey[targetid], cash = GetPlayerCash(playerid),
			adic=Info[targetid][pAdiccion], rentc = Info[targetid][pRenting], nid = getPlayerBusinessID(playerid),married[MAX_PLAYER_NAME];
		if(Info[playerid][pMarried] == 1) strmid(married, Info[targetid][pMarriedTo], 0, strlen(Info[targetid][pMarriedTo]), 255);
		else married = "Nadie";
		new ctime = Info[targetid][pConnectTime], rmt = Info[targetid][pRMutedTotal], jaadm = Info[targetid][pJailAdmin],account = Info[targetid][pMoneyBank],
		    tjail = Info[targetid][pJailTime], admutes = Info[targetid][pADMuteTotal], warn = Info[targetid][pWarn], xH = Info[targetid][pDobleExp];
        new totalwealth, wr = Info[targetid][pWRestricted], name[MAX_PLAYER_NAME], coinsvip = Info[targetid][pCoinsVip];
		GetPlayerName(targetid, name, sizeof(name));
		if(Info[targetid][pPhousekey] != INVALID_HOUSE_ID && strcmp(name, HouseInfo[Info[targetid][pPhousekey]][hOwner], true) == 0) totalwealth += HouseInfo[Info[targetid][pPhousekey]][hSafeMoney];
	    totalwealth = account + cash;
	    format(title, sizeof(title), "{FFFFFF}CUENTA DE {DF013A}%s",GetPlayerNameEx(targetid));
		l1 = "{DF013A}Edad: {FFFFFF}%d\n{DF013A}Nivel: {FFFFFF}%d\n{DF013A}Sexo: {FFFFFF}%s\n{DF013A}Experiencia: {FFFFFF}%d/%d\n{DF013A}%s: {FFFFFF}%s\t{DF013A}Rango: {FFFFFF}%s [%d]\t{DF013A}Division: {FFFFFF}%s\n{DF013A}Trabajo 1: {FFFFFF}%s\n{DF013A}Trabajo 2: {FFFFFF}%s\n{DF013A}Arrestos: {FFFFFF}%d\n";
		l2 = "{DF013A}VIP: {FFFFFF}%s\n{DF013A}Casa: {FFFFFF}%d\n{DF013A}Negocio: {FFFFFF}%d\n{DF013A}Rent Bike: {FFFFFF}%d\n{DF013A}Casa Renta: {FFFFFF}%d\n{DF013A}Adiccion: {FFFFFF}%d\n{DF013A}Casado(a) con {FFFFFF}%s\n{DF013A}Horas IG: {FFFFFF}%d\n{DF013A}Report Bloq: {FFFFFF}%d\n";
		l3 = "{DF013A}AdminJails: {FFFFFF}%d\t{DF013A}Tiempo: {FFFFFF}%d\n{DF013A}Advertencias: {FFFFFF}%d\n{DF013A}AD Mutes: {FFFFFF}%d\n{DF013A}Horas 2x: {FFFFFF}%d\n{DF013A}Dinero Total: {FFFFFF}$%d\n{DF013A}Restriccion de Armas: {FFFFFF}%dhs.\n{DF013A}Coins VIP: {FFFFFF}%d";
		strcat(string, l1);
        strcat(string, l2);
        strcat(string, l3);
        if (Info[targetid][pVIP] > 0)
		{
			l4 = "\n{DF013A}VIP Fin: {FFFFFF}DIA %d | MES %d";
			strcat(string, l4);
		}
		format(string2, sizeof(string2), string,age,level,atext,exp,expamount,facfam,employer,rank,rango,division,jtext,jtext2,arrest,dotext,housekey,nid,hirekey,rentc,adic,married,ctime,rmt,jaadm,tjail,warn,admutes,xH,totalwealth,wr,coinsvip,Info[targetid][pVIPDateD],Info[targetid][pVIPDateM]);
		ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, title, string2, "OK", "");
	}
}
function SetPlayerToAdminColor(playerid)
{
    if(IsPlayerConnectedEx(playerid))
	{
		if(ColorAdmin[playerid] == 0)
		{
			 SetPlayerColor(playerid, PROJO_ADMIN);
		}
		if(ColorAdmin[playerid] == 1)
		{
			 SetPlayerColor(playerid, PVERDE_ADMIN);
		}
		if(ColorAdmin[playerid] == 2)
		{
			 SetPlayerColor(playerid, PCELESTE_ADMIN);
		}
		if(ColorAdmin[playerid] == 3)
		{
			 SetPlayerColor(playerid, PAMARILLO_ADMIN);
		}
		if(ColorAdmin[playerid] == 4)
		{
			 SetPlayerColor(playerid, POLIVA_ADMIN);
		}
		if(ColorAdmin[playerid] == 5)
		{
			 SetPlayerColor(playerid, PROSADO_ADMIN);
		}
		if(ColorAdmin[playerid] == 6)
		{
			 SetPlayerColor(playerid, PMORADO_ADMIN);
		}
		if(ColorAdmin[playerid] == 7)
		{
			 SetPlayerColor(playerid, PORANGE_ADMIN);
		}
		if(ColorAdmin[playerid] == 8)
		{
			 SetPlayerColor(playerid, PNEGRO_ADMIN);
		}
   }
   return 1;
}


function SetPlayerToTeamColor(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{
	    if(GetPVarInt(playerid, "ArenaMode") == 2)
	    {
			switch(Info[playerid][pPaintTeam])
			{
			    case 1: SetPlayerColor(playerid, PAINTBALL_TEAM_RED);
			    case 2: SetPlayerColor(playerid, PAINTBALL_TEAM_BLUE);
	        }
	        return 1;
	    }
	    if(Info[playerid][pJailed] == 1 || Info[playerid][pJailed] == 4)
	    {
	        SetPlayerColor(playerid,TEAM_APRISON_COLOR);
			return 1;
		}
		else if(Info[playerid][pJailed] == 2 || Info[playerid][pJailed] == 5 || Info[playerid][pJailed] == 6) // Arrestado desde SAPD
		{
		    SetPlayerColor(playerid,TEAM_HIT_COLOR);
			return 1;
		}
		else
		{
	        SetPlayerColor(playerid,TEAM_HIT_COLOR);
		}
	    if(IsACop(playerid))
	    {
			if(OnDuty[playerid] == 1)
			{
	    		if(Team_SAPD(playerid))
	        	{
	        		SetPlayerColor(playerid,TEAM_BLUE_COLOR);
				}
				else if(Team_FBI(playerid))
	        	{
	        		SetPlayerColor(playerid,TEAM_FBI_COLOR);
				}
				else if(Team_NG(playerid))
				{
			    	SetPlayerColor(playerid, COLOR_NG);
				}
				else if(Team_SAMD(playerid))
				{
			    	SetPlayerColor(playerid, TEAM_MED_COLOR);
				}
				else
				{
				    SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
				}
			}
			else
			{
			    SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
			}
		}
		else
		{
		    if((Team_LSTV(playerid)) && OnDuty[playerid] == 1)
	    	{
	    		SetPlayerColor(playerid,TEAM_NEWS_COLOR);
			}
			else if((Team_SAMD(playerid)) && OnDuty[playerid] == 1)
			{
			   	SetPlayerColor(playerid, TEAM_MED_COLOR);
			}
			else if((Info[playerid][pJob] == 3 || Info[playerid][pJob2] == 3 || Info[playerid][pTaxiLicense] == 1) && TaxiOnDuty[playerid] != 0)
			{
				SetPlayerColor(playerid,TEAM_TAXI_COLOR);
	 		}
			else
			{
			    SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
			}
		}
	}
	return 1;
}

public OnGameModeExit()
{
    saveAccounts();
	SaveStuff();
    UpdatePoints();
	atmSave();
	saveCarSale();
	saveCodes();
	foreach(Player, i) { OnPlayerSavedStats(i); }
	DOF2_Exit();
	return 1;
}

// AddWarrant Function (playerid,judgeid,crime[])
function AddWarrant(playerid,judgeid,crime[])
{
new month,day,year;
getdate(year,month,day);
new playername[MAX_PLAYER_NAME];
GetPlayerName(playerid, playername, sizeof(playername));
format(szMessage,sizeof(szMessage),"OrdenesJ/%s.ini",playername);
new File: file = fopen(szMessage, io_write);
if(file)
{
    format(szMessage,sizeof(szMessage),"%s - %s (%d/%d/%d)",crime,GetPlayerNameEx(judgeid),month,day,year);
    fwrite(file, szMessage);
    fclose(file);
}
return 1;
}

// RemoveWarrant Function (playerid)
function RemoveWarrant(playerid)
{
new playername[MAX_PLAYER_NAME];
GetPlayerName(playerid, playername, sizeof(playername));
format(szMessage,sizeof(szMessage),"OrdenesJ/%s.ini",playername);
if(fexist(szMessage))
{
	fremove(szMessage);
	return 1;
}
else
{
    return 0;
}
}



// OAddWarrant Function (name[],judgeid,crime[])
function OAddWarrant(name[],judgeid,crime[])
{
new month,day,year;
getdate(year,month,day);
format(szMessage,sizeof(szMessage),"OrdenesJ/%s.ini",name);
new File: file = fopen(szMessage, io_write);
if(file)
{
    format(szMessage,sizeof(szMessage),"%s - %s (%d/%d/%d)",crime,GetPlayerNameEx(judgeid),month,day,year);
    fwrite(file, szMessage);
    fclose(file);
}
}

// ORemoveWarrant Function (name[])
function ORemoveWarrant(name[])
{
format(szMessage,sizeof(szMessage),"OrdenesJ/%s.ini",name);
if(fexist(szMessage))
{
    fremove(szMessage);
    return 1;
}
else
{
    return 0;
}
}

// -==================================================================
LoadStuff()
{
new arrCoords[8][64];
new strFromFile2[128];
new File: file = fopen("stuff.ini", io_read);
if (file)
{
	fread(file, strFromFile2);
	splits(strFromFile2, arrCoords, ',');
	Jackpot = strval(arrCoords[0]);
	Tax = strval(arrCoords[1]);
	if(Tax < 0) Tax = 0;
	if(TaxValue < 0) TaxValue = 0;
	TaxValue = strval(arrCoords[2]);
	Blood = strval(arrCoords[3]);
	Fuel = strval(arrCoords[4]);
	txtcost = strval(arrCoords[5]);
	TaxCNN = strval(arrCoords[6]);
	if(TaxCNN < 0) TaxCNN = 0;
	fclose(file);
	print("[SCRIPT] DATOS EXTRA cargados con exito.");
}
else
{
    GameModeExit();
}
return 1;
}

SaveStuff()
{
	new coordsstring[128];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d,%d,%d", Jackpot,Tax,TaxValue,Blood,Fuel,txtcost,TaxCNN);
	new File: file2 = fopen("stuff.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	//print("[script] Stuff Saved Successfully . . .");
	return 1;
}

//------------------------------------------------------------------------------------------------------

LoadAllPlayerVehicles()
{
    new pvfile[64];
	for(new iIndex = 0; iIndex < sizeof(PlayerVehicleInfo); iIndex++)
	{
		format(pvfile, 64, PV_FILE, iIndex);
		INI_ParseFile(pvfile, "loadpv_data", .bExtra = true, .extra = iIndex );
		/*new s[10];
		for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
		{
		    if(PlayerVehicleInfo[v][pvImpounded] >= 2) PlayerVehicleInfo[v][pvImpounded] = 0;
	    	if(PlayerVehicleInfo[v][pvModelId] != 0 && PlayerVehicleInfo[v][pvImpounded] == 0)
	    	{
	    	    new carcreated = CreateVehicle(PlayerVehicleInfo[v][pvModelId], PlayerVehicleInfo[v][pvPosX], PlayerVehicleInfo[v][pvPosY], PlayerVehicleInfo[v][pvPosZ], PlayerVehicleInfo[v][pvPosAngle],PlayerVehicleInfo[v][pvColor1], PlayerVehicleInfo[v][pvColor2], -1);
                new paintjob = PlayerVehicleInfo[v][pvPaintJob], color1 = PlayerVehicleInfo[v][pvColor1], color2 = PlayerVehicleInfo[v][pvColor2];
				PlayerVehicleInfo[v][pvId] = carcreated;
				VehicleFuel[carcreated] = PlayerVehicleInfo[v][pvFuel];
				PlayerVehicleInfo[v][pvSpawned] = 1;
				SetVehicleHealth(carcreated, PlayerVehicleInfo[v][pvHealth]);
				SetVehicleVirtualWorld(carcreated, PlayerVehicleInfo[v][pvVW]);
				format(s, sizeof(s), "LCRP %d", PlayerVehicleInfo[v][pvNumberPlate]);
				SetVehicleNumberPlate(carcreated, s);
				if(PlayerVehicleInfo[v][pvPaintJob] != -1) ChangeVehiclePaintjob(PlayerVehicleInfo[v][pvId], paintjob);
		        ChangeVehicleColor(PlayerVehicleInfo[v][pvId], color1, color2);
		        for(new m = 0; m < MAX_MODS; m++) AddVehicleComponent(PlayerVehicleInfo[v][pvId], PlayerVehicleInfo[v][pvMods][m]);
		        if(PlayerVehicleInfo[v][pvEnVenta])
		        {
		            format(szMessage, sizeof(szMessage), "{DF013A}Vehiculo en venta!\nDueño: {FFFFFF}%s\n{DF013A}Precio: {FFFFFF}$%d\n\nSubete para comprarlo.", PlayerVehicleInfo[v][pvOwner], PlayerVehicleInfo[v][pvEnVentaP]);
					PlayerVehicleInfo[v][pvEnVentaT] = CreateDynamic3DTextLabel(szMessage,-1,0.0, 0.0, 0.0,25.0,INVALID_PLAYER_ID,PlayerVehicleInfo[v][pvId]);
				}
				else { DestroyDynamic3DTextLabel(PlayerVehicleInfo[v][pvEnVentaT]); }
			}
			else if(PlayerVehicleInfo[v][pvModelId] == 0 && PlayerVehicleInfo[v][pvImpounded] != 0) PlayerVehicleInfo[v][pvImpounded] = 0;
		}*/
	}
	print("[SCRIPT] P-VEHICULOS cargados con exito.");
	return 1;
}

function loadpv_data(id, name[], value[])
{
	new string[128];
    INI_String("pvOwner", PlayerVehicleInfo[id][pvOwner],24);
    INI_Float("pvPosX", PlayerVehicleInfo[id][pvPosX]);
    INI_Float("pvPosY", PlayerVehicleInfo[id][pvPosY]);
    INI_Float("pvPosZ", PlayerVehicleInfo[id][pvPosZ]);
    INI_Float("pvPosR", PlayerVehicleInfo[id][pvPosAngle]);
    INI_Int("pvVW", PlayerVehicleInfo[id][pvVW]);
    INI_Int("pvModel", PlayerVehicleInfo[id][pvModelId]);
    INI_Int("pvLock", PlayerVehicleInfo[id][pvLock]);
    INI_Int("pvLocked", PlayerVehicleInfo[id][pvLocked]);
    INI_Int("pvPaintJob", PlayerVehicleInfo[id][pvPaintJob]);
    INI_Int("pvColor1", PlayerVehicleInfo[id][pvColor1]);
    INI_Int("pvColor2", PlayerVehicleInfo[id][pvColor2]);
	INI_String("pvAllowPlayer", PlayerVehicleInfo[id][pvAllowPlayer],24);
	INI_Int("pvAllowedPlayerId", PlayerVehicleInfo[id][pvAllowedPlayerId]);
    INI_Int("pvPark", PlayerVehicleInfo[id][pvPark]);
    INI_Int("pvStereo", PlayerVehicleInfo[id][pvStereo]);
    INI_String("pvNumberPlate", PlayerVehicleInfo[id][pvNumberPlate],32);
    INI_Int("pvPrice", PlayerVehicleInfo[id][pvPrice]);
    INI_Int("pvTicket", PlayerVehicleInfo[id][pvTicket]);
    INI_Int("pvImpounded", PlayerVehicleInfo[id][pvImpounded]);
    INI_Int("pvFuel", PlayerVehicleInfo[id][pvFuel]);
    INI_Float("pvHealth", PlayerVehicleInfo[id][pvHealth]);
    INI_Int("pvSpawned", PlayerVehicleInfo[id][pvSpawned]);
    INI_Int("pvEnVenta", PlayerVehicleInfo[id][pvEnVenta]);
    INI_Int("pvEnVentaP", PlayerVehicleInfo[id][pvEnVentaP]);
    INI_Int("pvEqSound", PlayerVehicleInfo[id][pvEqSound]);
    for(new m = 0; m <= 2 ; m++)
    {
    	format(string, 128, "pv%dWeapon%d",id,m);
		INI_Int(string,PlayerVehicleInfo[id][pvWeapons][m]);
		format(string, 64, "pv%dMunicion%d",id,m);
		INI_Int(string,PlayerVehicleInfo[id][pvMunicion][m]);
	}
	for(new m = 0; m < MAX_MODS; m++)
	{
 		format(string, 128, "pv%dMod%d", id, m);
   		INI_Int(string,PlayerVehicleInfo[id][pvMods][m]);
	}
	return 1;
}

SavePlayerVehiclesx(i)
{
	new pnamep[MAX_PLAYER_NAME];
	format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(i));
	for(new d = 0 ; d < MAX_PLAYERVEHICLES ; d++)
	{
	    if(strcmp(PlayerVehicleInfo[d][pvOwner], pnamep) == 0)
	    {
	        SavePlayerVehicles(d);
		}
	}
	return 1;
}

SavePlayerVehicles(iIndex)
{
    new pvfile[64], string[128];
	format(pvfile, 64, PV_FILE, iIndex);
	if(!INI_Exist(pvfile))
	{
	    new INI:File = INI_Open(pvfile);
	    INI_SetTag(File,"PVData");
	    if(PlayerVehicleInfo[iIndex][pvOwner]) { INI_WriteString(File,"pvOwner", PlayerVehicleInfo[iIndex][pvOwner]); }
	    else INI_WriteString(File,"pvOwner", "Nadie");
	    GetVehiclePos(PlayerVehicleInfo[iIndex][pvId], PlayerVehicleInfo[iIndex][pvPosX], PlayerVehicleInfo[iIndex][pvPosY], PlayerVehicleInfo[iIndex][pvPosZ]);
	    GetVehicleZAngle(PlayerVehicleInfo[iIndex][pvId], PlayerVehicleInfo[iIndex][pvPosAngle]);
	    PlayerVehicleInfo[iIndex][pvFuel] = VehicleFuel[PlayerVehicleInfo[iIndex][pvId]];
        INI_WriteFloat(File,"pvPosX", PlayerVehicleInfo[iIndex][pvPosX]);
        INI_WriteFloat(File,"pvPosY", PlayerVehicleInfo[iIndex][pvPosY]);
        INI_WriteFloat(File,"pvPosZ", PlayerVehicleInfo[iIndex][pvPosZ]);
        INI_WriteFloat(File,"pvPosR", PlayerVehicleInfo[iIndex][pvPosAngle]);
        INI_WriteInt(File,"pvVW", PlayerVehicleInfo[iIndex][pvVW]);
        INI_WriteInt(File,"pvModel", PlayerVehicleInfo[iIndex][pvModelId]);
        INI_WriteInt(File,"pvLock", PlayerVehicleInfo[iIndex][pvLock]);
        INI_WriteInt(File,"pvLocked", PlayerVehicleInfo[iIndex][pvLocked]);
        INI_WriteInt(File,"pvPaintJob", PlayerVehicleInfo[iIndex][pvPaintJob]);
        INI_WriteInt(File,"pvColor1", PlayerVehicleInfo[iIndex][pvColor1]);
        INI_WriteInt(File,"pvColor2", PlayerVehicleInfo[iIndex][pvColor2]);
        INI_WriteString(File,"pvAllowPlayer", PlayerVehicleInfo[iIndex][pvAllowPlayer]);
        INI_WriteInt(File,"pvAllowedPlayerId", PlayerVehicleInfo[iIndex][pvAllowedPlayerId]);
        INI_WriteInt(File,"pvPark", PlayerVehicleInfo[iIndex][pvPark]);
        INI_WriteInt(File,"pvStereo", PlayerVehicleInfo[iIndex][pvStereo]);
        INI_WriteString(File,"pvNumberPlate", PlayerVehicleInfo[iIndex][pvNumberPlate]);
        INI_WriteInt(File,"pvPrice", PlayerVehicleInfo[iIndex][pvPrice]);
        INI_WriteInt(File,"pvTicket", PlayerVehicleInfo[iIndex][pvTicket]);
        INI_WriteInt(File,"pvImpounded", PlayerVehicleInfo[iIndex][pvImpounded]);
        INI_WriteInt(File,"pvFuel", PlayerVehicleInfo[iIndex][pvFuel]);
        INI_WriteFloat(File,"pvHealth", PlayerVehicleInfo[iIndex][pvHealth]);
        INI_WriteInt(File,"pvSpawned", PlayerVehicleInfo[iIndex][pvSpawned]);
        INI_WriteInt(File,"pvEnVenta", PlayerVehicleInfo[iIndex][pvEnVenta]);
        INI_WriteInt(File,"pvEnVentaP", PlayerVehicleInfo[iIndex][pvEnVentaP]);
        INI_WriteInt(File,"pvEqSound", PlayerVehicleInfo[iIndex][pvEqSound]);
        for(new m = 0; m <= 2 ; m++)
    	{
    		format(string, 128, "pv%dWeapon%d",iIndex,m);
			INI_WriteInt(File,string,PlayerVehicleInfo[iIndex][pvWeapons][m]);
			format(string, 64, "pv%dMunicion%d",iIndex,m);
			INI_WriteInt(File,string,PlayerVehicleInfo[iIndex][pvMunicion][m]);
		}
		for(new m = 0; m < MAX_MODS; m++)
		{
 			format(string, 128, "pv%dMod%d", iIndex, m);
   			INI_WriteInt(File,string,PlayerVehicleInfo[iIndex][pvMods][m]);
		}
        INI_Close(File);
	}
	return 1;
}

SaveDynamicDoors(iIndex)
{
    new ddfile[64];
	format(ddfile, 64, DD_FILE, iIndex);
	if(!INI_Exist(ddfile))
	{
	    new INI:File = INI_Open(ddfile);
	    INI_SetTag(File,"HouseData");
        INI_WriteString(File,"Descripcion", DDoorsInfo[iIndex][ddDescription]);
        INI_WriteInt(File,"CustomInterior", DDoorsInfo[iIndex][ddCustomInterior]);
        INI_WriteInt(File,"ExteriorVW", DDoorsInfo[iIndex][ddExteriorVW]);
        INI_WriteInt(File,"ExteriorInt", DDoorsInfo[iIndex][ddExteriorInt]);
        INI_WriteInt(File,"InteriorVW", DDoorsInfo[iIndex][ddInteriorVW]);
        INI_WriteInt(File,"InteriorInt", DDoorsInfo[iIndex][ddInteriorInt]);
        INI_WriteFloat(File,"ExteriorX", DDoorsInfo[iIndex][ddExteriorX]);
        INI_WriteFloat(File,"ExteriorY", DDoorsInfo[iIndex][ddExteriorY]);
        INI_WriteFloat(File,"ExteriorZ", DDoorsInfo[iIndex][ddExteriorZ]);
        INI_WriteFloat(File,"ExteriorA", DDoorsInfo[iIndex][ddExteriorA]);
        INI_WriteFloat(File,"InteriorX", DDoorsInfo[iIndex][ddInteriorX]);
        INI_WriteFloat(File,"InteriorY", DDoorsInfo[iIndex][ddInteriorY]);
        INI_WriteFloat(File,"InteriorZ", DDoorsInfo[iIndex][ddInteriorZ]);
        INI_WriteFloat(File,"InteriorA", DDoorsInfo[iIndex][ddInteriorA]);
		INI_WriteInt(File,"CustomExterior", DDoorsInfo[iIndex][ddCustomExterior]);
		INI_WriteInt(File,"VIP", DDoorsInfo[iIndex][ddVIP]);
		INI_WriteInt(File,"Familia", DDoorsInfo[iIndex][ddFamily]);
		INI_WriteInt(File,"Faccion", DDoorsInfo[iIndex][ddFaction]);
		INI_WriteInt(File,"Admin", DDoorsInfo[iIndex][ddAdmin]);
		INI_WriteInt(File,"Wanted", DDoorsInfo[iIndex][ddWanted]);
		INI_WriteInt(File,"Vehicleable", DDoorsInfo[iIndex][ddVehicleAble]);
		INI_WriteInt(File,"Color", DDoorsInfo[iIndex][ddColor]);
		INI_WriteInt(File,"PickupModel", DDoorsInfo[iIndex][ddPickupModel]);
		INI_WriteString(File,"Pass", DDoorsInfo[iIndex][dPass]);
		INI_WriteInt(File,"Locked", DDoorsInfo[iIndex][dLocked]);
		INI_WriteInt(File,"Music", DDoorsInfo[iIndex][dMusic]);
        INI_Close(File);
	}
	return 1;
}

LoadDynamicDoors()
{
    new ddfile[64];
	for(new iIndex = 0; iIndex < sizeof(DDoorsInfo); iIndex++)
	{
		format(ddfile, 64, DD_FILE, iIndex);
		INI_ParseFile(ddfile, "loaddoors_data", .bExtra = true, .extra = iIndex );
		if(!isnull(DDoorsInfo[iIndex][ddDescription]))
  		{
  		    CreateDynamicDoor(iIndex);
		}
	}
	print("[SCRIPT] PUERTAS DINAMICAS cargados con exito.");
	return 1;
}

function loaddoors_data(id, name[], value[])
{
    INI_String("Descripcion", DDoorsInfo[id][ddDescription],48);
    INI_Int("CustomInterior", DDoorsInfo[id][ddCustomInterior]);
    INI_Int("ExteriorVW", DDoorsInfo[id][ddExteriorVW]);
    INI_Int("ExteriorInt", DDoorsInfo[id][ddExteriorInt]);
    INI_Int("InteriorVW", DDoorsInfo[id][ddInteriorVW]);
    INI_Int("InteriorInt", DDoorsInfo[id][ddInteriorInt]);
    INI_Float("ExteriorX", DDoorsInfo[id][ddExteriorX]);
    INI_Float("ExteriorY", DDoorsInfo[id][ddExteriorY]);
    INI_Float("ExteriorZ", DDoorsInfo[id][ddExteriorZ]);
    INI_Float("ExteriorA", DDoorsInfo[id][ddExteriorA]);
    INI_Float("InteriorX", DDoorsInfo[id][ddInteriorX]);
    INI_Float("InteriorY", DDoorsInfo[id][ddInteriorY]);
    INI_Float("InteriorZ", DDoorsInfo[id][ddInteriorZ]);
    INI_Float("InteriorA", DDoorsInfo[id][ddInteriorA]);
    INI_Int("CustomExterior", DDoorsInfo[id][ddCustomExterior]);
    INI_Int("VIP", DDoorsInfo[id][ddVIP]);
    INI_Int("Familia", DDoorsInfo[id][ddFamily]);
    INI_Int("Faccion", DDoorsInfo[id][ddFaction]);
    INI_Int("Admin", DDoorsInfo[id][ddAdmin]);
    INI_Int("Wanted", DDoorsInfo[id][ddWanted]);
    INI_Int("Vehicleable", DDoorsInfo[id][ddVehicleAble]);
    INI_Int("Color", DDoorsInfo[id][ddColor]);
    INI_Int("PickupModel", DDoorsInfo[id][ddPickupModel]);
    INI_String("Pass", DDoorsInfo[id][dPass],24);
    INI_Int("Locked", DDoorsInfo[id][dLocked]);
    INI_Int("Music", DDoorsInfo[id][dMusic]);
	return 1;
}
 
// .Cfg
loadATM()
{
if(!fexist("atm.cfg")) return 1;
new szFileStr[1024], File: iFileHandle = fopen("atm.cfg", io_read),iIndex;
while(iIndex < sizeof(atmVariables) && fread(iFileHandle, szFileStr))
{
	sscanf(szFileStr, "p<|>ffffd",
	    atmVariables[iIndex][fATMPos][0],atmVariables[iIndex][fATMPos][1],atmVariables[iIndex][fATMPos][2],
	    atmVariables[iIndex][fATMPosRot],atmVariables[iIndex][atmMoney]);
	if(atmVariables[iIndex][fATMPos][0] > 0.0)
	{
		atmVariables[iIndex][rObjectId] = CreateDynamicObject(2942,atmVariables[iIndex][fATMPos][0],atmVariables[iIndex][fATMPos][1],atmVariables[iIndex][fATMPos][2]-0.4,0,0,atmVariables[iIndex][fATMPosRot]);
    	new text[150];
		format(text,sizeof(text),""COL_GENERAL"[ATM ID: "COL_WHITE"%d"COL_GENERAL"]\n"COL_WHITE"Ingresa tu tarjeta usando 'cajero'.",iIndex);
		atmVariables[iIndex][rTextLabel] = CreateDynamic3DTextLabel(text,COLOR_GENERAL,atmVariables[iIndex][fATMPos][0],atmVariables[iIndex][fATMPos][1],atmVariables[iIndex][fATMPos][2],8.0);
	}
	++iIndex;
}
print("[SCRIPT] ATM's cargados con exito.");
return fclose(iFileHandle);
}
atmSave()
{
	new szFileStr[512], File: fHandle = fopen("atm.cfg", io_write);
	for(new iIndex; iIndex < MAX_ATMS; iIndex++)
	{
	    format(szFileStr, sizeof(szFileStr), "%f|%f|%f|%f|%d\r\n",
	    atmVariables[iIndex][fATMPos][0],
	    atmVariables[iIndex][fATMPos][1],
	    atmVariables[iIndex][fATMPos][2],
	    atmVariables[iIndex][fATMPosRot],
		atmVariables[iIndex][atmMoney]);
	    fwrite(fHandle, szFileStr);
	}
	//print("[script] ATM Saved Successfully . . .");
	return fclose(fHandle);
}
// .Cfg
saveCodes()
{
	new szFileStr[512],File: fHandle = fopen("codigos.cfg", io_write);
	for(new iIndex; iIndex < MAX_CODESVIP; iIndex++)
	{
 		format(szFileStr, sizeof(szFileStr), "%d|%d\r\n",varCodesVIP[iIndex][CodeNro],varCodesVIP[iIndex][CodeCoins]);
 	   	fwrite(fHandle, szFileStr);
	}
	//print("[script] Codes VIP Saved Successfully . . .");
	return fclose(fHandle);
}

loadCodes()
{
	if(!fexist("codigos.cfg")) return 1;
	new szFileStr[512],File: iFileHandle = fopen("codigos.cfg", io_read),iIndex;
	while(iIndex < sizeof(varCodesVIP) && fread(iFileHandle, szFileStr))
	{
		sscanf(szFileStr, "p<|>ii",varCodesVIP[iIndex][CodeNro],varCodesVIP[iIndex][CodeCoins]);
		++iIndex;
	}
	print("[SCRIPT] CODIGOS VIP cargados con exito.");
	return fclose(iFileHandle);
}

loadCarSale()
{
	if(!fexist("carsale.cfg")) return 1;
	new text_info[140],szFileStr[1024],File: iFileHandle = fopen("carsale.cfg", io_read),iIndex;
	while(iIndex < sizeof(varCarSale) && fread(iFileHandle, szFileStr))
	{
		sscanf(szFileStr, "p<|>ffffffffii",
		    varCarSale[iIndex][CSVehSpawn][0],
			varCarSale[iIndex][CSVehSpawn][1],
			varCarSale[iIndex][CSVehSpawn][2],
			varCarSale[iIndex][CSVehSpawn][3],
		    varCarSale[iIndex][VehSpawn][0],
			varCarSale[iIndex][VehSpawn][1],
			varCarSale[iIndex][VehSpawn][2],
			varCarSale[iIndex][VehSpawn][3],
			varCarSale[iIndex][CSVehCost],
			varCarSale[iIndex][CSVehModel]);
		if(varCarSale[iIndex][CSVehModel] >= 400)
		{
	    	new carcreated = CreateVehicle(varCarSale[iIndex][CSVehModel], varCarSale[iIndex][CSVehSpawn][0], varCarSale[iIndex][CSVehSpawn][1], varCarSale[iIndex][CSVehSpawn][2], varCarSale[iIndex][CSVehSpawn][3], -1, -1, 6);
			format(text_info, sizeof(text_info), "{DF013A}Vehiculo {FFFFFF}nuevo {DF013A}en venta!\n\nModelo: {FFFFFF}%s\n{DF013A}Precio: {FFFFFF}$%d\nSubete para comprarlo!", GetVehicleName(carcreated), varCarSale[iIndex][CSVehCost]);
			varCarSale[iIndex][CSVehicleLabel] = CreateDynamic3DTextLabel(text_info,COLOR_GENERAL,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
			varCarSale[iIndex][CSVehId] = carcreated;
			CreateDynamicMapIcon(varCarSale[iIndex][CSVehSpawn][0],varCarSale[iIndex][CSVehSpawn][1],varCarSale[iIndex][CSVehSpawn][2],55,0,0,0,-1,500.0);
		}
		++iIndex;
	}
	print("[SCRIPT] AUTOS EN VENTA cargados con exito.");
	return fclose(iFileHandle);
}
saveCarSale()
{
	new szFileStr[512],File: fHandle = fopen("carsale.cfg", io_write);

	for(new iIndex; iIndex < MAX_CARSALE; iIndex++)
	{
	    format(szFileStr, sizeof(szFileStr), "%f|%f|%f|%f|%f|%f|%f|%f|%d|%d\r\n",
		    varCarSale[iIndex][CSVehSpawn][0],
			varCarSale[iIndex][CSVehSpawn][1],
			varCarSale[iIndex][CSVehSpawn][2],
			varCarSale[iIndex][CSVehSpawn][3],
		    varCarSale[iIndex][VehSpawn][0],
			varCarSale[iIndex][VehSpawn][1],
			varCarSale[iIndex][VehSpawn][2],
			varCarSale[iIndex][VehSpawn][3],
			varCarSale[iIndex][CSVehCost],
			varCarSale[iIndex][CSVehModel]);
	    fwrite(fHandle, szFileStr);
	}
	//print("[script] Car Sale Saved Successfully . . .");
	return fclose(fHandle);
}
loadSpeedCam()
{
	if(!fexist("vCameras.cfg")) return 1;
	new text_info[68],szFileStr[1024],File: iFileHandle = fopen("vCameras.cfg", io_read),iIndex;
	while(iIndex < sizeof(vCameraInfo) && fread(iFileHandle, szFileStr))
	{
		sscanf(szFileStr, "p<|>ffffdddd",
		    vCameraInfo[iIndex][vCameraPos][0],
			vCameraInfo[iIndex][vCameraPos][1],
			vCameraInfo[iIndex][vCameraPos][2],
			vCameraInfo[iIndex][vCameraRot],
			vCameraInfo[iIndex][vCameraStatus],
			vCameraInfo[iIndex][vCameraRange],
			vCameraInfo[iIndex][vCameraLimit],
			vCameraInfo[iIndex][vCameraTicket]);
		if(vCameraInfo[iIndex][vCameraLimit] != 0)
		{
		    vCameraInfo[iIndex][vCameraObject] = CreateDynamicObject(18880, vCameraInfo[iIndex][vCameraPos][0],vCameraInfo[iIndex][vCameraPos][1],vCameraInfo[iIndex][vCameraPos][2],0,0,vCameraInfo[iIndex][vCameraRot]);
			switch(vCameraInfo[iIndex][vCameraStatus])
			{
	    		case 0: format(text_info, sizeof(text_info), ""COL_WHITE"(%d)\nCámara de Velocidad\nLímite: "COL_GENERAL"MPH %d", iIndex,vCameraInfo[iIndex][vCameraLimit]);
				case 1: format(text_info, sizeof(text_info), ""COL_WHITE"(%d)\nCámara de Velocidad\n"COL_BLUE"(DESACTIVADA)", iIndex);
			}
	        vCameraInfo[iIndex][vCameraLabel] = CreateDynamic3DTextLabel(text_info,-1,vCameraInfo[iIndex][vCameraPos][0],vCameraInfo[iIndex][vCameraPos][1],vCameraInfo[iIndex][vCameraPos][2]+5,10.0);
		}
		++iIndex;
	}
	print("[SCRIPT] CAMARAS DE VELOCIDAD cargadas con exito.");
	return fclose(iFileHandle);
}
saveSpeedCam()
{
	new szFileStr[512],File: fHandle = fopen("vCameras.cfg", io_write);
	for(new iIndex; iIndex < MAX_vCAMERAS; iIndex++)
	{
	    format(szFileStr, sizeof(szFileStr), "%f|%f|%f|%f|%d|%d|%d|%d\r\n",
		    vCameraInfo[iIndex][vCameraPos][0],
			vCameraInfo[iIndex][vCameraPos][1],
			vCameraInfo[iIndex][vCameraPos][2],
			vCameraInfo[iIndex][vCameraRot],
			vCameraInfo[iIndex][vCameraStatus],
			vCameraInfo[iIndex][vCameraRange],
			vCameraInfo[iIndex][vCameraLimit],
			vCameraInfo[iIndex][vCameraTicket]);
	    fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}
LoadServerStats()
{
#define SERVER_STATS "serverstat.ini"
if(!fexist(SERVER_STATS)) return 1;
new	File: i_FileHandle = fopen("serverstat.ini", io_read), sz_FileStr[256];
print("[SCRIPT] ESTADISTICAS DEL SERVIDOR cargadas con exito.");
fread(i_FileHandle, sz_FileStr);
sscanf(sz_FileStr, "p<,>iiiiiiiiiii", TotalLogin, TotalConnect, TotalAutoBan, TotalRegister, MaxPlayersConnected, MPDay, MPMonth, MPYear, MPHour, MPMinute, TotalUptime);
return fclose(i_FileHandle);
}

SaveServerStats()
{
new sz_FileStr[256], File: i_FileHandle = fopen(SERVER_STATS, io_write);
format(sz_FileStr, sizeof(sz_FileStr), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", TotalLogin, TotalConnect, TotalAutoBan, TotalRegister,MaxPlayersConnected,MPDay,MPMonth,MPYear,MPHour,MPMinute,TotalUptime);
fwrite(i_FileHandle, sz_FileStr);
#undef SERVER_STATS
//print("[script] Server Stats Saved Successfully . . .");
return fclose(i_FileHandle);
}

saveBusiness(iIndex)
{
    new bfile[64];
	format(bfile, 64, BUSINESS_FILE, iIndex);
	if(!INI_Exist(bfile)) // If not existing
	{
	    new INI:File = INI_Open(bfile);
	    INI_SetTag(File,"HouseData");
        INI_WriteInt(File,"Tipo", businessVariables[iIndex][bType]);
        INI_WriteString(File,"Nombre", businessVariables[iIndex][bName]);
        INI_WriteString(File,"Dueño", businessVariables[iIndex][bOwner]);
        INI_WriteFloat(File,"ExteriorX", businessVariables[iIndex][bExteriorPos][0]);
        INI_WriteFloat(File,"ExteriorY", businessVariables[iIndex][bExteriorPos][1]);
        INI_WriteFloat(File,"ExteriorZ", businessVariables[iIndex][bExteriorPos][2]);
        INI_WriteFloat(File,"InteriorX", businessVariables[iIndex][bInteriorPos][0]);
        INI_WriteFloat(File,"InteriorY", businessVariables[iIndex][bInteriorPos][1]);
        INI_WriteFloat(File,"InteriorZ", businessVariables[iIndex][bInteriorPos][2]);
        INI_WriteInt(File,"Interior", businessVariables[iIndex][bInterior]);
        INI_WriteFloat(File,"MiscX", businessVariables[iIndex][bMiscPos][0]);
        INI_WriteFloat(File,"MiscY", businessVariables[iIndex][bMiscPos][1]);
        INI_WriteFloat(File,"MiscZ", businessVariables[iIndex][bMiscPos][2]);
        INI_WriteInt(File,"Vault", businessVariables[iIndex][bVault]);
		INI_WriteInt(File,"Precio", businessVariables[iIndex][bPrice]);
		INI_WriteInt(File,"Stock", businessVariables[iIndex][bStock]);
		INI_WriteInt(File,"Locked", businessVariables[iIndex][bLocked]);
        INI_Close(File);
	}
	return 1;
}

loadBusiness()
{
    new bfile[64];
	for(new iIndex = 0; iIndex < sizeof(businessVariables); iIndex++)//Creates a loop, that goes through all of the businesses.
	{
		format(bfile, 64, BUSINESS_FILE, iIndex);
		INI_ParseFile(bfile, "loadbusiness_data", .bExtra = true, .extra = iIndex );//This is very hard to explain, but it basically loads the info from the file(More in Y_Less y_ini tutorial.)
		switch(businessVariables[iIndex][bLocked])
		{
			case 1:
			{
       			if(!strcmp("Sin Dueño", businessVariables[iIndex][bOwner])) format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"Nadie\n"COL_GENERAL"Precio: "COL_WHITE"$%d\n"COL_GENERAL"'/comprarnegocio'\n"COL_WHITE"["COL_GENERAL"Cerrado"COL_WHITE"]", iIndex, businessVariables[iIndex][bName], businessVariables[iIndex][bPrice]);
				else format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"%s\n"COL_WHITE"["COL_GENERAL"Cerrado"COL_WHITE"]", iIndex, businessVariables[iIndex][bName], businessVariables[iIndex][bOwner]);
			}
			case 0:
			{
			    if(!strcmp("Sin Dueño", businessVariables[iIndex][bOwner])) format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"Nadie\n"COL_GENERAL"Precio: "COL_WHITE"$%d\n"COL_GENERAL"'/comprarnegocio'\n"COL_WHITE"["COL_GENERAL"Abierto"COL_WHITE"]", iIndex, businessVariables[iIndex][bName], businessVariables[iIndex][bPrice]);
				else format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"%s\n"COL_WHITE"["COL_GENERAL"Abierto"COL_WHITE"]", iIndex, businessVariables[iIndex][bName], businessVariables[iIndex][bOwner]);
			}
		}
		businessVariables[iIndex][bLabelID] = CreateDynamic3DTextLabel(szMessage, -1, businessVariables[iIndex][bExteriorPos][0], businessVariables[iIndex][bExteriorPos][1], businessVariables[iIndex][bExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		businessVariables[iIndex][bPickupID] = CreateDynamicPickup(1274, 23, businessVariables[iIndex][bExteriorPos][0], businessVariables[iIndex][bExteriorPos][1], businessVariables[iIndex][bExteriorPos][2], 0, 0, -1, 250);
		CreatePickupForBusiness(iIndex);
	}
	print("[SCRIPT] NEGOCIOS cargados con exito.");
	return 1;
}

CreatePickupForBusiness(n)
{
	switch(businessVariables[n][bType])
	{
	    case 1: CreateDynamicMapIcon(businessVariables[n][bExteriorPos][0],businessVariables[n][bExteriorPos][1],businessVariables[n][bExteriorPos][2],	10,0,0,0,-1,500.0);
		case 2: CreateDynamicMapIcon(businessVariables[n][bExteriorPos][0],businessVariables[n][bExteriorPos][1],businessVariables[n][bExteriorPos][2],	45,0,0,0,-1,500.0);
		case 3: CreateDynamicMapIcon(businessVariables[n][bExteriorPos][0],businessVariables[n][bExteriorPos][1],businessVariables[n][bExteriorPos][2],	17,0,0,0,-1,500.0);
		case 4: CreateDynamicMapIcon(businessVariables[n][bExteriorPos][0],businessVariables[n][bExteriorPos][1],businessVariables[n][bExteriorPos][2],	12,0,0,0,-1,500.0);
		case 5: CreateDynamicMapIcon(businessVariables[n][bExteriorPos][0],businessVariables[n][bExteriorPos][1],businessVariables[n][bExteriorPos][2],	11,0,0,0,-1,500.0);
		case 6: CreateDynamicMapIcon(businessVariables[n][bExteriorPos][0],businessVariables[n][bExteriorPos][1],businessVariables[n][bExteriorPos][2],	 6,0,0,0,-1,500.0);
		case 7: CreateDynamicMapIcon(businessVariables[n][bExteriorPos][0],businessVariables[n][bExteriorPos][1],businessVariables[n][bExteriorPos][2],	 9,0,0,0,-1,500.0);
		case 8: CreateDynamicMapIcon(businessVariables[n][bExteriorPos][0],businessVariables[n][bExteriorPos][1],businessVariables[n][bExteriorPos][2],	49,0,0,0,-1,500.0);
		case 9: CreateDynamicMapIcon(businessVariables[n][bExteriorPos][0],businessVariables[n][bExteriorPos][1],businessVariables[n][bExteriorPos][2],	17,0,0,0,-1,500.0);
	}
	return 1;
}

function ModCar(playerid) {
	switch(pmodelid[playerid]) {
        case 562,565,559,561,560,575,534,567,536,535,576,411,579,602,496,518,527,589,597,419,
		533,526,474,545,517,410,600,436,580,439,549,491,445,604,507,585,587,466,492,546,551,516,
		426,547,405,409,550,566,406,540,421,529,431,438,437,420,525,552,416,433,427,490,528,
		407,544,470,598,596,599,601,428,499,609,524,578,486,573,455,588,403,514,423,
		414,443,515,456,422,482,530,418,572,413,440,543,583,478,554,402,542,603,475,568,504,457,
        483,508,429,541,415,480,434,506,451,555,477,400,412,404,489,479,442,458,467,558:
		{
        	ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
			return SendClientMessage(playerid, COLOR_GRAD1, "Info: Seleccione un item.");
		}
		default: return SendClientMessage(playerid,COLOR_RED,"Un error ocurrió, no puedes modificar este vehículo");
	}
	return 1;
}
function loadbusiness_data(id, name[], value[])
{
    INI_Int("Tipo", businessVariables[id][bType]);
    INI_String("Nombre", businessVariables[id][bName],48);
    INI_String("Dueño", businessVariables[id][bOwner],MAX_PLAYER_NAME);
    INI_Float("ExteriorX", businessVariables[id][bExteriorPos][0]);
    INI_Float("ExteriorY", businessVariables[id][bExteriorPos][1]);
    INI_Float("ExteriorZ", businessVariables[id][bExteriorPos][2]);
    INI_Float("InteriorX", businessVariables[id][bInteriorPos][0]);
    INI_Float("InteriorY", businessVariables[id][bInteriorPos][1]);
    INI_Float("InteriorZ", businessVariables[id][bInteriorPos][2]);
    INI_Int("Interior", businessVariables[id][bInterior]);
    INI_Float("MiscX", businessVariables[id][bMiscPos][0]);
    INI_Float("MiscY", businessVariables[id][bMiscPos][1]);
    INI_Float("MiscZ", businessVariables[id][bMiscPos][2]);
    INI_Int("Vault", businessVariables[id][bVault]);
    INI_Int("Precio", businessVariables[id][bPrice]);
    INI_Int("Stock", businessVariables[id][bStock]);
    INI_Int("Locked", businessVariables[id][bLocked]);
	return 1;
}
saveHouse(hID)
{
    new housefile[64];
	format(housefile, 64, HOUSE_FILE, hID);
	if(!INI_Exist(housefile)) // If not existing
	{
	    new INI:File = INI_Open(housefile);
	    INI_SetTag(File,"HouseData");
        INI_WriteInt(File,"Venta", HouseInfo[hID][hOwned]);
        INI_WriteInt(File,"Nivel", HouseInfo[hID][hLevel]);
        INI_WriteInt(File,"Tamano", HouseInfo[hID][gT]);
        INI_WriteInt(File,"Interior", HouseInfo[hID][hHInteriorWorld]);
        INI_WriteInt(File,"CInterior", HouseInfo[hID][hCustomInterior]);
        INI_WriteInt(File,"CExterior", HouseInfo[hID][hCustomExterior]);
        INI_WriteInt(File,"GInterior", HouseInfo[hID][gInteriorWorld]);
        INI_WriteString(File,"Owner", HouseInfo[hID][hOwner]);
        INI_WriteString(File,"Direccion", HouseInfo[hID][hDireccion]);
        INI_WriteFloat(File,"ExteriorX", HouseInfo[hID][hExteriorX]);
        INI_WriteFloat(File,"ExteriorY", HouseInfo[hID][hExteriorY]);
        INI_WriteFloat(File,"ExteriorZ", HouseInfo[hID][hExteriorZ]);
        INI_WriteFloat(File,"ExteriorR", HouseInfo[hID][hExteriorR]);
        INI_WriteFloat(File,"ExteriorA", HouseInfo[hID][hExteriorA]);
        INI_WriteFloat(File,"InteriorX", HouseInfo[hID][hInteriorX]);
        INI_WriteFloat(File,"InteriorY", HouseInfo[hID][hInteriorY]);
        INI_WriteFloat(File,"InteriorZ", HouseInfo[hID][hInteriorZ]);
        INI_WriteFloat(File,"InteriorR", HouseInfo[hID][hInteriorR]);
        INI_WriteFloat(File,"InteriorA", HouseInfo[hID][hInteriorA]);
        INI_WriteFloat(File,"GExteriorX", HouseInfo[hID][gX]);
        INI_WriteFloat(File,"GExteriorY", HouseInfo[hID][gY]);
        INI_WriteFloat(File,"GExteriorZ", HouseInfo[hID][gZ]);
        INI_WriteFloat(File,"GExteriorR", HouseInfo[hID][gR]);
        INI_WriteInt(File,"Seguro", HouseInfo[hID][hLock]);
        INI_WriteInt(File,"SlotRopero1", HouseInfo[hID][hSlotRopero1]);
        INI_WriteInt(File,"SlotRopero2", HouseInfo[hID][hSlotRopero2]);
        INI_WriteInt(File,"SlotRopero3", HouseInfo[hID][hSlotRopero3]);
        INI_WriteInt(File,"SlotRopero4", HouseInfo[hID][hSlotRopero4]);
        INI_WriteInt(File,"SlotRopero5", HouseInfo[hID][hSlotRopero5]);
        INI_WriteInt(File,"SlotRopero6", HouseInfo[hID][hSlotRopero6]);
        INI_WriteInt(File,"SlotRopero7", HouseInfo[hID][hSlotRopero7]);
        INI_WriteInt(File,"SlotRopero8", HouseInfo[hID][hSlotRopero8]);
        INI_WriteInt(File,"SlotRopero9", HouseInfo[hID][hSlotRopero9]);
        INI_WriteInt(File,"SlotRopero10", HouseInfo[hID][hSlotRopero10]);
        INI_WriteInt(File,"Renta", HouseInfo[hID][hRentable]);
        INI_WriteInt(File,"RentaPrecio", HouseInfo[hID][hRentFee]);
        INI_WriteInt(File,"Precio", HouseInfo[hID][hValue]);
        INI_WriteInt(File,"SafeMoney", HouseInfo[hID][hSafeMoney]);
        INI_WriteInt(File,"Pot", HouseInfo[hID][hPot]);
        INI_WriteInt(File,"Crack", HouseInfo[hID][hCrack]);
        INI_WriteInt(File,"Materials", HouseInfo[hID][hMaterials]);
        INI_WriteInt(File,"Wep1", HouseInfo[hID][hWeapons][0]);
        INI_WriteInt(File,"Wep2", HouseInfo[hID][hWeapons][1]);
        INI_WriteInt(File,"Wep3", HouseInfo[hID][hWeapons][2]);
        INI_WriteInt(File,"Wep4", HouseInfo[hID][hWeapons][3]);
        INI_WriteInt(File,"Wep5", HouseInfo[hID][hWeapons][4]);
        INI_WriteInt(File,"Ammo1", HouseInfo[hID][hMunicion][0]);
        INI_WriteInt(File,"Ammo2", HouseInfo[hID][hMunicion][1]);
        INI_WriteInt(File,"Ammo3", HouseInfo[hID][hMunicion][2]);
        INI_WriteInt(File,"Ammo4", HouseInfo[hID][hMunicion][3]);
        INI_WriteInt(File,"Ammo5", HouseInfo[hID][hMunicion][4]);
        INI_Close(File);
	}
	return 1;
}

LoadHouses()
{
    new housefile[64], szFileStr[256], szFileStrr[256];
	for(new hID = 0; hID < sizeof(HouseInfo); hID++)//Creates a loop, that goes through all of the businesses.
	{
		format(housefile, 64, HOUSE_FILE, hID);
		INI_ParseFile(housefile, "loadhouse_data", .bExtra = true, .extra = hID );//This is very hard to explain, but it basically loads the info from the file(More in Y_Less y_ini tutorial.)
		if(HouseInfo[hID][hExteriorX] > 0.0)
		{
		    new gt[24];
			if(HouseInfo[hID][gT] == 1) gt = "Pequeño";
			else if(HouseInfo[hID][gT] == 2) gt = "Mediano";
			else if(HouseInfo[hID][gT] == 3) gt = "Grande";
			if(HouseInfo[hID][hOwned])
			{
			    format(szFileStrr, sizeof(szFileStrr), ""COL_HOUSET"Garage\nDueño: "COL_WHITE"%s\nTamaño: "COL_WHITE"%s", HouseInfo[hID][hOwner],gt);
				if(HouseInfo[hID][hRentable] == 0)
				{
					format(szFileStr, sizeof(szFileStr), ""COL_HOUSET"Dueño\n"COL_WHITE"%s\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d",HouseInfo[hID][hOwner],HouseInfo[hID][hLevel],hID,HouseInfo[hID][hDireccion],hID+178);
				}
				else
				{
					format(szFileStr, sizeof(szFileStr), ""COL_HOUSET"Dueño\n"COL_WHITE"%s\n"COL_HOUSET"Renta: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d\n"COL_WHITE"Escribe /rentar para rentar aquí",HouseInfo[hID][hOwner],HouseInfo[hID][hRentFee],HouseInfo[hID][hLevel],hID,HouseInfo[hID][hDireccion],hID+178);
				}
			}
			else
			{
				format(szFileStr, sizeof(szFileStr), ""COL_HOUSET"Casa en Venta!\nCosto: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d\n"COL_WHITE"Para comprar usa: /comprarcasa",HouseInfo[hID][hValue],HouseInfo[hID][hLevel],hID,HouseInfo[hID][hDireccion],hID+178);
				format(szFileStrr, sizeof(szFileStrr), ""COL_HOUSET"Garage\nCasa en venta!\nTamaño: "COL_WHITE"%s",gt);
			}
			HouseInfo[hID][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[hID][hExteriorX], HouseInfo[hID][hExteriorY], HouseInfo[hID][hExteriorZ]);
			HouseInfo[hID][hTextID] = CreateDynamic3DTextLabel(szFileStr, -1, HouseInfo[hID][hExteriorX], HouseInfo[hID][hExteriorY], HouseInfo[hID][hExteriorZ]+0.5,10.0);
			HouseInfo[hID][gPickupID] = CreateDynamicPickup(1239, 23, HouseInfo[hID][gX], HouseInfo[hID][gY], HouseInfo[hID][gZ]);
			HouseInfo[hID][gTextID] = CreateDynamic3DTextLabel(szFileStrr, -1, HouseInfo[hID][gX], HouseInfo[hID][gY], HouseInfo[hID][gZ]+0.5,10.0);
			for(new i = 0; i < MAX_FURNITURE; i ++)
			{
				if(HouseInfo[hID][FPosX][i] != 0.0) HouseInfo[hID][FurnitureObj][i] = CreateDynamicObject(HouseInfo[hID][FModel][i], HouseInfo[hID][FPosX][i], HouseInfo[hID][FPosY][i], HouseInfo[hID][FPosZ][i], HouseInfo[hID][FRotX][i], HouseInfo[hID][FRotY][i], HouseInfo[hID][FRotZ][i], hID+6000, HouseInfo[hID][hHInteriorWorld], -1, 50.0);
			}
		}
	}
	print("[SCRIPT] CASAS cargadas con exito.");
	return 1;
}
function loadhouse_data(hID, name[], value[])
{
    INI_Int("Venta", HouseInfo[hID][hOwned]);
    INI_Int("Nivel", HouseInfo[hID][hLevel]);
    INI_Int("Tamano", HouseInfo[hID][gT]);
    INI_Int("Interior", HouseInfo[hID][hHInteriorWorld]);
    INI_Int("CInterior", HouseInfo[hID][hCustomInterior]);
    INI_Int("CExterior", HouseInfo[hID][hCustomExterior]);
    INI_Int("GInterior", HouseInfo[hID][gInteriorWorld]);
    INI_String("Owner", HouseInfo[hID][hOwner],MAX_PLAYER_NAME);
    INI_String("Direccion", HouseInfo[hID][hDireccion],MAX_PLAYER_NAME);
    INI_Float("ExteriorX", HouseInfo[hID][hExteriorX]);
    INI_Float("ExteriorY", HouseInfo[hID][hExteriorY]);
    INI_Float("ExteriorZ", HouseInfo[hID][hExteriorZ]);
    INI_Float("ExteriorR", HouseInfo[hID][hExteriorR]);
    INI_Float("ExteriorA", HouseInfo[hID][hExteriorA]);
    INI_Float("InteriorX", HouseInfo[hID][hInteriorX]);
    INI_Float("InteriorY", HouseInfo[hID][hInteriorY]);
    INI_Float("InteriorZ", HouseInfo[hID][hInteriorZ]);
    INI_Float("InteriorR", HouseInfo[hID][hInteriorR]);
    INI_Float("InteriorA", HouseInfo[hID][hInteriorA]);
    INI_Float("GExteriorX", HouseInfo[hID][gX]);
    INI_Float("GExteriorY", HouseInfo[hID][gY]);
    INI_Float("GExteriorZ", HouseInfo[hID][gZ]);
    INI_Float("GExteriorR", HouseInfo[hID][gR]);
    INI_Int("Seguro", HouseInfo[hID][hLock]);
    INI_Int("SlotRopero1", HouseInfo[hID][hSlotRopero1]);
    INI_Int("SlotRopero2", HouseInfo[hID][hSlotRopero2]);
    INI_Int("SlotRopero3", HouseInfo[hID][hSlotRopero3]);
    INI_Int("SlotRopero4", HouseInfo[hID][hSlotRopero4]);
    INI_Int("SlotRopero5", HouseInfo[hID][hSlotRopero5]);
    INI_Int("SlotRopero6", HouseInfo[hID][hSlotRopero6]);
    INI_Int("SlotRopero7", HouseInfo[hID][hSlotRopero7]);
    INI_Int("SlotRopero8", HouseInfo[hID][hSlotRopero8]);
    INI_Int("SlotRopero9", HouseInfo[hID][hSlotRopero9]);
    INI_Int("SlotRopero10", HouseInfo[hID][hSlotRopero10]);
    
    INI_Int("Renta", HouseInfo[hID][hRentable]);
    INI_Int("RentaPrecio", HouseInfo[hID][hRentFee]);
    INI_Int("Precio", HouseInfo[hID][hValue]);
    INI_Int("SafeMoney", HouseInfo[hID][hSafeMoney]);
    INI_Int("Pot", HouseInfo[hID][hPot]);
    INI_Int("Crack", HouseInfo[hID][hCrack]);
    INI_Int("Materials", HouseInfo[hID][hMaterials]);
    INI_Int("Wep1", HouseInfo[hID][hWeapons][0]);
    INI_Int("Wep2", HouseInfo[hID][hWeapons][1]);
    INI_Int("Wep3", HouseInfo[hID][hWeapons][2]);
    INI_Int("Wep4", HouseInfo[hID][hWeapons][3]);
    INI_Int("Wep5", HouseInfo[hID][hWeapons][4]);
    INI_Int("Ammo1", HouseInfo[hID][hMunicion][0]);
    INI_Int("Ammo2", HouseInfo[hID][hMunicion][1]);
    INI_Int("Ammo3", HouseInfo[hID][hMunicion][2]);
    INI_Int("Ammo4", HouseInfo[hID][hMunicion][3]);
    INI_Int("Ammo5", HouseInfo[hID][hMunicion][4]);
    INI_Int("FCount", HouseInfo[hID][FCount]);
    new key[32];
	for(new i = 0; i < MAX_FURNITURE; i ++)
	{
		format(key, 32, "FModel%d", i); INI_Int(key, HouseInfo[hID][FModel][i]);
		format(key, 32, "FPosX%d", i);  INI_Float(key, HouseInfo[hID][FPosX] [i]);
		format(key, 32, "FPosY%d", i);  INI_Float(key, HouseInfo[hID][FPosY] [i]);
		format(key, 32, "FPosZ%d", i);  INI_Float(key, HouseInfo[hID][FPosZ] [i]);
		format(key, 32, "FRotX%d", i);  INI_Float(key, HouseInfo[hID][FRotX] [i]);
		format(key, 32, "FRotY%d", i);  INI_Float(key, HouseInfo[hID][FRotY] [i]);
		format(key, 32, "FRotZ%d", i);  INI_Float(key, HouseInfo[hID][FRotZ] [i]);
	}
	return 1;
}

UpdatePoints()
{
	new idx;
	new File: file2;
	while (idx < sizeof(Points))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%f|%f|%f|%d|%d|%s|%s|%s|%d\n",
		Points[idx][Pointx],
		Points[idx][Pointy],
		Points[idx][Pointz],
		Points[idx][Type],
		Points[idx][Vulnerable],
		Points[idx][Owner],
		Points[idx][CapperName],
		Points[idx][Name],
		Points[idx][MatPoint]);
		if(idx == 0)
		{
			file2 = fopen("points.cfg", io_write);
		}
		else
		{
			file2 = fopen("points.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	//print("[script] Points Saved Successfully . . .");
	return 1;
}

LoadPoints()
{
	new arrCoords[9][64];
	new strFromFile2[256];
	new File: file = fopen("points.cfg", io_read);
	if (file){
		new idx;
		while (idx < sizeof(Points)){
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
			Points[idx][Pointx] = floatstr(arrCoords[0]);
			Points[idx][Pointy] = floatstr(arrCoords[1]);
			Points[idx][Pointz] = floatstr(arrCoords[2]);
			Points[idx][Type] = strval(arrCoords[3]);
			Points[idx][Vulnerable] = strval(arrCoords[4]);
			strmid(Points[idx][Owner], arrCoords[5], 0, strlen(arrCoords[5]), 255);
			strmid(Points[idx][CapperName], arrCoords[6], 0, strlen(arrCoords[6]), 255);
			strmid(Points[idx][Name], arrCoords[7], 0, strlen(arrCoords[7]), 255);
			Points[idx][MatPoint] = strval(arrCoords[8]);
			//printf("%s Type:%d Owner:%s",Points[idx][Name],Points[idx][Type],Points[idx][Owner]);
			Points[idx][CaptureTimerEx2] = -1;
			Points[idx][ClaimerId] = INVALID_PLAYER_ID;
			Points[idx][PointPickupID] = CreateDynamicPickup( 1239, 23, Points[idx][Pointx], Points[idx][Pointy], Points[idx][Pointz]);
			idx++;
		}
		print("[SCRIPT] PUNTOS cargados con exito.");
		fclose(file);
	}
	return 1;
}

function RemoveFlash(playerid)
{
	TextDrawHideForPlayer(playerid,flash);
	SetPVarInt(playerid,"PlayerHasBeenFlashed",2);
}

AntiDeAMX()
{
new a[][] = {
    "Unarmed (Fist)",
    "Brass K"
};
#pragma unused a
}

//------------------------------------------------------------------------------------------------------
public OnGameModeInit()
{
	/* DeAMX */
    AntiDeAMX();
    /* Some Timers */
	SetTimer("AntiVehSurf", 3000, 1); SetTimer("AumentarNecesidades", 120000, true); SetTimer("LimpiezaObjetosPrev", 7140000, false);
	/* RCON Commands */
	SendRconCommand("onfoot_rate 40"); SendRconCommand("incar_rate 40"); SendRconCommand("weapon_rate 40"); SendRconCommand("stream_distance 250.0"); SendRconCommand("stream_rate 1000");
	Streamer_TickRate(75);
	SendRconCommand("mapname Los Santos"); SendRconCommand("weburl www.newparadise-rp.net"); SendRconCommand("gamemodetext [ES/RP][v0.0.5]");
	format(szMessage, sizeof(szMessage), "hostname %s", SERVER_GM_TEXT);
	SendRconCommand(szMessage);
	/* Configuration */
	ManualVehicleEngineAndLights(); SetNameTagDrawDistance(30.0); ShowPlayerMarkers(PLAYER_MARKERS_MODE_STREAMED); EnableStuntBonusForAll(0); DisableInteriorEnterExits(); AllowInteriorWeapons(1); UsePlayerPedAnims();
	/* Loads */
	LoadHouses();
	LoadStuff();
	LoadServerStats();
	LoadPoints();
	LoadDynamicDoors();
	loadCarSale();
	loadSpeedCam();
	loadATM();
	loadCodes();
	loadBusiness();
	LoadAllPlayerVehicles();
	/* mSelection */
	skinlist = LoadModelSelectionMenu("mSelectionText/Ropa/skins.txt");
	ToyList = LoadModelSelectionMenu("mSelectionText/Ropa/toys.txt");
	ToyListGold = LoadModelSelectionMenu("mSelectionText/Ropa/toysgold.txt");
	DormitorioFur = LoadModelSelectionMenu("mSelectionText/Muebles/dormitorio.txt");
	ComedorFur = LoadModelSelectionMenu("mSelectionText/Muebles/ComedorFur.txt");
	BanoFur = LoadModelSelectionMenu("mSelectionText/Muebles/BanoFur.txt");
	LobbyFur = LoadModelSelectionMenu("mSelectionText/Muebles/LobbyFur.txt");
	CocinaFur = LoadModelSelectionMenu("mSelectionText/Muebles/CocinaFur.txt");
	ParedesFur = LoadModelSelectionMenu("mSelectionText/Muebles/ParedesFur.txt");
	ElectroFur = LoadModelSelectionMenu("mSelectionText/Muebles/ElectroFur.txt");
	OtrosFur = LoadModelSelectionMenu("mSelectionText/Muebles/OtrosFur.txt");
	/* TEMP FIX */
	gettime(thora, tminuto, tsegundo);
	RepararHora(thora);
	thora = cambiarhora;
	if(!tiemporeal) SetWorldTime(tiempo);
	if(tiemporeal)
	{
		new tmphora, tmpminuto, tmpsegundo;
		gettime(tmphora, tmpminuto, tmpsegundo);
		RepararHora(tmphora);
		tmphora = cambiarhora;
		SetWorldTime(tmphora);
	}
	ChequearHora();
	for(new i = 0; i < sizeof(CreatedCars); i++){CreatedCars[i] = INVALID_VEHICLE_ID;}
	for(new v = 0; v < MAX_VEHICLES; v++){VehicleFuel[v] = 300;}
	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);
	}
	/* TextDraws & ProgressBar */
	TDHUD[0] = TextDrawCreate(501.0, 4.0, "New~w~Paradise"); TextDrawBackgroundColor(TDHUD[0], 255); TextDrawFont(TDHUD[0], 3); TextDrawLetterSize(TDHUD[0], 0.5, 2.0); TextDrawColor(TDHUD[0], -553567489); TextDrawSetOutline(TDHUD[0], 1); TextDrawSetProportional(TDHUD[0], 1); TextDrawSetSelectable(TDHUD[0], 0);
	TDHUD[1] = TextDrawCreate(543.0, 21.0, "~w~ROLEPLAY"); TextDrawBackgroundColor(TDHUD[1], 255); TextDrawFont(TDHUD[1], 2); TextDrawLetterSize(TDHUD[1], 0.32, 1.0); TextDrawColor(TDHUD[1], -1); TextDrawSetOutline(TDHUD[1], 1); TextDrawSetProportional(TDHUD[1], 1); TextDrawSetSelectable(TDHUD[1], 0);
	TDIntro[0] = TextDrawCreate(280.0, 34.0, "New~w~Paradise"); TextDrawAlignment(TDIntro[0], 2); TextDrawBackgroundColor(TDIntro[0], 255); TextDrawFont(TDIntro[0], 3); TextDrawLetterSize(TDIntro[0], 0.67, 3.5); TextDrawColor(TDIntro[0], -553567489); TextDrawSetOutline(TDIntro[0], 1); TextDrawSetProportional(TDIntro[0], 1); TextDrawSetSelectable(TDIntro[0], 0);
	TDIntro[1] = TextDrawCreate(255.0, 64.0, "~w~ROLE"); TextDrawBackgroundColor(TDIntro[1], 255); TextDrawFont(TDIntro[1], 2); TextDrawLetterSize(TDIntro[1], 0.4, 1.2); TextDrawColor(TDIntro[1], -1); TextDrawSetOutline(TDIntro[1], 1); TextDrawSetProportional(TDIntro[1], 1); TextDrawSetSelectable(TDIntro[1], 0);
	TDIntro[2] = TextDrawCreate(297.0, 64.0, "PLAY"); TextDrawBackgroundColor(TDIntro[2], 255);TextDrawFont(TDIntro[2], 2);TextDrawLetterSize(TDIntro[2], 0.4, 1.2);TextDrawColor(TDIntro[2], -553567489);TextDrawSetOutline(TDIntro[2], 1);TextDrawSetProportional(TDIntro[2], 1);TextDrawSetSelectable(TDIntro[2], 0);
    TDIntro[3] = TextDrawCreate(137.0, 92.0, "Tu segunda vida comienza...");TextDrawBackgroundColor(TDIntro[3], 255);TextDrawFont(TDIntro[3], 2);TextDrawLetterSize(TDIntro[3], 0.5, 1.0);TextDrawColor(TDIntro[3], -1);TextDrawSetOutline(TDIntro[3], 1);TextDrawSetProportional(TDIntro[3], 1);TextDrawSetSelectable(TDIntro[3], 0);
    tdNecesidades[0] = TextDrawCreate(644.0, 428.0, "_");TextDrawBackgroundColor(tdNecesidades[0], 255);TextDrawFont(tdNecesidades[0], 1);TextDrawLetterSize(tdNecesidades[0], 0.5, 1.9);TextDrawColor(tdNecesidades[0], -1);TextDrawSetOutline(tdNecesidades[0], 0);TextDrawSetProportional(tdNecesidades[0], 1);TextDrawSetShadow(tdNecesidades[0], 1);TextDrawUseBox(tdNecesidades[0], 1);TextDrawBoxColor(tdNecesidades[0], 255);
	TextDrawTextSize(tdNecesidades[0], -6.0, -3.0);TextDrawSetSelectable(tdNecesidades[0], 0);
	tdNecesidades[1] = TextDrawCreate(40.0, 426.0, "EXPERIENCIA");TextDrawBackgroundColor(tdNecesidades[1], 255);TextDrawFont(tdNecesidades[1], 2);TextDrawLetterSize(tdNecesidades[1], 0.5, 1.0);TextDrawColor(tdNecesidades[1], -1);TextDrawSetOutline(tdNecesidades[1], 1);TextDrawSetProportional(tdNecesidades[1], 1);TextDrawSetSelectable(tdNecesidades[1], 0);
	tdNecesidades[2] = TextDrawCreate(364.000000, 429.000000, "HAMBRE");TextDrawBackgroundColor(tdNecesidades[2], 255);TextDrawFont(tdNecesidades[2], 1);TextDrawLetterSize(tdNecesidades[2], 0.390000, 0.899999);TextDrawColor(tdNecesidades[2], -1);TextDrawSetOutline(tdNecesidades[2], 1);TextDrawSetProportional(tdNecesidades[2], 1);TextDrawSetSelectable(tdNecesidades[2], 0);
	tdNecesidades[3] = TextDrawCreate(471.000000, 429.000000, "ORINA");TextDrawBackgroundColor(tdNecesidades[3], 255);TextDrawFont(tdNecesidades[3], 1);TextDrawLetterSize(tdNecesidades[3], 0.390000, 0.899999);TextDrawColor(tdNecesidades[3], -1);TextDrawSetOutline(tdNecesidades[3], 1);TextDrawSetProportional(tdNecesidades[3], 1);TextDrawSetSelectable(tdNecesidades[3], 0);
	tdNecesidades[4] = TextDrawCreate(555.000000, 429.000000, "CANSANCIO");TextDrawBackgroundColor(tdNecesidades[4], 255);TextDrawFont(tdNecesidades[4], 1);TextDrawLetterSize(tdNecesidades[4], 0.390000, 0.899999);TextDrawColor(tdNecesidades[4], -1);TextDrawSetOutline(tdNecesidades[4], 1);TextDrawSetProportional(tdNecesidades[4], 1);TextDrawSetSelectable(tdNecesidades[4], 0);
	DurmiendoTD = TextDrawCreate(649.0, 3.0, "_");TextDrawBackgroundColor(DurmiendoTD, 255);TextDrawFont(DurmiendoTD, 1);TextDrawLetterSize(DurmiendoTD, 0.5, 50.3);TextDrawColor(DurmiendoTD, -1);TextDrawSetOutline(DurmiendoTD, 0);TextDrawSetProportional(DurmiendoTD, 1);TextDrawSetShadow(DurmiendoTD, 1);TextDrawUseBox(DurmiendoTD, 1);TextDrawBoxColor(DurmiendoTD, 220);TextDrawTextSize(DurmiendoTD, -6.0, 0.0);TextDrawSetSelectable(DurmiendoTD, 0);
	//Cámara Flash
	flash = TextDrawCreate(-20.0,2.0,"|");TextDrawUseBox(flash,1);TextDrawBoxColor(flash,0xffffff66);TextDrawTextSize(flash,660.0,22.0);TextDrawAlignment(flash,0);TextDrawBackgroundColor(flash,0x000000ff);TextDrawFont(flash,3);TextDrawLetterSize(flash,1.0,52.2);TextDrawColor(flash,0xffffffff);TextDrawSetOutline(flash,1);TextDrawSetProportional(flash,1);TextDrawSetShadow(flash,1);
	//Texto de carga
	boxGM = TextDrawCreate(489.0, 414.0, "~b~~h~~h~~h~cargando...");TextDrawBackgroundColor(boxGM, 255);TextDrawFont(boxGM, 3);TextDrawLetterSize(boxGM, 0.69, 2.3);TextDrawColor(boxGM, COLOR_WHITE);TextDrawSetOutline(boxGM, 1);TextDrawSetProportional(boxGM, 1);TextDrawSetSelectable(boxGM, 0);
	txtAnimHelper = TextDrawCreate(220.0, 343.0, "");TextDrawBackgroundColor(txtAnimHelper, 255);TextDrawFont(txtAnimHelper, 3);TextDrawLetterSize(txtAnimHelper, 0.3, 2.4);TextDrawColor(txtAnimHelper, COLOR_GENERAL);TextDrawSetOutline(txtAnimHelper, 1);TextDrawSetProportional(txtAnimHelper, 1);TextDrawSetSelectable(txtAnimHelper, 0);
	//Texdraw DNI
	DNI0 = TextDrawCreate(464.222412, 138.886657, "usebox");TextDrawLetterSize(DNI0, 0.0, 18.93);TextDrawTextSize(DNI0, 191.3, 0.0);TextDrawAlignment(DNI0, 1);TextDrawColor(DNI0, 0);TextDrawUseBox(DNI0, true);TextDrawBoxColor(DNI0, 102);TextDrawSetShadow(DNI0, 0);TextDrawSetOutline(DNI0, 0);TextDrawFont(DNI0, 0);
	DNI1 = TextDrawCreate(193.777786, 137.884597, "ld_drv:ribbw");TextDrawLetterSize(DNI1, 0.0, 0.0);TextDrawTextSize(DNI1, 118.222213, 49.777770);TextDrawAlignment(DNI1, 1);TextDrawColor(DNI1, -1);TextDrawSetShadow(DNI1, 0);TextDrawSetOutline(DNI1, 0);TextDrawFont(DNI1, 4);
	DNI2 = TextDrawCreate(383.555603, 133.404434, "dni");TextDrawLetterSize(DNI2, 0.860666, 4.193421);TextDrawAlignment(DNI2, 1);TextDrawColor(DNI2, -1);TextDrawSetShadow(DNI2, 0);TextDrawSetOutline(DNI2, 1);TextDrawBackgroundColor(DNI2, 51);TextDrawFont(DNI2, 2);TextDrawSetProportional(DNI2, 1);
	DNI4 = TextDrawCreate(288.888732, 196.622344, "nombre");TextDrawLetterSize(DNI4, 0.45, 1.6);TextDrawAlignment(DNI4, 1);TextDrawColor(DNI4, 869072810);TextDrawSetShadow(DNI4, 0);TextDrawSetOutline(DNI4, 1);TextDrawBackgroundColor(DNI4, 51);TextDrawFont(DNI4, 2);TextDrawSetProportional(DNI4, 1);
	DNI5 = TextDrawCreate(289.777679, 230.968917, "edad");TextDrawLetterSize(DNI5, 0.45, 1.6);TextDrawAlignment(DNI5, 1);TextDrawColor(DNI5, 869072810);TextDrawSetShadow(DNI5, 0);TextDrawSetOutline(DNI5, 1);TextDrawBackgroundColor(DNI5, 51);TextDrawFont(DNI5, 2);TextDrawSetProportional(DNI5, 1);
	DNI6 = TextDrawCreate(365.778381, 230.968978, "sexo");TextDrawLetterSize(DNI6, 0.45, 1.6);TextDrawAlignment(DNI6, 1);TextDrawColor(DNI6, 869072810);TextDrawSetShadow(DNI6, 0);TextDrawSetOutline(DNI6, 1);TextDrawBackgroundColor(DNI6, 51);TextDrawFont(DNI6, 2);TextDrawSetProportional(DNI6, 1);
	DNI7 = TextDrawCreate(290.666534, 265.813476, "nacionalidad");TextDrawLetterSize(DNI7, 0.45, 1.6);TextDrawAlignment(DNI7, 1);TextDrawColor(DNI7, 869072810);TextDrawSetShadow(DNI7, 0);TextDrawSetOutline(DNI7, 1);TextDrawBackgroundColor(DNI7, 51);TextDrawFont(DNI7, 2);TextDrawSetProportional(DNI7, 1);
	LicenciasTD[0] = TextDrawCreate(178.0, 261.0, "_");TextDrawBackgroundColor(LicenciasTD[0], 255);TextDrawFont(LicenciasTD[0], 1);TextDrawLetterSize(LicenciasTD[0], 0.5, 5.6);TextDrawColor(LicenciasTD[0], -1);TextDrawSetOutline(LicenciasTD[0], 0);TextDrawSetProportional(LicenciasTD[0], 1);TextDrawSetShadow(LicenciasTD[0], 1);TextDrawUseBox(LicenciasTD[0], 1);TextDrawBoxColor(LicenciasTD[0], 80);TextDrawTextSize(LicenciasTD[0], 26.0, 0.0);
	TextDrawSetSelectable(LicenciasTD[0], 0);
	LicenciasTD[1] = TextDrawCreate(31.0, 247.0, "Centro de Licencias");TextDrawBackgroundColor(LicenciasTD[1], 255);TextDrawFont(LicenciasTD[1], 1);TextDrawLetterSize(LicenciasTD[1], 0.44, 1.1);TextDrawColor(LicenciasTD[1], -1508896513);TextDrawSetOutline(LicenciasTD[1], 1);TextDrawSetProportional(LicenciasTD[1], 1);TextDrawSetSelectable(LicenciasTD[1], 0);
	LicenciasTD[2] = TextDrawCreate(70.0, 269.0, "TIEMPO");TextDrawBackgroundColor(LicenciasTD[2], 255);TextDrawFont(LicenciasTD[2], 3);TextDrawLetterSize(LicenciasTD[2], 0.5, 1.3);TextDrawColor(LicenciasTD[2], -1508896513);TextDrawSetOutline(LicenciasTD[2], 0);TextDrawSetProportional(LicenciasTD[2], 1);TextDrawSetShadow(LicenciasTD[2], 1);TextDrawSetSelectable(LicenciasTD[2], 0);
	LicenciasTD[3] = TextDrawCreate(70.0, 300.0, "ESTADO");TextDrawBackgroundColor(LicenciasTD[3], 255);TextDrawFont(LicenciasTD[3], 3);TextDrawLetterSize(LicenciasTD[3], 0.5, 1.3);TextDrawColor(LicenciasTD[3], -1508896513);TextDrawSetOutline(LicenciasTD[3], 0);TextDrawSetProportional(LicenciasTD[3], 1);TextDrawSetShadow(LicenciasTD[3], 1);TextDrawSetSelectable(LicenciasTD[3], 0);
	VelocimetroTD[0] = TextDrawCreate(639.0, 307.0, "_");TextDrawBackgroundColor(VelocimetroTD[0], 255);TextDrawFont(VelocimetroTD[0], 1);TextDrawLetterSize(VelocimetroTD[0], 0.5, 3.4);TextDrawColor(VelocimetroTD[0], -1);TextDrawSetOutline(VelocimetroTD[0], 0);TextDrawSetProportional(VelocimetroTD[0], 1);TextDrawSetShadow(VelocimetroTD[0], 1);TextDrawUseBox(VelocimetroTD[0], 1);TextDrawBoxColor(VelocimetroTD[0], 100);
	TextDrawTextSize(VelocimetroTD[0], 567.0, 0.0);TextDrawSetSelectable(VelocimetroTD[0], 0);
	VelocimetroTD[1] = TextDrawCreate(603.0, 306.0, "COMBUSTIBLE");TextDrawAlignment(VelocimetroTD[1], 2);TextDrawBackgroundColor(VelocimetroTD[1], -1);TextDrawFont(VelocimetroTD[1], 2);TextDrawLetterSize(VelocimetroTD[1], 0.19, 1.0);TextDrawColor(VelocimetroTD[1], 255);TextDrawSetOutline(VelocimetroTD[1], 1);TextDrawSetProportional(VelocimetroTD[1], 1);TextDrawSetSelectable(VelocimetroTD[1], 0);
	VelocimetroTD[2] = TextDrawCreate(639.000000, 346.000000, "_");TextDrawBackgroundColor(VelocimetroTD[2], 255);TextDrawFont(VelocimetroTD[2], 1);TextDrawLetterSize(VelocimetroTD[2], 0.5, 3.4);TextDrawColor(VelocimetroTD[2], -1);TextDrawSetOutline(VelocimetroTD[2], 0);TextDrawSetProportional(VelocimetroTD[2], 1);TextDrawSetShadow(VelocimetroTD[2], 1);TextDrawUseBox(VelocimetroTD[2], 1);TextDrawBoxColor(VelocimetroTD[2], 100);
	TextDrawTextSize(VelocimetroTD[2], 567.0, 0.0);TextDrawSetSelectable(VelocimetroTD[2], 0);
	VelocimetroTD[3] = TextDrawCreate(603.0, 345.0, "VELOCIDAD");TextDrawAlignment(VelocimetroTD[3], 2);TextDrawBackgroundColor(VelocimetroTD[3], -1);TextDrawFont(VelocimetroTD[3], 2);TextDrawLetterSize(VelocimetroTD[3], 0.19, 1.0);TextDrawColor(VelocimetroTD[3], 255);TextDrawSetOutline(VelocimetroTD[3], 1);TextDrawSetProportional(VelocimetroTD[3], 1);TextDrawSetSelectable(VelocimetroTD[3], 0);
	VelocimetroTD[4] = TextDrawCreate(603.0, 354.0, "KM/h");TextDrawBackgroundColor(VelocimetroTD[4], -553567489);TextDrawFont(VelocimetroTD[4], 2);TextDrawLetterSize(VelocimetroTD[4], 0.2, 1.4);TextDrawColor(VelocimetroTD[4], 255);TextDrawSetOutline(VelocimetroTD[4], 1);TextDrawSetProportional(VelocimetroTD[4], 1);TextDrawSetSelectable(VelocimetroTD[4], 0);
	/* Vehicles */
	//Hitman
	HitmanVeh[0] = AddStaticVehicleEx(470,-257.0984,-2175.8813,29.0705,105.0551,0,0,TIME_RESPAWN); //Patriot
	HitmanVeh[1] = AddStaticVehicleEx(470,-255.3827,-2181.3809,29.0649,107.8102,0,0,TIME_RESPAWN); //Patriot
	HitmanVeh[2] = AddStaticVehicleEx(471,-258.9577,-2191.7478,28.4386,24.7205,0,0,TIME_RESPAWN); //Quad
	HitmanVeh[3] = AddStaticVehicleEx(471,-270.4542,-2197.0537,28.2266,24.5406,0,0,TIME_RESPAWN); //Quad
	HitmanVeh[4] = AddStaticVehicleEx(609,-273.9638,-2157.4136,28.7069,204.7467,0,0,TIME_RESPAWN); //Boxville
	HitmanVeh[5] = AddStaticVehicleEx(433,-269.8086,-2166.7129,29.1963,204.3128,0,0,TIME_RESPAWN); //Barracks
	HitmanVeh[6] = AddStaticVehicleEx(487,-252.7956,-2226.8320,29.2443,10.7603,0,0,TIME_RESPAWN); //Hunter
	HitmanVeh[7] = AddStaticVehicleEx(487,-264.9844,-2154.5051,29.0249,192.8709,0,0,TIME_RESPAWN); //Maverick
	HitmanVeh[8] = AddStaticVehicleEx(500,-267.8199,-2194.9180,28.8988,27.3873,0,0,TIME_RESPAWN); //Mesa
	HitmanVeh[9] = AddStaticVehicleEx(500,-262.8811,-2192.8770,28.9961,22.9937,0,0,TIME_RESPAWN); //Mesa
	//Cosechadora
	AddStaticVehicleEx(532, -359.3968, -1409.6276, 26.3044, 91.4883, -1, -1, 60000);
	AddStaticVehicleEx(532, -361.1713, -1420.1023, 26.3044, 91.4883, -1, -1, 60000);
	AddStaticVehicleEx(532, -362.9211, -1430.0790, 26.3044, 91.4883, -1, -1, 60000);
	AddStaticVehicleEx(532, -365.0708, -1440.3918, 26.3044, 91.4883, -1, -1, 60000);
	AddStaticVehicleEx(532, -366.6835, -1450.7468, 26.3044, 91.4883, -1, -1, 60000);
	//San Andreas Police Departament Cars
	SAPDVehicles[0] = AddStaticVehicleEx(596,1601.872924,-1704.370971,5.612636,89.574440,0,1,TIME_RESPAWN); // Patrulla LS   	1 //596
	SAPDVehicles[1] = AddStaticVehicleEx(596,1601.902221,-1700.465332,5.634525,89.566131,0,1,TIME_RESPAWN); // Patrulla LS   	2 // 596
	SAPDVehicles[2] = AddStaticVehicleEx(596,1601.933105,-1696.409912,5.642260,89.562606,0,1,TIME_RESPAWN); // Patrulla LS   	3 596/
	SAPDVehicles[3] = AddStaticVehicleEx(596,1601.963134,-1692.478881,5.656129,89.555740,0,1,TIME_RESPAWN); // Patrulla LS   	4 //569
	SAPDVehicles[4] = AddStaticVehicleEx(596,1595.511840,-1710.769531,5.613651,0.000000,0,1,TIME_RESPAWN); // Patrulla LS    	5
	SAPDVehicles[5] = AddStaticVehicleEx(596,1591.606079,-1710.771240,5.626485,0.000000,0,1,TIME_RESPAWN); // Patrulla LS    	6
	SAPDVehicles[6] = AddStaticVehicleEx(596,1587.455688,-1710.772827,5.648460,0.000000,0,1,TIME_RESPAWN); // Patrulla LS    	7
	SAPDVehicles[7] = AddStaticVehicleEx(596,1583.698120,-1710.773315,5.648464,0.000000,0,1,TIME_RESPAWN); // Patrulla LS    	8
	SAPDVehicles[8] = AddStaticVehicleEx(599,1526.548095,-1644.479614,6.056174,179.637084,0,1,TIME_RESPAWN); // Ranger   		9
	SAPDVehicles[9] = AddStaticVehicleEx(599,1530.429199,-1644.505371,6.124225,179.634948,0,1,TIME_RESPAWN); // Ranger   		10
	SAPDVehicles[10] = AddStaticVehicleEx(599,1534.434448,-1644.530761,6.133507,179.633880,0,1,TIME_RESPAWN); // Ranger   		11
	SAPDVehicles[11] = 	AddStaticVehicleEx(599,1538.758666,-1644.558349,6.156028,179.631210,0,1,TIME_RESPAWN); // Ranger   		12
	SAPDVehicles[12] = 	AddStaticVehicleEx(523,1567.272338,-1708.937011,5.457219,354.100372,0,1,TIME_RESPAWN); // HPV 1000 		13
	SAPDVehicles[13] = 	AddStaticVehicleEx(523,1565.331420,-1708.737304,5.475297,354.107971,0,1,TIME_RESPAWN); // HPV 1000 		14
	SAPDVehicles[14] = 	AddStaticVehicleEx(523,1562.516479,-1708.446411,5.508016,354.100280,0,1,TIME_RESPAWN); // HPV 1000 		15
	SAPDVehicles[15] = 	AddStaticVehicleEx(427,1571.071044,-1615.492797,13.514673,268.842010,0,1,TIME_RESPAWN); // Enforcer    	16
	SAPDVehicles[16] = 	AddStaticVehicleEx(427,1557.802734,-1615.510131,13.514776,269.681549,0,1,TIME_RESPAWN); // Enforcer    	17
	SAPDVehicles[17] = 	AddStaticVehicleEx(601,1544.134521,-1609.579345,13.141159,269.321655,0,1,TIME_RESPAWN); // SWAT Van    	18
	SAPDVehicles[18] = 	AddStaticVehicleEx(497,1563.660034,-1655.212158,28.589679,88.595161,0,1,TIME_RESPAWN); // Police Maverick  19
	SAPDVehicles[19] =  AddStaticVehicleEx(596,1535.9159,-1667.7427,13.1292,359.7549,0,1,TIME_RESPAWN); //20
	SAPDVehicles[20] =	AddStaticVehicleEx(596,1535.8901,-1677.7660,13.1263,179.5659,0,1,TIME_RESPAWN); //21
	SAPDVehicles[21] =	AddStaticVehicleEx(596,1602.0083,-1687.9724,5.6367,89.0936,0,1,TIME_RESPAWN); //22
	SAPDVehicles[22] =	AddStaticVehicleEx(596,1578.5010,-1710.9355,5.6371,357.7198,0,1,TIME_RESPAWN); //23
	SAPDVehicles[23] =	AddStaticVehicleEx(596,1574.3030,-1710.9478,5.6381,359.8578,0,1,TIME_RESPAWN); //24
	SAPDVehicles[24] =	AddStaticVehicleEx(596,1570.2288,-1711.0248,5.6373,359.6110,0,1,TIME_RESPAWN); //25
	SAPDVehicles[25] =	AddStaticVehicleEx(523,1566.0752,-1713.0042,5.4606,2.9605,0,1,TIME_RESPAWN); //26
	SAPDVehicles[26] =	AddStaticVehicleEx(523,1563.8184,-1713.0892,5.4617,3.3756,0,1,TIME_RESPAWN); //27
	SAPDVehicles[27] =	AddStaticVehicleEx(523,1560.1859,-1713.1456,5.4604,359.4186,0,1,TIME_RESPAWN); //28
	SAPDVehicles[28] =	AddStaticVehicleEx(523,1560.3358,-1708.2838,5.4613,359.7211,0,1,TIME_RESPAWN); //29
	SAPDVehicles[29] =	AddStaticVehicleEx(599,1544.9022,-1707.8859,6.0816,322.2441,0,1,TIME_RESPAWN); //30
	SAPDVehicles[30] =	AddStaticVehicleEx(599,1541.3705,-1705.2369,6.0824,318.1585,0,1,TIME_RESPAWN); ///31
	SAPDVehicles[31] =	AddStaticVehicleEx(599,1538.3998,-1701.8361,6.0766,309.0826,0,1,TIME_RESPAWN); ///32
	SAPDVehicles[32] =	AddStaticVehicleEx(601,1544.6089,-1613.6875,13.1416,90.3137,0,1,TIME_RESPAWN); // ///34
	SAPDVehicles[33] =	AddStaticVehicleEx(497,1560.5781,-1644.7632,28.5767,90.9838,1,1,TIME_RESPAWN); /////35
	SAPDVehicles[34] = AddStaticVehicleEx(525,1556.5985,-1606.3214,13.2680,179.1279,17,20, TIME_RESPAWN); // Tow Truck
	SAPDVehicles[35] = AddStaticVehicleEx(525,1560.8201,-1606.3423,13.2557,178.6305,18,20, TIME_RESPAWN); // Tow Truck
	SAPDVehicles[36] = AddStaticVehicleEx(415,487.3500,-1638.3472,9001.7852,183.4520,0,1,TIME_RESPAWN); // Cheetah SAPD 1
	SAPDVehicles[37] = AddStaticVehicleEx(560,491.4538,-1638.0227,9001.7178,183.6139,0,1,TIME_RESPAWN); // Sultan SAPD 1
	SAPDVehicles[38] = AddStaticVehicleEx(560,492.4958,-1655.3491,9001.7314,3.5955,0,1,TIME_RESPAWN); // Sultan
	SAPDVehicles[39] = AddStaticVehicleEx(415,484.1988,-1655.9805,9001.7314,5.0119,0,1,TIME_RESPAWN); // Cheetah
	SAPDVehicles[40] = AddStaticVehicleEx(421,495.4609,-1638.1056,9001.7295,183.6311,0,1,TIME_RESPAWN);
	SAPDVehicles[41] = AddStaticVehicleEx(426,499.7182,-1637.6061,9001.7354,182.9925,0,1,TIME_RESPAWN); // Premier Change
	SAPDVehicles[42] = AddStaticVehicleEx(579,503.8369,-1637.5188,9001.7314,184.2466,0,1,TIME_RESPAWN); // Huntley Change
	SAPDVehicles[43] = AddStaticVehicleEx(461,507.7335,-1637.1544,9001.7295,184.5250,0,1,TIME_RESPAWN); // PCJ 600
	SAPDVehicles[45] = AddStaticVehicleEx(521,511.9490,-1637.0925,9001.7324,181.8966,0,1,TIME_RESPAWN); // fcr 900
	SAPDVehicles[46] = AddStaticVehicleEx(506,513.0107,-1654.1715,9001.7334,4.3899,0,1,TIME_RESPAWN); // Super GT
	SAPDVehicles[47] = AddStaticVehicleEx(596,631.2089,-610.3391,16.0564,359.2538,57,1,TIME_RESPAWN);
	SAPDVehicles[48] = AddStaticVehicleEx(596,634.9767,-610.3834,16.0564,358.8744,57,1,TIME_RESPAWN);
	SAPDVehicles[49] = AddStaticVehicleEx(523,627.3511,-610.7618,16.1863,357.9838,57,1,TIME_RESPAWN);
	SAPDVehicles[50] = AddStaticVehicleEx(599,613.5255,-601.5044,16.9491,269.6267,57,1,TIME_RESPAWN);
	SAPDVehicles[51] = AddStaticVehicleEx(599,613.0554,-597.0876,16.9540,269.1958,57,1,TIME_RESPAWN);
	//Licencias
	VehiculosExamen[0][0] = AddStaticVehicleEx(410, -2092.9563, -173.7826, 34.9736, 271.2419, 70, 0, TIME_RESPAWN); //Manana
	VehiculosExamen[0][1] = AddStaticVehicleEx(410, -2092.6458, -168.6315, 34.9734, 270.4685, 70, 0, TIME_RESPAWN); //Manana
	VehiculosExamen[0][2] = AddStaticVehicleEx(410, -2092.6052, -163.5097, 34.9725, 270.8976, 70, 0, TIME_RESPAWN); //Manana
	VehiculosExamen[0][3] = AddStaticVehicleEx(410, -2093.0605, -158.4458, 34.9789, 273.8290, 70, 0, TIME_RESPAWN); //Manana
	VehiculosExamen[0][4] = AddStaticVehicleEx(410, -2093.0974, -152.5215, 34.9737, 271.1577, 70, 0, TIME_RESPAWN); //Manana
	VehiculosExamen[0][5] = AddStaticVehicleEx(410, -2092.9832, -147.0387, 34.9726, 270.2209, 70, 0, TIME_RESPAWN); //Manana
	VehiculosExamen[1][0] = AddStaticVehicleEx(451, -2073.1487, -172.6609, 35.0269, 90.3398, 70, 0, TIME_RESPAWN); //Turismo
	VehiculosExamen[1][1] = AddStaticVehicleEx(451, -2073.4980, -167.0810, 35.0267, 91.0616, 70, 0, TIME_RESPAWN); //Turismo
	VehiculosExamen[1][2] = AddStaticVehicleEx(451, -2073.3728, -161.5395, 35.0267, 92.7910, 70, 0, TIME_RESPAWN); //Turismo
	VehiculosExamen[1][3] = AddStaticVehicleEx(451, -2073.7310, -156.1890, 35.0278, 89.3823, 70, 0, TIME_RESPAWN); //Turismo
	VehiculosExamen[1][4] = AddStaticVehicleEx(451, -2072.9783, -150.4531, 35.0269, 92.0026, 70, 0, TIME_RESPAWN); //Turismo
	VehiculosExamen[1][5] = AddStaticVehicleEx(451, -2073.3164, -144.9753, 35.0268, 91.4544, 70, 0, TIME_RESPAWN); //Turismo
	VehiculosExamen[2][0] = AddStaticVehicleEx(581, -2092.1128, -106.0679, 34.9173, 356.9409, 70, 0, TIME_RESPAWN); //400
	VehiculosExamen[2][1] = AddStaticVehicleEx(581, -2089.1431, -106.0892, 34.9125, 356.9409, 70, 0, TIME_RESPAWN); //400
	VehiculosExamen[2][2] = AddStaticVehicleEx(581, -2085.6042, -106.1898, 34.9120, 356.9409, 70, 0, TIME_RESPAWN); //400
	VehiculosExamen[2][3] = AddStaticVehicleEx(581, -2082.3469, -106.4903, 34.9109, 358.6500, 70, 0, TIME_RESPAWN); //400
	VehiculosExamen[2][4] = AddStaticVehicleEx(581, -2079.1138, -106.5749, 34.9170, 358.8381, 70, 0, TIME_RESPAWN); //400
	VehiculosExamen[2][5] = AddStaticVehicleEx(581, -2075.2737, -106.4761, 34.9194, 359.7214, 70, 0, TIME_RESPAWN); //400
	VehiculosExamen[3][0] = AddStaticVehicleEx(593, 385.4590, 2538.5244, 16.9978, 176.5311, 70, 0, TIME_RESPAWN); //Avion
	VehiculosExamen[3][1] = AddStaticVehicleEx(593, 364.0550, 2535.1448, 17.1295, 180.8524, 70, 0, TIME_RESPAWN); //Avion
	VehiculosExamen[3][2] = AddStaticVehicleEx(593, 324.9099, 2537.3545, 17.2680, 178.8723, 70, 0, TIME_RESPAWN); //Avion
	VehiculosExamen[3][3] = AddStaticVehicleEx(593, 290.9887, 2535.8875, 17.2792, 181.1605, 70, 0, TIME_RESPAWN); //Avion
	VehiculosExamen[3][4] = AddStaticVehicleEx(593, 415.0602, 2449.8198, 16.9627, 358.0244, 70, 0, TIME_RESPAWN); //Avion
	VehiculosExamen[3][5] = AddStaticVehicleEx(593, 392.7581, 2450.4207, 16.9633, 4.0390,   70, 0, TIME_RESPAWN); //Avion
	VehiculosExamen[4][0] = AddStaticVehicleEx(469, 291.5113, 2543.7505, 25.4151, 180.1361, 70, 0, TIME_RESPAWN); //Helicoptero
	VehiculosExamen[4][1] = AddStaticVehicleEx(469, 325.2857, 2542.8806, 25.4220, 185.0358, 70, 0, TIME_RESPAWN); //Helicoptero
	VehiculosExamen[4][2] = AddStaticVehicleEx(469, 345.2990, 2573.9500, 16.4920, 143.8734, 70, 0, TIME_RESPAWN); //Helicoptero
	VehiculosExamen[4][3] = AddStaticVehicleEx(469, 358.6003, 2608.5769, 16.5300, 164.2003, 70, 0, TIME_RESPAWN); //Helicoptero
	VehiculosExamen[4][4] = AddStaticVehicleEx(469, 317.6461, 2589.3254, 16.5099, 109.7575, 70, 0, TIME_RESPAWN); //Helicoptero
	VehiculosExamen[4][5] = AddStaticVehicleEx(469, 358.3987, 2456.5332, 16.5002, 352.3828, 70, 0, TIME_RESPAWN); //Helicoptero
	VehiculosExamen[5][0] = AddStaticVehicleEx(493,-369.1000,-644.29999, 0.00000, 270.0000, 37, 37,TIME_RESPAWN); //Jetmax1
	VehiculosExamen[5][1] = AddStaticVehicleEx(493,-369.2000,-637.29999, 0.00000, 270.0000, 37, 37,TIME_RESPAWN); //Jetmax2
	VehiculosExamen[5][2] = AddStaticVehicleEx(493,-368.5000,-629.70020, 0.00000, 270.0000, 37, 37,TIME_RESPAWN); //Jetmax3
	VehiculosExamen[5][3] = AddStaticVehicleEx(493,-368.1000,-622.59998, 0.00000, 270.0000, 37, 37,TIME_RESPAWN); //Jetmax4
	VehiculosExamen[5][4] = AddStaticVehicleEx(493,-364.5000,-615.90002, 0.00000, 270.0000, 37, 37,TIME_RESPAWN); //Jetmax5
	VehiculosExamen[5][5] = AddStaticVehicleEx(493,-359.8999,-610.00000, 0.00000, 270.0000, 37, 37,TIME_RESPAWN); //Jetmax6
    for(new i = 0 ; i < 6 ; i++)
	{
		LinkVehicleToInterior(VehiculosExamen[0][i],0); SetVehicleVirtualWorld(VehiculosExamen[0][i],1);
		LinkVehicleToInterior(VehiculosExamen[1][i],0); SetVehicleVirtualWorld(VehiculosExamen[1][i],1);
		LinkVehicleToInterior(VehiculosExamen[2][i],0); SetVehicleVirtualWorld(VehiculosExamen[2][i],1);
		LinkVehicleToInterior(VehiculosExamen[3][i],0); SetVehicleVirtualWorld(VehiculosExamen[3][i],1);
		LinkVehicleToInterior(VehiculosExamen[4][i],0); SetVehicleVirtualWorld(VehiculosExamen[4][i],1);
		LinkVehicleToInterior(VehiculosExamen[5][i],0); SetVehicleVirtualWorld(VehiculosExamen[5][i],1);
	}
	//Transport LS
	TaxiTrans[0] = AddStaticVehicleEx(420,1777.3925,-1931.9706,13.1680,270.8230,6,6,TIME_RESPAWN); // 36
	TaxiTrans[1] = AddStaticVehicleEx(420,1777.6443,-1926.5598,13.1655,270.1909,6,6,TIME_RESPAWN); //37
	TaxiTrans[2] = AddStaticVehicleEx(420,1803.2380,-1932.2668,13.1655,90.3502,6,6,TIME_RESPAWN); // 38
	TaxiTrans[3] = AddStaticVehicleEx(420,1802.8896,-1926.4490,13.1920,91.7516,6,6,TIME_RESPAWN); //39
	TaxiTrans[4] = AddStaticVehicleEx(420,1803.0070,-1921.0698,13.1679,89.9241,6,6,TIME_RESPAWN); // Taxi          40
	// SAMD
	SAMCVehicles[0] = AddStaticVehicleEx(416,1096.09997559,-1329.90002441,13.39999962,0.00000000,1,3,TIME_RESPAWN); // Ambulancia  52
	SAMCVehicles[1] = AddStaticVehicleEx(416,1100.09997559,-1330.00000000,13.39999962,0.00000000,1,3,TIME_RESPAWN); // Ambulancia  53
	SAMCVehicles[2] = AddStaticVehicleEx(416,1109.09997559,-1330.19995117,13.39999962,0.00000000,1,3,TIME_RESPAWN);// Ambulancia 54
	SAMCVehicles[3] = AddStaticVehicleEx(416,1113.09997559,-1330.09997559,13.39999962,0.00000000,1,3,TIME_RESPAWN); // Ambulancia  55
	SAMCVehicles[4] = AddStaticVehicleEx(416,1122.09997559,-1329.80004883,13.39999962,0.00000000,1,3,TIME_RESPAWN); // Ambulancia  56
	SAMCVehicles[5] = AddStaticVehicleEx(416,1126.30004883,-1329.69995117,13.39999962,0.00000000,1,3,TIME_RESPAWN); // Ambulancia  57
	SAMCVehicles[6] = AddStaticVehicleEx(487,1161.40002441,-1367.80004883,26.89999962,0.00000000,1,3,TIME_RESPAWN); // Maverick 58
	//FBI
	FBIVehicle[0] = AddStaticVehicleEx(421,278.43112183,-1535.99670410,24.54375076,236.00000000,0,0,TIME_RESPAWN); //Elegant
	FBIVehicle[1] = AddStaticVehicleEx(421,281.64566040,-1531.28723145,24.54375076,233.99731445,0,0,TIME_RESPAWN); //Elegant
	FBIVehicle[2] = AddStaticVehicleEx(421,284.66522217,-1526.72875977,24.54375076,235.99731445,0,0,TIME_RESPAWN); //Elegant
	FBIVehicle[3] = AddStaticVehicleEx(421,287.99291992,-1521.94006348,24.54375076,233.99230957,0,0,TIME_RESPAWN); //Elegant
	FBIVehicle[4] = AddStaticVehicleEx(490,290.92388916,-1517.69372559,24.78887749,236.00000000,-1,-1,TIME_RESPAWN); //FBI Rancher
	FBIVehicle[5] = AddStaticVehicleEx(490,294.15356445,-1512.93969727,24.78887749,235.99731445,-1,-1,TIME_RESPAWN); //FBI Rancher
	FBIVehicle[6] = AddStaticVehicleEx(490,297.35870361,-1508.31335449,24.78887749,235.99731445,-1,-1,TIME_RESPAWN); //FBI Rancher
	FBIVehicle[7] = AddStaticVehicleEx(490,300.32995605,-1504.01623535,24.78887749,235.99731445,-1,-1,TIME_RESPAWN); //FBI Rancher
	FBIVehicle[8] = AddStaticVehicleEx(528,300.04907227,-1490.36193848,24.65375137,235.50000000,-1,-1,TIME_RESPAWN); //FBI Truck
	FBIVehicle[9] = AddStaticVehicleEx(528,306.08950806,-1481.64025879,24.62875175,235.49743652,-1,-1,TIME_RESPAWN); //FBI Truck
	FBIVehicle[10] = AddStaticVehicleEx(521,297.53024292,-1536.71789551,24.25412750,50.00000000,0,0,TIME_RESPAWN); //FCR-900
	FBIVehicle[11] = AddStaticVehicleEx(560,295.46044922,-1540.92248535,24.32372665,54.00000000,0,0,TIME_RESPAWN); //Sultan
	FBIVehicle[12] = AddStaticVehicleEx(560,302.93893433,-1485.83496094,24.39872551,233.99774170,0,0,TIME_RESPAWN); //Sultan
	FBIVehicle[13] = AddStaticVehicleEx(487,319.66525269,-1508.03454590,77.93007660,232.00000000,0,0,TIME_RESPAWN); //Maverick
	FBIVehicle[14] = AddStaticVehicleEx(487,339.3534,-1485.7954,76.7156,220.2925,0,0,TIME_RESPAWN); //Maverick
	FBIVehicle[15] = AddStaticVehicleEx(487,301.4234,-1532.7819,76.6724,246.3760,0,0,TIME_RESPAWN); //Maverick
	// Mecánicos LS
	MecanicosVehicle[0] = AddStaticVehicleEx(525,1810.9384,-1395.2280,13.2952,180.6543,1,0,TIME_RESPAWN); //Tow Truck     92
	MecanicosVehicle[1] = AddStaticVehicleEx(525,1816.0322,-1395.1042,13.2942,180.7349,1,0,TIME_RESPAWN); //Tow Truck     93
	MecanicosVehicle[2] = AddStaticVehicleEx(525,1819.7281,-1394.6769,13.3104,179.9819,1,0,TIME_RESPAWN); //Tow Truck     94
	MecanicosVehicle[3] = AddStaticVehicleEx(552,1814.6743,-1410.2916,13.2966,181.1989,1,1,TIME_RESPAWN);//Utility       98
	MecanicosVehicle[4] = AddStaticVehicleEx(552,1788.8965,-1438.4540,13.2914,129.5148,1,1,TIME_RESPAWN);  //Utility       99
	MecanicosVehicle[5] = AddStaticVehicleEx(552,1800.7826,-1422.6599,13.4663,132.1107,1,1,TIME_RESPAWN); //Utility       100
	// CNN Vehículos
	CNNVehicle[0] = AddStaticVehicleEx(488,741.7805800,-1369.6355000,25.9572100,180.6610000,3,118,TIME_RESPAWN); // News Van 116
	CNNVehicle[1] = AddStaticVehicleEx(582,763.5914900,-1334.6970200,13.7694000,180.2610000,3,118,TIME_RESPAWN); // News Van 117
	CNNVehicle[2] = AddStaticVehicleEx(582,758.1728500,-1334.6855500,13.7694000,180.2580000,3,118,TIME_RESPAWN); // News Van 118
	CNNVehicle[3] = AddStaticVehicleEx(582,752.6593000,-1334.6239000,13.7694000,180.2580000,3,118,TIME_RESPAWN); // San News 119
	CNNVehicle[4] = AddStaticVehicleEx(582,747.0997300,-1334.6927500,13.7694000,180.2580000,3,118,TIME_RESPAWN); // San News 120
	// HireCar I
	Rentbike[0] = AddStaticVehicleEx(509, 1719.2728, -1861.3340, 13.1831, 180.0000,1,1,TIME_RESPAWN);// 121
	Rentbike[1] = AddStaticVehicleEx(509, 1717.2517, -1861.3340, 13.1831, 180.0000,1,1,TIME_RESPAWN);// 121
	Rentbike[2] = AddStaticVehicleEx(509, 1715.3296, -1861.3340, 13.1831, 180.0000,1,1,TIME_RESPAWN);// 123
	Rentbike[3] = AddStaticVehicleEx(509, 1713.3207, -1861.3340, 13.1831, 180.0000,1,1,TIME_RESPAWN);// 124
	Rentbike[4] = AddStaticVehicleEx(509, 1711.2729, -1861.3340, 13.1831, 180.0000,1,1,TIME_RESPAWN);// 125
	// Pizza Bike's
	PizzaBike[0] = AddStaticVehicleEx(448,2123.00000000,-1784.40002441,13.10000038,0.00000000,17,6,TIME_RESPAWN); //Pizzaboy
	PizzaBike[1] = AddStaticVehicleEx(448,2121.00000000,-1784.40002441,13.10000038,0.00000000,17,6,TIME_RESPAWN); //Pizzaboy
	PizzaBike[2] = AddStaticVehicleEx(448,2119.00000000,-1784.30004883,13.10000038,0.00000000,17,6,TIME_RESPAWN); //Pizzaboy
	PizzaBike[3] = AddStaticVehicleEx(448,2116.50000000,-1784.19995117,13.10000038,0.00000000,17,6,TIME_RESPAWN); //Pizzaboy
	PizzaBike[4] = AddStaticVehicleEx(448,2114.19995117,-1784.30004883,13.10000038,0.00000000,17,6,TIME_RESPAWN); //Pizzaboy
	PizzaBike[5] = AddStaticVehicleEx(448,2111.80004883,-1784.40002441,13.10000038,0.00000000,17,6,TIME_RESPAWN); //Pizzaboy
	PizzaBike[6] = AddStaticVehicleEx(448,2109.00000000,-1784.40002441,13.10000038,0.00000000,17,6,TIME_RESPAWN); //Pizzaboy
	PizzaBike[7] = AddStaticVehicleEx(448,2106.00000000,-1784.50000000,13.10000038,0.00000000,17,6,TIME_RESPAWN); //Pizzaboy
	// Gobierno Cars
	GobiernoCar[0] = AddStaticVehicleEx(487,1386.94995117,-1638.79760742,38.59999847,0.00000000,-1,1,TIME_RESPAWN); // Maverick 155
	GobiernoCar[1] = AddStaticVehicleEx(409,1364.50000000,-1647.40002441,13.30000019,270.00000000,-1,1,TIME_RESPAWN); // Stretch 156
	GobiernoCar[2] = AddStaticVehicleEx(490,1363.59936523,-1642.92443848,13.69999981,270.00000000,-1,-1,TIME_RESPAWN); // FBI Rancher 157
	GobiernoCar[3] = AddStaticVehicleEx(490,1363.59960938,-1638.50000000,13.69999981,270.00000000,-1,-1,TIME_RESPAWN); // FBI Rancher 158
	GobiernoCar[4] = AddStaticVehicleEx(405,1363.30004883,-1660.50000000,13.39999962,270.00000000,-1,1,TIME_RESPAWN); // Sentinel 159
	GobiernoCar[5] = AddStaticVehicleEx(405,1363.19995117,-1651.80004883,13.10000038,270.00000000,-1,1,TIME_RESPAWN); // Sentinel 160
	// Rusos Cars
	RusosCar[0] = AddStaticVehicleEx(579, 659.9207, -1259.7892, 13.4501, 0.0000, 0, 0,TIME_RESPAWN); // Maverick 155
	RusosCar[1] = AddStaticVehicleEx(579, 659.9207, -1283.5885, 13.4501, 0.0000, 0, 0,TIME_RESPAWN); // Stretch 156
	RusosCar[2] = AddStaticVehicleEx(426, 659.9905, -1272.0978, 13.2512, 0.0000, 0, 0,TIME_RESPAWN); // FBI Rancher 157
	RusosCar[3] = AddStaticVehicleEx(445, 670.2653, -1262.8184, 13.3512, 0.0000, 0, 0,TIME_RESPAWN); // FBI Rancher 158
	RusosCar[4] = AddStaticVehicleEx(581, 669.2540, -1273.2262, 12.8997, 40.0000, 0, 0,TIME_RESPAWN); // Sentinel 159
	RusosCar[5] = AddStaticVehicleEx(581, 669.2844, -1275.7052, 12.8997, 40.0000, 0, 0,TIME_RESPAWN); // Sentinel 159
	RusosCar[6] = AddStaticVehicleEx(581, 669.3132, -1278.2963, 12.8997, 40.0000, 0, 0,TIME_RESPAWN); // Sentinel 159
	RusosCar[7] = AddStaticVehicleEx(426, 670.3415, -1289.5127, 13.2312, 0.0000, 0, -0,TIME_RESPAWN); // Sentinel 160
	// Italianos Cars
	ItalianosCar[0] = AddStaticVehicleEx(405, 1246.0353, -2039.8534, 59.5081, 270.0000, 0, 0,TIME_RESPAWN); // Maverick 155
	ItalianosCar[1] = AddStaticVehicleEx(405, 1246.0353, -2032.3356, 59.5081, 270.0000, 0, 0,TIME_RESPAWN); // Stretch 156
	ItalianosCar[2] = AddStaticVehicleEx(461, 1245.5597, -2020.1295, 59.5081, 270.0000, 0, 0,TIME_RESPAWN); // FBI Rancher 157
	ItalianosCar[3] = AddStaticVehicleEx(461, 1245.5597, -2017.1555, 59.5081, 270.0000, 0, 0,TIME_RESPAWN); // FBI Rancher 158
	ItalianosCar[4] = AddStaticVehicleEx(445, 1246.0719, -2011.4331, 59.5081, 270.0000, 0, 0,TIME_RESPAWN); // Sentinel 159
	ItalianosCar[5] = AddStaticVehicleEx(445, 1246.0719, -2025.4478, 59.5081, 270.0000, 0, 0,TIME_RESPAWN); // Sentinel 159
	ItalianosCar[6] = AddStaticVehicleEx(487, 1154.4810, -2020.3828, 69.0813, 90.0000, 0, 0,TIME_RESPAWN); // Sentinel 159
	// Grove Cars
	GroveCar[0] = AddStaticVehicleEx(567,2505.3999000,-1678.5000000,13.4000000,320.0000000,128,128,TIME_RESPAWN); //Savanna
	GroveCar[1] = AddStaticVehicleEx(567,2509.3000000,-1667.6000000,13.4000000,14.0000000,128,128,TIME_RESPAWN); //Savanna
	GroveCar[2] = AddStaticVehicleEx(567,2469.3000000,-1670.5000000,13.3000000,10.0000000,128,128,TIME_RESPAWN); //Savanna
	GroveCar[3] = AddStaticVehicleEx(600,2492.2000000,-1683.6000000,13.2000000,270.0000000,128,128,TIME_RESPAWN); //Picador
	GroveCar[4] = AddStaticVehicleEx(492,2484.3000000,-1654.0000000,13.2000000,90.0000000,128,128,TIME_RESPAWN); //Greenwood
	GroveCar[5] = AddStaticVehicleEx(492,2498.8999000,-1650.6000000,13.4000000,170.0000000,128,128,TIME_RESPAWN); //Greenwood
	GroveCar[6] = AddStaticVehicleEx(498,2473.3999000,-1689.5000000,13.7000000,0.0000000,128,128,TIME_RESPAWN); //Boxville
	// Ballas Cars
	BallasCar[0] = AddStaticVehicleEx(517,2001.8000000,-1121.5000000,26.7000000,0.0000000,134,134,TIME_RESPAWN); //Majestic
	BallasCar[1] = AddStaticVehicleEx(517,2004.6000000,-1121.4000000,26.6000000,0.0000000,134,134,TIME_RESPAWN); //Majestic
	BallasCar[2] = AddStaticVehicleEx(566,2018.5000000,-1140.8000000,24.7000000,90.0000000,134,134,TIME_RESPAWN); //Tahoma
	BallasCar[3] = AddStaticVehicleEx(566,2012.9004000,-1130.7998000,25.0000000,90.0000000,134,134,TIME_RESPAWN); //Tahoma
	BallasCar[4] = AddStaticVehicleEx(566,1990.2000000,-1130.8000000,25.7000000,90.0000000,134,134,TIME_RESPAWN); //Tahoma
	BallasCar[5] = AddStaticVehicleEx(412,1999.8000000,-1140.5000000,25.3000000,90.0000000,134,134,TIME_RESPAWN); //Voodoo
	BallasCar[6] = AddStaticVehicleEx(498,2011.7000000,-1115.0000000,26.4000000,180.0000000,134,134,TIME_RESPAWN); //Boxville
	// Vagos Cars
	VagosCar[0] = AddStaticVehicleEx(498,2357.1001000,-1291.8000000,24.2000000,180.0000000,6,6,TIME_RESPAWN); //Boxville
	VagosCar[1] = AddStaticVehicleEx(576,2317.1001000,-1295.6000000,23.8000000,270.0000000,6,6,TIME_RESPAWN); //Tornado
	VagosCar[2] = AddStaticVehicleEx(474,2343.2000000,-1296.2000000,23.9000000,270.0000000,6,6,TIME_RESPAWN); //Hermes
	VagosCar[3] = AddStaticVehicleEx(467,2321.7000000,-1305.5000000,23.9000000,270.0000000,6,6,TIME_RESPAWN); //Oceanic
	VagosCar[4] = AddStaticVehicleEx(467,2331.6001000,-1296.1000000,23.9000000,270.0000000,6,6,TIME_RESPAWN); //Oceanic
	VagosCar[5] = AddStaticVehicleEx(467,2355.3999000,-1305.9000000,23.9000000,270.0000000,6,6,TIME_RESPAWN); //Oceanic
	VagosCar[6] = AddStaticVehicleEx(474,2336.1001000,-1306.0000000,24.1000000,270.0000000,6,6,TIME_RESPAWN); //Hermes
	// Camioneros Cars
	TruckerVehicles[0] = AddStaticVehicleEx(414, 2190.4778, -2226.2375, 13.4007, 225.5716,11,1,TIME_RESPAWN); //Mule
	TruckerVehicles[1] = AddStaticVehicleEx(414, 2197.6855, -2219.0176, 13.4007, 225.5716,11,1,TIME_RESPAWN); //Mule
	TruckerVehicles[2] = AddStaticVehicleEx(414, 2204.9995, -2211.4180, 13.4007, 225.5716,11,1,TIME_RESPAWN); //Mule
	TruckerVehicles[3] = AddStaticVehicleEx(414, 2211.4575, -2204.7878, 13.4007, 225.5716,11,1,TIME_RESPAWN); //Mule
	TruckerVehicles[4] = AddStaticVehicleEx(456, 2226.8074, -2252.3269, 13.4946, 45.0000,11,1,TIME_RESPAWN); //
	TruckerVehicles[5] = AddStaticVehicleEx(456, 2219.5889, -2259.7583, 13.4946, 45.0000,11,1,TIME_RESPAWN); //
	TruckerVehicles[6] = AddStaticVehicleEx(456, 2211.9194, -2267.4021, 13.4946, 45.0000,11,1,TIME_RESPAWN); //
	TruckerVehicles[7] = AddStaticVehicleEx(456, 2204.7197, -2274.6123, 13.4946, 45.0000,11,1,TIME_RESPAWN); //
	TruckerVehicles[8] = AddStaticVehicleEx(456, 2234.4907, -2245.0652, 13.4946, 45.0000,11,1,TIME_RESPAWN); //
	//SAEM Vehicles
	NGLandVehicles[0] = AddStaticVehicleEx(548,2873.5906, -2681.5833, 25.7626,0.00000000,0,0,TIME_RESPAWN); //Cargobob
	NGLandVehicles[1] = AddStaticVehicleEx(548,2844.2737, -2682.2358, 25.8548,0.00000000,0,0,TIME_RESPAWN); //Cargobob
	NGLandVehicles[2] = AddStaticVehicleEx(470,2779.9985, -2426.4084, 13.5108,90.00000000,102,102, TIME_RESPAWN); //Patriot
	NGLandVehicles[3] = AddStaticVehicleEx(470,2779.9250, -2435.1667, 13.5108,90.00000000,102,102, TIME_RESPAWN); //Patriot
	NGLandVehicles[4] = AddStaticVehicleEx(470,2780.0571, -2443.9482, 13.5108,90.00000000,102,102, TIME_RESPAWN); //Patriot
	NGLandVehicles[5] = AddStaticVehicleEx(470,2778.1191, -2481.5015, 13.5108,90.00000000,102,102, TIME_RESPAWN); //Patriot
	NGLandVehicles[6] = AddStaticVehicleEx(468,2737.9905, -2512.1191, 13.3119,0.00000000,102,102, TIME_RESPAWN); //Sanchez
	NGLandVehicles[7] = AddStaticVehicleEx(468,2736.1094, -2512.1011, 13.3119,00.00000000,102,102, TIME_RESPAWN); //Sanchez
	NGLandVehicles[8] = AddStaticVehicleEx(468,2729.2393, -2512.1011, 13.3119,0.00000000,102,102, TIME_RESPAWN); //Sanchez
	NGLandVehicles[9] = AddStaticVehicleEx(468,2731.1189, -2512.1011, 13.3119,0.00000000,102,102, TIME_RESPAWN); //Sanchez
	NGLandVehicles[10] = AddStaticVehicleEx(471,2734.4214, -2512.4070, 13.1049,0.00000000,0,102, TIME_RESPAWN); //Quad
	NGLandVehicles[11] = AddStaticVehicleEx(471,2732.6355, -2512.4165, 13.1049,0.00000000,0,102, TIME_RESPAWN); //Quad
	NGLandVehicles[12] = AddStaticVehicleEx(416,2727.3062, -2416.2881, 13.7357,-90.00000000,102,102, TIME_RESPAWN); //Ambulance
	NGLandVehicles[13] = AddStaticVehicleEx(416,2726.1794, -2395.0818, 13.7357,-90.00000000,102,102, TIME_RESPAWN); //Ambulance
	NGLandVehicles[14] = AddStaticVehicleEx(470,2777.4226, -2493.5044, 13.5108,90.00000000,0,0, TIME_RESPAWN); //Patriot
	NGLandVehicles[15] = AddStaticVehicleEx(470,2710.4541, -2445.4407, 13.5108,270.00000000,0,0, TIME_RESPAWN); //Patriot
	NGLandVehicles[16] = AddStaticVehicleEx(470,2710.3992, -2434.9231, 13.5108,270.00000000,0,0, TIME_RESPAWN); //Patriot
	NGLandVehicles[17] = AddStaticVehicleEx(470,2710.4287, -2425.3689, 13.5108,270.00000000,0,0, TIME_RESPAWN); //Patriot
	NGLandVehicles[18] = AddStaticVehicleEx(470,2736.8872, -2389.0869, 13.5108,180.00000000,0,0, TIME_RESPAWN); //Patriot
	NGLandVehicles[19] = AddStaticVehicleEx(470,2745.7354, -2389.0317, 13.5108,180.00000000,0,0, TIME_RESPAWN); //Patriot
	NGLandVehicles[20] = AddStaticVehicleEx(433,2729.6526, -2504.1030, 14.0506,-90.00000000,0,0, TIME_RESPAWN); //Barracks
	NGLandVehicles[21] = AddStaticVehicleEx(433,2764.1006, -2380.4221, 14.0506,180.00000000,0,0, TIME_RESPAWN); //Barracks
	NGLandVehicles[22] = AddStaticVehicleEx(520,2667.0803, -2589.2529, 13.9443,0,0,0,TIME_RESPAWN); // hydra saem
	NGLandVehicles[23] = AddStaticVehicleEx(520,2698.7830, -2586.6108, 13.9403,0,0,0,TIME_RESPAWN); // hydra saem 1
	NGLandVehicles[24] = AddStaticVehicleEx(425,2807.7356, -2690.3787, 15.3994,0,0,0,TIME_RESPAWN); // hunter saem 1
	NGLandVehicles[25] = AddStaticVehicleEx(425,2690.9805, -2652.4636, 15.8075,0,0,0,TIME_RESPAWN); // hunter saem 2
	//Basureros
	BasurerosV[0] = AddStaticVehicleEx(408,2189.8000000,-1984.4000000,14.3000000,90.0000000,14,14,TIME_RESPAWN);
	BasurerosV[1] = AddStaticVehicleEx(408,2189.8000000,-1987.8000000,14.3000000,90.0000000,14,14,TIME_RESPAWN);
	BasurerosV[2] = AddStaticVehicleEx(408,2189.8091000,-1997.9000000,14.3000000,90.0000000,14,14,TIME_RESPAWN);
	BasurerosV[3] = AddStaticVehicleEx(408,2189.8000000,-1994.5000000,14.3000000,90.0000000,14,14,TIME_RESPAWN);
	BasurerosV[4] = AddStaticVehicleEx(408,2189.8003000,-1991.0996000,14.3000000,90.0000000,14,14,TIME_RESPAWN);
	BasurerosV[5] = AddStaticVehicleEx(408,2128.5000000,-1973.0000000,14.3000000,180.0000000,14,14,TIME_RESPAWN);
	BasurerosV[6] = AddStaticVehicleEx(408,2132.5000000,-1973.0000000,14.3000000,180.0000000,14,14,TIME_RESPAWN);
	BasurerosV[7] = AddStaticVehicleEx(408,2136.5000000,-1973.0000000,14.3000000,180.0000000,14,14,TIME_RESPAWN);
	BasurerosV[8] = AddStaticVehicleEx(408,2140.5000000,-1973.0000000,14.3000000,180.0000000,14,14,TIME_RESPAWN);
	BasurerosV[9] = AddStaticVehicleEx(408,2144.5000000,-1973.0000000,14.3000000,180.0000000,14,14,TIME_RESPAWN);
	BasurerosV[10] = AddStaticVehicleEx(408,2148.5000000,-1973.0000000,14.3000000,180.0000000,14,14,TIME_RESPAWN);
	BasurerosV[11] = AddStaticVehicleEx(408,2152.5000000,-1973.0000000,14.3000000,180.0000000,14,14,TIME_RESPAWN);
	BasurerosV[12] = AddStaticVehicleEx(408,2156.5000000,-1973.0000000,14.3000000,180.0000000,14,14,TIME_RESPAWN);
	BasurerosV[13] = AddStaticVehicleEx(408,2160.5000000,-1973.0000000,14.3000000,180.0000000,14,14,TIME_RESPAWN);
	/* Buttons & Objects */
		Policia = CreateObject(3976, 1571.60, -1675.74, 35.64,   0.00, 0.00, 0.00);
	SetObjectMaterial(Policia, 2, 7184, "vgndwntwn1", "newpolice_sa", 0);
	SetObjectMaterial(Policia, 6, 16005, "des_stownmain2", "sanruf", 0);
	SetObjectMaterial(Policia, 7, 3942, "bistro", "ahoodfence2", 0);
	SetObjectMaterial(Policia, 9, 964, "cj_crate_will", "CJ_FLIGHT_CASE", 0);
	SetObjectMaterial(Policia, 12, 7009, "vgndwntwn1", "vgnbankbld1_256", 0);
	PrisionLS = CreateObject(4079, 1785.97, -1564.86, 25.25,   0.00, 0.00, 355.00);
	SetObjectMaterial(PrisionLS, 0, 16021, "des_geyser", "shingles1", 0);
	SetObjectMaterial(PrisionLS, 1, 964, "cj_crate_will", "CJ_FLIGHT_CASE", 0);
	SetObjectMaterial(PrisionLS, 2, 18752, "Volcano", "rocktb128", 0);
	SetObjectMaterial(PrisionLS, 3, 16407, "des_airfieldhus", "btdeck256", 0);
	Cartel1 = CreateObject(3927, 1808.38, -1567.06, 14.08,   0.00, 90.00, 40.21);
	SetObjectMaterial(Cartel1, 0, 7184, "vgndwntwn1", "newpolice_sa", 0);
	Cartel2 = CreateObject(3927, 1796.33, -1583.43, 14.08,   0.00, 90.00, 40.20);
	SetObjectMaterial(Cartel2, 0, 7184, "vgndwntwn1", "newpolice_sa", 0);
	Mecagate = CreateDynamicObject(3037, 1823.74646, -1406.35303, 13.84960,0.00000,0.00000,90.00000);
	Mecagate2 = CreateDynamicObject(3037,1813.60327, -1427.44653, 13.84860,0.00000,0.00000,0.00000);
	hitman = CreateDynamicObject(980, -283.87, -2190.40, 30.42, 0.00, 0.00, 114.53);
	rusa1 = CreateDynamicObject(980, 659.65, -1227.13, 17.70,   0.00, 0.00, 243.29);
	rusa2 = CreateDynamicObject(980, 664.91, -1309.20, 15.31,   0.00, 0.00, 0.00);
	rusa3 = CreateDynamicObject(980, 785.31, -1152.45, 25.37,   0.00, 0.00, 90.00);
	lcnpuerta = CreateDynamicObject(980, 1426.85, -1885.90, 15.28,   0.00, 0.00, 180.00);
	saem3 = CreateDynamicObject(971,2720.218505,-2405.194580,15.981236,0.000000,0.000000,90.000000); //Cerrada
	hospitalgate = CreateDynamicObject(980,1141.40002441,-1293.69995117,15.39999962,0.00000000,0.00000000,0.00000000); //object(airportgate) (1)
	puertasbanco1[0] = CreateDynamicObject(1569, 1438.0670, -993.0631, 995.1141,   0.00, 0.00, 0.00);
	puertasbanco1[1] = CreateDynamicObject(1569, 1438.1071, -1002.6318, 995.1141,   0.00, 0.00, 0.00);
	puertasbanco1[2] = CreateDynamicObject(2634, 1435.3519, -980.2969, 984.2189,   0.00, 0.00, 180.00);
	botonesbanco1[0] = CreateButton(1440.1131, -992.9681, 996.4070, 180.00);
	botonesbanco1[1] = CreateButton(1440.1132, -993.2919, 996.4070, 0.00);
	botonesbanco1[2] = CreateButton(1440.0105, -1002.5906, 996.4070, 180.00);
	botonesbanco1[3] = CreateButton(1440.0105, -1002.7399, 996.4070, 0.00);
	gobiernogate = CreateDynamicObject(2990,1390.39941406,-1649.69921875,16.29999924,0.00000000,0.00000000,90.00000000); //object(wongs_gate) (1)
	gobiernogate1 = CreateDynamicObject(16500,1391.29980469,-1629.89941406,12.52500343,0.00000000,90.00000000,0.00000000); //object(cn2_savgardr1_) (1)
	pea1 = CreateDynamicObject(968,1722.61853027,507.60769653,28.95280647,0.00000000,91.00015259,341.50000000); // barrierturn
	pea2 = CreateDynamicObject(968,1746.43005371,513.26916504,28.22655106,0.00546265,268.75024414,339.49902344); // barrierturn
	pea3 = CreateDynamicObject(968,607.10003662,335.74792480,18.97176361,0.00000000,90.50006104,34.25000000); //object(barrierturn) (1)
	pea4 = CreateDynamicObject(968,619.59411621,344.81277466,18.83676720,0.00000000,270.00000000,37.99621582); //object(barrierturn) (2)
	pea5 = CreateDynamicObject(968,-186.28271484,327.83526611,12.05736542,0.01754761,90.49975586,344.99993896); //object(barrierturn) (2)
	pea6 = CreateDynamicObject(968,-171.78678894,323.75659180,11.97812653,359.96047974,269.00064087,345.24826050); //object(barrierturn) (3)
	pea7 = CreateDynamicObject(968, 36.68, -1525.74, 4.95,   0.00, 270.00, 265.12);
	pea8 = CreateDynamicObject(968, 64.97, -1536.85, 4.95,   0.00, 270.00, 84.45);
	eastlobby1 = CreateDynamicObject(1536,253.14941406,110.59960938,1002.21502686,0.00000000,0.00000000,270.00000000,-1,10,-1,100.0); // East lobby door (moves north)
	eastlobby2 = CreateDynamicObject(1536,253.18457031,107.59960938,1002.21502686,0.00000000,0.00000000,90.00000000,-1,10,-1,100.0); // East lobby door (moves south)
	westlobby1 = CreateDynamicObject(1536,239.71582031,116.09179688,1002.21502686,0.00000000,0.00000000,90.00000000,-1,10,-1,100.0); // West lobby door (moves north)
	westlobby2 = CreateDynamicObject(1536,239.67968750,119.09960938,1002.21502686,0.00000000,0.00000000,269.98901367,-1,10,-1,100.0); // West lobby door (moves south)
	locker1 = CreateDynamicObject(1536,267.29980469,112.56640625,1003.61718750,0.00000000,0.00000000,179.99450684,-1,10,-1,100.0); // Locker door (moves east)
	locker2 = CreateDynamicObject(1536,264.29980469,112.52929688,1003.61718750,0.00000000,0.00000000,0.00000000,-1,10,-1,100.0); // Locker door (moves west)
	cctv1 = CreateDynamicObject(1536,264.44921875,115.79980469,1003.61718750,0.00000000,0.00000000,0.00000000,-1,10,-1,100.0); // CCTV door (moves west)
	cctv2 = CreateDynamicObject(1536,267.46875000,115.83691406,1003.61718750,0.00000000,0.00000000,179.99450684,-1,10,-1,100.0); // CCTV door (moves east)
	chief1 = CreateDynamicObject(1536,229.59960938,119.50000000,1009.21875000,0.00000000,0.00000000,0.00000000,-1,10,-1,100.0); // innermost chief's door
	chief2 = CreateDynamicObject(1536,232.59960938,119.53515625,1009.21875000,0.00000000,0.00000000,179.99450684,-1,10,-1,100.0); // outermost chief's door (both move west)
	eastin = CreateButton(253.44921875,110.59960938,1003.79998779,90.00000000); //object(fire_break) (1)
	westout = CreateButton(239.79492188,116.18457031,1003.87286377,90.00000000); //object(fire_break) (2)
	westin = CreateButton(239.32031250,116.27441406,1003.87286377,270.00000000); //object(fire_break) (3)
	eastout = CreateButton(253.00000000,110.59960938,1003.79998779,270.00000000); //
	elevator = CreateButton(275.83984375,120.94921875,1005.12280273,90.00000000); //object(kmb_keypad) (1)
	cctvin = CreateButton(264.55566406,115.97949219,1005.12280273,179.99450684); //object(kmb_keypad) (2)
	cctvout = CreateButton(264.55566406,115.69531250,1005.12280273,0.00000000); //object(kmb_keypad) (3)
	lockerin = CreateButton(267.21679688,112.40917969,1005.12280273,0.00000000); //object(kmb_keypad) (4)
	lockerout = CreateButton(267.21679688,112.66992188,1005.12280273,179.99450684); //object(kmb_keypad) (5)
	chiefout = CreateButton(232.50000000,119.38476562,1010.81384277,0.00000000); //object(sec_keypad) (2)
	chiefin = CreateButton(229.67089844,119.66992188,1010.81384277,179.99450684); //object(sec_keypad) (1)
	roofkey = CreateButton(1565.93652344,-1667.35058594,28.85165977,179.99450684); //object(sec_keypad) (3)
	garage0 = CreateButton(1567.14550781,-1689.62011719,6.69999981,0.00000000); //object(sec_keypad) (4)
	botayu1 = CreateButton(370.86, 166.64, 1008.94, 180);  // 1 izquierda
	botayu2 = CreateButton(372.95, 166.29, 1008.98, 0);  // 1 izquierda
	botayu3 = CreateButton(365.41, 189.82, 1008.82, 180);  // 1 izquierda
	botayu4 = CreateButton(367.67, 189.49, 1008.89, 0);  // 1 izquierda
	ayuntadoor = CreateDynamicObject(1536, 365.77, 189.55, 1007.37,   0.00, 0.00, 0.00);
	ayuntadoor2 = CreateDynamicObject(1536, 371.26, 166.58, 1007.40,   0.00, 0.00, 0.00);
	fen1 = CreateDynamicObject(969,1417.90002441,-1554.90002441,4334.70019531,0.00000000,269.74975586,358.50000000); //object(electricgate) (1)
	fen2 = CreateDynamicObject(969,1425.90002441,-1555.00000000,4334.70019531,0.00000000,269.74743652,359.49755859); //object(electricgate) (2)
	fen3 = CreateDynamicObject(969,1429.50000000,-1554.80004883,4334.70019531,0.00000000,269.74731445,359.49462891); //object(electricgate) (3)
	fen4 = CreateDynamicObject(969,1422.19995117,-1567.00000000,4334.60009766,0.00000000,269.74743652,179.99456787); //object(electricgate) (4)
	fen5 = CreateDynamicObject(969,1414.80004883,-1566.69995117,4334.60009766,0.00000000,269.74182129,179.99450684); //object(electricgate) (5)
	fen6 = CreateDynamicObject(969,1430.19995117,-1566.69995117,4334.70019531,0.00000000,269.74182129,179.99450684); //object(electricgate) (6)
	JDoor1 = CreateButton(1418.19995117,-1555.09997559,4340.79980469, 0.0);
	JDoor2 = CreateButton(1426.00000000,-1555.09997559,4340.79980469, 0.0);
	JDoor3 = CreateButton(1429.80004883,-1554.90002441,4340.79980469, 0.0);
	JDoor4 = CreateButton(1425.80004883,-1566.50000000,4340.79980469, 180);
	JDoor5 = CreateButton(1433.80004883,-1566.40002441,4340.79980469, 180);
	JDoor6 = CreateButton(1418.09997559,-1566.40002441,4340.79980469, 180);
	pdgate1 = CreateDynamicObject(971,1589.053344,-1638.123168,14.122960,0.000000,0.000000,180);
	pdgate2 = CreateDynamicObject(2990,1545.90002441,-1627.80004883,16.29999924,0.00000000,0.00000000,90.00000000);
	FBILobbyLeftBTN[0] = CreateButton(297.66613770,-1498.67749023,-44.59006119,0.79565430); //Lobby Button Left
	FBILobbyLeftBTN[1] = CreateButton(297.24850464,-1498.23107910,-44.59006119,180); //Lobby Button Left
	FBILobbyRightBTN[0] = CreateButton(300.05300903,-1521.40747070,-44.59006119,180); //Lobby Button Right
	FBILobbyRightBTN[1] = CreateButton(300.16033936,-1521.84387207,-44.59006119,0); //Lobby Button Right
	FBIPrivateBTN[0] = CreateButton(298.87384033,-1495.87316895,-27.32773209,270); //Private Office Button
	FBIPrivateBTN[1] = CreateButton(300.49453735,-1495.33837891,-27.28091812,180.49487305); //Private Office Button
	FBIPrivate[0] = CreateDynamicObject(1536,299.29986572,-1492.82666016,-28.73300552,0.00000000,0.00000000,270.00000000,600); //Private Office Door Left
	FBIPrivate[1] = CreateDynamicObject(1536,299.33737183,-1495.83911133,-28.73300552,0.00000000,0.00000000,90.00000000,600); //Private Office Door Right
	FBILobbyLeft = CreateDynamicObject(1536,295.40136719,-1498.43457031,-46.13965225,0.00000000,0.00000000,0.00000000,600); //Lobby Door Left
	FBILobbyRight = CreateDynamicObject(1536,302.39355469,-1521.62988281,-46.13965225,0.00000000,0.00000000,179.99450684,600); //Lobby Door Right
	tvp1 = CreateDynamicObject(969,774.11444092,-1384.98632812,12.92022705,0.00000000,0.00000000,0.00000000);
	tvp = CreateDynamicObject(976, 781.77209500,-1330.31884800,12.68660500,0.00000000,0.00000000,-180.85939924);
	courtgates[1] = CreateDynamicObject(971,2138.00292969,1290.96386719,7698.24169922,0.00000000,0.00000000,90.00000000); //object(subwaygate) (1)
	courtgates[0] = CreateDynamicObject(971,2138.00000000,1316.72106934,7698.23632812,0.00000000,0.00000000,90.00000000); //object(subwaygate) (2)
	courtbuttons[0] = CreateButton(2137.78662109,1299.37780762,7699.28369141,180.00000000); //object(sec_keypad) (3)
	courtbuttons[1] = CreateButton(2137.80908203,1307.41931152,7699.28955078,0.00000000); //object(sec_keypad) (4)
	courtbuttons[2] = CreateButton(2136.08740234,1316.28686523,7699.32763672,0.00000000); //object(sec_keypad) (5)
	courtbuttons[3] = CreateButton(2136.01269531,1291.35742188,7699.35449219,179.99450684); //object(sec_keypad) (6)
	depgate = CreateDynamicObject(969,1619.69995117,-1852.59997559,12.50000000,0.00000000,0.00000000,2.75000000); //object(electricgate) (1)
	for(new h = 0; h < sizeof(Points); h++)
	{
		if(Points[h][Type] == 3)
		{
			format(szMessage, sizeof(szMessage), " HIERBA DISPONIBLE: %d\n(/SEMILLAS)", Points[h][Stock]);
			Points[h][TextLabel] = CreateDynamic3DTextLabel(szMessage, COLOR_GRAD1, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz], 4.0);
			Points[h][CratePoint] = 1;
		}
		else if(Points[h][Type] == 4)
		{
			format(szMessage, sizeof(szMessage), " CRACK DISPONIBLE: %d\n(/COMPRARCRACK)", Points[h][Stock]);
			Points[h][TextLabel] = CreateDynamic3DTextLabel(szMessage, COLOR_GRAD1, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz], 4.0);
			Points[h][CratePoint] = 2;
		}
		else if(Points[h][Type] == 5)
		{
			Points[h][TextLabel] = CreateDynamic3DTextLabel("[Almacen de drogas]\n{FFFFFF}Usa '/paquete' para empezar a traficar.", COLOR_GRAD1, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz], 4.0);
		}
		CreatePickup(1239, 23, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]);
	}
	/*      Leñador     */
	CreateDynamicPickup(1239,23,-132.4102,-1176.0121,3.1017); // Job Leñador
	lena = CreatePickup(1239,23,-144.7257,-1165.5654,3.4364); // Entregar leña
	Arbolvivo[0] = CreateObject(771, -168.90, -1173.00, 3.69,   0.00, 0.00, 0.00);
	Arbolvivo[1] = CreateObject(730, -168.11, -1191.22, 4.11,   0.00, 0.00, 0.00);
	Arbolvivo[2] = CreateObject(771, -147.37, -1193.02, 2.71,   0.00, 0.00, 0.00);
	Arbolvivo[3] = CreateObject(730, -186.97, -1173.81, 4.11,   0.00, 0.00, -0.06);
	Arbolvivo[4] = CreateObject(771, -161.41, -1207.32, 4.98,   0.00, 0.00, 0.00);
	Talararbol[0] = CreatePickup(1239,2,-167.6603,-1172.7068,4.8689);
	Talararbol[1] = CreatePickup(1239,2,-167.5139,-1190.2004,5.4228);
	Talararbol[2] = CreatePickup(1239,2,-146.8846,-1191.8760,3.8276);
	Talararbol[3] = CreatePickup(1239,2,-186.1116,-1173.4384,5.7167);
	Talararbol[4] = CreatePickup(1239,2,-160.4397,-1206.5908,5.8920);
	/*      Obrero     */
	CreateDynamicPickup(1239,23,-77.1577,-1136.5863,1.0781); // Job Obrero
	picarescombros[0] = CreatePickup(1239,2,-59.1904,-1142.0807,4.4985);
	picarescombros[1] = CreatePickup(1239,2,-47.9364,-1145.2974,4.4571);
	picarescombros[2] = CreatePickup(1239,2,-56.1313,-1129.5569,2.7533);
	picarescombros[3] = CreatePickup(1239,2,-59.9916,-1117.9534,4.9111);
	picarescombros[4] = CreatePickup(1239,2,-74.3625,-1120.7485,2.9629);
	eescombros = CreatePickup(1239,23,-77.8987,-1104.5708,1.0781); // Entregar escombros
	ticketR = CreatePickup(1239,00,000.0000,-0000.0000,0.0000, 0);
	/* Temp Fix */
	InfoEvento[EventRequest] = 999;
	InfoEvento[EventCreator] = 999;
	InfoEvento[EventStaff][0] = 999;
	InfoEvento[EventStaff][1] = 999;
	InfoEvento[EventStaff][2] = 999;
	InfoEvento[EventStaff][3] = 999;
	InfoEvento[EventStaff][4] = 999;
	gWeather = 10;
	return 1;
}

stock GetClosestPlayer(p1){
new Float:dis,Float:dis2,player;
player = -1;
dis = 99999.99;
foreach(Player, x){
	if(x != p1){
		dis2 = GetDistanceBetweenPlayers(x,p1);
		if(dis2 < dis && dis2 != -1.00){
			dis = dis2;
			player = x;
		}
	}
}
return player;
}

function OneHour()
{
TotalUptime += 1;
servertime = 0;
SaveStuff();
SaveServerStats();
for (new x=0; x<MAX_POINTS; x++)
{
	if(Points[x][Vulnerable] == 0 && Points[x][Announced] == 1)
	{
		Points[x][Vulnerable] = NEW_VULNERABLE;
		Points[x][ClaimerTeam] = INVALID_PLAYER_ID;
		Points[x][TakeOverTimer] = 0;
		Points[x][TakeOverTimerStarted] = 0;
        Points[x][Announced] = 0;
		Points[x][CaptureProccessEx] = 0;
	    Delete3DTextLabel(Points[x][CaptureProccess]);
	    DestroyDynamic3DTextLabel(Points[x][CaptureProgress]);
		KillTimer(Points[x][CaptureTimerEx2]);
		Points[x][CaptureTimerEx2] = -1;
		format(szMessage, sizeof(szMessage), "%s no fue capturado y seguirá perteneciendo a la misma familia.", Points[x][Name]);
		SendClientMessageToAllEx(COLOR_POINTGEN, szMessage);
	}
	Points[x][Announced] = 0;
	if (Points[x][Vulnerable] > 0)
	{
		Points[x][Vulnerable]--;
		UpdatePoints();
	}
	if (Points[x][Vulnerable] == 0 && Points[x][Type] >= 0 && Points[x][Announced] == 0 && Points[x][ClaimerId] == INVALID_PLAYER_ID)
	{
		//format(szMessage, sizeof(szMessage), "%s ahora está disponible para la captura.", Points[x][Name]);
		//SendClientMessageToAllEx(COLOR_POINTGEN, szMessage);
		//SetPlayerCheckpoint(i, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz], 3);
		ReadyToCapture(x);
		Points[x][Announced] = 1;
	}
}
return 1;
}


strtok(const string[], &index){
new length = strlen(string);
while ((index < length) && (string[index] <= ' ')){
	index++;
}
new offset = index;
new result[20];
while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
{
	result[index - offset] = string[index];
	index++;
}
result[index - offset] = EOS;
return result;
}

function OnPlayerRegister(playerid, password)
{
	if(IsPlayerConnected(playerid))
	{
	    new INI:File = INI_Open(UserPath(playerid));
	    INI_SetTag(File,"data");
	 	INI_WriteInt(File,"Password",password);
		INI_Close(File);
		TotalRegister++;
		CancelSelectTextDraw(playerid);
		OnPlayerLoginEx(playerid);
	}
	return 1;
}

zcmd(ctaller, playerid, params[]) return CheckForCloseDoorMeca(playerid);

zcmd(estereo, playerid, params[])
{
	new string[300];
	if(IsPlayerConnected(playerid))
	{
		new Float:BBCoord[4];
		GetPlayerPos(playerid, BBCoord[0], BBCoord[1], BBCoord[2]);
		GetPlayerFacingAngle(playerid, BBCoord[3]);
		SetPVarFloat(playerid, "BBX", BBCoord[0]);
		SetPVarFloat(playerid, "BBY", BBCoord[1]);
		SetPVarFloat(playerid, "BBZ", BBCoord[2]);
		BBCoord[0] += (2 * floatsin(-BBCoord[3], degrees));
		BBCoord[1] += (2 * floatcos(-BBCoord[3], degrees));
		BBCoord[2] -= 1.0;
		if(Info[playerid][pBoombox] == 0) return SendClientMessage(playerid, -1, "* No tienes un estéreo, puedes comprarlo en cualquier tienda "COL_BLUE"24/7");
		if(GetPVarInt(playerid, "PlacedBB")) return SendClientMessage(playerid, -1, "* Usa /estereoc para cambiar la emisora y /estereoq para recogerlo del suelo y guardarlo");
		foreach(Player, i)
		{
			if(GetPVarType(i, "PlacedBB"))
			{
				if(IsPlayerInRangeOfPoint(playerid, 30.0, GetPVarFloat(i, "BBX"), GetPVarFloat(i, "BBY"), GetPVarFloat(i, "BBZ")))
				{
                	SendClientMessageEx(playerid, COLOR_GRAD1, "Atención: no puede colocar su estereo aquí, ya hay uno muy cerca.");
					return 1;
				}
			}
		}
		SetPVarInt(playerid, "PlacedBB", CreateDynamicObject(2226, BBCoord[0], BBCoord[1], BBCoord[2], 0.0, 0.0, 0.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
        format(string, sizeof(string), "{00FF00}Propietario: {FFFFFF}%s\n{FF0000}/estereoc{FFFFFF} para establecer su estéreo portátil \n{FFFF00}oo\n{FF0000}/estereoq", GetPlayerNameEx(playerid));
		SetPVarInt(playerid, "BBLabel", _:CreateDynamic3DTextLabel(string, -1, BBCoord[0], BBCoord[1], BBCoord[2]+0.6, 5, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
		SetPVarInt(playerid, "BBArea", CreateDynamicSphere(BBCoord[0], BBCoord[1], BBCoord[2], 30.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)));
		SetPVarInt(playerid, "BBInt", GetPlayerInterior(playerid));
		SetPVarInt(playerid, "BBVW", GetPlayerVirtualWorld(playerid));
		ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
		ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
        format(string, sizeof(string), "%s ha colocado un equipo sonido en el suelo.", GetPlayerNameEx(playerid));
		ProxDetector(30.0,playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}

zcmd(estereoc, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(GetPVarType(playerid, "PlacedBB"))
		{
            if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) return SendClientMessageEx(playerid, COLOR_WHITE, " Usted debe estar agachado para establecer su estéreo portátil.");
			if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ")))
			{
				ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Lista de emisoras","Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nInsertar URL\n"COL_BLUE"Apagarlo",">", "Cancel");
			}
			else
			{
				return SendClientMessageEx(playerid, COLOR_GRAD1, "Atención: tienes que estár cercar de tu estéreo para realizar esta acción.");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Atención: no has colocado ningún estéreo.");
		}
	}
	return 1;
}

zcmd(estereoq, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(!GetPVarInt(playerid, "PlacedBB"))
		{
            SendClientMessageEx(playerid, COLOR_GRAD1, "Atención: no has colocado ningún estéreo.");
		}
        if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) return SendClientMessageEx(playerid, COLOR_WHITE, " Usted debe estar agachado para establecer su estéreo portátil.");
		if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ")))
		{
			PickUpBoombox(playerid);
            SendClientMessageEx(playerid, COLOR_GRAD1, "Atención: levantaste tu estéreo del suelo.");
		}
	}
	return 1;
}

stock DetectarModeloArma(playerid)
{
    if(GetPlayerWeapon(playerid) == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Necesito que me muestres el arma (ponla en tu mano).");
    else if(GetPlayerWeapon(playerid) == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para un puño americano.");
    else if(GetPlayerWeapon(playerid) == 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para un palo de golf.");
    else if(GetPlayerWeapon(playerid) == 3) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para una porra.");
    else if(GetPlayerWeapon(playerid) == 4) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para un cuchillo.");
    else if(GetPlayerWeapon(playerid) == 5) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para un bate de beisbol.");
    else if(GetPlayerWeapon(playerid) == 6) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para una pala.");
    else if(GetPlayerWeapon(playerid) == 7) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para un palo de billar.");
    else if(GetPlayerWeapon(playerid) == 8) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para una katana.");
    else if(GetPlayerWeapon(playerid) == 9) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para una motosierra.");
    else if(GetPlayerWeapon(playerid) == 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Este tipo de.. cosas, no llevan balas.");
    else if(GetPlayerWeapon(playerid) == 11) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Este tipo de.. cosas, no llevan balas.");
    else if(GetPlayerWeapon(playerid) == 12) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Este tipo de.. cosas, no llevan balas.");
    else if(GetPlayerWeapon(playerid) == 13) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Este tipo de.. cosas, no llevan balas.");
    else if(GetPlayerWeapon(playerid) == 14) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Este tipo de.. cosas, no llevan balas.");
    else if(GetPlayerWeapon(playerid) == 15) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Este tipo de.. cosas, no llevan balas.");
    else if(GetPlayerWeapon(playerid) == 16) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: ¿Tu estas loco?, No puedo venderte granadas!");
    else if(GetPlayerWeapon(playerid) == 17) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: ¿Tu estas loco?, No puedo venderte granadas de humo!");
    else if(GetPlayerWeapon(playerid) == 18) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Estás enfermo, como quieres que te venda una molotov!");
    else if(GetPlayerWeapon(playerid) == 22) { ShowPlayerDialog(playerid, BALAS1, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una 9mm te costará 5$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 23) { ShowPlayerDialog(playerid, BALAS1, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una 9mm silenciada te costará 5$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 24) { ShowPlayerDialog(playerid, BALAS1, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una desert eagle te costará 10$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 25) { ShowPlayerDialog(playerid, BALAS1, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una escopeta te costará 5$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 26) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: ¡Ja!, la policia me llevaria si te vendo eso.");
	else if(GetPlayerWeapon(playerid) == 27) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: ¡Ja!, la policia me llevaria si te vendo eso.");
	else if(GetPlayerWeapon(playerid) == 28) { ShowPlayerDialog(playerid, BALAS1, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una Micro SMG te costará 5$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 29) { ShowPlayerDialog(playerid, BALAS1, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una MP5 te costará 8$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 30) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No vendo balas de AK-47, ¿crees que soy un terrorista?.");
	else if(GetPlayerWeapon(playerid) == 31) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No vendo balas de M4A1, ¿crees que el gobierno lo permitiria?.");
	else if(GetPlayerWeapon(playerid) == 32) { ShowPlayerDialog(playerid, BALAS1, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una Tec-9 te costará 4$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 33) { ShowPlayerDialog(playerid, BALAS1, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una Country Rifle te costará 12$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 34) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No vendo balas de francotirador.");
	else if(GetPlayerWeapon(playerid) == 35) { Expulsar(playerid); }
	else if(GetPlayerWeapon(playerid) == 36) { Expulsar(playerid); }
	else if(GetPlayerWeapon(playerid) == 37) { Expulsar(playerid); }
	else if(GetPlayerWeapon(playerid) == 38) { Expulsar(playerid); }
	else if(GetPlayerWeapon(playerid) == 39) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No vendo bombas.");
	else if(GetPlayerWeapon(playerid) == 40) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No vendo bombas.");
	else if(GetPlayerWeapon(playerid) == 41) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: ¿Acaso eso lleva balas?, ¡vaamos amigoo!.");
	else if(GetPlayerWeapon(playerid) == 35) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Esto es una tienda de armas compratriota.");
    else if(GetPlayerWeapon(playerid) == 43) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Esto es una tienda de armas, no un supermercado.");
    else if(GetPlayerWeapon(playerid) == 44) { Expulsar(playerid); }
    else if(GetPlayerWeapon(playerid) == 45) { Expulsar(playerid); }
    else if(GetPlayerWeapon(playerid) == 46) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No vendo paracaidas.");
    return 1;
}


function ComprarBalasArma(playerid, balas) //By Javi Life
{
    if(GetPlayerWeapon(playerid) == 22)
	{
		if(CheckMoney(playerid, balas * 5))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 5);
		    GivePlayerValidWeapon(playerid, 22, balas);
		    Info[playerid][pMunicion][2] += balas;
		    GuardarArmas(playerid);
		}
	}
	else if(GetPlayerWeapon(playerid) == 23)
	{
		if(CheckMoney(playerid, balas * 5))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 5);
		    GivePlayerValidWeapon(playerid, 23, balas);
		    Info[playerid][pMunicion][2] += balas;
		    GuardarArmas(playerid);
		}
	}
	else if(GetPlayerWeapon(playerid) == 24)
	{
		if(CheckMoney(playerid, balas * 10))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 10);
		    GivePlayerValidWeapon(playerid, 24, balas);
		    Info[playerid][pMunicion][2] += balas;
		    GuardarArmas(playerid);
		}
	}
	else if(GetPlayerWeapon(playerid) == 25)
	{
		if(CheckMoney(playerid, balas * 5))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 5);
		    GivePlayerValidWeapon(playerid, 25, balas);
		    Info[playerid][pMunicion][3] += balas;
		    GuardarArmas(playerid);
		}
	}
	else if(GetPlayerWeapon(playerid) == 28)
	{
		if(CheckMoney(playerid, balas * 5))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 5);
		    GivePlayerValidWeapon(playerid, 28, balas);
		    Info[playerid][pMunicion][4] += balas;
		    GuardarArmas(playerid);
		}
	}
	else if(GetPlayerWeapon(playerid) == 29)
	{
		if(CheckMoney(playerid, balas * 8))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 8);
		    GivePlayerValidWeapon(playerid, 29, balas);
		    Info[playerid][pMunicion][4] += balas;
		    GuardarArmas(playerid);
		}
	}
	else if(GetPlayerWeapon(playerid) == 32)
	{
		if(CheckMoney(playerid, balas * 4))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 4);
		    GivePlayerValidWeapon(playerid, 32, balas);
		    Info[playerid][pMunicion][4] += balas;
		    GuardarArmas(playerid);
		}
	}
	else if(GetPlayerWeapon(playerid) == 33)
	{
		if(CheckMoney(playerid, balas * 12))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 12);
		    GivePlayerValidWeapon(playerid, 33, balas);
		    Info[playerid][pMunicion][6] += balas;
		    GuardarArmas(playerid);
		}
	}
	TogglePlayerControllable(playerid, 1);
	return 1;
}

stock DetectarModeloArma2(playerid)
{
    if(GetPlayerWeapon(playerid) == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Necesito que me muestres el arma (ponla en tu mano).");
    else if(GetPlayerWeapon(playerid) == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para un puño americano.");
    else if(GetPlayerWeapon(playerid) == 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para un palo de golf.");
    else if(GetPlayerWeapon(playerid) == 3) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para una porra.");
    else if(GetPlayerWeapon(playerid) == 4) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para un cuchillo.");
    else if(GetPlayerWeapon(playerid) == 5) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para un bate de beisbol.");
    else if(GetPlayerWeapon(playerid) == 6) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para una pala.");
    else if(GetPlayerWeapon(playerid) == 7) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para un palo de billar.");
    else if(GetPlayerWeapon(playerid) == 8) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para una katana.");
    else if(GetPlayerWeapon(playerid) == 9) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No puedes comprar balas para una motosierra.");
    else if(GetPlayerWeapon(playerid) == 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Este tipo de.. cosas, no llevan balas.");
    else if(GetPlayerWeapon(playerid) == 11) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Este tipo de.. cosas, no llevan balas.");
    else if(GetPlayerWeapon(playerid) == 12) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Este tipo de.. cosas, no llevan balas.");
    else if(GetPlayerWeapon(playerid) == 13) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Este tipo de.. cosas, no llevan balas.");
    else if(GetPlayerWeapon(playerid) == 14) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Este tipo de.. cosas, no llevan balas.");
    else if(GetPlayerWeapon(playerid) == 15) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Este tipo de.. cosas, no llevan balas.");
    else if(GetPlayerWeapon(playerid) == 16) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: ¡Oye!, ¿acaso crees que puedo conseguir de esas?, ¡no tengo granadas!");
    else if(GetPlayerWeapon(playerid) == 16) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: ¡Oye!, ¿acaso crees que puedo conseguir de esas?, ¡no tengo granadas de humo!");
    else if(GetPlayerWeapon(playerid) == 16) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: ¡Oye!, ¿acaso crees que puedo conseguir de esas?, ¡no tengo motolov's!");
    else if(GetPlayerWeapon(playerid) == 22) { ShowPlayerDialog(playerid, BALAS2, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una 9mm te costará 8$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 23) { ShowPlayerDialog(playerid, BALAS2, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una 9mm silenciada te costará 8$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 24) { ShowPlayerDialog(playerid, BALAS2, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una desert eagle te costará 15$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 25) { ShowPlayerDialog(playerid, BALAS2, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una escopeta te costará 10$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 26) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: ¡Oye!, ¿dónde diablos conseguiste eso?, no tengo de esas balas.");
	else if(GetPlayerWeapon(playerid) == 27) { ShowPlayerDialog(playerid, BALAS2, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una escopeta de combate te costará 25$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 28) { ShowPlayerDialog(playerid, BALAS2, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una Micro SMG te costará 8$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 29) { ShowPlayerDialog(playerid, BALAS2, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una MP5 te costará 10$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 30) { ShowPlayerDialog(playerid, BALAS2, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una AK47 te costará 25$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 31) { ShowPlayerDialog(playerid, BALAS2, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una M4 te costará 25$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 32) { ShowPlayerDialog(playerid, BALAS2, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una Tec-9 te costará 8$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 33) { ShowPlayerDialog(playerid, BALAS2, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una Country Rifle te costará 10$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 34) { ShowPlayerDialog(playerid, BALAS2, DIALOG_STYLE_INPUT, "{FFFFFF}Comprar balas", "{FFFFFF}Escribe la cantidad de balas que deseas comprar.\nCada bala de una Sniper te costará 20$ la bala.", "Comprar", "Cancelar"); }
	else if(GetPlayerWeapon(playerid) == 35) { Expulsar(playerid); }
	else if(GetPlayerWeapon(playerid) == 36) { Expulsar(playerid); }
	else if(GetPlayerWeapon(playerid) == 37) { Expulsar(playerid); }
	else if(GetPlayerWeapon(playerid) == 38) { Expulsar(playerid); }
	else if(GetPlayerWeapon(playerid) == 39) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No vendo bombas.");
	else if(GetPlayerWeapon(playerid) == 40) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No vendo bombas.");
	else if(GetPlayerWeapon(playerid) == 41) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: ¿Acaso eso lleva balas?, ¡vaamos amigoo!.");
	else if(GetPlayerWeapon(playerid) == 35) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Esto es una tienda de armas compratriota.");
    else if(GetPlayerWeapon(playerid) == 43) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: Esto es una tienda de armas, no un supermercado.");
    else if(GetPlayerWeapon(playerid) == 44) { Expulsar(playerid); }
    else if(GetPlayerWeapon(playerid) == 45) { Expulsar(playerid); }
    else if(GetPlayerWeapon(playerid) == 46) return SendClientMessageEx(playerid, COLOR_GRAD2, "Vendedor dice: No vendo paracaidas.");
    return 1;
}


function ComprarBalasArma2(playerid, balas) //By Javi Life
{
    if(GetPlayerWeapon(playerid) == 22)
	{
		if(CheckMoney(playerid, balas * 10))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 5);
		    GivePlayerValidWeapon(playerid, 22, balas);
		    Info[playerid][pMunicion][2] += balas;
		    GuardarArmas(playerid);
		}
	}
	else if(GetPlayerWeapon(playerid) == 23)
	{
		if(CheckMoney(playerid, balas * 8))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 5);
		    GivePlayerValidWeapon(playerid, 23, balas);
		    Info[playerid][pMunicion][2] += balas;
		    GuardarArmas(playerid);
		}
	}
	else if(GetPlayerWeapon(playerid) == 24)
	{
		if(CheckMoney(playerid, balas * 15))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 15);
		    GivePlayerValidWeapon(playerid, 24, balas);
		    Info[playerid][pMunicion][2] += balas;
		    GuardarArmas(playerid);
		}
	}
	else if(GetPlayerWeapon(playerid) == 25)
	{
		if(CheckMoney(playerid, balas * 10))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 10);
		    GivePlayerValidWeapon(playerid, 25, balas);
		    Info[playerid][pMunicion][3] += balas;
		    GuardarArmas(playerid);
		}
	}
	else if(GetPlayerWeapon(playerid) == 28)
	{
		if(CheckMoney(playerid, balas * 8))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 8);
		    GivePlayerValidWeapon(playerid, 28, balas);
		    Info[playerid][pMunicion][4] += balas;
		    GuardarArmas(playerid);
		}
	}
	else if(GetPlayerWeapon(playerid) == 29)
	{
		if(CheckMoney(playerid, balas * 10))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 10);
		    GivePlayerValidWeapon(playerid, 29, balas);
		    Info[playerid][pMunicion][4] += balas;
		    GuardarArmas(playerid);
		}
	}
	else if(GetPlayerWeapon(playerid) == 32)
	{
		if(CheckMoney(playerid, balas * 8))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 8);
		    GivePlayerValidWeapon(playerid, 32, balas);
		    Info[playerid][pMunicion][4] += balas;
		    GuardarArmas(playerid);
		}
	}
	else if(GetPlayerWeapon(playerid) == 33)
	{
		if(CheckMoney(playerid, balas * 20))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 20);
		    GivePlayerValidWeapon(playerid, 33, balas);
		    Info[playerid][pMunicion][6] += balas;
		    GuardarArmas(playerid);
		}
	}
	else if(GetPlayerWeapon(playerid) == 27)
	{
		if(CheckMoney(playerid, balas * 25))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 25);
		    GivePlayerValidWeapon(playerid, 33, balas);
		    Info[playerid][pMunicion][6] += balas;
		    GuardarArmas(playerid);
		}
	}
	else if(GetPlayerWeapon(playerid) == 30)
	{
		if(CheckMoney(playerid, balas * 25))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 25);
		    GivePlayerValidWeapon(playerid, 33, balas);
		    Info[playerid][pMunicion][6] += balas;
		    GuardarArmas(playerid);
		}
	}
	else if(GetPlayerWeapon(playerid) == 31)
	{
		if(CheckMoney(playerid, balas * 25))
		{
		    TogglePlayerControllable(playerid, 1);
		    GivePlayerCash(playerid, -balas * 25);
		    GivePlayerValidWeapon(playerid, 33, balas);
		    Info[playerid][pMunicion][6] += balas;
		    GuardarArmas(playerid);
		}
	}
	TogglePlayerControllable(playerid, 1);
	return 1;
}

CMD:actualizaciones(playerid, params[])
{
    #pragma unused params
   	if(IsPlayerConnectedEx(playerid))
	{
		new scu[480] = ""COL_GENERAL"[INFORMACIÓN]{FFFFFF} New Paradise RolePlay v0.0.5 [BETA]\n\n{FFFFFF}Lista de actualizaciones:\n\n"COL_GENERAL"* Reparados todos los bugs encontrados\n* Sistema AntiAFK [BETA]\n* Sistema de Primera Persona [BETA]\n* Sistema de Graffitis [BETA]\n* Sistema de Municiones [BETA]\n* Sistema de Objetos [BETA]\n* Sistema de Muebles [BETA]\n* Nuevos MAPS\n* Nuevas animaciones\n* MOTD's quitados\n\n\n"COL_WHITE"Última modificación: "COL_GENERAL"27/01/15";
		ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{FFFFFF} ACTUALIZACIONES DEL SERVIDOR", scu, "Aceptar","");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	return 1;
}

	//Sistema de Necesidades
	CMD:orinar(playerid, params[])
	{
	    if(GetPVarInt(playerid, "Injured") == 1 || Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR]: No puedes usar este comando ahora.");
		if(Info[playerid][pOrinaNN] <= 79) return SendClientMessageEx(playerid, COLOR_GREY, "No tienes ganas de orinar ahora.");
		TogglePlayerControllable(playerid, 0);
		GameTextForPlayer(playerid, "ORINANDO...",5000,3);
		SetPlayerSpecialAction(playerid, 68);
		TimerOrinando[playerid] = SetTimerEx("OrinarProg",400,true,"d",playerid);
		EstaOrinando[playerid] = true;
		return 1;
	}
	CMD:dormir(playerid, params[])
	{
		new virw = GetPlayerVirtualWorld(playerid);
	    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "   No puedes hacer esto ahora!");
	    if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR]: No puedes usar este comando ahora.");
		if(Info[playerid][pCansancioNN] <= 79) return SendClientMessage(playerid, COLOR_GRAD2, "No tienes sueño.");
    	if(virw != Info[playerid][pPhousekey]+6000) return SendClientMessage(playerid, COLOR_GRAD2, "[ERROR]: Para dormir tienes que ir a tu casa o a una cama en el hotel.");
		TogglePlayerControllable(playerid, 0);
		GameTextForPlayer(playerid, "DURMIENDO...", 5000, 3);
	    EstaDurmiendo[playerid] = true;
	    ClearAnimations(playerid);
	    ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,1,0,0,0,0);
	    TextDrawShowForPlayer(playerid, DurmiendoTD);
	    TimerDurmiendo[playerid] = SetTimerEx("DormirProg",7000,true,"d",playerid);
		return 1;
	}

CMD:tirar(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, -1, "USO: /tirar [item]  -  ITEMS: [telefono/radio/crack/hierba/materiales/armas/chaleco]");
	if(strcmp(params, "telefono", true) == 0)
    {
        if(Info[playerid][pPnumber] == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes un teléfono.");
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        TirarObjeto(playerid, x, y, z, 0, 18874, Info[playerid][pPnumber]);
	}
	else if(strcmp(params, "radio", true) == 0)
    {
        if(Info[playerid][pRadio] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes radio.");
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        TirarObjeto(playerid, x, y, z, 1, 2966, -1);
	}
 	else if(strcmp(params, "crack", true) == 0)
    {
        if(Info[playerid][pCrack] == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes crack para tirar.");
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        TirarObjeto(playerid, x, y, z, 2, 1575, Info[playerid][pCrack]);
	}
 	else if(strcmp(params, "hierba", true) == 0)
    {
        if(Info[playerid][pPot] == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes hierba para tirar.");
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        TirarObjeto(playerid, x, y, z, 3, 1575, Info[playerid][pPot]);
	}
 	else if(strcmp(params, "materiales", true) == 0)
    {
        if(Info[playerid][pMats] == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes materiales para tirar.");
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        TirarObjeto(playerid, x, y, z, 4, 1210, Info[playerid][pMats]);
	}
 	else if(strcmp(params, "arma", true) == 0)
    {
		new wepid = GetPlayerWeapon(playerid);
  		if(wepid == 0) return SendClientMessage(playerid, COLOR_GREY, "* Para tirar un arma, debes tenerla en mano.");
		new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        TirarObjeto(playerid, x, y, z, 5, GunObjects[wepid][0], Info[playerid][pMunicion][GetWeaponSlotInSave(playerid, wepid)]);
	}
 	else if(strcmp(params, "chaleco", true) == 0)
    {
        if(Info[playerid][pArmour] == 0) return SendClientMessage(playerid, COLOR_GREY, "* No tienes chaleco para tirar.");
        new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
        TirarObjeto(playerid, x, y, z, 6, 373, floatround(Info[playerid][pArmour],floatround_round));
	}
	return 1;
}

CMD:recoger(playerid, params[])
{
	print("1");
    new f = MAX_OBJETOS_TIRADOS+1;
	for(new a = 0; a < sizeof(ObjetosTirados); a++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, ObjetosTirados[a][PosObjeto][0], ObjetosTirados[a][PosObjeto][1], ObjetosTirados[a][PosObjeto][2]))
		{
			f = a;
			break;
		}
	}
	if(f > MAX_OBJETOS_TIRADOS) return SendClientMessage(playerid, COLOR_GREY, "No estás cerca de ningún objeto.");
	print("2");
    switch(ObjetosTirados[f][Tipo])
    {
        case 0:
        {
            Info[playerid][pPnumber] = ObjetosTirados[f][Cantidad];
	        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
	        format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s recoge un teléfono del suelo.", GetPlayerNameEx(playerid));
			NearMsg(playerid, -1, szMessage,10.0);
            ObjetosTirados[f][PosObjeto][0] = 0;
            ObjetosTirados[f][PosObjeto][1] = 0;
            ObjetosTirados[f][PosObjeto][2] = 0;
			ObjetosTirados[f][Tipo] = 0;
			ObjetosTirados[f][IDReferencia] = 0;
            ObjetosTirados[f][Cantidad] = 0;
			DestroyDynamicObject(ObjetosTirados[f][ObjetoID]);
			DestroyDynamic3DTextLabel(ObjetosTirados[f][TextID]);
        }
        case 1:
        {
            Info[playerid][pRadio] = 1;
	        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
	        format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s recoge una radio del suelo.", GetPlayerNameEx(playerid));
			NearMsg(playerid, -1, szMessage,10.0);
            ObjetosTirados[f][PosObjeto][0] = 0;
            ObjetosTirados[f][PosObjeto][1] = 0;
            ObjetosTirados[f][PosObjeto][2] = 0;
			ObjetosTirados[f][Tipo] = 0;
			ObjetosTirados[f][IDReferencia] = 0;
            ObjetosTirados[f][Cantidad] = 0;
			DestroyDynamicObject(ObjetosTirados[f][ObjetoID]);
			DestroyDynamic3DTextLabel(ObjetosTirados[f][TextID]);
        }
        case 2:
        {
            Info[playerid][pCrack] += ObjetosTirados[f][Cantidad];
	        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
	        format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s recoge algo sospechoso del suelo.", GetPlayerNameEx(playerid));
			NearMsg(playerid, -1, szMessage,10.0);
            ObjetosTirados[f][PosObjeto][0] = 0;
            ObjetosTirados[f][PosObjeto][1] = 0;
            ObjetosTirados[f][PosObjeto][2] = 0;
			ObjetosTirados[f][Tipo] = 0;
			ObjetosTirados[f][IDReferencia] = 0;
            ObjetosTirados[f][Cantidad] = 0;
			DestroyDynamicObject(ObjetosTirados[f][ObjetoID]);
			DestroyDynamic3DTextLabel(ObjetosTirados[f][TextID]);
        }
        case 3:
        {
            Info[playerid][pPot] += ObjetosTirados[f][Cantidad];
	        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
	        format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s recoge algo sospechoso del suelo.", GetPlayerNameEx(playerid));
			NearMsg(playerid, -1, szMessage,10.0);
            ObjetosTirados[f][PosObjeto][0] = 0;
            ObjetosTirados[f][PosObjeto][1] = 0;
            ObjetosTirados[f][PosObjeto][2] = 0;
			ObjetosTirados[f][Tipo] = 0;
			ObjetosTirados[f][IDReferencia] = 0;
            ObjetosTirados[f][Cantidad] = 0;
			DestroyDynamicObject(ObjetosTirados[f][ObjetoID]);
			DestroyDynamic3DTextLabel(ObjetosTirados[f][TextID]);
        }
        case 4:
        {
            Info[playerid][pMats] += ObjetosTirados[f][Cantidad];
	        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
	        format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s recoge algo sospechoso del suelo.", GetPlayerNameEx(playerid));
			NearMsg(playerid, -1, szMessage,10.0);
            ObjetosTirados[f][PosObjeto][0] = 0;
            ObjetosTirados[f][PosObjeto][1] = 0;
            ObjetosTirados[f][PosObjeto][2] = 0;
			ObjetosTirados[f][Tipo] = 0;
			ObjetosTirados[f][IDReferencia] = 0;
            ObjetosTirados[f][Cantidad] = 0;
			DestroyDynamicObject(ObjetosTirados[f][ObjetoID]);
			DestroyDynamic3DTextLabel(ObjetosTirados[f][TextID]);
        }
        case 5:
        {
            new NombreArma[25], idarma = ObjetosTirados[f][IDReferencia];
            GivePlayerValidWeapon(playerid, ObjetosTirados[f][IDReferencia], ObjetosTirados[f][Cantidad]);
			GetWeaponNameEx(idarma, NombreArma, sizeof(NombreArma));
	        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
	        format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s recoge %s del suelo.", GetPlayerNameEx(playerid), NombreArma);
			NearMsg(playerid, -1, szMessage,10.0);
            ObjetosTirados[f][PosObjeto][0] = 0;
            ObjetosTirados[f][PosObjeto][1] = 0;
            ObjetosTirados[f][PosObjeto][2] = 0;
			ObjetosTirados[f][Tipo] = 0;
			ObjetosTirados[f][IDReferencia] = 0;
            ObjetosTirados[f][Cantidad] = 0;
			DestroyDynamicObject(ObjetosTirados[f][ObjetoID]);
			DestroyDynamic3DTextLabel(ObjetosTirados[f][TextID]);
        }
        case 6:
        {
            GiveArmorToPlayer(playerid, ObjetosTirados[f][Cantidad]);
	        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
	        format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s recoge un chaleco del suelo.", GetPlayerNameEx(playerid));
			NearMsg(playerid, -1, szMessage,10.0);
            ObjetosTirados[f][PosObjeto][0] = 0;
            ObjetosTirados[f][PosObjeto][1] = 0;
            ObjetosTirados[f][PosObjeto][2] = 0;
			ObjetosTirados[f][Tipo] = 0;
			ObjetosTirados[f][IDReferencia] = 0;
            ObjetosTirados[f][Cantidad] = 0;
			DestroyDynamicObject(ObjetosTirados[f][ObjetoID]);
			DestroyDynamic3DTextLabel(ObjetosTirados[f][TextID]);
        }
	}
	return 1;
}

CMD:estereoveh(playerid, params[])
{
	new engine,lights,alarm,doors,bonnet,boot,objective,iVeh = GetPlayerVehicleID(playerid), Float:Pos[3];
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "No estas en un vehiculo!");
	if(LSPD_IsACopCar(iVeh)||Taxi_Vehicle(iVeh)||AutoRusos(iVeh)||AutoItalianos(iVeh)||AutoGrove(iVeh)||AutoBallas(iVeh)||AutoVagos(iVeh)||Bus_Vehicle(iVeh)||SAMD_Vehicle(iVeh)||Mecanico_Vehicle(iVeh)||FBI_Vehicle(iVeh)||CNN_Vehicle(iVeh)||IsAPizzabike(iVeh)||GobierAuto(iVeh)||IsAnNGCar(iVeh)){
	return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto en vehículos facciónes."); }
	GetVehicleParamsEx(iVeh,engine,lights,alarm,doors,bonnet,boot,objective);
	if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) return SendClientMessage(playerid, COLOR_WHITE, "Debes tener el maletero abierto del vehiculo!");
	if(engine == VEHICLE_PARAMS_ON) SetVehicleEngine(iVeh, playerid);
	GetVehiclePos(iVeh, Pos[0], Pos[1], Pos[2]);
	if(!EstereoON[iVeh])
	{
		EstereoON[iVeh] = true;
		cmd_me(playerid, "enciende el estereo del vehiculo.");
		SendClientMessage(playerid, COLOR_WHITE, "Utiliza '/estereoveh' para apagar el estereo y para reproducir o cambiar de música.");
		EstereoVPos[iVeh][0] = Pos[0]; EstereoVPos[iVeh][1] = Pos[1]; EstereoVPos[iVeh][2] = Pos[2];
		EstereoArea[iVeh] = CreateDynamicSphere(EstereoVPos[iVeh][0], EstereoVPos[iVeh][1], EstereoVPos[iVeh][2], 30.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	}
	else ShowPlayerDialog(playerid, DIALOG_ESTEREOV, DIALOG_STYLE_LIST, "Estereo del Vehiculo", "Apagar Estereo\nCambiar de música", "Aceptar", "Cancelar");
	return 1;
}
	
CMD:primerapersona(playerid, params[])
{
	if(camaraon[playerid] == 0)
	{
		camaraon[playerid] = 1;
		ShowInfoForPlayer(playerid, "~w~ Primera persona ~g~activado", 3000);
		AttachObjectToPlayer(FPS[playerid], playerid, 0.0, 0.15, 0.65, 0.0, 0.0, 0.0);
		AttachCameraToObject(playerid, FPS[playerid]);
	}
	else if(camaraon[playerid] == 1)
	{
		camaraon[playerid] = 0;
		ShowInfoForPlayer(playerid, "~w~ Primera persona ~r~desactivado", 3000);
		SetCameraBehindPlayer(playerid);
	}
	return 1;
}

CMD:intcasa(playerid, params[])
{
	if(Info[playerid][pAdmin] >= 6) ShowPlayerDialog(playerid, INT_CASAS, DIALOG_STYLE_LIST, "Categorias de interiores","Safe Houses\nBurglary Houses", "Seleccionar", "Cancelar");
	return 1;
}

CMD:deletecarro(playerid, params[])
{
	if(Info[playerid][pAdmin] >= 6)
	{
    	if(IsPlayerInAnyVehicle(playerid))
		{
		    new string[128];
		    new carid = GetPlayerVehicleID(playerid);
		    DestroyVehicle(carid);
			format(string, sizeof(string), "Vehiculo %d destruido.", carid);
			SendClientMessageEx(playerid, COLOR_GREY, string);
		}
	}
	return 1;
}

stock SaveVarBusiness(type,id, name[],variable)
{
	switch(type)
	{
	    case 1:
	    {
		    new bfile[64];
			format(bfile, 64, BUSINESS_FILE, id);
			new INI:File = INI_Open(bfile);
			INI_SetTag(File,"HouseData");
			INI_WriteInt(File,name,variable);
			INI_Close(File);
	    }
	    case 2:
	    {
		    new bfile[64];
			format(bfile, 64, BUSINESS_FILE, id);
			new INI:File = INI_Open(bfile);
			INI_SetTag(File,"HouseData");
			INI_WriteFloat(File,name,variable);
			INI_Close(File);
	    }
	}
}
stock SaveVarHouses(type,id, name[],variable)
{
	switch(type)
	{
	    case 1:
	    {
		    new bfile[64];
			format(bfile, 64, HOUSE_FILE, id);
			new INI:File = INI_Open(bfile);
			INI_SetTag(File,"HouseData");
			INI_WriteInt(File,name,variable);
			INI_Close(File);
	    }
	    case 2:
	    {
		    new bfile[64];
			format(bfile, 64, HOUSE_FILE, id);
			new INI:File = INI_Open(bfile);
			INI_SetTag(File,"HouseData");
			INI_WriteFloat(File,name,variable);
			INI_Close(File);
	    }
	}
}
stock SaveVarPlayer(casex,playerid, name[],variable)
{
    if(!IsPlayerConnectedEx(playerid)) return 1;
    if(Info[playerid][pTempName] == 1) return 1;
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	switch(casex)
	{
		case 1: // INTEGRAL
		{
			if(INI_Exist(playername))
			{
				new PlayerFile[13 +MAX_PLAYER_NAME+ 1];
	    		format(PlayerFile,sizeof PlayerFile, USERFILE, playername);
	    		new INI:File = INI_Open(PlayerFile);
	    		INI_SetTag(File,"data");
	    		INI_WriteInt(File,name,variable);
	    		INI_Close(File);
			}
			return 1;
		}
		/*case 2: // string
		{
			if(INI_Exist(playername))
			{
				new PlayerFile[13 +MAX_PLAYER_NAME+ 1];
	    		format(PlayerFile,sizeof PlayerFile, USERFILE, playername);
	    		new INI:File = INI_Open(PlayerFile);
	    		INI_SetTag(File,"data");
	    		INI_WriteString(File,name,variable);
	    		INI_Close(File);
			}
			return 1;
		}*/
		case 3: // FLOAT
		{
			if(INI_Exist(playername))
			{
				new PlayerFile[13 +MAX_PLAYER_NAME+ 1];
	    		format(PlayerFile,sizeof PlayerFile, USERFILE, playername);
	    		new INI:File = INI_Open(PlayerFile);
	    		INI_SetTag(File,"data");
	    		INI_WriteFloat(File,name,variable);
	    		INI_Close(File);
			}
			return 1;
		}
	}
	return 1;
}

stock OnPlayerSavedStats(const playerid)
{
	if(!IsPlayerConnectedEx(playerid)) return 1;
	if(Info[playerid][pTempName] == 1) return 1;
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(INI_Exist(playername))
	{
		new PlayerFile[13 +MAX_PLAYER_NAME+ 1];
	    format(PlayerFile,sizeof PlayerFile, USERFILE, playername);
	    new INI:File = INI_Open(PlayerFile);
	    INI_SetTag(File,"data");
	    INI_WriteInt(File,"Level",Info[playerid][pLevel]);
	    INI_WriteInt(File,"RolPuntos",Info[playerid][pRolPuntos]);
	    INI_WriteInt(File,"AdminNivel",Info[playerid][pAdmin]);
	    INI_WriteInt(File,"BanAppealer",Info[playerid][pBanAppealer]);
	    INI_WriteInt(File,"StaffManager",Info[playerid][pStaffManager]);
		INI_WriteInt(File,"FactionModerator",Info[playerid][pFactionModerator]);
		INI_WriteInt(File,"Helper",Info[playerid][pHelper]);
		INI_WriteInt(File,"ConnectedTime",Info[playerid][pConnectTime]);
		INI_WriteInt(File,"Registered",Info[playerid][pReg]);
		INI_WriteInt(File,"Sex",Info[playerid][pSex]);
		INI_WriteInt(File,"Age",Info[playerid][pAge]);
		INI_WriteInt(File,"Respect",Info[playerid][pExp]);
	    INI_WriteInt(File,"Money", GetPVarInt(playerid, "Cash"));
	    INI_WriteInt(File,"Bank",Info[playerid][pMoneyBank]);
		INI_WriteInt(File,"PINBank",Info[playerid][pPinBank]);
		INI_WriteInt(File,"NrCuenta",Info[playerid][pNrCuenta]);
	    INI_WriteString(File,"IP", Info[playerid][pIP]);
	    INI_WriteInt(File,"Arrested",Info[playerid][pArrested]);
	    INI_WriteInt(File,"JailAdmin",Info[playerid][pJailAdmin]);
	    INI_WriteInt(File,"LottoNr",Info[playerid][pLottoNr]);
	    INI_WriteInt(File,"Job",Info[playerid][pJob]);
	    INI_WriteInt(File,"DudaMute",Info[playerid][pDudaMute]);
	    INI_WriteInt(File,"Warn",Info[playerid][pWarn]);
	    INI_WriteInt(File,"WRestricted",Info[playerid][pWRestricted]);
	    INI_WriteInt(File,"Jailed",Info[playerid][pJailed]);
	    INI_WriteInt(File,"JailTime",Info[playerid][pJailTime]);
	    INI_WriteInt(File,"Materials",Info[playerid][pMats]);
	    INI_WriteInt(File,"Packages",GetPVarInt(playerid, "Packages"));
	    INI_WriteInt(File,"Drugs",Info[playerid][pDrugs]);
	    INI_WriteInt(File,"Cosecha",Info[playerid][pCosecha]);
	    INI_WriteInt(File,"Crack",Info[playerid][pCrack]);
	    INI_WriteInt(File,"Pot",Info[playerid][pPot]);
	    INI_WriteInt(File,"Crates",Info[playerid][pCrates]);
	    INI_WriteInt(File,"Adic",Info[playerid][pAdiccion]);
	    INI_WriteInt(File,"Leader",Info[playerid][pLeader]);
	    INI_WriteInt(File,"Member",Info[playerid][pMember]);
	    INI_WriteInt(File,"FMember",Info[playerid][pFMember]);
	    INI_WriteInt(File,"Division",Info[playerid][pDivision]);
	    INI_WriteInt(File,"Rank",Info[playerid][pRank]);
	    INI_WriteInt(File,"Char",Info[playerid][pChar]);
		if(GetPVarInt(playerid, "EventToken") == 0 && GetPVarInt(playerid, "IsInArena") == 0){
		    GetPlayerHealth(playerid,Info[playerid][pHealth]);
		}
		INI_WriteFloat(File,"pHealth",Info[playerid][pHealth]);
		if(GetPVarInt(playerid, "EventToken") == 0 && GetPVarInt(playerid, "IsInArena") == 0){
		    GetPlayerArmour(playerid,Info[playerid][pArmour]);
		}
	    INI_WriteFloat(File,"pArmour",Info[playerid][pArmour]);
	    INI_WriteInt(File,"PhoneNr",Info[playerid][pPnumber]);
	    INI_WriteInt(File,"Sprunk",Info[playerid][pSprunk]);
	    INI_WriteInt(File,"Phonebook",Info[playerid][pPhoneBook]);
	    INI_WriteInt(File,"Libreta",Info[playerid][pLibreta]);
	    INI_WriteInt(File,"ContactoAgendar",Info[playerid][pContactoAgendar]);
	    INI_WriteInt(File,"NumeroLibreta1",Info[playerid][pNumeroLibreta1]);
	    INI_WriteInt(File,"NumeroLibreta2",Info[playerid][pNumeroLibreta2]);
	    INI_WriteInt(File,"NumeroLibreta3",Info[playerid][pNumeroLibreta3]);
	    INI_WriteInt(File,"NumeroLibreta4",Info[playerid][pNumeroLibreta4]);
	    INI_WriteInt(File,"NumeroLibreta5",Info[playerid][pNumeroLibreta5]);
	    INI_WriteInt(File,"NumeroLibreta6",Info[playerid][pNumeroLibreta6]);
	    INI_WriteInt(File,"NumeroLibreta7",Info[playerid][pNumeroLibreta7]);
	    INI_WriteInt(File,"NumeroLibreta8",Info[playerid][pNumeroLibreta8]);
	    INI_WriteInt(File,"NumeroLibreta9",Info[playerid][pNumeroLibreta9]);
	    INI_WriteInt(File,"NumeroLibreta10",Info[playerid][pNumeroLibreta10]);
	    INI_WriteInt(File,"House",Info[playerid][pPhousekey]);
	    INI_WriteInt(File,"Int", Info[playerid][pInt]);
	    INI_WriteFloat(File,"Pos_x",Info[playerid][pPos_x]);
	    INI_WriteFloat(File,"Pos_y",Info[playerid][pPos_y]);
	    INI_WriteFloat(File,"Pos_z",Info[playerid][pPos_z]);
	    INI_WriteFloat(File,"SPos_r",Info[playerid][pPos_r]);
	    INI_WriteInt(File,"CarLic",Info[playerid][pCarLic]);
	    INI_WriteInt(File,"FlyLic",Info[playerid][pFlyLic]);
	    INI_WriteInt(File,"BoatLic",Info[playerid][pBoatLic]);
	    INI_WriteInt(File,"GunLic",Info[playerid][pGunLic]);
	    INI_WriteInt(File,"Gafas",Info[playerid][pGafas]);
	    INI_WriteInt(File,"Tutorial",Info[playerid][pTut]);
	    INI_WriteInt(File,"VWorld",Info[playerid][pVW]);
	    INI_WriteInt(File,"Lighter",Info[playerid][pLighter]);
	    INI_WriteInt(File,"Cigarettes",Info[playerid][pCigarettes]);
	    INI_WriteInt(File,"Ban",Info[playerid][pBanned]);
	    INI_WriteInt(File,"Disabled",Info[playerid][pDisabled]);
	    INI_WriteInt(File,"BlockBug",Info[playerid][pBlockBug]);
	    INI_WriteInt(File,"DNI",Info[playerid][pDNI]);
	    INI_WriteInt(File,"VSkill",Info[playerid][pArmsSkill]);
	    INI_WriteInt(File,"TSkill",Info[playerid][pTruckSkill]);
	    INI_WriteInt(File,"SmugglerSkill",Info[playerid][pSmugSkill]);
	    INI_WriteInt(File,"DrugsSkill",Info[playerid][pDrugsSkill]);
	    INI_WriteInt(File,"FStyle",Info[playerid][pFStyle]);
	    INI_WriteInt(File,"Busqueda",Info[playerid][pWantedLevel]);
	    INI_WriteInt(File,"Rent",Info[playerid][pRenting]);
	    INI_WriteInt(File,"prMoney",Info[playerid][p_Pr_Money]);
	    INI_WriteInt(File,"prTime",Info[playerid][p_Pr_Time]);
	    INI_WriteInt(File,"Rob",Info[playerid][pRob]);
	    INI_WriteInt(File,"Premium",Info[playerid][pVIP]);
	    INI_WriteInt(File,"BanDuda",Info[playerid][pBanDuda]);
	    INI_WriteInt(File,"ReportMuted",Info[playerid][pRMuted]);
	    INI_WriteInt(File,"ReportMutedTotal",Info[playerid][pRMutedTotal]);
	    INI_WriteInt(File,"ReportMutedTime",Info[playerid][pRMutedTime]);
	    INI_WriteInt(File,"Pasaporte",Info[playerid][pPasaporte]);
	    INI_WriteInt(File,"RadioP", Info[playerid][pRadio]);
	    INI_WriteInt(File,"CansancioNN", Info[playerid][pCansancioNN]);
		INI_WriteInt(File,"OrinaNN", Info[playerid][pOrinaNN]);
		INI_WriteInt(File,"HambreNN", Info[playerid][pHambreNN]);
	    INI_WriteInt(File,"KHZ",Info[playerid][pRadioFreq]);
	    INI_WriteInt(File,"Ipad",Info[playerid][pIpadMusic]);
	    for( new m = 0; m < 5 ; m++ )
	    {
	        new mStr[24];
		    format(mStr,sizeof(mStr), "PVeh%d", m);
		    INI_WriteInt(File,mStr, Info[playerid][pPlayerVehiclesID][m]);
		}
		for( new m = 0; m < 13; m++ )
		{
		    new mStr[24];
		    format(mStr,sizeof(mStr), "Gun%d", m);
		    INI_WriteInt(File,mStr, Info[playerid][pWeapons][m]);
		    format(mStr,sizeof(mStr), "Municion%d", m);
		    INI_WriteInt(File,mStr, Info[playerid][pMunicion][m]);
		}
		INI_WriteString(File,"Acento",Info[playerid][pAcento]);
		INI_WriteString(File,"Agenda1",Info[playerid][pAgenda1]);
		INI_WriteString(File,"Agenda2",Info[playerid][pAgenda2]);
		INI_WriteString(File,"Agenda3",Info[playerid][pAgenda3]);
		INI_WriteString(File,"Agenda4",Info[playerid][pAgenda4]);
		INI_WriteString(File,"Agenda5",Info[playerid][pAgenda5]);
		INI_WriteInt(File,"PTokens",Info[playerid][pPaintTokens]);
		INI_WriteInt(File,"Head",Info[playerid][pHead]);
		INI_WriteInt(File,"TaxiLicense", Info[playerid][pTaxiLicense]);
		INI_WriteInt(File,"Hospital",Info[playerid][pHospital]);
		INI_WriteInt(File,"CHits",Info[playerid][pCHits]);
		INI_WriteInt(File,"FHits",Info[playerid][pFHits]);
		INI_WriteInt(File,"Spraycan",Info[playerid][pSpraycan]);
		INI_WriteInt(File,"Married",Info[playerid][pMarried]);
		INI_WriteString(File,"MarriedTo",Info[playerid][pMarriedTo]);
		INI_WriteString(File,"ContractBy",Info[playerid][pContractBy]);
		INI_WriteString(File,"ContractDetail",Info[playerid][pContractDetail]);
		INI_WriteInt(File,"pWExists",Info[playerid][pWExists]);
		INI_WriteFloat(File,"pWX",Info[playerid][pWX]);
		INI_WriteFloat(File,"pWY",Info[playerid][pWY]);
		INI_WriteFloat(File,"pWZ",Info[playerid][pWZ]);
		INI_WriteFloat(File,"pWZ2",Info[playerid][pWZ2]);
		INI_WriteInt(File,"pWVW",Info[playerid][pWVW]);
		INI_WriteInt(File,"pWInt",Info[playerid][pWInt]);
		INI_WriteInt(File,"pWValue",Info[playerid][pWValue]);
		INI_WriteInt(File,"pWSeeds",Info[playerid][pWSeeds]);
		INI_WriteInt(File,"G. Bloq",Info[playerid][pGBloq]);
		INI_WriteInt(File,"AdMuted",Info[playerid][pADMute]);
		INI_WriteInt(File,"AdMutedTotal",Info[playerid][pADMuteTotal]);
		INI_WriteString(File,"Warrants",Info[playerid][pWarrant]);
		INI_WriteInt(File,"JudgeJailTime",Info[playerid][pJudgeJailTime]);
		INI_WriteInt(File,"JudgeJailType",Info[playerid][pJudgeJailType]);
		INI_WriteInt(File,"BeingSentenced",Info[playerid][pBeingSentenced]);
		INI_WriteInt(File,"ProbationTime",Info[playerid][pProbationTime]);
		INI_WriteInt(File,"Fishes" ,Info[playerid][pFishes]);
		INI_WriteInt(File,"FishSkill",Info[playerid][pFishSkill]);
		INI_WriteInt(File,"BiggestFish",Info[playerid][pBiggestFish]);
		INI_WriteInt(File,"ADTime",Info[playerid][pADTime]);
		INI_WriteInt(File,"GGTokens",Info[playerid][pGTokens]);
		INI_WriteInt(File,"HDExp",Info[playerid][pDobleExp]);
		INI_WriteInt(File,"Order",Info[playerid][pOrder]);
		INI_WriteInt(File,"TempVIP",Info[playerid][pTempVIP]);
		INI_WriteInt(File,"VIPInviteDay",Info[playerid][pVIPInviteDay]);
		INI_WriteInt(File,"BuddyInvite",Info[playerid][pBuddyInvited]);
		INI_WriteInt(File,"Job2",Info[playerid][pJob2]);
		INI_WriteInt(File,"TypeSpawn",Info[playerid][pTypeSpawn]);
		INI_WriteInt(File,"ShopTech",Info[playerid][pShopTech]);
		INI_WriteInt(File,"Status",Info[playerid][pEstado]);
		INI_WriteInt(File,"DayVIP",Info[playerid][pVIPDateD]);
		INI_WriteInt(File,"MonthVIP",Info[playerid][pVIPDateM]);
		INI_WriteInt(File,"IDRegalo",Info[playerid][pRegalo]);
		INI_WriteInt(File,"Deuda",Info[playerid][pTaxDeuda]);
		INI_WriteInt(File,"TimePayDay", Info[playerid][pTimePayDay]);
		INI_WriteInt(File,"Screwdrivers", Info[playerid][pScrewdriver]);
		INI_WriteInt(File,"Firstaid", Info[playerid][pFirstaid]);
		INI_WriteInt(File,"CamOculta", Info[playerid][pSurveillance]);
		INI_WriteInt(File,"MoneyOfBank", Info[playerid][pMoneyBankT]);
		INI_WriteInt(File,"DeudaBank",Info[playerid][pBorrowedMoney]);
		INI_WriteInt(File,"CuotasBank",Info[playerid][pFeesBank]);
		INI_WriteString(File,"AdminName",Info[playerid][pAdminName]);
	    INI_WriteInt(File,"Coins",Info[playerid][pCoinsVip]);
	    INI_WriteInt(File,"CoinsPin",Info[playerid][pCoinsPIN]);
	    INI_WriteInt(File,"CashGo",Info[playerid][pCashGo]);
	    INI_WriteInt(File,"Boombox",Info[playerid][pBoombox]);
        INI_WriteString(File,"Antecedente1",Info[playerid][pAntecedente1]);
	    INI_WriteString(File,"Antecedente2",Info[playerid][pAntecedente2]);
	    INI_WriteString(File,"Antecedente3",Info[playerid][pAntecedente3]);
	    INI_WriteInt(File,"AntecedenteID1",Info[playerid][pAntecedenteID1]);
		INI_WriteInt(File,"AntecedenteID2",Info[playerid][pAntecedenteID2]);
		INI_WriteInt(File,"AntecedenteID3",Info[playerid][pAntecedenteID3]);
		INI_WriteInt(File,"Errores test",Info[playerid][pTestErrores]);
	    for(new v = 0; v < MAX_PLAYERTOYS; v++)
		{
	    	new string[64];
			format( string,64, "pt%dModelID", v);
			INI_WriteInt(File,string, PlayerToyInfo[playerid][v][ptModelID]);
			format(string, 64, "pt%dBone",v);
			INI_WriteInt(File,string, PlayerToyInfo[playerid][v][ptBone]);
			format(string, 64, "pt%dPosX",v);
			INI_WriteFloat(File,string, PlayerToyInfo[playerid][v][ptPosX]);
			format(string, 64, "pt%dPosY",v);
			INI_WriteFloat(File,string, PlayerToyInfo[playerid][v][ptPosY]);
			format(string, 64, "pt%dPosZ",v);
			INI_WriteFloat(File,string, PlayerToyInfo[playerid][v][ptPosZ]);
			format(string, 64, "pt%dRotX",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ptRotX]);
			format(string, 64, "pt%dRotY",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ptRotY]);
			format(string, 64, "pt%dRotZ",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ptRotZ]);
			format(string, 64, "pt%dSizX",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ftscaleX]);
			format(string, 64, "pt%dSizY",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ftscaleY]);
			format(string, 64, "pt%dSizZ",v);
			INI_WriteFloat(File,string,PlayerToyInfo[playerid][v][ftscaleZ]);
		}
		INI_Close(File);
	}
	return 1;
}

function OnPlayerLoginEx(playerid)
{
	TotalLogin++;
	CancelSelectTextDraw(playerid);
	ResetPlayerMoney(playerid);
	CurrentMoney[playerid] = GetPVarInt(playerid, "Cash");
	HideMenuLogin(playerid);
	if(Info[playerid][pDisabled] == 1)
	{
	    SetPlayerName(playerid, "BannedPlayer");
		SendClientMessageEx(playerid, COLOR_GENERAL,"Error [#12]");
	   	SendClientMessageEx(playerid, COLOR_WHITE,  "{37B9F5}<!> SERVER: {E3E4ED}Esta cuenta está deshabilitada.");
		Expulsar(playerid);
		return 1;
	}
	if(Info[playerid][pBanned] >= 2)
	{
	    SetPlayerName(playerid, "BannedPlayer");
	    SendClientMessageEx(playerid, COLOR_GENERAL,"Error [#10]");
	    SendClientMessageEx(playerid, COLOR_WHITE, "{37B9F5}<!> SERVER: {E3E4ED}Tú estás baneado del servidor.");
		Expulsar(playerid);
		return 1;
	}
	if(Info[playerid][pAdmin] > 0)
	{
		new tempip[32];
		GetPlayerIp(playerid, tempip, 32);
		if(strcmp(tempip, Info[playerid][pIP], true))
		{
			format(szMessage, sizeof(szMessage), "%s ha logueado con diferente [IP: %s] - IP original es: %s", GetPlayerNameEx(playerid), tempip, Info[playerid][pIP]);
			ABroadCast(COLOR_GREY, szMessage, 4);
		}
	}
	if(Info[playerid][pWRestricted] >= 1) ResetPlayerWeaponsEx(playerid);
	GetPlayerIp(playerid, Info[playerid][pIP], 32);
	SetPlayerScore(playerid, Info[playerid][pLevel]);
	if(Info[playerid][pReg] == 0)
	{
		Info[playerid][pLevel] = 0;
		Info[playerid][pHealth] = 100.0;
		Info[playerid][pPos_x] = 1612.3240;
		Info[playerid][pPos_y] = -2330.1670;
		Info[playerid][pPos_z] = 13.5469;
		Info[playerid][pInt] = 0;
		Info[playerid][pChar] = 299;
		Info[playerid][pPnumber] = 0;
		Info[playerid][pPhousekey] = INVALID_HOUSE_ID;
		Info[playerid][pMoneyBank] = 0;
	}
	if(Info[playerid][pPos_x] == 0.0 && Info[playerid][pPos_y]== 0.0&& Info[playerid][pPos_z]== 0.0)
	{
	    Info[playerid][pPos_x] = 1715.12;
		Info[playerid][pPos_y] = -1903.17;
		Info[playerid][pPos_z] = 13.56;
	}
	if(Info[playerid][pShopTech] >= 2) Info[playerid][pShopTech] = 0;
	if(Info[playerid][pAdmin] == 0) { Info[playerid][pShopTech] = 0; Info[playerid][pBanAppealer] = 0;Info[playerid][pStaffManager] = 0; Info[playerid][pFactionModerator] = 0; }
	if(Info[playerid][pHospital] == 1){ Info[playerid][pHospital] = 0; SetPVarInt(playerid, "Hospital", 1); }
	if(Info[playerid][pLevel] < 5 || Info[playerid][pAdmin] > 0 || Info[playerid][pHelper] > 0) gNewbie[playerid] = 0;
	if(Info[playerid][pTut] == 1) Info[playerid][pReg] = 1;
	if(Info[playerid][pVIP] == 0 && Info[playerid][pJob2] >= 1) Info[playerid][pJob2] = 0;
	CheckVIPExpire(playerid);
	SetSpawnInfo(playerid, 0, Info[playerid][pChar], Info[playerid][pPos_x], Info[playerid][pPos_y], Info[playerid][pPos_z], 1.0, -1, -1, -1, -1, -1, -1);
	gPlayerLogged{playerid} = 1;
	SpawnPlayer(playerid);
	new ip[32];
	GetPlayerIp(playerid, ip, 32);
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");
	SendClientMessageEx(playerid, -1, "");//acaxd
	SendClientMessageEx(playerid, COLOR_WHITE, "Bienvenido(a) a "COL_GENERAL"New Paradise RolePlay");
	SendClientMessageEx(playerid, COLOR_WHITE, "Comandos de ayuda: "COL_GENERAL"/duda - /re - /ayuda");
	SendClientMessageEx(playerid, COLOR_WHITE, "Estate atento a los cambios con el comando "COL_GENERAL"/actualizaciones");
	SetPlayerFightingStyle (playerid, Info[playerid][pFStyle]);
	WeedLogin(playerid);
	SetPlayerToTeamColor(playerid);
	UnloadPlayerVehicles(playerid);
	LoadPlayerVehicles(playerid);
	return 1;
}

public OnPlayerPressButton(playerid, buttonid)
{
	if(buttonid == JDoor1)
	{
	    if(!IsACop(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"* Acceso Denegado.");
	    MoveDynamicObject(fen1,1417.90002441,-1554.90002441,4330.50000000,6);
	    SetTimer("CloseCell1", 5000, 0);
	    //print("JDOOR 1 - Moved");
	}
	if(buttonid == JDoor2)
	{
	    if(!IsACop(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"* Acceso Denegado.");
	    MoveDynamicObject(fen2,1425.90002441,-1555.00000000,4330.50000000,6);
	    SetTimer("CloseCell2", 5000, 0);
	    //print("JDOOR 2 - Moved");
	}
	if(buttonid == JDoor3)
	{
	    if(!IsACop(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"* Acceso Denegado.");
	    MoveDynamicObject(fen3,1429.50000000,-1554.80004883,4330.50000000,6);
	    SetTimer("CloseCell3", 5000, 0);
	    //print("JDOOR 3 - Moved");
	}
	if(buttonid == JDoor4)
	{
	    if(!IsACop(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"* Acceso Denegado.");
	    MoveDynamicObject(fen4,1422.19995117,-1567.00000000,4330.50000000,6);
	    SetTimer("CloseCell4", 5000, 0);
	    //print("JDOOR 4 - Moved");
	}
	if(buttonid == JDoor5) // FIX a 6
	{
	    if(!IsACop(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"* Acceso Denegado.");
	    MoveDynamicObject(fen6,1430.19995117,-1566.69995117,4330.50000000,6);
	    SetTimer("CloseCell5", 5000, 0);
	    //print("JDOOR 5 - Moved");
	}
	if(buttonid == JDoor6)
	{
	    if(!IsACop(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"* Acceso Denegado.");
	    MoveDynamicObject(fen5,1414.80004883,-1566.69995117,4330.50000000,6);
	    SetTimer("CloseCell6", 5000, 0);
	    //print("JDOOR 6 - Moved");
	}
    if(buttonid == botonesbanco1[0])
    {
        if(!IsACop(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"* Acceso Denegado.");
			return 1;
		}
        MoveDynamicObject(puertasbanco1[0],1436.7870, -993.0631, 995.1141,3);
        SetTimer("CerrarP1Banco1", 3000, 0);
    }
    if(buttonid == botonesbanco1[1])
    {
        if(!IsACop(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"* Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(puertasbanco1[0],1436.7870, -993.0631, 995.1141,3);
        SetTimer("CerrarP1Banco1", 3000, 0);
        //print("JDOOR 6 - Moved");
    }
    if(buttonid == botonesbanco1[2])
    {
        if(!IsACop(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"* Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(puertasbanco1[1],1436.8071, -1002.6318, 995.1141,6);
        SetTimer("CerrarP2Banco1", 3000, 0);
        //print("JDOOR 6 - Moved");
    }
    if(buttonid == botonesbanco1[3])
    {
        if(!IsACop(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"* Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(puertasbanco1[1],1436.8071, -1002.6318, 995.1141,6);
        SetTimer("CerrarP2Banco1", 3000, 0);
        //print("JDOOR 6 - Moved");
    }
	if(buttonid == courtbuttons[0])
	{
		if(!IsACop(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"* Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(courtgates[1],2138.00292969,1290.96386719-10,7698.24169922,4);
		SetTimer("CloseCourtGate2", 5000, 0);
	}
	if(buttonid == courtbuttons[3])
	{
		if(!IsACop(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"* Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(courtgates[1],2138.00292969,1290.96386719-10,7698.24169922,4);
		SetTimer("CloseCourtGate2", 5000, 0);
	}
	if(buttonid == courtbuttons[1])
	{
		if(!IsACop(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"* Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(courtgates[0],2138.00000000,1316.72106934+10,7698.23632812,4);
		SetTimer("CloseCourtGate1", 5000, 0);
	}
	if(buttonid == courtbuttons[2])
	{
		if(!IsACop(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"* Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(courtgates[0],2138.00000000,1316.72106934+10,7698.23632812,4);
		SetTimer("CloseCourtGate1", 5000, 0);
	}
	if(buttonid == FBILobbyLeftBTN[0] || buttonid == FBILobbyLeftBTN[1])
	{
	    if(Info[playerid][pMember] == 2 || Info[playerid][pLeader] == 2)
	    {
	        MoveDynamicObject(FBILobbyLeft,293.93002319,-1498.43457031,-46.13965225,4);
			SetTimer("CloseFBILobbyLeft", 2500, 0);
	    }
	    else return SendClientMessageEx(playerid,COLOR_GREY,"* Acceso Denegado.");
	}
	if(buttonid == FBILobbyRightBTN[0] || buttonid == FBILobbyRightBTN[1])
	{
	    if(Info[playerid][pMember] == 2 || Info[playerid][pLeader] == 2)
	    {
	        MoveDynamicObject(FBILobbyRight,303.84756470,-1521.62988281,-46.13965225,4);
			SetTimer("CloseFBILobbyRight", 2500, 0);
	    }
	    else return SendClientMessageEx(playerid,COLOR_GREY,"* Acceso Denegado.");
	}
	if(buttonid == FBIPrivateBTN[0] || buttonid == FBIPrivateBTN[1])
	{
	    if((Info[playerid][pMember] == 2 || Info[playerid][pLeader] == 2) && Info[playerid][pRank] >= 5)
	    {
	        MoveDynamicObject(FBIPrivate[0],299.29986572,-1491.75842285,-28.73300552,4);
	        MoveDynamicObject(FBIPrivate[1],299.33737183,-1496.86145020,-28.73300552,4);
			SetTimer("CloseFBIPrivate", 2500, 0);
	    }
	    else return SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
	}
	if(buttonid == elevator)
	{
		if(!Team_SAPD(playerid) && !Team_NG(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		else ShowPlayerDialog( playerid, ELEVATOR3, DIALOG_STYLE_LIST, "Elevador", "Helipuerto\nGarage", "Ok", "Cancelar");
	}
	if(buttonid == garage0)
	{
		if(!Team_SAPD(playerid) && !Team_NG(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		else ShowPlayerDialog( playerid, ELEVATOR2, DIALOG_STYLE_LIST, "Elevator", "Helipuerto\nInterior", "Ok", "Cancelar");
	}
	if(buttonid == roofkey)
	{
		if(!Team_SAPD(playerid) && !Team_NG(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		else ShowPlayerDialog( playerid, ELEVATOR, DIALOG_STYLE_LIST, "Elevador", "Interior\nGarage", "Ok", "Cancelar");
	}
	if(buttonid == cctvin || buttonid == cctvout)
	{
		if(!Team_SAPD(playerid) && !Team_NG(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(cctv1,263.44921875,115.79980469,1003.61718750,4);
		MoveDynamicObject(cctv2,268.46875000,115.83691406,1003.61718750,4);
		SetTimer("CloseCCTV", 2500, 0);
	}
	if(buttonid == chiefin || buttonid == chiefout)
	{
		if((Info[playerid][pRank] < 6 && Info[playerid][pMember] == 1) || Info[playerid][pMember] != 1)
		{
   SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(chief1,228.0,119.50000000,1009.21875000,4);
		MoveDynamicObject(chief2,230.0,119.53515625,1009.21875000,4);
	    SetTimer("CloseChief", 2500, 0);
	}
	if(buttonid == lockerin || buttonid == lockerout)
	{
		if(!Team_SAPD(playerid) && !Team_NG(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(locker1,268.29980469,112.56640625,1003.61718750,4);
		MoveDynamicObject(locker2,263.29980469,112.52929688,1003.61718750,4);
		SetTimer("CloseLocker", 2500, 0);
	}
	if(buttonid == westout)
	{
		if(!Team_SAPD(playerid) && !Team_NG(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(westlobby1,239.71582031,115.09179688,1002.21502686,4);
		MoveDynamicObject(westlobby2,239.67968750,120.09960938,1002.21502686,4);
		SetTimer("CloseWestLobby", 2500, 0);
	}
	else if(buttonid == westin)
	{
		MoveDynamicObject(westlobby1,239.71582031,115.09179688,1002.21502686,4);
		MoveDynamicObject(westlobby2,239.67968750,120.09960938,1002.21502686,4);
		SetTimer("CloseWestLobby", 2500, 0);
	}
	else if(buttonid == eastin)
	{
	    MoveDynamicObject(eastlobby1,253.14941406,111.59960938,1002.21502686,4);
	    MoveDynamicObject(eastlobby2,253.18457031,106.59960938,1002.21502686,4);
		SetTimer("CloseEastLobby", 2500, 0);
	}
	else if(buttonid == eastout)
	{
		if(!Team_SAPD(playerid) && !Team_NG(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
 		MoveDynamicObject(eastlobby1,253.14941406,111.59960938,1002.21502686,4);
 		MoveDynamicObject(eastlobby2,253.18457031,106.59960938,1002.21502686,4);
		SetTimer("CloseEastLobby", 2500, 0);
	}
	if(buttonid == botayu1)
	{
		if(!Gobierno(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(ayuntadoor2,369.76, 166.58, 1007.40,4);
		SetTimer("Cerrarayunta2", 2500, 0);
	}
	else if(buttonid == botayu2)
	{
		if(!Gobierno(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(ayuntadoor2,369.76, 166.58, 1007.40,4);
		SetTimer("Cerrarayunta2", 2500, 0);
	}
	else if(buttonid == botayu3)
	{
		if(!Gobierno(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(ayuntadoor,364.29, 189.55, 1007.37,4);
		SetTimer("Cerrarayunta", 2500, 0);
	}
	else if(buttonid == botayu4)
	{
		if(!Gobierno(playerid))
		{
   SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
			return 1;
		}
		MoveDynamicObject(ayuntadoor,364.29, 189.55, 1007.37,4);
		SetTimer("Cerrarayunta", 2500, 0);
	}
	return false;
}


//PaintBall
PaintballMainMenu(playerid)
{
	format(szDialog,sizeof(szDialog),"Elegir Arena\nComprar Fichas");
	ShowPlayerDialog(playerid,PB_MENU,DIALOG_STYLE_LIST,"Paintball Arena - Menu:",szDialog,"Ok","Salir");
}

PaintballArenaSelection(playerid)
{
	format(szDialog,sizeof(szDialog),"DeathMatch Arena \t\t Jugadores:(%d/20)\nDeathMatch Arena 2 \t\t Jugadores:(%d/20)\nTeam DeathMatch \t\t Jugadores:(%d)",TotalDM, TotalDM2, TotalTDM);
	ShowPlayerDialog(playerid,PB_SARENA,DIALOG_STYLE_LIST,"Paintball Arena - Elige una Arena:",szDialog,"Ok","Atrás");
}

PaintballTokenBuyMenu(playerid)
{
	format(szDialog,sizeof(szDialog),"{FFFFFF}Cuantas fichas deseas comprar?\n\nCada ficha cuesta $%d. Actualmente tienes {AA3333}%d{FFFFFF} fichas.", 20, Info[playerid][pPaintTokens]);
	ShowPlayerDialog(playerid,PB_FICHAS,DIALOG_STYLE_INPUT,"Paintball Arena - Fichas:",szDialog,"Comprar","Atrás");
	return 1;
}

PaintballScoreboard(playerid)
{
	if(GetPVarInt(playerid, "IsInArena") == 0) { return 1; }
	new titlestring[128];
	new string[2048];
	foreach(Player, p)
	{
		if(GetPVarInt(p, "ArenaMode") == 1)
		{
			format(titlestring,sizeof(titlestring),"(DM) Scoreboard - Players: (%d)",TotalDM);
			format(string,sizeof(string),"%s(ID: %d) %s - (Puntos: %d) (Muertes: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),Info[p][pKills],Info[p][pDeaths],GetPlayerPing(p));
		}
		if(GetPVarInt(p, "ArenaMode") == 3)
		{
			format(titlestring,sizeof(titlestring),"(DM) Scoreboard - Players: (%d)",TotalDM2);
			format(string,sizeof(string),"%s(ID: %d) %s - (Puntos: %d) (Muertes: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),Info[p][pKills],Info[p][pDeaths],GetPlayerPing(p));
		}
		if(GetPVarInt(p, "ArenaMode") == 2)
		{
		    format(titlestring,sizeof(titlestring),"(TDM) Scoreboard - Rojo: (%d) - Azul: (%d)",TRedKills,TBlueKills);
		    switch(Info[p][pPaintTeam])
		    {   // 1: Red Team - 2: // Blue Team
		        case 1: format(string,sizeof(string),"%s(ID: %d) ({FF0000}Equipo Rojo{FFFFFF}) %s - (Puntos: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),Info[p][pKills],GetPlayerPing(p));
		        case 2: format(string,sizeof(string),"%s(ID: %d) ({0000FF}Equipo Azul{FFFFFF}) %s - (Puntos: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),Info[p][pKills],GetPlayerPing(p));
		    }
		}
	}
	ShowPlayerDialog(playerid,PBARENASCORES,DIALOG_STYLE_LIST,titlestring,string,"Actualizar","Cerrar");
	return 1;
}

SpawnPaintballArena(playerid)
{
ResetPlayerWeapons(playerid);
switch(GetPVarInt(playerid, "ArenaMode")) // Deathmatch
{
    case 1:
    {
		Info[playerid][pVW] = 700; Info[playerid][pInt] = 10;
 		SetPlayerVirtualWorld(playerid, Info[playerid][pVW]);
		SetPlayerInterior(playerid, Info[playerid][pInt]);
		new rand = Random(1,5);
		switch (rand)
		{
    		case 1:
    		{
       			SetPlayerPos(playerid, -1045.3766,1098.6875,1345.2252);
				SetPlayerFacingAngle(playerid, 116.4942);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
    		}
    		case 2:
			{
	   			SetPlayerPos(playerid, -1126.8611,1020.4957,1345.5922);
				SetPlayerFacingAngle(playerid, 286.6877);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			case 3:
			{
	   			SetPlayerPos(playerid, -1087.2578,1094.6459,1343.9775);
				SetPlayerFacingAngle(playerid, 205.5335);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			case 4:
			{
	   			SetPlayerPos(playerid, -981.2971,1019.2087,1344.6238);
				SetPlayerFacingAngle(playerid, 51.9989);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
		}
		SetHP(playerid, 100);
		GiveArmorToPlayer(playerid, 50);
		GivePlayerWeapon(playerid, 29, 60000);
		return 1;
	}
	case 3: // Deathmatch 2
	{
		Info[playerid][pVW] = 800; Info[playerid][pInt] = 10;
		SetPlayerInterior(playerid, Info[playerid][pInt]);
		SetPlayerVirtualWorld(playerid, Info[playerid][pVW]);
		new rand = Random(1,5);
		switch (rand)
		{
    		case 1:
    		{
    	   		SetPlayerPos(playerid, -1045.3766,1098.6875,1345.2252);
				SetPlayerFacingAngle(playerid, 116.4942);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
    		}
    		case 2:
			{
		   		SetPlayerPos(playerid, -1126.8611,1020.4957,1345.5922);
				SetPlayerFacingAngle(playerid, 286.6877);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			case 3:
			{
		   		SetPlayerPos(playerid, -1087.2578,1094.6459,1343.9775);
				SetPlayerFacingAngle(playerid, 205.5335);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			case 4:
			{
		   		SetPlayerPos(playerid, -981.2971,1019.2087,1344.6238);
				SetPlayerFacingAngle(playerid, 51.9989);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
		}
		SetHP(playerid, 100);
		GiveArmorToPlayer(playerid, 50);
		GivePlayerWeapon(playerid, 29, 60000);
		return 1;
	}
	case 2: // Team Deathmatch
	{
    	Info[playerid][pVW] = 600; Info[playerid][pInt] = 10;
		SetPlayerInterior(playerid, Info[playerid][pInt]);
		SetPlayerVirtualWorld(playerid, Info[playerid][pVW]);
		SetHP(playerid, 100);
		GiveArmorToPlayer(playerid, 50);
		GivePlayerWeapon(playerid, 29, 60000);
    	switch(Info[playerid][pPaintTeam])
    	{
    	    case 1: //red
		    {
				SetPlayerPos(playerid, -1132.0417,1041.1082,1345.7397);
				SetPlayerFacingAngle(playerid, 116.4942);
				//SetPlayerColor(playerid, PAINTBALL_TEAM_RED);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			case 2: // Blue
			{
				SetPlayerPos(playerid, -974.1334,1077.5168,1344.9895);
				SetPlayerFacingAngle(playerid, 351.7867);
		    	//SetPlayerColor(playerid, PAINTBALL_TEAM_BLUE);
		    	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
		}
	}
}
return 1;
}

JoinPaintballArena(playerid, modo)
{
	new Float:oldX, Float:oldY, Float:oldZ, Float:oldHealth, Float:oldArmor;
	GetPlayerPos(playerid, oldX, oldY, oldZ);
	SetPVarFloat(playerid, "pbOldX", oldX);
	SetPVarFloat(playerid, "pbOldY", oldY);
	SetPVarFloat(playerid, "pbOldZ", oldZ);
	GetPlayerHealth(playerid,oldHealth);
	GetPlayerArmour(playerid,oldArmor);
	SetPVarInt(playerid, "pbOldInt", GetPlayerInterior(playerid));
	SetPVarInt(playerid, "pbOldVW", GetPlayerVirtualWorld(playerid));
	SetPVarFloat(playerid, "pbOldHealth", oldHealth);
	SetPVarFloat(playerid, "pbOldArmor", oldArmor);
	pTazer[playerid] = 0; // Reset Tazer
	switch(modo)
	{
		case 1: // DM
		{
		    if(Info[playerid][pPaintTokens] < 3) return SendClientMessageEx(playerid, COLOR_GREY, "* Necesitas 3 fichas para entrar a está Arena");
	        if(TotalDM == 20) return SendClientMessageEx(playerid, COLOR_GREY, "* La Arena está FULL, espera un momento.");

			SetPVarInt(playerid, "IsInArena", 1);
			SetPVarInt(playerid, "ArenaMode", 1);

			ResetPlayerWeapons(playerid);
	        SetPlayerPos(playerid, -1045.3766,1098.6875,1345.2252);
			SetPlayerFacingAngle(playerid, 116.4942);
			SetHP(playerid, 100);
			SetPlayerInterior(playerid, 10); SetPlayerVirtualWorld(playerid, 700);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(szMessage,sizeof(szMessage),"[Paintball Arena] %s se ha unido al Paintball Arena!", GetPlayerNameEx(playerid));
	        SendPaintballArenaMessage(1,COLOR_GRAD1,szMessage);
	        GivePlayerWeapon(playerid, 29, 60000);
	        SendClientMessageEx(playerid, COLOR_GRAD1, "[Paintball Arena] Te regalamos por tu entrada un MP5, cuando mueras usa /armas para ver las armas disponibles.");
	        SendClientMessageEx(playerid, COLOR_WHITE, "Comandos Paintball Arena: /fichas - /armas - /salirarena - /arena - /cequipo - /scores");
			TotalDM++;
		}
		case 2: // CHOOSE TEAM
		{
		    if(Info[playerid][pPaintTokens] < 8) return SendClientMessageEx(playerid, COLOR_GREY, "* Necesitas 8 fichas para entrar a está Arena");
		    ShowPlayerDialog(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"Paintball Arena - Elige un Equipo:","{FF0000}Equipo Rojo\n{0000FF}Equipo Azul","Entrar","Salir");
		}
		case 3: // JOIN TEAM
		{
		    if(TotalTDM == 32) return SendClientMessageEx(playerid, COLOR_GREY, "* La Arena esta FULL, espera un momento.");

			SetPVarInt(playerid, "IsInArena", 1);
			SetPVarInt(playerid, "ArenaMode", 2);

			ResetPlayerWeapons(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "Comandos Paintball Arena: /fichas - /armas - /salirarena - /arena - /cequipo - /scores");
			switch(Info[playerid][pPaintTeam])
			{
				case 1: //RED
		    	{
		        	format(szMessage,sizeof(szMessage),"[Paintball Arena] %s se ha unido al Paintball Arena - Equipo Rojo!", GetPlayerNameEx(playerid));
	        		SendPaintballArenaMessage(2,COLOR_GRAD1,szMessage);
		        	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		        	SetPlayerPos(playerid,-1132.0417,1041.1082,1345.7397);
		        	SetPlayerInterior(playerid, 10); SetPlayerVirtualWorld(playerid, 600);
		        	/*SetPlayerColor(playerid, PAINTBALL_TEAM_RED);*/ SetHP(playerid, 100);
		        	GiveArmorToPlayer(playerid, 50); GivePlayerWeapon(playerid, 29, 60000);
		        	PlayersRed++;
		    	}
		    	case 2: //BLUE
		    	{
		       		format(szMessage,sizeof(szMessage),"[Paintball Arena] %s se ha unido al Paintball Arena - Equipo Azul!", GetPlayerNameEx(playerid));
	        		SendPaintballArenaMessage(2,COLOR_GRAD1,szMessage);
		        	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		        	SetPlayerPos(playerid,-974.1334,1077.5168,1344.9895);
		        	SetPlayerInterior(playerid, 10); SetPlayerVirtualWorld(playerid, 600);
		        	/*SetPlayerColor(playerid, PAINTBALL_TEAM_BLUE);*/ SetHP(playerid, 100);
		        	GiveArmorToPlayer(playerid, 50); GivePlayerWeapon(playerid, 29, 60000);
		        	PlayersBlue++;
		    	}
			}
		}
		case 4: // CTF
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "Proximamente, Nuevo modo de juego: Captura la Bandera!");
			/*if(Info[playerid][pPaintTokens] < 12) return SendClientMessageEx(playerid, COLOR_GRAD1, "Necesitas 12 fichas para entrar a está Arena");
		    TotalCTF[playerid]++;*/
		}
		case 5: // DM2
		{
		    if(Info[playerid][pPaintTokens] < 3) return SendClientMessageEx(playerid, COLOR_GREY, "* Necesitas 3 fichas para entrar a está Arena");
	        if(TotalDM2 == 20) return SendClientMessageEx(playerid, COLOR_GREY, "* La Arena 2 está FULL, espera un momento.");

			SetPVarInt(playerid, "IsInArena", 1);
			SetPVarInt(playerid, "ArenaMode", 3);

			ResetPlayerWeapons(playerid);
	        SetPlayerPos(playerid, -1045.3766,1098.6875,1345.2252);
			SetPlayerFacingAngle(playerid, 116.4942);
			SetHP(playerid, 100);
			SetPlayerInterior(playerid, 10); SetPlayerVirtualWorld(playerid, 800);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(szMessage,sizeof(szMessage),"[Paintball Arena] %s se ha unido al Paintball Arena!", GetPlayerNameEx(playerid));
	        SendPaintballArenaMessage(1,COLOR_GRAD1,szMessage);
	        GivePlayerWeapon(playerid, 29, 60000);
	        SendClientMessageEx(playerid, COLOR_GRAD1, "[Paintball Arena] Te regalamos por tu entrada un MP5, cuando mueras usa /armas para ver las armas disponibles.");
	        SendClientMessageEx(playerid, COLOR_WHITE, "Comandos Paintball Arena: /fichas - /armas - /salirarena - /arena - /cequipo - /scores");
			TotalDM2++;
		}
	}
	return 1;
}

LeavePaintballArena(playerid)
{
switch(GetPVarInt(playerid, "ArenaMode"))
{
    case 1: TotalDM -= 1;
    case 2: TotalTDM -= 1;
    case 3: TotalDM2 -= 1;
}
switch(Info[playerid][pPaintTeam])
{
    case 1: PlayersRed -= 1;
	case 2: PlayersBlue -= 1;
}
format(szMessage,sizeof(szMessage),"[Paintball Arena] %s ha dejado el Paintball Arena!", GetPlayerNameEx(playerid));
SendPaintballArenaMessage(GetPVarInt(playerid,"ArenaMode"), COLOR_GRAD1, szMessage);
//SendClientMessageEx(playerid, COLOR_WHITE, "Recuerda que puedes canjear tus fichas ganadas por premios.");
Info[playerid][pKills] = 0;
Info[playerid][pDeaths] = 0;
SetPlayerWeapons(playerid);
// SetPlayerToTeamColor(playerid);
SetPlayerColor(playerid,TEAM_HIT_COLOR);
SetPlayerSkin(playerid, Info[playerid][pChar]);
LoadObjects(playerid);
SetPVarInt(playerid, "ArenaMode", 0);
SetPVarInt(playerid, "IsInArena", 0);
SetPlayerPos(playerid, GetPVarFloat(playerid, "pbOldX"), GetPVarFloat(playerid, "pbOldY"), GetPVarFloat(playerid, "pbOldZ"));
SetHP(playerid, GetPVarFloat(playerid, "pbOldHealth"));
GiveArmorToPlayer(playerid, GetPVarFloat(playerid, "pbOldArmor"));
SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "pbOldVW"));
SetPlayerInterior(playerid, GetPVarInt(playerid, "pbOldInt"));
Info[playerid][pVW] = GetPVarInt(playerid, "pbOldVW");
Info[playerid][pInt] = GetPVarInt(playerid, "pbOldInt");
Info[playerid][pPaintTeam] = 0;
}

PaintballDisconnect(playerid)
{
switch(GetPVarInt(playerid, "ArenaMode"))
{
    case 1: TotalDM -= 1;
    case 2: TotalTDM -= 1;
    case 3: TotalDM2 -= 1;
}
switch(Info[playerid][pPaintTeam])
{
    case 1: PlayersRed -= 1;
	case 2: PlayersBlue -= 1;
}
Info[playerid][pKills] = 0;
Info[playerid][pDeaths] = 0;
// SetPlayerToTeamColor(playerid);
SetPlayerSkin(playerid, Info[playerid][pChar]);
SetPlayerPos(playerid, GetPVarFloat(playerid, "pbOldX"), GetPVarFloat(playerid, "pbOldY"), GetPVarFloat(playerid, "pbOldZ"));
SetHP(playerid, GetPVarFloat(playerid, "pbOldHealth"));
GiveArmorToPlayer(playerid, GetPVarFloat(playerid, "pbOldArmor"));
SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "pbOldVW"));
SetPlayerInterior(playerid, GetPVarInt(playerid, "pbOldInt"));
Info[playerid][pVW] = GetPVarInt(playerid, "pbOldVW");
Info[playerid][pInt] = GetPVarInt(playerid, "pbOldInt");
Info[playerid][pPaintTeam] = 0;
}

PaintballSwitchTeam(playerid)
{
format(szDialog,sizeof(szDialog),"{FF0000}Equipo Rojo (%d/12)\n{0000FF}Equipo Azul (%d/12)",PlayersRed,PlayersBlue);
ShowPlayerDialog(playerid,PB_CHOOSE,DIALOG_STYLE_LIST,"Paintball Arena - Elegir Equipo:",szDialog,"Unirse","Cancelar");
}

// EMS
function KillEMSQueue(playerid)
{
DeletePVar(playerid, "Injured");
SetPVarInt(playerid, "FirstSpawn", 1);
DeletePVar(playerid, "EMSAttempt");
DeletePVar(playerid, "MedicCall");
return 1;
}

function SendEMSQueue(playerid,type)
{
switch(type)
{
	case 1:
	{
	    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
		SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
		SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
  		SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));
		SetPVarInt(playerid, "EMSAttempt", -1);
		ClearAnimations(playerid);
		ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);
		if(GetPlayerInterior(playerid) > 0)
		{
		    LoadObjects(playerid);
		}
        SendClientMessageEx(playerid, COLOR_GRAD2, "* Estás herido, según tu situación de rol escoge entre estas opciones: (/aceptar muerte) ó (/servicios)");
		SetHP(playerid, 100);
		GiveArmorToPlayer(playerid,0);
		SetPVarInt(playerid,"MedicCall",1);
	}
	case 2:
	{
	    SetPVarInt(playerid,"EMSAttempt", 2);
	 	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);
		SetHP(playerid, 100);
		GiveArmorToPlayer(playerid,0);
	}
}
return 1;
}
stock GetPricebyObject(modelid)
{
	switch(modelid)
	{
	    case 2822,2820: return 20;
	    case 2515,1715,1716,1720,1721,1714,1811: return 400;
	    case 2518,1737,2119,2116,2115,2111,1739,1810: return 450;
	    case 2516,2002,2160,2334,2335,2112,2079,2121: return 950;
	    case 2514,2015,2157,2159,2029,1825: return 1000;
	    case 2517,2014,2018,2156,2120: return 1200;
	    case 2336,2337,2013,2019: return 2000;
	    case 2519, 2520,2523,2524,2136: return 3000;
	    case 2521,2525,2528,2529,2135,2339,14720: return 4000;
	    case 2522,1208,2340,2415: return 5000;
	    default:
		{
			new priceex = Random(500,4000);
			return priceex;
	    }
	}
	return 1;
}
public OnPlayerModelSelection(playerid, response, listid, modelid)
{
    new  	businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
    new 	hID = getPlayerHouseID(playerid);
    new     casaid = Info[playerid][pPhousekey];
    if(listid == DormitorioFur ||listid == ComedorFur ||listid == BanoFur || listid == LobbyFur || listid == CocinaFur || listid == ParedesFur || listid == OtrosFur || listid == ElectroFur )
    {
        if(!response) return 1;
        new price = GetPricebyObject(modelid);
        if(CheckMoney(playerid, price))
		{
			BuyFurniture(playerid, hID, modelid, price);
		}
    }
	if(listid == skinlist)
	{
		if(response)
		{
		    if(Info[playerid][pVIP] == 2)
		    {
		        if(CheckMoney(playerid,25))
		        {
		            if(casaid == -1)
		            {
		        	Info[playerid][pChar] = modelid;
		      		SetPlayerSkin(playerid, Info[playerid][pChar]);
		      		SendClientMessage(playerid, COLOR_GRAD2, "Atención: no tienes un ropero en donde guardar la ropa, te la llevas puesta.");
		      		ShowInfoForPlayer(playerid, "~g~ Ropa nueva", 3000);
		      		}
		        	Bought(playerid, 25);
		        	businessVariables[businessID][bVault] += 25;
		        	businessVariables[businessID][bStock]--;
     				SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
    				SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
    				if(casaid != -1)
					{
					EstaComprandoRopa[playerid] = 1;
					RopaElegida[playerid] = modelid;
					new slot1casa = HouseInfo[casaid][hSlotRopero1];
					new slot2casa = HouseInfo[casaid][hSlotRopero2];
					new slot3casa = HouseInfo[casaid][hSlotRopero3];
					new slot4casa = HouseInfo[casaid][hSlotRopero4];
					new slot5casa = HouseInfo[casaid][hSlotRopero5];
					new slot6casa = HouseInfo[casaid][hSlotRopero6];
					new slot7casa = HouseInfo[casaid][hSlotRopero7];
					new slot8casa = HouseInfo[casaid][hSlotRopero8];
					new slot9casa = HouseInfo[casaid][hSlotRopero9];
					new slot10casa = HouseInfo[casaid][hSlotRopero10];

					new string[128];
					format(string, sizeof(string), "- %d\n- %d\n- %d\n- %d\n- %d\n- %d\n- %d\n- %d\n- %d\n- %d\nLlevar la ropa puesta", slot1casa, slot2casa, slot3casa, slot4casa, slot5casa, slot6casa, slot7casa, slot8casa, slot9casa, slot10casa);
    				ShowPlayerDialog(playerid, DIALOG_ROPEROMENU, DIALOG_STYLE_LIST, "Ropero", string, "Aceptar", "");
    				}
		        }
		    }
		    else
		    {
				if(CheckMoney(playerid,50))
				{
		        	if(casaid == -1)
		            {
		        	Info[playerid][pChar] = modelid;
		      		SetPlayerSkin(playerid, Info[playerid][pChar]);
		      		SendClientMessage(playerid, -1, ""COL_WHITE"Atención: no tienes ("COL_BLUE"ropero"COL_WHITE") en donde guardar la ropa, te la llevas puesta.");
		      		ShowInfoForPlayer(playerid, "~g~ Ropa nueva", 3000);
		      		}
		        	Bought(playerid, 50);
		        	businessVariables[businessID][bVault] += 50;
		        	businessVariables[businessID][bStock]--;
     				SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
    				SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
    				if(casaid != -1)
					{
					EstaComprandoRopa[playerid] = 1;
					RopaElegida[playerid] = modelid;
					new slot1casa = HouseInfo[casaid][hSlotRopero1];
					new slot2casa = HouseInfo[casaid][hSlotRopero2];
					new slot3casa = HouseInfo[casaid][hSlotRopero3];
					new slot4casa = HouseInfo[casaid][hSlotRopero4];
					new slot5casa = HouseInfo[casaid][hSlotRopero5];
					new slot6casa = HouseInfo[casaid][hSlotRopero6];
					new slot7casa = HouseInfo[casaid][hSlotRopero7];
					new slot8casa = HouseInfo[casaid][hSlotRopero8];
					new slot9casa = HouseInfo[casaid][hSlotRopero9];
					new slot10casa = HouseInfo[casaid][hSlotRopero10];

					new string[128];
					format(string, sizeof(string), "- %d\n- %d\n- %d\n- %d\n- %d\n- %d\n- %d\n- %d\n- %d\n- %d\nLlevar la ropa puesta", slot1casa, slot2casa, slot3casa, slot4casa, slot5casa, slot6casa, slot7casa, slot8casa, slot9casa, slot10casa);
    				ShowPlayerDialog(playerid, DIALOG_ROPEROMENU, DIALOG_STYLE_LIST, "Ropero", string, "Aceptar", "");
    				}
				}
			}
		}
		return 1;
	}
	else if(listid == ToyList){
	    if(response){
	    	new price = 5 + random(25);
			if(GetPlayerCash(playerid) < price) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero.");
			else
			{
				GivePlayerCash(playerid, -price);
				businessVariables[businessID][bVault] += price;
				businessVariables[businessID][bStock]--;
     			SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
    			SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
		    	PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = modelid;
		    	modelid = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
		    	if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
		    	{
		        	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
		    	}
		    	else if(modelid >= 18891 && modelid <= 18910)
		    	{
		    		PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
				}
				else if(modelid >= 18926 && modelid <= 18935)
				{
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
				}
				else if(modelid >= 18911 && modelid <= 18920)
				{
			   		PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
				}
				else if(modelid == 19078 || modelid == 19078)
				{
			    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
				}
				else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
				{
			    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
				}
				else if(modelid == 19317)
				{
			    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 1;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.079;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = -0.10;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.09;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 30.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
				}
		    	else
		    	{
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
					PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
				}
				format(szMessage, sizeof(szMessage), "Compraste un objeto por $%d (Slot: %d)", price, slotselection[playerid]);
		    	SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				ShowInfoForPlayer(playerid, "~g~ Accesorio nuevo", 3000);
		    	SendClientMessageEx(playerid, -1, ""COL_WHITE"Usa "COL_GENERAL"(/toys) "COL_WHITE"para editar tus objetos.");
			}
		}
	}
	else if(listid == ToyListGold){
	    if(response){
			if(Info[playerid][pVIP] < 2) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes acceso a estas funciones.");
	    	new price = 10 + random(50);
			if(GetPlayerCash(playerid) < price) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero.");
			else{
				GivePlayerCash(playerid, -price);
				businessVariables[businessID][bVault] += price;
				businessVariables[businessID][bStock]--;
     			SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
    			SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
		    	PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = modelid;
		    	modelid = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
		    	if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140)){
		        	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
		    	}
		    	else if(modelid >= 18891 && modelid <= 18910){
		    		PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				}
				else if(modelid >= 18926 && modelid <= 18935){
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				else if(modelid >= 18911 && modelid <= 18920){
			    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
				}
				else if(modelid == 19078 || modelid == 19078){
			    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890){
			    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
		    	else{
					PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
					PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
				}
				format(szMessage, sizeof(szMessage), "Compraste un objeto por $%d (Slot: %d)", price, slotselection[playerid]);
		    	SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
		    	ShowInfoForPlayer(playerid, "~g~ Accesorio nuevo", 3000);
		    	SendClientMessageEx(playerid, -1, ""COL_WHITE"Usa "COL_GENERAL"(/toys) "COL_WHITE"para editar tus objetos.");
			}
		}
	}
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(response == EDIT_RESPONSE_UPDATE) return 1;
	new ini[64];
	new key[24];
	for(new hID = 0; hID < MAX_HOUSES; hID ++)
	{
		for(new i = 0; i < MAX_FURNITURE; i ++)
		{
			if(objectid == HouseInfo[hID][FurnitureObj][i])
			{
				if(response) // Clicked on the save icon
				{
					format(ini, 64, HOUSE_FILE, hID);
	   				new INI:File = INI_Open(ini);
	    			INI_SetTag(File,"HouseData");
					HouseInfo[hID][FPosX][i] = x; HouseInfo[hID][FPosY][i] = y; HouseInfo[hID][FPosZ][i] = z;
					HouseInfo[hID][FRotX][i] = rx; HouseInfo[hID][FRotY][i] = ry; HouseInfo[hID][FRotZ][i] = rz;
					format(key, 24, "FPosX%d", i); INI_WriteFloat(File,key, HouseInfo[hID][FPosX][i]);
					format(key, 24, "FPosY%d", i); INI_WriteFloat(File,key, HouseInfo[hID][FPosY][i]);
					format(key, 24, "FPosZ%d", i); INI_WriteFloat(File,key, HouseInfo[hID][FPosZ][i]);
					format(key, 24, "FRotX%d", i); INI_WriteFloat(File,key, HouseInfo[hID][FRotX][i]);
					format(key, 24, "FRotY%d", i); INI_WriteFloat(File,key, HouseInfo[hID][FRotY][i]);
					format(key, 24, "FRotZ%d", i); INI_WriteFloat(File,key, HouseInfo[hID][FRotZ][i]);

					SetDynamicObjectPos(objectid, HouseInfo[hID][FPosX][i], HouseInfo[hID][FPosY][i], HouseInfo[hID][FPosZ][i]);
					SetDynamicObjectRot(objectid, HouseInfo[hID][FRotX][i], HouseInfo[hID][FRotY][i], HouseInfo[hID][FRotZ][i]);
					INI_Close(File);
				}
				else // Pressed ESC
				{
					SetDynamicObjectPos(objectid, HouseInfo[hID][FPosX][i], HouseInfo[hID][FPosY][i], HouseInfo[hID][FPosZ][i]);
					SetDynamicObjectRot(objectid, HouseInfo[hID][FRotX][i], HouseInfo[hID][FRotY][i], HouseInfo[hID][FRotZ][i]);
				}
				break;
			}
		}
	}
    if(response == EDIT_RESPONSE_FINAL)
	{
		if(GetPVarInt(playerid, "SPRAYTAG_EDIT") == 1)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 3, x, y, z))
			{
				DestroyDynamicObject(spraytag_object[playerid]);
				DeletePVar(playerid, "SPRAYTAG_EDIT");
				return SendClientMessageEx(playerid, COLOR_GRAD1, "[NP:RP] Usted no se encuentra cerca de un graffiti.");
			}

			spraytag_positions[playerid][0] = x;
			spraytag_positions[playerid][1] = y;
			spraytag_positions[playerid][2] = z;
			spraytag_positions[playerid][3] = rx;
			spraytag_positions[playerid][4] = ry;
			spraytag_positions[playerid][5] = rz;

			spraytag_timer[playerid] = SetTimerEx("SprayTag", 1000, true, "ii", playerid, 2);

			ApplyAnimation(playerid, "SPRAYCAN", "spraycan_full", 4.0, 1, 1, 1, 0, 0, 1);

			spraytag_timer_left[playerid] = SPRAY_TAG_TIMER;
			DestroyDynamicObject(spraytag_object[playerid]);
		}
		if(GetPVarInt(playerid, "SPRAYTAG_EDIT") == 2)
		{
			new
				iIndex = spraytag_slot[playerid]
			;

			if(!IsPlayerInRangeOfPoint(playerid, 3, x, y, z))
			{
				DestroyDynamicObject(SprayTags[playerid][iIndex][_spObject]);
				SprayTag_Spawn(playerid, iIndex);
				DeletePVar(playerid, "SPRAYTAG_EDIT");
				return SendClientMessageEx(playerid, COLOR_GRAD1, "[NP:RP] Usted no se encuentra cerca de un graffiti.");
			}

			spraytag_positions[playerid][0] = x;
			spraytag_positions[playerid][1] = y;
			spraytag_positions[playerid][2] = z;
			spraytag_positions[playerid][3] = rx;
			spraytag_positions[playerid][4] = ry;
			spraytag_positions[playerid][5] = rz;

			spraytag_timer[playerid] = SetTimerEx("SprayTag", 1000, true, "ii", playerid, 1);

			ApplyAnimation(playerid, "SPRAYCAN", "spraycan_full", 4.0, 1, 1, 1, 0, 0, 1);

			spraytag_timer_left[playerid] = SPRAY_TAG_TIMER;
			DestroyDynamicObject(SprayTags[playerid][iIndex][_spObject]);
		}
	}
	if(response == EDIT_RESPONSE_CANCEL)
	{
		if(GetPVarInt(playerid, "SPRAYTAG_EDIT") >= 1)
		{
			DestroyDynamicObject(spraytag_object[playerid]);
			DestroyDynamicObject(SprayTags[playerid][spraytag_slot[playerid]][_spObject]);
			SprayTag_Spawn(playerid, spraytag_slot[playerid]);
			DeletePVar(playerid, "SPRAYTAG_EDIT");
		}
	}
	return 1;
}
public OnPlayerEditAttachedObject( playerid, response, index, modelid, boneid,Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ,Float:fRotX, Float:fRotY, Float:fRotZ,Float:fScaleX, Float:fScaleY, Float:fScaleZ )
{
	PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = fOffsetX;
	PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = fOffsetY;
	PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = fOffsetZ;
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = fRotX;
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = fRotY;
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = fRotZ;

	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = fScaleX;
	if(fScaleX < 0.1) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 0.1;
	else if(fScaleX > 1.5) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1.5;

	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = fScaleY;
	if(fScaleY < 0.1) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 0.1;
	else if(fScaleY > 1.5) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1.5;

	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = fScaleZ;
	if(fScaleZ < 0.1) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 0.1;
	else if(fScaleZ > 1.5) PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1.5;

	if(IsPlayerAttachedObjectSlotUsed(playerid, slotselection[playerid])){RemovePlayerAttachedObject(playerid, slotselection[playerid]);}

	SetPlayerAttachedObject(playerid, slotselection[playerid], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID],
	PlayerToyInfo[playerid][slotselection[playerid]][ptBone], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX],
	PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY],
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX],
	PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ]);
	SendClientMessageEx(playerid, -1, "* Finalizaste de editar este objeto. Usa "COL_GENERAL"/toys {FFFFFF}si quieres editar otro objeto.");
	slotselection[playerid] = -1;
	Editing[playerid] = 0;
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{

	new idcar = GetPlayerVehicleID(playerid);
	if(!isnull(inputtext))
	{
	    if(strfind(inputtext, "%s", true) != -1)
	    {
			format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s (ID %d) es un posible dialog-exploiting, intenta enviar string en blanco mediante diálogos.", GetPlayerNameEx(playerid), playerid);
			ABroadCast(COLOR_GENERAL, szMessage, 2);
			format(szMessage, sizeof(szMessage), "%s a intentado insertar un falso string en un diálogo. [Exploit]", GetPlayerNameEx(playerid));
			Log("logs/reportbug.log", szMessage);
			Kick(playerid);
	        return 1;
		}
	}
	if(dialogid == DIALOG_BOOMBOX)
    {
    	if(!response)
     	{
            SendClientMessage(playerid, -1, "* Has cancelado la selección de emisoras de radio");
        	return 1;
        }
		switch(listitem)
  		{
    		case 0: ShowPlayerDialog(playerid,DIALOG_BOOMBOX1,DIALOG_STYLE_LIST,"Lista de música Jazz","Smooth Jazz\nJazz FM","Sintonizar","Cancelar");
            case 1: ShowPlayerDialog(playerid,DIALOG_BOOMBOX2,DIALOG_STYLE_LIST,"Lista de música Pop","Power FM\nDEFJAY.COM","Sintonizar","Cancelar");
            case 2: ShowPlayerDialog(playerid,DIALOG_BOOMBOX3,DIALOG_STYLE_LIST,"Lista de música Rap","Rap City Radio\nFlow 103 Rap","Sintonizar","Cancelar");
            case 3: ShowPlayerDialog(playerid,DIALOG_BOOMBOX4,DIALOG_STYLE_LIST,"Lista de música Hip Hop","Hot 108 Jamz\nBlackBeats.FM","Sintonizar","Cancelar");
			case 4: ShowPlayerDialog(playerid,DIALOG_BOOMBOX5,DIALOG_STYLE_LIST,"Lista de música Rock","Radio Paradise\n181.FM","Sintonizar","Cancelar");
			case 5: ShowPlayerDialog(playerid,DIALOG_BOOMBOX6,DIALOG_STYLE_LIST,"Lista de música Country","Love Country USA\nAbsolute Country Radio","Sintonizar","Cancelar");
			case 6: ShowPlayerDialog(playerid,DIALOG_MUSICAURL,DIALOG_STYLE_INPUT, "Estéreo URL", "Introduzca la URL del MP3 o radio on-line que desee escuchar", "Continuar", "Salir");
			case 7:
			{
                if(GetPVarType(playerid, "BBArea"))
			    {
			        foreach(Player, i)
					{
			            if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea"))) StopStream(i);
					}
			        DeletePVar(playerid, "BBStation");
				}

			}
        }
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX1)//JAZZ
	{
	    if(!response) return ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Lista de emisoras de radio","Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nInsertar URL\n"COL_BLUE"Apagar estéreo",">", "Cancelar");
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=467000", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=467000");
				}
			}
		 	if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=126367", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=126367");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX2)//POP
	{
	    if(!response)
	    {
            ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Lista de emisoras de radio","Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nInsertar URL\n"COL_BLUE"Apagar estéreo",">", "Cancelar");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=183569", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=183569");
				}
			}
			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=84158", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=84158");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX3)//RAP
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Lista de emisoras de radio","Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nInsertar URL\n"COL_BLUE"Apagar estéreo",">", "Cancelar");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
        			foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=174091", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=174091");
    			}
   			}
   			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=293191", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=293191");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX4)//HIP HOP
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Lista de emisoras de radio","Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nInsertar URL\n"COL_BLUE"Apagar estéreo",">", "Cancelar");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=8318", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=8318");
				}
			}
			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=7581", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=7581");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX5)//ROCK
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Lista de emisoras de radio","Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nInsertar URL\n"COL_BLUE"Apagar estéreo",">", "Cancelar");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=674983", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=674983");
				}
			}
   			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=37586", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=37586");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_BOOMBOX6)//COUNTRY
	{
	    if(!response)
	    {
	       ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Lista de emisoras de radio","Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nInsertar URL\n"COL_BLUE"Apagar estéreo",">", "Cancelar");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=121040", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=121040");
				}
			}
   			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=678106", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=678106");
				}
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_MUSICAURL)//SET URL
	{
		if(response == 1)
		{
		    if(isnull(inputtext))
		    {
                SendClientMessageEx(playerid, COLOR_GRAD1, "Atención: no has escrito nada.");
		      	return 1;
		    }
		    if(strlen(inputtext))
		    {
		        if(GetPVarType(playerid, "PlacedBB"))
				{
				    foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, inputtext, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", inputtext);
				}
			}
		}
		else
		{
		    return 1;
		}
	}
	if(dialogid == INT_CASAS)
	{
	    if(!response) return 1;
		switch(listitem)
		{
		    case 0: ShowPlayerDialog(playerid, INT_CASAS+1, DIALOG_STYLE_LIST, "Casas Seguras", "Safe House 1\nSafe House 2\nSafe House 3\nSafe House 4\nAtras", "Seleccionar", "Cancelar");
			case 1: ShowPlayerDialog(playerid, INT_CASAS+2, DIALOG_STYLE_LIST, "Casas Robo","Burglary House 1\nBurglary House 2\nBurglary House 3\nBurglary House 4\nBurglary House 5\nBurglary House 6\nBurglary House 7\nBurglary House 8\nBurglary House 9\nBurglary House 10\nBurglary House 11\nBurglary House 12\nBurglary House 13\nBurglary House 14\nBurglary House 15\nBurglary House 16\nAtras", "Seleccionar", "Cancelar");
		}
	}
	if(dialogid == INT_CASAS+1) // Houses
	{
		if(response)
		{
			if(listitem == 0) // Safe House 1
			{
		   		SetPlayerPos(playerid,2233.6919, -1112.8107, 1050.8828);
		    	SetPlayerInterior(playerid,5);
			}
			if(listitem == 1) // Safe House 2
			{
		   		SetPlayerPos(playerid,2194.7900, -1204.3500, 1049.0234);
		    	SetPlayerInterior(playerid,6);
			}
			if(listitem == 2) // Safe House 3
			{
		   		SetPlayerPos(playerid,2319.1272, -1023.9562, 1050.2109);
		    	SetPlayerInterior(playerid,9);
			}
			if(listitem == 3) // Safe House 4
			{
		   		SetPlayerPos(playerid,2262.4797,-1138.5591,1050.6328);
		    	SetPlayerInterior(playerid,10);
			}
			if(listitem == 4) // Back
			{
				ShowPlayerDialog(playerid, INT_CASAS, DIALOG_STYLE_LIST, "House Interiors Categories","Safe Houses\nBurglary Houses", "Seleccionar", "Cancelar");
			}
		}
		return 1;
	}
 	if(dialogid == INT_CASAS+2)
	{
		if(response)
		{
			if(listitem == 0) // Burglary House #1
			{
		   		SetPlayerPos(playerid,234.6087, 1187.8195, 1080.2578);
		    	SetPlayerInterior(playerid,3);
			}
			if(listitem == 1) // Burglary House #2
			{
		   		SetPlayerPos(playerid,225.5707, 1240.0643, 1082.1406);
		    	SetPlayerInterior(playerid,2);
			}
			if(listitem == 2) // Burglary House #3
			{
		   		SetPlayerPos(playerid,224.288, 1289.1907, 1082.1406);
		    	SetPlayerInterior(playerid,1);
			}
			if(listitem == 3) // Burglary House #4
			{
		   		SetPlayerPos(playerid,239.2819, 1114.1991, 1080.9922);
		    	SetPlayerInterior(playerid,5);
			}
			if(listitem == 4) // Burglary House #5
			{
		   		SetPlayerPos(playerid,295.1391, 1473.3719, 1080.2578);
		    	SetPlayerInterior(playerid,15);
			}
			if(listitem == 5) // Burglary House #6
			{
		   		SetPlayerPos(playerid,261.1165, 1287.2197, 1080.2578);
		    	SetPlayerInterior(playerid,4);
			}
			if(listitem == 6) // Burglary House #7
			{
				SetPlayerPos(playerid,24.3769, 1341.1829, 1084.375);
		    	SetPlayerInterior(playerid,10);
			}
			if(listitem == 7) // Burglary House #8
			{
		   		SetPlayerPos(playerid,-262.1759, 1456.6158, 1084.3672);
		    	SetPlayerInterior(playerid,4);
			}
			if(listitem == 8) // Burglary House #9
			{
		   		SetPlayerPos(playerid,22.861, 1404.9165, 1084.4297);
		    	SetPlayerInterior(playerid,5);
			}
			if(listitem == 9) // Burglary House #10
			{
		   		SetPlayerPos(playerid,140.3679, 1367.8837, 1083.8621);
		    	SetPlayerInterior(playerid,5);
			}
   			if(listitem == 10) // Burglary House #11
			{
		   		SetPlayerPos(playerid,234.2826, 1065.229, 1084.2101);
		    	SetPlayerInterior(playerid,6);
			}
			if(listitem == 11) // Burglary House #12
			{
		   		SetPlayerPos(playerid,-68.5145, 1353.8485, 1080.2109);
		    	SetPlayerInterior(playerid,6);
			}
			if(listitem == 12) // Burglary House #13
			{
		   		SetPlayerPos(playerid,-285.2511, 1471.197, 1084.375);
		    	SetPlayerInterior(playerid,15);
			}
			if(listitem == 13) // Burglary House #14
			{
			   	SetPlayerPos(playerid,-42.5267, 1408.23, 1084.4297);
			    SetPlayerInterior(playerid,8);
			}
			if(listitem == 14) // Burglary House #15
			{
			   	SetPlayerPos(playerid,84.9244, 1324.2983, 1083.8594);
			    SetPlayerInterior(playerid,9);
			}
			if(listitem == 15) // Burglary House #16
			{
			   	SetPlayerPos(playerid,260.7421, 1238.2261, 1084.2578);
			    SetPlayerInterior(playerid,9);
			}
			if(listitem == 16) // Back
			{
				ShowPlayerDialog(playerid, INT_CASAS, DIALOG_STYLE_LIST, "Categorias de interiores","Safe Houses\nBurglary Houses", "Seleccionar", "Cancelar");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_ROPEROMENU)
	{
		if(response)
		{
			new     casaid = Info[playerid][pPhousekey];
			saveHouse(casaid);
			if(listitem == 0)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(HouseInfo[casaid][hSlotRopero1] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, HouseInfo[casaid][hSlotRopero1]);
					HouseInfo[casaid][hSlotRopero1] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
					HouseInfo[casaid][hSlotRopero1] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 1)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 1)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(HouseInfo[casaid][hSlotRopero2] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, HouseInfo[casaid][hSlotRopero2]);
					HouseInfo[casaid][hSlotRopero2] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
				    HouseInfo[casaid][hSlotRopero2] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 2)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 2)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(HouseInfo[casaid][hSlotRopero3] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, HouseInfo[casaid][hSlotRopero3]);
					HouseInfo[casaid][hSlotRopero3] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
				    HouseInfo[casaid][hSlotRopero3] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 3)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 3)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(HouseInfo[casaid][hSlotRopero4] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, HouseInfo[casaid][hSlotRopero4]);
					HouseInfo[casaid][hSlotRopero4] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
				    HouseInfo[casaid][hSlotRopero4] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 4)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 4)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(HouseInfo[casaid][hSlotRopero5] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, HouseInfo[casaid][hSlotRopero5]);
					HouseInfo[casaid][hSlotRopero5] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
				    HouseInfo[casaid][hSlotRopero5] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 5)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 5)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(HouseInfo[casaid][hSlotRopero6] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, HouseInfo[casaid][hSlotRopero6]);
					HouseInfo[casaid][hSlotRopero6] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
				    HouseInfo[casaid][hSlotRopero6] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 6)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 6)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(HouseInfo[casaid][hSlotRopero7] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, HouseInfo[casaid][hSlotRopero7]);
					HouseInfo[casaid][hSlotRopero7] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
				    HouseInfo[casaid][hSlotRopero7] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 7)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 7)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(HouseInfo[casaid][hSlotRopero8] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, HouseInfo[casaid][hSlotRopero8]);
					HouseInfo[casaid][hSlotRopero8] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
				    HouseInfo[casaid][hSlotRopero8] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 8)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 8)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(HouseInfo[casaid][hSlotRopero9] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, HouseInfo[casaid][hSlotRopero9]);
					HouseInfo[casaid][hSlotRopero9] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
    				HouseInfo[casaid][hSlotRopero9] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 9)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 9)
			{
				if(EstaComprandoRopa[playerid] == 0)
				{
					if(HouseInfo[casaid][hSlotRopero10] == 0) return SendClientMessage(playerid, -1, "No tienes nada en ese slot!");
					new SkinAPoner = GetPlayerSkin(playerid);
					SetPlayerSkin(playerid, HouseInfo[casaid][hSlotRopero10]);
					HouseInfo[casaid][hSlotRopero10] = Info[playerid][pChar];
					Info[playerid][pChar] = SkinAPoner;
				}
				if(EstaComprandoRopa[playerid] == 1)
				{
    				HouseInfo[casaid][hSlotRopero10] = RopaElegida[playerid];
					SendClientMessage(playerid, -1, "Compraste ropa para tu armario! (Slot 10)");
					RopaElegida[playerid] = 0;
					EstaComprandoRopa[playerid] = 0;
				}
			}
			if(listitem == 10)
			{
				if(EstaComprandoRopa[playerid] == 1)
				{
					Info[playerid][pChar] = RopaElegida[playerid];
					SetPlayerSkin(playerid, Info[playerid][pChar]);
					RopaElegida[playerid] = 0;
					SendClientMessage(playerid, -1, "Compraste ropa y decides vestirte con ella.");
				}
			}
		}
	}
	//ContactoAgendar
	if(dialogid == DIALOG_AGENDARCONTACTO)
	{
	if(response)
	{
	new numero = strval(inputtext);
	if(!IsNumeric(inputtext)) return SendClientMessage(playerid, 0x00FFCCFF, "Error : Solamente se pueden utilizar numeros.");
	if(numero > 10000000) return SendClientMessage(playerid, 0x00FFCCFF, "Error : Has introducido un valor muy alto.");

	new string[128];
	format(string, sizeof(string), ""COL_PURPLE"* %s anota un nuevo contacto en su agenda", GetPlayerNameEx(playerid));
	NearMsg(playerid, -1, string, 15.0);

	if(Info[playerid][pContactoAgendar] == 1)
	{
	Info[playerid][pNumeroLibreta1] = numero;
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, ""COL_GENERAL"Agenda", "{FFFFFF}Contactos\nRestaurar "COL_GENERAL"contactos\n{FFFFFF}Tirar "COL_GENERAL"agenda{FFFFFF}\nSalir", "Aceptar", "");
	Info[playerid][pContactoAgendar] = 0;

	}

	if(Info[playerid][pContactoAgendar] == 2)
	{
	Info[playerid][pNumeroLibreta2] = numero;
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, ""COL_GENERAL"Agenda", "{FFFFFF}Contactos\nRestaurar "COL_GENERAL"contactos\n{FFFFFF}Tirar "COL_GENERAL"agenda{FFFFFF}\nSalir", "Aceptar", "");
    Info[playerid][pContactoAgendar] = 0;
	}

	if(Info[playerid][pContactoAgendar] == 3)
	{
	Info[playerid][pNumeroLibreta3] = numero;
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, ""COL_GENERAL"Agenda", "{FFFFFF}Contactos\nRestaurar "COL_GENERAL"contactos\n{FFFFFF}Tirar "COL_GENERAL"agenda{FFFFFF}\nSalir", "Aceptar", "");
    Info[playerid][pContactoAgendar] = 0;
	}

	if(Info[playerid][pContactoAgendar] == 4)
	{
	Info[playerid][pNumeroLibreta4] = numero;
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, ""COL_GENERAL"Agenda", "{FFFFFF}Contactos\nRestaurar "COL_GENERAL"contactos\n{FFFFFF}Tirar "COL_GENERAL"agenda{FFFFFF}\nSalir", "Aceptar", "");
    Info[playerid][pContactoAgendar] = 0;
	}

	if(Info[playerid][pContactoAgendar] == 4)
	{
	Info[playerid][pNumeroLibreta4] = numero;
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, ""COL_GENERAL"Agenda", "{FFFFFF}Contactos\nRestaurar "COL_GENERAL"contactos\n{FFFFFF}Tirar "COL_GENERAL"agenda{FFFFFF}\nSalir", "Aceptar", "");
    Info[playerid][pContactoAgendar] = 0;
	}

	if(Info[playerid][pContactoAgendar] == 5)
	{
	Info[playerid][pNumeroLibreta5] = numero;
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, ""COL_GENERAL"Agenda", "{FFFFFF}Contactos\nRestaurar "COL_GENERAL"contactos\n{FFFFFF}Tirar "COL_GENERAL"agenda{FFFFFF}\nSalir", "Aceptar", "");
    Info[playerid][pContactoAgendar] = 0;
	}

	if(Info[playerid][pContactoAgendar] == 6)
	{
	Info[playerid][pNumeroLibreta6] = numero;
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, ""COL_GENERAL"Agenda", "{FFFFFF}Contactos\nRestaurar "COL_GENERAL"contactos\n{FFFFFF}Tirar "COL_GENERAL"agenda{FFFFFF}\nSalir", "Aceptar", "");
    Info[playerid][pContactoAgendar] = 0;
	}

	if(Info[playerid][pContactoAgendar] == 7)
	{
	Info[playerid][pNumeroLibreta7] = numero;
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, ""COL_GENERAL"Agenda", "{FFFFFF}Contactos\nRestaurar "COL_GENERAL"contactos\n{FFFFFF}Tirar "COL_GENERAL"agenda{FFFFFF}\nSalir", "Aceptar", "");
    Info[playerid][pContactoAgendar] = 0;
	}

	if(Info[playerid][pContactoAgendar] == 8)
	{
	Info[playerid][pNumeroLibreta8] = numero;
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, ""COL_GENERAL"Agenda", "{FFFFFF}Contactos\nRestaurar "COL_GENERAL"contactos\n{FFFFFF}Tirar "COL_GENERAL"agenda{FFFFFF}\nSalir", "Aceptar", "");
	Info[playerid][pContactoAgendar] = 0;
	}

	if(Info[playerid][pContactoAgendar] == 9)
	{
	Info[playerid][pNumeroLibreta9] = numero;
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, ""COL_GENERAL"Agenda", "{FFFFFF}Contactos\nRestaurar "COL_GENERAL"contactos\n{FFFFFF}Tirar "COL_GENERAL"agenda{FFFFFF}\nSalir", "Aceptar", "");
	Info[playerid][pContactoAgendar] = 0;
	}

	if(Info[playerid][pContactoAgendar] == 10)
	{
	Info[playerid][pNumeroLibreta10] = numero;
	ShowPlayerDialog(playerid, DIALOG_LIBRETAMENU, DIALOG_STYLE_LIST, ""COL_GENERAL"Agenda", "{FFFFFF}Contactos\nRestaurar "COL_GENERAL"contactos\n{FFFFFF}Tirar "COL_GENERAL"agenda{FFFFFF}\nSalir", "Aceptar", "");
    Info[playerid][pContactoAgendar] = 0;
	}
	}
	}
	if(dialogid == DIALOG_LIBRETACONTACTO)
	{
	if(response)
	{
	if(listitem == 0)
	{
	Info[playerid][pContactoAgendar] = 1;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, ""COL_GENERAL"* Agregar", ""COL_GENERAL"Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 1)
	{
	Info[playerid][pContactoAgendar] = 2;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, ""COL_GENERAL"* Agregar", ""COL_GENERAL"Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 2)
	{
	Info[playerid][pContactoAgendar] = 3;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, ""COL_GENERAL"* Agregar", ""COL_GENERAL"Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 3)
	{
	Info[playerid][pContactoAgendar] = 4;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, ""COL_GENERAL"* Agregar", ""COL_GENERAL"Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 4)
	{
	Info[playerid][pContactoAgendar] = 5;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, ""COL_GENERAL"* Agregar", ""COL_GENERAL"Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 5)
	{
	Info[playerid][pContactoAgendar] = 6;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, ""COL_GENERAL"* Agregar", ""COL_GENERAL"Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 6)
	{
	Info[playerid][pContactoAgendar] = 7;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, ""COL_GENERAL"* Agregar", ""COL_GENERAL"Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 7)
	{
	Info[playerid][pContactoAgendar] = 8;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, ""COL_GENERAL"* Agregar", ""COL_GENERAL"Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 8)
	{
	Info[playerid][pContactoAgendar] = 9;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, ""COL_GENERAL"* Agregar", ""COL_GENERAL"Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	if(listitem == 9)
	{
	Info[playerid][pContactoAgendar] = 10;
	ShowPlayerDialog(playerid, DIALOG_AGENDARCONTACTO, DIALOG_STYLE_INPUT, ""COL_GENERAL"* Agregar", ""COL_GENERAL"Introduce el numero a agendar.", "Aceptar", "Cancelar");
	}
	}
	}
	if(dialogid == DIALOG_LIBRETAMENU)
	{
	if(response)
	{
	if(listitem == 0)
	{
	new numero1 = Info[playerid][pNumeroLibreta1];
	new numero2 = Info[playerid][pNumeroLibreta2];
	new numero3 = Info[playerid][pNumeroLibreta3];
	new numero4 = Info[playerid][pNumeroLibreta4];
	new numero5 = Info[playerid][pNumeroLibreta5];
	new numero6 = Info[playerid][pNumeroLibreta6];
	new numero7 = Info[playerid][pNumeroLibreta7];
	new numero8 = Info[playerid][pNumeroLibreta8];
	new numero9 = Info[playerid][pNumeroLibreta9];
	new numero10 = Info[playerid][pNumeroLibreta10];

	new string[340];
	format(string, sizeof(string), "{FFFFFF}1 - "COL_WHITE"%d{FFFFFF}\n{FFFFFF}2 - "COL_WHITE"%d{FFFFFF}\n{FFFFFF}3 - "COL_WHITE"%d{FFFFFF}\n{FFFFFF}4 - "COL_WHITE"%d{FFFFFF}\n{FFFFFF}5 - "COL_WHITE"%d{FFFFFF}\n{FFFFFF}6 - "COL_WHITE"%d{FFFFFF}\n{FFFFFF}7 - "COL_WHITE"%d{FFFFFF}\n{FFFFFF}8 - "COL_WHITE"%d{FFFFFF}\n{FFFFFF}9 - "COL_WHITE"%d{FFFFFF}\n{FFFFFF}10 - "COL_WHITE"%d{FFFFFF}", numero1, numero2, numero3, numero4, numero5, numero6, numero7, numero8, numero9, numero10);
	ShowPlayerDialog(playerid, DIALOG_LIBRETACONTACTO, DIALOG_STYLE_LIST, ""COL_GENERAL"Contactos", string, "Aceptar", "Atras");
	}
	if(listitem == 1)
	{
	Info[playerid][pNumeroLibreta1] = 0;
	Info[playerid][pNumeroLibreta2] = 0;
	Info[playerid][pNumeroLibreta3] = 0;
	Info[playerid][pNumeroLibreta4] = 0;
	Info[playerid][pNumeroLibreta5] = 0;
	Info[playerid][pNumeroLibreta6] = 0;
	Info[playerid][pNumeroLibreta7] = 0;
	Info[playerid][pNumeroLibreta8] = 0;
	Info[playerid][pNumeroLibreta9] = 0;
	Info[playerid][pNumeroLibreta10] = 0;
	SendClientMessage(playerid, COLOR_WHITE, "Contactos restaurados");
	}
	if(listitem == 2)
	{
	Info[playerid][pNumeroLibreta1] = 0;
	Info[playerid][pNumeroLibreta2] = 0;
	Info[playerid][pNumeroLibreta3] = 0;
	Info[playerid][pNumeroLibreta4] = 0;
	Info[playerid][pNumeroLibreta5] = 0;
	Info[playerid][pNumeroLibreta6] = 0;
	Info[playerid][pNumeroLibreta7] = 0;
	Info[playerid][pNumeroLibreta8] = 0;
	Info[playerid][pNumeroLibreta9] = 0;
	Info[playerid][pNumeroLibreta10] = 0;
	Info[playerid][pLibreta] = 0;
	SendClientMessage(playerid, COLOR_WHITE, "Tiraste tu agenda");
	new string[128];
	format(string, sizeof(string), ""COL_PURPLE"* %s tira su agenda al suelo", GetPlayerNameEx(playerid));
	NearMsg(playerid, -1, string, 15.0);
	}
	}
	}

	if(dialogid == V_TUNECAR)
	{
		if(response)
		{
			if(listitem == 0) //Vinilos
			{
				ShowPlayerDialog(playerid, V_CARVINILOS, DIALOG_STYLE_LIST, "Seleccione un Vinilo", "Vinilo 1\nVinilo 2\nVinilo 3\nRemover Vinilo\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 1) //Tubo de Escape
			{
				ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 2) //Para golpes delanteros
			{
				ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 3) //Para golpes traseros
			{
				ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 4) //Roofs
			{
				ShowPlayerDialog(playerid, V_TECHOS, DIALOG_STYLE_LIST, "Seleccione un Toma de Aire", "Wheel Arch Alien Toma de Aire\nWheel Arch X-Flow Toma de Aire\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 5) //Alerones
			{
				ShowPlayerDialog(playerid, V_ALERONES, DIALOG_STYLE_LIST, "Seleccione un Aleron", "Aleron Alien\nAleron X-Flow\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 6) //Embellecedoress
			{
				ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
			}
            if(listitem == 7) //Bullbars
			{
				ShowPlayerDialog(playerid, V_BULLARS, DIALOG_STYLE_LIST, "Seleccione un Bullbar", "Locos Low Chrome Grill\nLocos Low Chrome Bars\nLocos Low Chrome Lights\nLocos Low Chrome Bullbar\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 8) //Wheels
			{
				ShowPlayerDialog(playerid, V_RUEDAS, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nPagina Siguiente\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 9) //Car stereo
			{
				ShowPlayerDialog(playerid, V_ESTEREO, DIALOG_STYLE_LIST, "Seleccione un Car Stereo.", "Ultra Bass Boost\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 10) //Tune car menu 2
			{
				ShowPlayerDialog(playerid, V_TUNECAR2, DIALOG_STYLE_LIST, "Menu Tuning", "Hydraulics\nNitro x10\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 11) //Wheels2
			{
				ShowPlayerDialog(playerid, V_RUEDAS2, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVolver", "Seleccionar", "Salir");
			}
		}
	}
	if(dialogid == V_CARVINILOS) //Vinilos
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560 ||
				pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 535 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 558)
		        {
					new car = GetPlayerVehicleID(playerid);
					ChangeVehiclePaintjob(car,0);
					PlayerVehicleInfo[GetPlayerVehicle(playerid, car)][pvPaintJob] = 0;
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Vinilo numero 1.");
                    ShowPlayerDialog(playerid, V_CARVINILOS, DIALOG_STYLE_LIST, "Seleccione un Vinilo", "Vinilo 1\nVinilo 2\nVinilo 3\nRemover Vinilo\nVolver", "Seleccionar", "Salir");

				}
				else
				{
				   SendClientMessage(playerid,COLOR_RED,"[ERROR]: Este Vinilo es solor para Vehiculos dew Wheel Arch Angel y Loco Low Co.!");
			       ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
			}
			if(listitem == 1)
			{
				if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560 ||
				pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 535 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 558)
                {
					new car = GetPlayerVehicleID(playerid);
					ChangeVehiclePaintjob(car,1);
					PlayerVehicleInfo[GetPlayerVehicle(playerid, car)][pvPaintJob] = 0;
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Vinilo numero 2.");
                    ShowPlayerDialog(playerid, V_CARVINILOS, DIALOG_STYLE_LIST, "Seleccione un Vinilo", "Vinilo 1\nVinilo 2\nVinilo 3\nRemover Vinilo\nVolver", "Seleccionar", "Salir");

				}
				else
				{
				   SendClientMessage(playerid,COLOR_RED,"[ERROR]: Este Vinilo es solor para Vehiculos dew Wheel Arch Angel y Loco Low Co.!");
			       ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
			}
			if(listitem == 2)
			{
				if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560 ||
				pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 535 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 558)
			    {
			   	   new car = GetPlayerVehicleID(playerid);
                   ChangeVehiclePaintjob(car,2);
                   PlayerVehicleInfo[GetPlayerVehicle(playerid, car)][pvPaintJob] = 0;
                   PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				   SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Vinilo numero 3.");
                   ShowPlayerDialog(playerid, V_CARVINILOS, DIALOG_STYLE_LIST, "Seleccione un Vinilo", "Vinilo 1\nVinilo 2\nVinilo 3\nRemover Vinilo\nVolver", "Seleccionar", "Salir");
				}
				else
				{
				   SendClientMessage(playerid,COLOR_RED,"[ERROR]: Este Vinilo es solor para Vehiculos dew Wheel Arch Angel y Loco Low Co.!");
			       ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
			}

			if(listitem == 3)
			{
				if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560 ||
				pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 535 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 558)
				{
				    new car = GetPlayerVehicleID(playerid);
	               	ChangeVehiclePaintjob(car,2);
	               	PlayerVehicleInfo[GetPlayerVehicle(playerid, car)][pvPaintJob] = 3;
	               	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	               	SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Vinilo numero 3.");
					ShowPlayerDialog(playerid, V_CARVINILOS, DIALOG_STYLE_LIST, "Seleccione un Vinilo", "Vinilo 1\nVinilo 2\nVinilo 3\nRemover Vinilo\nVolver", "Seleccionar", "Salir");
				}
   				else
				{
				   SendClientMessage(playerid,COLOR_RED,"[ERROR]: Este Vinilo es solor para Vehiculos dew Wheel Arch Angel y Loco Low Co.!");
			       ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
			}
			if(listitem == 4)
			{
				ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
			}
		}
		UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
	}
 	if(dialogid == V_TUBOS) //Tubo de Escape
	{
		if(response)
		{
			if(listitem == 0)//Wheel Arch Cars Alien Exausts
			{
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562)
		            {
		            	AddVehicleComponent(car,1034);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            	SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Wheel Arch Alien Escape [Elegy].");
		            	ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(car,1046);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Wheel Arch Alien [Flash].");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(car,1065);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Wheel Arch Alien [Jetser].");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(car,1064);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Wheel Arch Alien [Stratum].");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(car,1028);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Wheel Arch Alien [Sultan].");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(car,1089);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Wheel Arch Alien [Uranus].");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
	    			}
	    			}
	  			 	else
					{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: Solamente le puedes agregar estos componestes a los vehiculo de Wheel Arch Angels!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
                    }
            }
			if(listitem == 1)//Wheel Arch Cars X-Flow Exausts
            {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560)
                {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562)
			        {
			            AddVehicleComponent(car,1037);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Wheel Arch X-Flow [Elegy].");
			            ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(car,1045);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Wheel Arch X-Flow [Flash].");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(car,1066);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Wheel Arch X-Flow [Jester].");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(car,1059);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Wheel Arch X-Flow [Stratum].");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(car,1029);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Wheel Arch X-Flow [Sultan].");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(car,1092);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Wheel Arch X-Flow [Uranus].");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: Solamente le puedes agregar estos componestes a los vehiculo de Wheel Arch Angels!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
					}
            }
			if(listitem == 2)//Locos Low Co. Cars Chromer Exausts
            {
                if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575)
			        {
			            AddVehicleComponent(car,1044);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		             	SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Locos Low Chromer [Brodway].");
			            ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 534)
					{
					    AddVehicleComponent(car,1126);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Locos Low Chromer [Remington].");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 567)
					{
					    AddVehicleComponent(car,1129);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	                    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Locos Low Chromer [Savanna].");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 536)
					{
					    AddVehicleComponent(car,1104);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Locos Low Chromer [Blade].");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 535)
					{
					    AddVehicleComponent(car,1113);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Locos Low Chromer [Slamvan].");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 576)
					{
					    AddVehicleComponent(car,1136);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el tubo de escape Locos Low Chromer [Tornado].");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: Solo le puedes agregar este componete a vehiculos de Locos Low Car!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
					}
            }
			if(listitem == 3)//Locos Low Co. Cars Salmin Exausts
            {
                if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575)
			        {
			            AddVehicleComponent(car,1043);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo: Tubos de Escape Locos Low Slamin del tipo: Brodway.");
			            ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 534)
					{
					    AddVehicleComponent(car,1127);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo: Tubos de Escape Locos Low Slamin del tipo: Remingon.");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 567)
					{
					    AddVehicleComponent(car,1132);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo: Tubos de Escape Locos Low Slamin del tipo: Savanna.");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 536)
					{
					    AddVehicleComponent(car,1105);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo: Tubos de Escape Locos Low Slamin del tipo: Blade.");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}

					else if(pmodelid[playerid] == 535)
					{
					    AddVehicleComponent(car,1114);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo: Tubos de Escape Locos Low Slamin del tipo: Slamvan.");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}

					else if(pmodelid[playerid] == 576)
					{
					    AddVehicleComponent(car,1135);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo: Tubos de Escape Locos Low Slamin del tipo: Tornado.");
					    ShowPlayerDialog(playerid, V_TUBOS, DIALOG_STYLE_LIST, "Seleccione un Escape", "Wheel Arch Alien Escape\nWheel Arch X-Flow Escape\nLocos Low Chromer Escape\nLocos Low Slamin Escape\nVolver", "Seleccionar", "Salir");
					}
                    }
					else
					{
					    SendClientMessage(playerid,COLOR_RED,"[ERROR]: Solo le puedes agregar este componente a los vehiculo de Locos Low Slamin Cars!");
						ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
						}
            }
			if(listitem == 4)//BACK
            {
                 ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
            }
	    }
	    UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
   }

	if(dialogid == V_PARAGOLPESD)//Para golpes delanteros
	{
		if(response)
		{
			if(listitem == 0)//Wheel Arch Cars Alien Para golpes delantero
			{
                   if(pmodelid[playerid] == 562 ||
				   pmodelid[playerid] == 565 ||
				   pmodelid[playerid] == 559 ||
				   pmodelid[playerid] == 561 ||
				   pmodelid[playerid] == 560)
				   {
		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562)
		            {
		            	AddVehicleComponent(car,1171);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Para golpes delantero de tipo: Elegy.");
		            	ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(car,1153);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Para golpes delantero de tipo: Flash.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(car,1160);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Para golpes delantero de tipo: Jester.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(car,1155);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Para golpes delantero de tipo: Stratum.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(car,1169);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Para golpes delantero de tipo: Sultan.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(car,1166);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Para golpes delantero de tipo: Uraus.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de Wheel Arch Angels Cars!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
	                }
            }
			if(listitem == 1)//Wheel Arch Cars X-Flow Para golpes delantero
            {
                   if(pmodelid[playerid] == 562 ||
	               pmodelid[playerid] == 565 ||
	               pmodelid[playerid] == 559 ||
	               pmodelid[playerid] == 561 ||
                   pmodelid[playerid] == 560)
		           {

			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562)
			        {
			            AddVehicleComponent(car,1172);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch X-Flow Para golpes delantero de tipo: Elegy.");
			            ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(car,1152);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch  X-Flow Para golpes delantero de tipo: Flash.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(car,1173);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch  X-Flow Para golpes delantero de tipo: Jester.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(car,1157);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch  X-Flow Para golpes delantero de tipo: Stratum.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(car,1170);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch  X-Flow Para golpes delantero de tipo: Sultan.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(car,1165);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch  X-Flow Para golpes delantero de tipo: Uranus.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de Wheel Arch Angels Cars!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
					}
		    }
			if(listitem == 2)//Locos Low Co. Car Chromer Para golpes delantero
            {
                if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
				{
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575)
			        {
			            AddVehicleComponent(car,1174);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Chromer Para golpes delantero de tipo: Brodway.");
			            ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 534)
					{
					    AddVehicleComponent(car,1179);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Chromer Para golpes delantero de tipo: Remington.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 567)
					{
					    AddVehicleComponent(car,1189);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info:Le has agregado al vehiculo el Locos Low Chromer Para golpes delantero de tipo: Savanna.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 536)
					{
					    AddVehicleComponent(car,1182);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Chromer Para golpes delantero de tipo: Blade.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 535)
					{
					    AddVehicleComponent(car,1115);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Chromer Para golpes delantero de tipo: Slamvan.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 576)
					{
					    AddVehicleComponent(car,1191);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Chromer Para golpes delantero de tipo: Tornado.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: Solo le puedes agregar este componete a vehiculos de Locos Low Car!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
					}
			}
			if(listitem == 3)//Locos Low Co. Salmin Para golpes delantero
            {
                if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
	            pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 576)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575)
			        {
			            AddVehicleComponent(car,1175);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Slamin Para golpes delantero de tipo: Brodway.");
			            ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 534)
					{
					    AddVehicleComponent(car,1185);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Slamin Para golpes delantero de tipo: Remington.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 567)
					{
					    AddVehicleComponent(car,1188);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Slamin Para golpes delantero de tipo: Savanna.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 536)
					{
					    AddVehicleComponent(car,1181);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Slamin Para golpes delantero de tipo: Blade.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
                    else if(pmodelid[playerid] == 535)
					{
					    AddVehicleComponent(car,1116);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Slamin Para golpes delantero de tipo: Slamvan.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 576)
					{
					    AddVehicleComponent(car,1190);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Slamin Para golpes delantero de tipo: Tornado.");
					    ShowPlayerDialog(playerid, V_PARAGOLPESD, DIALOG_STYLE_LIST, "Seleccione un Para golpes delantero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: Solo le puedes agregar este componete a vehiculos de Locos Low Car!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
                    }
            }
			if(listitem == 4)//BACK
            {
                 ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
            }
        }
        UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
	}

	if(dialogid == V_PARAGOLPEST)//Para golpes traseros
   	{
		if(response)
		{
			if(listitem == 0)//Wheel Arch Cars Alien Para golpes trasero
			{
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560)
		        {
                    new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562)
		            {
		            	AddVehicleComponent(car,1149);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Para golpes trasero de tipo: Elegy.");
		            	ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(car,1150);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Para golpes trasero de tipo: Flash.");
					    ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(car,1159);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Para golpes trasero de tipo: Jester.");
					    ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(car,1154);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Para golpes trasero de tipo: Stratum.");
					    ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(car,1141);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SetPlayerSkin(playerid, 73);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Para golpes trasero de tipo: Sultan.");
					    ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(car,1168);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Para golpes trasero de tipo: Uranus.");
					    ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de Wheel Arch Angels Cars!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
					}
            }
			if(listitem == 1)//Wheel Arch Cars X-Flow Para golpes trasero
            {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560)
		        {

					new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562)
			        {
			            AddVehicleComponent(car,1148);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch  X-Flow Para golpes trasero de tipo: Elegy.");
		                ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(car,1151);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch  X-Flow Para golpes trasero de tipo: Flash.");
				        ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(car,1161);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch  X-Flow Para golpes trasero de tipo: Jester.");
				        ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(car,1156);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch  X-Flow Para golpes trasero de tipo: Stratum.");
				        ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(car,1140);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch  X-Flow Para golpes trasero de tipo: Sultan.");
				        ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(car,1167);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch  X-Flow Para golpes trasero de tipo: Uranus.");
				        ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de Wheel Arch Angels Cars!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
					}
            }
			if(listitem == 2)//Locos Low Co. Cars Chromer Para golpes trasero
            {
                if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575)
			        {
			            AddVehicleComponent(car,1176);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Chromer Para golpes trasero de tipo: Brodway.");
			            ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 534)
					{
					    AddVehicleComponent(car,1180);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Chromer Para golpes trasero de tipo: Remington.");
					    ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 567)
					{
					    AddVehicleComponent(car,1187);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Chromer Para golpes trasero de tipo: Savanna.");
					    ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 536)
					{
					    AddVehicleComponent(car,1184);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Chromer Para golpes trasero de tipo: Blade.");
					    ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 535)
					{
					    AddVehicleComponent(car,1109);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Chromer Para golpes trasero de tipo: Slamvan.");
					    ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 576)
					{
					    AddVehicleComponent(car,1192);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Chromer Para golpes trasero de tipo: Tornado.");
					    ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: Solo le puedes agregar este componete a vehiculos de Locos Low Car!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
					}
            }
			if(listitem == 3)//Locos Low Co. Cars Salmin Para golpes trasero
            {
                if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575)
			        {
			            AddVehicleComponent(car,1177);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Slamin Para golpes trasero de tipo: Brodway.");
			            ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 534)
					{
					    AddVehicleComponent(car,1178);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Slamin Para golpes trasero de tipo: Remington.");
					    ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 567)
					{
					    AddVehicleComponent(car,1186);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Slamin Para golpes trasero de tipo: Savanna.");
					    ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 536)
					{
					    AddVehicleComponent(car,1183);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Slamin Para golpes trasero de tipo: Blade.");
					    ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}

					else if(pmodelid[playerid] == 535)
					{
					    AddVehicleComponent(car,1110);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Slamin Para golpes trasero de tipo: Slamvan.");
					    ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}

					else if(pmodelid[playerid] == 576)
					{
					    AddVehicleComponent(car,1193);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Locos Low Slamin Para golpes trasero de tipo: Tornado.");
					    ShowPlayerDialog(playerid, V_PARAGOLPEST, DIALOG_STYLE_LIST, "Seleccione un Para golpes trasero", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVolver", "Seleccionar", "Salir");
					}
                    }
					else
					{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: Solo le puedes agregar este componete a vehiculos de Locos Low Car!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
					}
            }
            if(listitem == 4)//BACK
            {
                 ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
            }
		}
		UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
	}
	if(dialogid == V_TECHOS)//Roofs
	{
		if(response)
		{
			if(listitem == 0)//Wheel Arch Cars Alien Toma de Aire
			{
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562)
		            {
		            	AddVehicleComponent(car,1035);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Toma de Aire del Tipo: Elegy.");
		            	ShowPlayerDialog(playerid, V_TECHOS, DIALOG_STYLE_LIST, "Seleccione un Roof", "Wheel Arch Alien Toma de Aire\nWheel Arch X-Flow Toma de Aire\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(car,1054);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Toma de Aire del Tipo: Flash.");
					    ShowPlayerDialog(playerid, V_TECHOS, DIALOG_STYLE_LIST, "Seleccione un Roof", "Wheel Arch Alien Toma de Aire\nWheel Arch X-Flow Toma de Aire\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(car,1067);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Toma de Aire del Tipo: Jester.");
					    ShowPlayerDialog(playerid, V_TECHOS, DIALOG_STYLE_LIST, "Seleccione un Roof", "Wheel Arch Alien Toma de Aire\nWheel Arch X-Flow Toma de Aire\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(car,1055);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Toma de Aire del Tipo: Stratum.");
					    ShowPlayerDialog(playerid, V_TECHOS, DIALOG_STYLE_LIST, "Seleccione un Roof", "Wheel Arch Alien Toma de Aire\nWheel Arch X-Flow Toma de Aire\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(car,1032);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Toma de Aire del Tipo: Sultan.");
					    ShowPlayerDialog(playerid, V_TECHOS, DIALOG_STYLE_LIST, "Seleccione un Roof", "Wheel Arch Alien Toma de Aire\nWheel Arch X-Flow Toma de Aire\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(car,1088);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien Toma de Aire del Tipo: Uranus.");
					    ShowPlayerDialog(playerid, V_TECHOS, DIALOG_STYLE_LIST, "Seleccione un Roof", "Wheel Arch Alien Toma de Aire\nWheel Arch X-Flow Toma de Aire\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVolver", "Seleccionar", "Salir");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de Wheel Arch Angels Cars!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
					}
            }
	        if(listitem == 1)//Wheel Arch Cars X-Flow Toma de Aire
			{
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562)
			        {
			            AddVehicleComponent(car,1035);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch X-Flow Toma de Aire del Tipo: Elegy.");
			            ShowPlayerDialog(playerid, V_TECHOS, DIALOG_STYLE_LIST, "Seleccione un Roof", "Wheel Arch Alien Toma de Aire\nWheel Arch X-Flow Toma de Aire\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(car,1053);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch X-Flow Toma de Aire del Tipo: Flash.");
					    ShowPlayerDialog(playerid, V_TECHOS, DIALOG_STYLE_LIST, "Seleccione un Roof", "Wheel Arch Alien Toma de Aire\nWheel Arch X-Flow Toma de Aire\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(car,1068);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch X-Flow Toma de Aire del Tipo: Jester.");
					    ShowPlayerDialog(playerid, V_TECHOS, DIALOG_STYLE_LIST, "Seleccione un Roof", "Wheel Arch Alien Toma de Aire\nWheel Arch X-Flow Toma de Aire\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(car,1061);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch X-Flow Toma de Aire del Tipo: Stratum.");
					    ShowPlayerDialog(playerid, V_TECHOS, DIALOG_STYLE_LIST, "Seleccione un Roof", "Wheel Arch Alien Toma de Aire\nWheel Arch X-Flow Toma de Aire\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(car,1033);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch X-Flow Toma de Aire del Tipo: Sultan.");
					    ShowPlayerDialog(playerid, V_TECHOS, DIALOG_STYLE_LIST, "Seleccione un Roof", "Wheel Arch Alien Toma de Aire\nWheel Arch X-Flow Toma de Aire\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(car,1091);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch X-Flow Toma de Aire del Tipo: Uranus.");
					    ShowPlayerDialog(playerid, V_TECHOS, DIALOG_STYLE_LIST, "Seleccione un Roof", "Wheel Arch Alien Toma de Aire\nWheel Arch X-Flow Toma de Aire\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVolver", "Seleccionar", "Salir");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de Wheel Arch Angels Cars!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
					}
			}
			if(listitem == 2)//Locos Low Co. Cars Hardtop Roof
			{
                if(pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 567)
			        {
			            AddVehicleComponent(car,1130);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Techo Locos Low Al vehiculo: Brodway.");
			            ShowPlayerDialog(playerid, V_TECHOS, DIALOG_STYLE_LIST, "Seleccione un Roof", "Wheel Arch Alien Toma de Aire\nWheel Arch X-Flow Toma de Aire\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVolver", "Seleccionar", "Salir");
					}
	   				else if(pmodelid[playerid] == 536)
					{
					    AddVehicleComponent(car,1128);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Techo Locos Low Hardtop Roof Al vehiculo: Blade.");
					    ShowPlayerDialog(playerid, V_TECHOS, DIALOG_STYLE_LIST, "Seleccione un Roof", "Wheel Arch Alien Toma de Aire\nWheel Arch X-Flow Toma de Aire\nLocos Low Hardtop Techo\nLocos Low Softtop Techo\nVolver", "Seleccionar", "Salir");
					}
					}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: Solo le puedes agregar este componete a vehiculos de Locos Low Car Savanna y Blade!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
            }
		    if(listitem == 3)//Locos Low Co. Cars Softtop Roof
			{
                if(pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536)
			    {
			        if(pmodelid[playerid] == 567)
			        {
			            AddVehicleComponent(idcar,1131);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Techo Locos Low Softtop Roof Al vehiculo: Brodway.");
			            ShowPlayerDialog(playerid, V_TECHOS, DIALOG_STYLE_LIST, "Seleccione un Roof", "Wheel Arch Alien Toma de Aire\nWheel Arch X-Flow Toma de Aire\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVolver", "Seleccionar", "Salir");
					}
	   				else if(pmodelid[playerid] == 536)
					{
					    AddVehicleComponent(idcar,1103);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Techo Locos Low Softtop Roof Al vehiculo: Blade.");
                        ShowPlayerDialog(playerid, V_TECHOS, DIALOG_STYLE_LIST, "Seleccione un Roof", "Wheel Arch Alien Toma de Aire\nWheel Arch X-Flow Toma de Aire\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVolver", "Seleccionar", "Salir");
					}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: Solo le puedes agregar este componete a vehiculos de Locos Low Car Savanna y Blade!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
            }
            if(listitem == 4)//BACK
            {
                 ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
            }
		}
		UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
	}
	if(dialogid == V_ALERONES)//Alerones
	{
		if(response)
		{
			if(listitem == 0)//Wheel Arch Cars Alien Alerones
			{
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560)
		        {
		            if(pmodelid[playerid] == 562)
		            {
		            	AddVehicleComponent(idcar,1147);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Aleron Wheel Arch Alien de tipo: Elegy.");
		            	ShowPlayerDialog(playerid, V_ALERONES, DIALOG_STYLE_LIST, "Seleccione un Aleron", "Alien Aleron\nX-Flow Aleron\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(idcar,1049);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Aleron Wheel Arch Alien de tipo: Flash.");
					    ShowPlayerDialog(playerid, V_ALERONES, DIALOG_STYLE_LIST, "Seleccione un Aleron", "Alien Aleron\nX-Flow Aleron\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(idcar,1162);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Aleron Wheel Arch Alien de tipo: Jester.");
					    ShowPlayerDialog(playerid, V_ALERONES, DIALOG_STYLE_LIST, "Seleccione un Aleron", "Alien Aleron\nX-Flow Aleron\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(idcar,1158);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Aleron Wheel Arch Alien de tipo: Stratum.");
					    ShowPlayerDialog(playerid, V_ALERONES, DIALOG_STYLE_LIST, "Seleccione un Aleron", "Alien Aleron\nX-Flow Aleron\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(idcar,1138);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Aleron Wheel Arch Alien de tipo: Sultan.");
					    ShowPlayerDialog(playerid, V_ALERONES, DIALOG_STYLE_LIST, "Seleccione un Aleron", "Alien Aleron\nX-Flow Aleron\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(idcar,1164);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Aleron Wheel Arch Alien de tipo: Uranus.");
					    ShowPlayerDialog(playerid, V_ALERONES, DIALOG_STYLE_LIST, "Seleccione un Aleron", "Alien Aleron\nX-Flow Aleron\nVolver", "Seleccionar", "Salir");
					}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de Wheel Arch Angels Cars!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
    	    }
            if(listitem == 1)//Wheel Arch Cars X-Flow Alerones
			{
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560)
		        {
			        if(pmodelid[playerid] == 562)
			        {
			            AddVehicleComponent(idcar,1146);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch X-Flow de tipo: Elegy.");
			            ShowPlayerDialog(playerid, V_ALERONES, DIALOG_STYLE_LIST, "Seleccione un Aleron", "Alien Aleron\nX-Flow Aleron\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(idcar,1150);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch X-Flow de tipo: Flash.");
					    ShowPlayerDialog(playerid, V_ALERONES, DIALOG_STYLE_LIST, "Seleccione un Aleron", "Alien Aleron\nX-Flow Aleron\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(idcar,1158);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch X-Flow de tipo: Jester.");
					    ShowPlayerDialog(playerid, V_ALERONES, DIALOG_STYLE_LIST, "Seleccione un Aleron", "Alien Aleron\nX-Flow Aleron\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(idcar,1060);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch X-Flow de tipo: Stratum.");
					    ShowPlayerDialog(playerid, V_ALERONES, DIALOG_STYLE_LIST, "Seleccione un Aleron", "Alien Aleron\nX-Flow Aleron\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(idcar,1139);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch X-Flow de tipo: Sultan.");
					    ShowPlayerDialog(playerid, V_ALERONES, DIALOG_STYLE_LIST, "Seleccione un Aleron", "Alien Aleron\nX-Flow Aleron\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(idcar,1163);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch X-Flow de tipo: Uranus.");
					    ShowPlayerDialog(playerid, V_ALERONES, DIALOG_STYLE_LIST, "Seleccione un Aleron", "Alien Aleron\nX-Flow Aleron\nVolver", "Seleccionar", "Salir");
					}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de X-Flow Arch Angels Car!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
            }
            if(listitem == 2)//BACK
            {
                 ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
            }
		}
		UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
	}
	if(dialogid == V_LATERALES)//Embellecedoress
	{
		if(response)
		{
			if(listitem == 0)//Wheel Arch Cars Alien Embellecedoress
			{
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560)
		        {
		            if(pmodelid[playerid] == 562)
		            {
		            	AddVehicleComponent(idcar,1036);
		            	AddVehicleComponent(idcar,1040);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Wheel Arch Alien de tipo: Elegy.");
		            	ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(idcar,1047);
					    AddVehicleComponent(idcar,1051);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Wheel Arch Alien de tipo: Flash.");
					    ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(idcar,1069);
					    AddVehicleComponent(idcar,1071);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Wheel Arch Alien de tipo: Jester.");
					    ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(idcar,1056);
					    AddVehicleComponent(idcar,1062);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Wheel Arch Alien de tipo: Stratum.");
					    ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(idcar,1026);
					    AddVehicleComponent(idcar,1027);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Wheel Arch Alien Embellecedores bumper de tipo: Sultan.");
					    ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(idcar,1090);
					    AddVehicleComponent(idcar,1094);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Wheel Arch Alien de tipo: Uranus.");
					    ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
					}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de Wheel Arch Angels Cars!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
		    }
	   	    if(listitem == 1)//Wheel Arch Cars X-Flow Embellecedoress
			{
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560)
		        {
			        if(pmodelid[playerid] == 562)
			        {
			            AddVehicleComponent(idcar,1039);
			            AddVehicleComponent(idcar,1041);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Wheel Arch X-Flow de tipo: Elegy.");
			            ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(idcar,1048);
					    AddVehicleComponent(idcar,1052);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Wheel Arch X-Flow de tipo: Flash.");
					    ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(idcar,1070);
					    AddVehicleComponent(idcar,1072);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Wheel Arch X-Flow de tipo: Jester.");
					    ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(idcar,1057);
					    AddVehicleComponent(idcar,1063);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Wheel Arch X-Flow de tipo: Stratum.");
					    ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(idcar,1031);
					    AddVehicleComponent(idcar,1030);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Wheel Arch X-Flow de tipo: Sultan.");
					    ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(idcar,1093);
					    AddVehicleComponent(idcar,1095);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Wheel Arch X-Flow de tipo: Uranus.");
					    ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
					}
				}
				else
				{
			    	SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de Wheel Arch Angels Cars!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
		    }
		    if(listitem == 2)//Locos Low Co. Cars Chrome Strip Embellecedoress
			{
            	if(pmodelid[playerid] == 575 ||
	               pmodelid[playerid] == 536 ||
	               pmodelid[playerid] == 576 ||
		 	       pmodelid[playerid] == 567)
				{
			        if(pmodelid[playerid] == 575)
			        {
	       		        AddVehicleComponent(idcar,1042);
	       		        AddVehicleComponent(idcar,1099);
	       		        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Locos Low Chrome Strip de tipo: Brodway.");
			            ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
					}
	   				else if(pmodelid[playerid] == 567)
					{
					    AddVehicleComponent(idcar,1102);
					    AddVehicleComponent(idcar,1133);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Locos Low Chrome Strip de tipo: Savanna.");
	    		        ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
	                }
	                else if(pmodelid[playerid] == 576)
					{
					    AddVehicleComponent(idcar,1134);
					    AddVehicleComponent(idcar,1137);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Locos Low Chrome Strip de tipo: Tornado.");
	    		        ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
	                }
	                else if(pmodelid[playerid] == 536)
					{
					    AddVehicleComponent(idcar,1108);
					    AddVehicleComponent(idcar,1107);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Locos Low Chrome Strip de tipo: Blade.");
	                    ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
	                }
				}
				else
				{
					SendClientMessage(playerid,COLOR_RED,"[ERROR]: Solo le puedes agregar este componete a vehiculos de Locos Low Car Brodway, Savanna Tornado and Blade!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
	        }
	  	    if(listitem == 3)//Locos Low Co. Cars Chrome Flames Embellecedoress
			{
                if(pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 534)
			    {
			        if(pmodelid[playerid] == 534)
			        {
			            AddVehicleComponent(idcar,1122);
			            AddVehicleComponent(idcar,1101);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Locos Low Chrome Flames de tipo: Remington.");
			            ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
					}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de Locos Low Car type Remington!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
			}
			if(listitem == 4)//Locos Low Co. Cars Chrome Arches Embellecedoress
			{
                if(pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 534)
			    {
			        if(pmodelid[playerid] == 534)
			        {
			            AddVehicleComponent(idcar,1106);
			            AddVehicleComponent(idcar,1124);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Locos Low Chrome Arches de tipo: Remington.");
			            ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
					}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de Locos Low Car type Remington!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
			}
			if(listitem == 5)//Locos Low Co. Cars Chrome Trim Embellecedoress
			{
                if(pmodelid[playerid] == 535)
			    {
			        if(pmodelid[playerid] == 535)
			        {
			            AddVehicleComponent(idcar,1118);
			            AddVehicleComponent(idcar,1120);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Locos Low Chrome Trim de tipo: Slamvan.");
			            ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
					}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de Locos Low Car type Slamvan!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
			}
			if(listitem == 6)//Locos Low Co. Cars Chrome Wheelcovers Embellecedoress
			{
                if(pmodelid[playerid] == 535)
			    {
			        if(pmodelid[playerid] == 535)
			        {
			            AddVehicleComponent(idcar,1119);
			            AddVehicleComponent(idcar,1121);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Embellecedores Locos Low Chrome Wheelcovers de tipo: Slamvan.");
			            ShowPlayerDialog(playerid, V_LATERALES, DIALOG_STYLE_LIST, "Seleccione un Embellecedores", "Wheel Arch Alien Embellecedores\nWheel Arch X-Flow Embellecedores\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVolver", "Seleccionar", "Salir");
					}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de Locos Low Car type Slamvan!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
			}
			if(listitem == 7)//BACK
            {
                 ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
            }
		}
		UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
	}
	if(dialogid == V_BULLARS)//Bullbars
	{
		if(response)
		{
			if(listitem == 0)//Locos Low Co. Cars Chrome Grill
			{
                if(pmodelid[playerid] == 534)
			    {
			        if(pmodelid[playerid] == 534)
			        {
			            AddVehicleComponent(idcar,1100);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el componente Locos Low Chrome Grill de tipo: Remington.");
			            ShowPlayerDialog(playerid, V_BULLARS, DIALOG_STYLE_LIST, "Seleccione un Bullbar", "Locos Low Chrome Grill\nLocos Low Chrome Bars\nLocos Low Chrome Lights\nLocos Low Chrome Bullbar\nVolver", "Seleccionar", "Salir");
			        }
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de Locos Low Car de tipo Remington!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
			}
			if(listitem == 1)//Locos Low Co. Cars Chrome Bars
			{
                if(pmodelid[playerid] == 534)
			    {
			        if(pmodelid[playerid] == 534)
			        {
			            AddVehicleComponent(idcar,1123);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el componente Locos Low Chrome Bars de tipo: Remington.");
			            ShowPlayerDialog(playerid, V_BULLARS, DIALOG_STYLE_LIST, "Seleccione un Bullbar", "Locos Low Chrome Grill\nLocos Low Chrome Bars\nLocos Low Chrome Lights\nLocos Low Chrome Bullbar\nVolver", "Seleccionar", "Salir");
					}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de Locos Low Car de tipo Remington!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
			}
			if(listitem == 2)//Locos Low Co. Cars Chrome Lights
			{
                if(pmodelid[playerid] == 534)
			    {
			        if(pmodelid[playerid] == 534)
			        {
			            AddVehicleComponent(idcar,1125);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el componente Locos Low Chrome Lights de tipo: Remington.");
			            ShowPlayerDialog(playerid, V_BULLARS, DIALOG_STYLE_LIST, "Seleccione un Bullbar", "Locos Low Chrome Grill\nLocos Low Chrome Bars\nLocos Low Chrome Lights\nLocos Low Chrome Bullbar\nVolver", "Seleccionar", "Salir");
					}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de Locos Low Car de tipo Remington!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
			}
			if(listitem == 3)//Locos Low Co. Cars Chrome Bullbar
			{
                if(pmodelid[playerid] == 535)
			    {
					if(pmodelid[playerid] == 535)
			        {
			            AddVehicleComponent(idcar,1117);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el componente Locos Low Chrome Lights de tipo: Slamvan.");
			            ShowPlayerDialog(playerid, V_BULLARS, DIALOG_STYLE_LIST, "Seleccione un Bullbar", "Locos Low Chrome Grill\nLocos Low Chrome Bars\nLocos Low Chrome Lights\nLocos Low Chrome Bullbar\nVolver", "Seleccionar", "Salir");
					}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"[ERROR]: solo le puedes agregar este componete a vehiculos de Locos Low Car de tipo Slamvan!");
					ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
				}
			}
			if(listitem == 4)//BACK
            {
                 ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
            }
		}
		UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
	}
	if(dialogid == V_RUEDAS)//Wheels
	{
		if(response)
		{
			if(listitem == 0)//Offroad
			{
		         AddVehicleComponent(idcar,1025);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                 SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo las Ruedas Offroad.");
	             ShowPlayerDialog(playerid, V_RUEDAS, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nPagina Siguiente\nVolver", "Seleccionar", "Salir");
	        }
            if(listitem == 1)//Mega
			{
			     AddVehicleComponent(idcar,1074);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo las Ruedas Mega.");
			     ShowPlayerDialog(playerid, V_RUEDAS, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nPagina Siguiente\nVolver", "Seleccionar", "Salir");
			}
            if(listitem == 2)//Wires
			{
	             AddVehicleComponent(idcar,1076);
	             PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo las Ruedas Wires.");
			     ShowPlayerDialog(playerid, V_RUEDAS, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nPagina Siguiente\nVolver", "Seleccionar", "Salir");
			}
	        if(listitem == 3)//Twist
			{
			     AddVehicleComponent(idcar,1078);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo las Ruedas Twist.");
			     ShowPlayerDialog(playerid, V_RUEDAS, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nPagina Siguiente\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 4)//Groove
			{
			     AddVehicleComponent(idcar,1081);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo las Ruedas Groove.");
		         ShowPlayerDialog(playerid, V_RUEDAS, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nPagina Siguiente\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 5)//Import
			{
                 AddVehicleComponent(idcar,1082);
                 PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
   			     SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el las Ruedas Import .");
			     ShowPlayerDialog(playerid, V_RUEDAS, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nPagina Siguiente\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 6)//Atomic
			{
			     AddVehicleComponent(idcar,1085);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo las Ruedas Atomic.");
                 ShowPlayerDialog(playerid, V_RUEDAS, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nPagina Siguiente\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 7)//Ahab
			{
			     AddVehicleComponent(idcar,1096);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	          	 SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo las Ruedas Ahab.");
			     ShowPlayerDialog(playerid, V_RUEDAS, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nPagina Siguiente\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 8)//Virtual
			{
                 AddVehicleComponent(idcar,1097);
                 PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	           	 SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo las Ruedas Virtual.");
                 ShowPlayerDialog(playerid, V_RUEDAS, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nPagina Siguiente\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 9)//Access
			{
			     AddVehicleComponent(idcar,1098);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	         	 SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo las Ruedas Access.");
			     ShowPlayerDialog(playerid, V_RUEDAS, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nPagina Siguiente\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 10)//Next page
			{
                 ShowPlayerDialog(playerid, V_RUEDAS2, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 11)//BACK
            {
                 ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
            }
		}
		UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
	}
	if(dialogid == V_ESTEREO)//Car Stereo
	{
		if(response)
		{
			if(listitem == 0)//Ultra Bass Boost
			{
		         AddVehicleComponent(idcar,1086);
                 PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Stereo Ultra Bass Bost system.");
		         ShowPlayerDialog(playerid, V_ESTEREO, DIALOG_STYLE_LIST, "Seleccione un Car Stereo.", "Bass Boost\nSuper Bass Boost\nUltra Bass Boost\nKing Bass Boost\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 1)//BACK
            {
                 ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
            }
		}
		UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
	}
	if(dialogid == V_TUNECAR2)//Tune car menu 2
	{
		if(response)
		{
			if(listitem == 0)//Hydraulics
			{
		         AddVehicleComponent(idcar,1087);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo Sistema Hidraulico.");
		         ShowPlayerDialog(playerid, V_TUNECAR2, DIALOG_STYLE_LIST, "Menu Tuning", "Hydraulics\nNitro x10\nVolver", "Seleccionar", "Salir");
			}
			if(listitem == 1)//Nitro x10
			{
		         ShowPlayerDialog(playerid, V_NITRO, DIALOG_STYLE_LIST, "Seleccione un Nitro", "x2\nx5\nx10", "Seleccionar", "Salir");
			}
			if(listitem == 2)//BACK
            {
                 ShowPlayerDialog(playerid, V_TUNECAR, DIALOG_STYLE_LIST, "Tunear Vehiculo","Vinilos\nTubo de Escape\nParachoques delantero\nParachoques trasero\nTecho y Tomas de Aire\nAlerones\nEmbellecedores\nBullbars\nRuedas\nEstereo\nSiguiente Pagina", "Seleccionar", "Salir");
            }
		}
		UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
	}
	if(dialogid == V_NITRO)
	{
		if(response == 1)
	    {
	        new Float:cx, Float:cy, Float:cz;
         	GetVehiclePos(idcar, cx, cy, cz);
         	PlayerPlaySound(playerid, 1133, cx, cy, cz);
	        switch(listitem)
	        {
	            case 0: { SendClientMessage(playerid, COLOR_WHITE, "Nitro x2 Instalado."); AddVehicleComponent(idcar, 1009); return 1; }
	            case 1: { SendClientMessage(playerid, COLOR_WHITE, "Nitro x5 Instalado."); AddVehicleComponent(idcar, 1008); return 1; }
	            case 2: { SendClientMessage(playerid, COLOR_WHITE, "Nitro x10 Instalado."); AddVehicleComponent(idcar, 1010); return 1; }
	        }
		}
		UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
	}
	if(dialogid == DIALOG_COLORADMIN)
	{
	    if(response)
		{
			if(listitem == 0)//COLOR ROJO
			{
               SetPlayerColor(playerid,PROJO_ADMIN);
               ColorAdmin[playerid] = 0;
			   return 1;
			}
			if(listitem == 1)//COLOR VERDER
			{
               SetPlayerColor(playerid,PVERDE_ADMIN);
               ColorAdmin[playerid] = 1;
			   return 1;
			}
			if(listitem == 2)//COLOR CELESTE
			{
               SetPlayerColor(playerid,PCELESTE_ADMIN);
               ColorAdmin[playerid] = 2;
			   return 1;
			}
			if(listitem == 3)//COLOR AMARILLO
			{
               SetPlayerColor(playerid,PAMARILLO_ADMIN);
               ColorAdmin[playerid] = 3;
			   return 1;
			}
			if(listitem == 4)//COLOR OLIVA
			{
               SetPlayerColor(playerid,POLIVA_ADMIN);
               ColorAdmin[playerid] = 4;
			   return 1;
			}
			if(listitem == 5)//COLOR ROSADO
			{
               SetPlayerColor(playerid,PROSADO_ADMIN);
               ColorAdmin[playerid] = 5;
			   return 1;
			}
			if(listitem == 6)//COLOR MORADO
			{
               SetPlayerColor(playerid,PMORADO_ADMIN);
               ColorAdmin[playerid] = 6;
			   return 1;
			}
			if(listitem == 7)//COLOR NARANJO
			{
               SetPlayerColor(playerid,PORANGE_ADMIN);
               ColorAdmin[playerid] = 7;
			   return 1;
			}
			if(listitem == 8)//COLOR NEGRO
			{
               SetPlayerColor(playerid,PNEGRO_ADMIN);
               ColorAdmin[playerid] = 8;
			   return 1;
			}
       }
	}
	if(dialogid == V_RUEDAS2)//Wheels 2
	{
		if(response)
		{
			if(listitem == 0)//Trance
            {
		         AddVehicleComponent(idcar,1084);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo las Ruedas Trance.");
		         ShowPlayerDialog(playerid, V_RUEDAS2, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVolver", "Seleccionar", "Salir");
            }
            if(listitem == 1)//Shadow
            {
		         AddVehicleComponent(idcar,1073);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo las Ruedas Shadow.");
		         ShowPlayerDialog(playerid, V_RUEDAS2, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVolver", "Seleccionar", "Salir");
            }
            if(listitem == 2)//Rimshine
            {
		         AddVehicleComponent(idcar,1075);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo las Ruedas Rimshine.");
		         ShowPlayerDialog(playerid, V_RUEDAS2, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVolver", "Seleccionar", "Salir");
            }
            if(listitem == 3)//Classic
            {
		         AddVehicleComponent(idcar,1077);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo las Ruedas Classic .");
		         ShowPlayerDialog(playerid, V_RUEDAS2, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVolver", "Seleccionar", "Salir");
            }
            if(listitem == 4)//Cutter
            {
		         AddVehicleComponent(idcar,1079);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo las Ruedas Cutter .");
		         ShowPlayerDialog(playerid, V_RUEDAS2, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVolver", "Seleccionar", "Salir");
            }
            if(listitem == 5)//Switch
            {
		         AddVehicleComponent(idcar,1080);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo el Switch Wheels.");
		         ShowPlayerDialog(playerid, V_RUEDAS2, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVolver", "Seleccionar", "Salir");
            }
            if(listitem == 6)//Dollar
            {
		         AddVehicleComponent(idcar,1083);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_GRAD1,"Info: Le has agregado al vehiculo las Ruedas Dollar.");
		         ShowPlayerDialog(playerid, V_RUEDAS2, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVolver", "Seleccionar", "Salir");
            }
            if(listitem == 7)//BACK
            {
		         ShowPlayerDialog(playerid, V_RUEDAS, DIALOG_STYLE_LIST, "Seleccione un Tipo de Ruedas", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nPagina Siguiente\nVolver", "Seleccionar", "Salir");
            }
		}
		UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
	}
	szMessage = "";
	switch(dialogid)
	{
		case DIALOG_ADMINH_ST:
		{
		    if(!response) return 1;
		    if(Info[playerid][pAdmin] == 0) return NoAutorizado
  			strcat(szMessage, "{DF013A}Comando /a {FFFFFF}- Admin Chat\n");
			strcat(szMessage, "{DF013A}Comando /desactivar {FFFFFF}- Activar/Desactivar AdminChat o MP's\n");
			strcat(szMessage, "{DF013A}Comando /gotoco {FFFFFF}- Ir a coordenadas\n");
			strcat(szMessage, "{DF013A}Comando /eventostaff {FFFFFF}- Ingresar a un evento como STAFF\n");
			strcat(szMessage, "{DF013A}Comando /w {FFFFFF}- Susurros\n");
			strcat(szMessage, "{DF013A}Comando /ls - /sf - /lv {FFFFFF}- Ir a LS/SF/LV\n");
			strcat(szMessage, "{DF013A}Comando /aa {FFFFFF}- Canal OOC administrativo\n");
			strcat(szMessage, "{DF013A}Comando /ar - /rr {FFFFFF}- Aceptar/Rechazar reportes\n");
			strcat(szMessage, "{DF013A}Comando /aduda - /rduda {FFFFFF}- Aceptar/Rechazar dudas");
			ShowPlayerDialog(playerid, DIALOG_ADMINH_1, DIALOG_STYLE_MSGBOX, "{DF013A}CMD Moderador", szMessage, ">>", "Salir");
		}
        case DIALOG_ADMINH_FM:
 		{
 		    if(!response) return 1;
 		    if(Info[playerid][pAdmin] == 0) return NoAutorizado
  			strcat(szMessage, "{DF013A}Comando /a {FFFFFF}- Admin Chat\n");
			strcat(szMessage, "{DF013A}Comando /desactivar {FFFFFF}- Activar/Desactivar AdminChat o MP's\n");
			strcat(szMessage, "{DF013A}Comando /gotoco {FFFFFF}- Ir a coordenadas\n");
			strcat(szMessage, "{DF013A}Comando /eventostaff {FFFFFF}- Ingresar a un evento como STAFF\n");
			strcat(szMessage, "{DF013A}Comando /w {FFFFFF}- Susurros\n");
			strcat(szMessage, "{DF013A}Comando /ls - /sf - /lv {FFFFFF}- Ir a LS/SF/LV\n");
			strcat(szMessage, "{DF013A}Comando /aa {FFFFFF}- Canal OOC administrativo\n");
			strcat(szMessage, "{DF013A}Comando /ar - /rr {FFFFFF}- Aceptar/Rechazar reportes\n");
			strcat(szMessage, "{DF013A}Comando /aduda - /rduda {FFFFFF}- Aceptar/Rechazar dudas");
			ShowPlayerDialog(playerid, DIALOG_ADMINH_1, DIALOG_STYLE_MSGBOX, "{DF013A}CMD Moderador", szMessage, ">>", "Salir");
		}
 		case DIALOG_ADMINH_1:
 		{
 		    if(!response) return 1;
 		    if(Info[playerid][pAdmin] <= 1) return NoAutorizado
  			strcat(szMessage, "{DF013A}Comando /lanzarvips {FFFFFF}- Anuncio sobre VIP's\n");
            strcat(szMessage, "{DF013A}Comando /lanzarfacc {FFFFFF}- Anuncio sobre Facciones");
			ShowPlayerDialog(playerid, DIALOG_ADMINH_2, DIALOG_STYLE_MSGBOX, "{DF013A}CMD Mod Global", szMessage, ">>", "<<");
		}
		case DIALOG_ADMINH_2:
		{
		    if(!response)
		    {
		        strcat(szMessage, "{DF013A}Comando /a {FFFFFF}- Admin Chat\n");
				strcat(szMessage, "{DF013A}Comando /desactivar {FFFFFF}- Desactivar AdminChat o MP's\n");
				strcat(szMessage, "{DF013A}Comando /gotoco {FFFFFF}- Ir a coordenadas\n");
				strcat(szMessage, "{DF013A}Comando /eventostaff {FFFFFF}- Ingresar a un evento como STAFF\n");
				strcat(szMessage, "{DF013A}Comando /w {FFFFFF}- Susurros\n");
				strcat(szMessage, "{DF013A}Comando /ls - /sf - /lv {FFFFFF}- Ir a LS/SF/LV\n");
				strcat(szMessage, "{DF013A}Comando /aa {FFFFFF}- Canal OOC administrativo\n");
				strcat(szMessage, "{DF013A}Comando /ar - /rr {FFFFFF}- Aceptar/Rechazar reportes\n");
				strcat(szMessage, "{DF013A}Comando /aduda - /rduda {FFFFFF}- Aceptar/Rechazar dudas");
				ShowPlayerDialog(playerid, DIALOG_ADMINH_1, DIALOG_STYLE_MSGBOX, "{DF013A}CMD Moderador", szMessage, ">>", "Salir");
				return 1;
			}
			if(Info[playerid][pAdmin] <= 2) return NoAutorizado
			strcat(szMessage, "{DF013A}Comando /borrargraffiti {FFFFFF}- Borrar graffiti cercano\n");
			strcat(szMessage, "{DF013A}Comando /nofac {FFFFFF}- Desactivar chat de facciones (/f)\n");
			strcat(szMessage, "{DF013A}Comando /jetpack {FFFFFF}- Equiparse un Jetpack\n");
			strcat(szMessage, "{DF013A}Comando /aname - /rname {FFFFFF}- Aceptar/Rechazar cambio de nombre");
            ShowPlayerDialog(playerid, DIALOG_ADMINH_3, DIALOG_STYLE_MSGBOX, "{DF013A}CMD Mod Lider", szMessage, ">>", "<<");
		}
		case DIALOG_ADMINH_3:
		{
		    if(!response)
		    {
          		strcat(szMessage, "{DF013A}Comando /lanzarvips {FFFFFF}- Anuncio sobre VIP's\n");
          		strcat(szMessage, "{DF013A}Comando /lanzarfacc {FFFFFF}- Anuncio sobre Facciones");
				ShowPlayerDialog(playerid, DIALOG_ADMINH_2, DIALOG_STYLE_MSGBOX, "{DF013A}CMD Mod Global", szMessage, ">>", "<<");
				return 1;
			}
			if(Info[playerid][pAdmin] <= 3) return NoAutorizado
			strcat(szMessage, "{DF013A}Comando /gotonegocio {FFFFFF}- Ir a el exterior de un negocio\n");
			strcat(szMessage, "{DF013A}Comando /gotohouse {FFFFFF}- Ir a el exterior de una casa\n");
			strcat(szMessage, "{DF013A}Comando /cnnn {FFFFFF}- Enviar noticia a los usuarios\n");
			strcat(szMessage, "{DF013A}Comando /ao {FFFFFF}- Admin OOC anuncio");
            ShowPlayerDialog(playerid, DIALOG_ADMINH_4, DIALOG_STYLE_MSGBOX, "{DF013A}CMD Admin Junior", szMessage, ">>", "<<");
		}
		case DIALOG_ADMINH_4:
		{
		    if(!response)
		    {
          		strcat(szMessage, "{DF013A}Comando /borrargraffiti {FFFFFF}- Borrar graffiti cercano\n");
				strcat(szMessage, "{DF013A}Comando /nofac {FFFFFF}- Desactivar chat de facciones (/f)\n");
				strcat(szMessage, "{DF013A}Comando /jetpack {FFFFFF}- Equiparse un Jetpack\n");
				strcat(szMessage, "{DF013A}Comando /aname - /rname {FFFFFF}- Aceptar/Rechazar cambio de nombre");
				ShowPlayerDialog(playerid, DIALOG_ADMINH_3, DIALOG_STYLE_MSGBOX, "{DF013A}CMD Mod Global", szMessage, ">>", "<<");
				return 1;
			}
			if(Info[playerid][pAdmin] <= 4) return NoAutorizado
			strcat(szMessage, "{DF013A}Comando /robobanco {FFFFFF}- Activar/Desactivar sistema de Robo al Banco\n");
			strcat(szMessage, "{DF013A}Comando /deletecp {FFFFFF}- Borrar vehiculo de jugador\n");
			strcat(szMessage, "{DF013A}Comando /pstat {FFFFFF}- Editar cuenta\n");
			strcat(szMessage, "{DF013A}Comando /techs {FFFFFF}- Ver tecnicos online\n");
			strcat(szMessage, "{DF013A}Comando /goto {FFFFFF}- Ir a...\n");
			strcat(szMessage, "{DF013A}Comando /goindoor {FFFFFF}- Ir al interior de una DynamicDoor\n");
			strcat(szMessage, "{DF013A}Comando /gotodoor {FFFFFF}- Ir al exterior de una DynamicDoor\n");
			strcat(szMessage, "{DF013A}Comando /mole {FFFFFF}- Enviar anuncio con número desconocido\n");
			strcat(szMessage, "{DF013A}Comando /vip {FFFFFF}- Chat VIP\n");
			strcat(szMessage, "{DF013A}Comando /togvip {FFFFFF}- Activar/Desactivar Chat VIP");
            ShowPlayerDialog(playerid, DIALOG_ADMINH_5, DIALOG_STYLE_MSGBOX, "{DF013A}CMD Administrador", szMessage, ">>", "<<");
		}
		case DIALOG_ADMINH_5:
		{
		    if(!response)
		    {
          		strcat(szMessage, "{DF013A}Comando /gotonegocio {FFFFFF}- Ir a el exterior de un negocio\n");
				strcat(szMessage, "{DF013A}Comando /gotohouse {FFFFFF}- Ir a el exterior de una casa\n");
				strcat(szMessage, "{DF013A}Comando /cnnn {FFFFFF}- Enviar noticia a los usuarios\n");
				strcat(szMessage, "{DF013A}Comando /ao {FFFFFF}- Admin OOC anuncio");
				ShowPlayerDialog(playerid, DIALOG_ADMINH_4, DIALOG_STYLE_MSGBOX, "{DF013A}CMD Mod Global", szMessage, ">>", "<<");
				return 1;
			}
			if(Info[playerid][pAdmin] <= 5) return NoAutorizado
			strcat(szMessage, "{DF013A}Comando /deletecarro {FFFFFF}- Borrar vehiculo\n");
			strcat(szMessage, "{DF013A}Comando /nombreadmin {FFFFFF}- Configurar nombre administrativo\n");
			strcat(szMessage, "{DF013A}Comando /mps {FFFFFF}- Ver/Ocultar MP's");
            ShowPlayerDialog(playerid, DIALOG_ADMINH_6, DIALOG_STYLE_MSGBOX, "{DF013A}CMD Admin General", szMessage, ">>", "<<");
		}
		case DIALOG_ADMINH_6:
		{
		    if(!response)
		    {
          		strcat(szMessage, "{DF013A}Comando /robobanco {FFFFFF}- Activar/Desactivar sistema de Robo al Banco\n");
				strcat(szMessage, "{DF013A}Comando /deletecp {FFFFFF}- Borrar vehiculo de jugador\n");
				strcat(szMessage, "{DF013A}Comando /pstat {FFFFFF}- Editar cuenta\n");
				strcat(szMessage, "{DF013A}Comando /techs {FFFFFF}- Ver tecnicos online\n");
				strcat(szMessage, "{DF013A}Comando /goto {FFFFFF}- Ir a...\n");
				strcat(szMessage, "{DF013A}Comando /goindoor {FFFFFF}- Ir al interior de una DynamicDoor\n");
				strcat(szMessage, "{DF013A}Comando /gotodoor {FFFFFF}- Ir al exterior de una DynamicDoor\n");
				strcat(szMessage, "{DF013A}Comando /mole {FFFFFF}- Enviar anuncio con número desconocido\n");
				strcat(szMessage, "{DF013A}Comando /vip {FFFFFF}- Chat VIP\n");
				strcat(szMessage, "{DF013A}Comando /togvip {FFFFFF}- Activar/Desactivar Chat VIP");
				ShowPlayerDialog(playerid, DIALOG_ADMINH_5, DIALOG_STYLE_MSGBOX, "{DF013A}CMD Administrador", szMessage, ">>", "<<");
				return 1;
			}
			if(Info[playerid][pAdmin] <= 6) return NoAutorizado
			strcat(szMessage, "{DF013A}Comando /noac {FFFFFF}- Activar/Desactivar AdminChat");
            ShowPlayerDialog(playerid, DIALOG_ADMINH_7, DIALOG_STYLE_MSGBOX, "{DF013A}CMD Director", szMessage, "Salir", "<<");
		}
		case DIALOG_ADMINH_7:
		{
		    if(response) return 1;
		    strcat(szMessage, "{DF013A}Comando /deletecarro {FFFFFF}- Borrar vehiculo\n");
			strcat(szMessage, "{DF013A}Comando /nombreadmin {FFFFFF}- Configurar nombre administrativo\n");
			strcat(szMessage, "{DF013A}Comando /mps {FFFFFF}- Ver/Ocultar MP's");
            ShowPlayerDialog(playerid, DIALOG_ADMINH_6, DIALOG_STYLE_MSGBOX, "{DF013A}CMD Admin General", szMessage, ">>", "<<");
		}
 		case TEST_0:
		{
	    	if(!response) return 1;
	    	switch(listitem)
			{
	        	case 0:
	        	{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_1, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa PowerGaming?","Correr y saltar al mismo tiempo\nConfundir canales (OOC - IC)\nMatar sin razon\nProvocar actos que estén fuera de la realidad\nAtropellar a un usuario hasta que muera\nMatar a un miembro de tu equipo", "Seleccionar", "");
				}
				case 1:
				{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_1, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa PowerGaming?","Correr y saltar al mismo tiempo\nConfundir canales (OOC - IC)\nMatar sin razon\nProvocar actos que estén fuera de la realidad\nAtropellar a un usuario hasta que muera\nMatar a un miembro de tu equipo", "Seleccionar", "");
				}
				case 2:
				{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_1, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa PowerGaming?","Correr y saltar al mismo tiempo\nConfundir canales (OOC - IC)\nMatar sin razon\nProvocar actos que estén fuera de la realidad\nAtropellar a un usuario hasta que muera\nMatar a un miembro de tu equipo", "Seleccionar", "");
				}
				case 3:
				{
                    ShowPlayerDialog(playerid, TEST_1, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa PowerGaming?","Correr y saltar al mismo tiempo\nConfundir canales (OOC - IC)\nMatar sin razon\nProvocar actos que estén fuera de la realidad\nAtropellar a un usuario hasta que muera\nMatar a un miembro de tu equipo", "Seleccionar", "");
				}
				case 4:
				{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_1, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa PowerGaming?","Correr y saltar al mismo tiempo\nConfundir canales (OOC - IC)\nMatar sin razon\nProvocar actos que estén fuera de la realidad\nAtropellar a un usuario hasta que muera\nMatar a un miembro de tu equipo", "Seleccionar", "");
				}
                case 5:
				{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_1, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa PowerGaming?","Correr y saltar al mismo tiempo\nConfundir canales (OOC - IC)\nMatar sin razon\nProvocar actos que estén fuera de la realidad\nAtropellar a un usuario hasta que muera\nMatar a un miembro de tu equipo", "Seleccionar", "");
				}
			}
		}
        case TEST_1:
		{
	    	if(!response) return 1;
	    	switch(listitem){
	        	case 0:
	        	{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_2, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Bad Driving?","Confundir canales (OOC - IC)\nCorrer en Zig Zag\nProvocar actos que estén fuera de la realidad\nAtropellar a un usuario hasta que muera\nConducir de una manera anti-roleplay\nEstacionar mal un auto\nLa pérdida total de memoria del personaje", "Seleccionar", "");
				}
				case 1:
				{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_2, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Bad Driving?","Confundir canales (OOC - IC)\nCorrer en Zig Zag\nProvocar actos que estén fuera de la realidad\nAtropellar a un usuario hasta que muera\nConducir de una manera anti-roleplay\nEstacionar mal un auto\nLa pérdida total de memoria del personaje", "Seleccionar", "");
				}
				case 2:
				{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_2, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Bad Driving?","Confundir canales (OOC - IC)\nCorrer en Zig Zag\nProvocar actos que estén fuera de la realidad\nAtropellar a un usuario hasta que muera\nConducir de una manera anti-roleplay\nEstacionar mal un auto\nLa pérdida total de memoria del personaje", "Seleccionar", "");
				}
				case 3:
				{
					ShowPlayerDialog(playerid, TEST_2, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Bad Driving?","Confundir canales (OOC - IC)\nCorrer en Zig Zag\nProvocar actos que estén fuera de la realidad\nAtropellar a un usuario hasta que muera\nConducir de una manera anti-roleplay\nEstacionar mal un auto\nLa pérdida total de memoria del personaje", "Seleccionar", "");
				}
				case 4:
				{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_2, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Bad Driving?","Confundir canales (OOC - IC)\nCorrer en Zig Zag\nProvocar actos que estén fuera de la realidad\nAtropellar a un usuario hasta que muera\nConducir de una manera anti-roleplay\nEstacionar mal un auto\nLa pérdida total de memoria del personaje", "Seleccionar", "");
				}
                case 5:
				{
                    //Info[playerid][pTestErrores] += 1;
                    ShowPlayerDialog(playerid, TEST_2, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Bad Driving?","Confundir canales (OOC - IC)\nCorrer en Zig Zag\nProvocar actos que estén fuera de la realidad\nAtropellar a un usuario hasta que muera\nConducir de una manera anti-roleplay\nEstacionar mal un auto\nLa pérdida total de memoria del personaje", "Seleccionar", "");
				}
			}
		}
        case TEST_2:
		{
	    	if(!response) return 1;
	    	switch(listitem){
	        	case 0:
	        	{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_3, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa In Character?"," Correr en Zig Zag\nEs un canal en el cual tu puedes hablar sobre la vida real\nAbusar de un usuario nuevo \nAtropellar a un usuario hasta que muera \nConducir de una manera anti-roleplay\nEstacionar mal un auto\nLa pérdida total de memoria del personaje\nEs un canal en el cual tú puedes hablar cosas del personaje", "Seleccionar", "");
				}
				case 1:
				{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_3, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa In Character?"," Correr en Zig Zag\nEs un canal en el cual tu puedes hablar sobre la vida real\nAbusar de un usuario nuevo \nAtropellar a un usuario hasta que muera \nConducir de una manera anti-roleplay\nEstacionar mal un auto\nLa pérdida total de memoria del personaje\nEs un canal en el cual tú puedes hablar cosas del personaje", "Seleccionar", "");
				}
				case 2:
				{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_3, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa In Character?"," Correr en Zig Zag\nEs un canal en el cual tu puedes hablar sobre la vida real\nAbusar de un usuario nuevo \nAtropellar a un usuario hasta que muera \nConducir de una manera anti-roleplay\nEstacionar mal un auto\nLa pérdida total de memoria del personaje\nEs un canal en el cual tú puedes hablar cosas del personaje", "Seleccionar", "");
				}
				case 3:
				{
				    //Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_3, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa In Character?"," Correr en Zig Zag\nEs un canal en el cual tu puedes hablar sobre la vida real\nAbusar de un usuario nuevo \nAtropellar a un usuario hasta que muera \nConducir de una manera anti-roleplay\nEstacionar mal un auto\nLa pérdida total de memoria del personaje\nEs un canal en el cual tú puedes hablar cosas del personaje", "Seleccionar", "");
				}
				case 4:
				{
					ShowPlayerDialog(playerid, TEST_3, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa In Character?"," Correr en Zig Zag\nEs un canal en el cual tu puedes hablar sobre la vida real\nAbusar de un usuario nuevo \nAtropellar a un usuario hasta que muera \nConducir de una manera anti-roleplay\nEstacionar mal un auto\nLa pérdida total de memoria del personaje\nEs un canal en el cual tú puedes hablar cosas del personaje", "Seleccionar", "");
				}
                case 5:
				{
                    //Info[playerid][pTestErrores] += 1;
                	ShowPlayerDialog(playerid, TEST_3, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa In Character?"," Correr en Zig Zag\nEs un canal en el cual tu puedes hablar sobre la vida real\nAbusar de un usuario nuevo \nAtropellar a un usuario hasta que muera \nConducir de una manera anti-roleplay\nEstacionar mal un auto\nLa pérdida total de memoria del personaje\nEs un canal en el cual tú puedes hablar cosas del personaje", "Seleccionar", "");
				}
				case 6:
                {
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_3, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa In Character?"," Correr en Zig Zag\nEs un canal en el cual tu puedes hablar sobre la vida real\nAbusar de un usuario nuevo \nAtropellar a un usuario hasta que muera \nConducir de una manera anti-roleplay\nEstacionar mal un auto\nLa pérdida total de memoria del personaje\nEs un canal en el cual tú puedes hablar cosas del personaje", "Seleccionar", "");
				}
			}
		}
        case TEST_3:
		{
	    	if(!response) return 1;
	    	switch(listitem){
	        	case 0:
	        	{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_4, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Out Of Character?"," Atropellar a un usuario hasta que muera\nEs un canal en el cual tú puedes hablar cosas del personaje\nEs un canal en el cual tú puedes hablar sobre la vida real\nConducir de una manera anti-roleplay\nAbusar de un usuario nuevo \nEstacionar mal un auto\nCorrer en Zig Zag\nLa pérdida total de memoria del personaje ", "Seleccionar", "");
				}
				case 1:
				{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_4, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Out Of Character?"," Atropellar a un usuario hasta que muera\nEs un canal en el cual tú puedes hablar cosas del personaje\nEs un canal en el cual tú puedes hablar sobre la vida real\nConducir de una manera anti-roleplay\nAbusar de un usuario nuevo \nEstacionar mal un auto\nCorrer en Zig Zag\nLa pérdida total de memoria del personaje ", "Seleccionar", "");
				}
				case 2:
				{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_4, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Out Of Character?"," Atropellar a un usuario hasta que muera\nEs un canal en el cual tú puedes hablar cosas del personaje\nEs un canal en el cual tú puedes hablar sobre la vida real\nConducir de una manera anti-roleplay\nAbusar de un usuario nuevo \nEstacionar mal un auto\nCorrer en Zig Zag\nLa pérdida total de memoria del personaje ", "Seleccionar", "");
				}
				case 3:
				{
				    //Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_4, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Out Of Character?"," Atropellar a un usuario hasta que muera\nEs un canal en el cual tú puedes hablar cosas del personaje\nEs un canal en el cual tú puedes hablar sobre la vida real\nConducir de una manera anti-roleplay\nAbusar de un usuario nuevo \nEstacionar mal un auto\nCorrer en Zig Zag\nLa pérdida total de memoria del personaje ", "Seleccionar", "");
				}
				case 4:
				{
				    //Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_4, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Out Of Character?"," Atropellar a un usuario hasta que muera\nEs un canal en el cual tú puedes hablar cosas del personaje\nEs un canal en el cual tú puedes hablar sobre la vida real\nConducir de una manera anti-roleplay\nAbusar de un usuario nuevo \nEstacionar mal un auto\nCorrer en Zig Zag\nLa pérdida total de memoria del personaje ", "Seleccionar", "");
				}
                case 5:
				{
                    //Info[playerid][pTestErrores] += 1;
                	ShowPlayerDialog(playerid, TEST_4, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Out Of Character?"," Atropellar a un usuario hasta que muera\nEs un canal en el cual tú puedes hablar cosas del personaje\nEs un canal en el cual tú puedes hablar sobre la vida real\nConducir de una manera anti-roleplay\nAbusar de un usuario nuevo \nEstacionar mal un auto\nCorrer en Zig Zag\nLa pérdida total de memoria del personaje ", "Seleccionar", "");
				}
				case 6:
                {
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_4, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Out Of Character?"," Atropellar a un usuario hasta que muera\nEs un canal en el cual tú puedes hablar cosas del personaje\nEs un canal en el cual tú puedes hablar sobre la vida real\nConducir de una manera anti-roleplay\nAbusar de un usuario nuevo \nEstacionar mal un auto\nCorrer en Zig Zag\nLa pérdida total de memoria del personaje ", "Seleccionar", "");
				}
                case 7:
                {
					ShowPlayerDialog(playerid, TEST_4, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Out Of Character?"," Atropellar a un usuario hasta que muera\nEs un canal en el cual tú puedes hablar cosas del personaje\nEs un canal en el cual tú puedes hablar sobre la vida real\nConducir de una manera anti-roleplay\nAbusar de un usuario nuevo \nEstacionar mal un auto\nCorrer en Zig Zag\nLa pérdida total de memoria del personaje ", "Seleccionar", "");
				}
			}
		}
        case TEST_4:
		{
	    	if(!response) return 1;
	    	switch(listitem){
	        	case 0:
	        	{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_5, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Character Kill?"," Conducir de una manera anti-roleplay\nAtropellar a un usuario hasta que muera\nEs un canal en el cual tú puedes hablar cosas del personaje\nEstacionar mal un auto\nEs un canal en el cual tú puedes hablar sobre la vida real\nCorrer en Zig Zag\nAbusar de un usuario nuevo \nMuerte total y absoluta de un Personaje", "Seleccionar", "");
				}
				case 1:
				{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_5, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Character Kill?"," Conducir de una manera anti-roleplay\nAtropellar a un usuario hasta que muera\nEs un canal en el cual tú puedes hablar cosas del personaje\nEstacionar mal un auto\nEs un canal en el cual tú puedes hablar sobre la vida real\nCorrer en Zig Zag\nAbusar de un usuario nuevo \nMuerte total y absoluta de un Personaje", "Seleccionar", "");
				}
				case 2:
				{
					ShowPlayerDialog(playerid, TEST_5, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Character Kill?"," Conducir de una manera anti-roleplay\nAtropellar a un usuario hasta que muera\nEs un canal en el cual tú puedes hablar cosas del personaje\nEstacionar mal un auto\nEs un canal en el cual tú puedes hablar sobre la vida real\nCorrer en Zig Zag\nAbusar de un usuario nuevo \nMuerte total y absoluta de un Personaje", "Seleccionar", "");
				}
				case 3:
				{
				    //Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_5, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Character Kill?"," Conducir de una manera anti-roleplay\nAtropellar a un usuario hasta que muera\nEs un canal en el cual tú puedes hablar cosas del personaje\nEstacionar mal un auto\nEs un canal en el cual tú puedes hablar sobre la vida real\nCorrer en Zig Zag\nAbusar de un usuario nuevo \nMuerte total y absoluta de un Personaje", "Seleccionar", "");
				}
				case 4:
				{
				    //Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_5, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Character Kill?"," Conducir de una manera anti-roleplay\nAtropellar a un usuario hasta que muera\nEs un canal en el cual tú puedes hablar cosas del personaje\nEstacionar mal un auto\nEs un canal en el cual tú puedes hablar sobre la vida real\nCorrer en Zig Zag\nAbusar de un usuario nuevo \nMuerte total y absoluta de un Personaje", "Seleccionar", "");
				}
                case 5:
				{
                    //Info[playerid][pTestErrores] += 1;
                	ShowPlayerDialog(playerid, TEST_5, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Character Kill?"," Conducir de una manera anti-roleplay\nAtropellar a un usuario hasta que muera\nEs un canal en el cual tú puedes hablar cosas del personaje\nEstacionar mal un auto\nEs un canal en el cual tú puedes hablar sobre la vida real\nCorrer en Zig Zag\nAbusar de un usuario nuevo \nMuerte total y absoluta de un Personaje", "Seleccionar", "");
				}
				case 6:
                {
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_5, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Character Kill?"," Conducir de una manera anti-roleplay\nAtropellar a un usuario hasta que muera\nEs un canal en el cual tú puedes hablar cosas del personaje\nEstacionar mal un auto\nEs un canal en el cual tú puedes hablar sobre la vida real\nCorrer en Zig Zag\nAbusar de un usuario nuevo \nMuerte total y absoluta de un Personaje", "Seleccionar", "");
				}
                case 7:
                {
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_5, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa Character Kill?"," Conducir de una manera anti-roleplay\nAtropellar a un usuario hasta que muera\nEs un canal en el cual tú puedes hablar cosas del personaje\nEstacionar mal un auto\nEs un canal en el cual tú puedes hablar sobre la vida real\nCorrer en Zig Zag\nAbusar de un usuario nuevo \nMuerte total y absoluta de un Personaje", "Seleccionar", "");
				}
			}
		}
        case TEST_5:
		{
	    	if(!response) return 1;
	    	switch(listitem){
	        	case 0:
	        	{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_6, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Qué son los NPC's?","Son los usuarios que no saben rolear y hay que enseñarles\nSon los administradores u operadores de juego\nSon las personas que deberían estar en la ciudad, pero no se ven.\nNinguna de las respuestas es correcta, NPC no existe.", "Seleccionar", "");
				}
				case 1:
				{
					//Info[playerid][pTestErrores] += 1;
				    ShowPlayerDialog(playerid, TEST_6, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Qué son los NPC's?","Son los usuarios que no saben rolear y hay que enseñarles\nSon los administradores u operadores de juego\nSon las personas que deberían estar en la ciudad, pero no se ven.\nNinguna de las respuestas es correcta, NPC no existe.", "Seleccionar", "");
				}
				case 2:
				{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_6, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Qué son los NPC's?","Son los usuarios que no saben rolear y hay que enseñarles\nSon los administradores u operadores de juego\nSon las personas que deberían estar en la ciudad, pero no se ven.\nNinguna de las respuestas es correcta, NPC no existe.", "Seleccionar", "");
				}
				case 3:
				{
				    //Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_6, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Qué son los NPC's?","Son los usuarios que no saben rolear y hay que enseñarles\nSon los administradores u operadores de juego\nSon las personas que deberían estar en la ciudad, pero no se ven.\nNinguna de las respuestas es correcta, NPC no existe.", "Seleccionar", "");
				}
				case 4:
				{
				    //Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_6, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Qué son los NPC's?","Son los usuarios que no saben rolear y hay que enseñarles\nSon los administradores u operadores de juego\nSon las personas que deberían estar en la ciudad, pero no se ven.\nNinguna de las respuestas es correcta, NPC no existe.", "Seleccionar", "");
				}
                case 5:
				{
                    //Info[playerid][pTestErrores] += 1;
                	ShowPlayerDialog(playerid, TEST_6, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Qué son los NPC's?","Son los usuarios que no saben rolear y hay que enseñarles\nSon los administradores u operadores de juego\nSon las personas que deberían estar en la ciudad, pero no se ven.\nNinguna de las respuestas es correcta, NPC no existe.", "Seleccionar", "");
				}
				case 6:
                {
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_6, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Qué son los NPC's?","Son los usuarios que no saben rolear y hay que enseñarles\nSon los administradores u operadores de juego\nSon las personas que deberían estar en la ciudad, pero no se ven.\nNinguna de las respuestas es correcta, NPC no existe.", "Seleccionar", "");
				}
                case 7:
                {
					ShowPlayerDialog(playerid, TEST_6, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Qué son los NPC's?","Son los usuarios que no saben rolear y hay que enseñarles\nSon los administradores u operadores de juego\nSon las personas que deberían estar en la ciudad, pero no se ven.\nNinguna de las respuestas es correcta, NPC no existe.", "Seleccionar", "");
				}
			}
		}
        case TEST_6:
		{
	    	if(!response) return 1;
	    	switch(listitem){
	        	case 0:
	        	{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_7, DIALOG_STYLE_LIST, ""COL_GENERAL"Huyes a pie, la policía te rodea y apunta, ¿qué debes hacer?","Tomo mi arma e intento abatirlos a todos.\nEsquivar las balas corriendo en zig-zag.\nSi muevo un pelo me coserán a tiros, mejor me rindo.\nAgito mi arma para que piensen que voy a usarla y huyo.\nMe hago invisible, así no podran verme.", "Seleccionar", "");
				}
				case 1:
				{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_7, DIALOG_STYLE_LIST, ""COL_GENERAL"Huyes a pie, la policía te rodea y apunta, ¿qué debes hacer?","Tomo mi arma e intento abatirlos a todos.\nEsquivar las balas corriendo en zig-zag.\nSi muevo un pelo me coserán a tiros, mejor me rindo.\nAgito mi arma para que piensen que voy a usarla y huyo.\nMe hago invisible, así no podran verme.", "Seleccionar", "");
				}
				case 2:
				{
					ShowPlayerDialog(playerid, TEST_7, DIALOG_STYLE_LIST, ""COL_GENERAL"Huyes a pie, la policía te rodea y apunta, ¿qué debes hacer?","Tomo mi arma e intento abatirlos a todos.\nEsquivar las balas corriendo en zig-zag.\nSi muevo un pelo me coserán a tiros, mejor me rindo.\nAgito mi arma para que piensen que voy a usarla y huyo.\nMe hago invisible, así no podran verme.", "Seleccionar", "");
				}
				case 3:
				{
				    //Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_7, DIALOG_STYLE_LIST, ""COL_GENERAL"Huyes a pie, la policía te rodea y apunta, ¿qué debes hacer?","Tomo mi arma e intento abatirlos a todos.\nEsquivar las balas corriendo en zig-zag.\nSi muevo un pelo me coserán a tiros, mejor me rindo.\nAgito mi arma para que piensen que voy a usarla y huyo.\nMe hago invisible, así no podran verme.", "Seleccionar", "");
				}
				case 4:
				{
				    //Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_7, DIALOG_STYLE_LIST, ""COL_GENERAL"Huyes a pie, la policía te rodea y apunta, ¿qué debes hacer?","Tomo mi arma e intento abatirlos a todos.\nEsquivar las balas corriendo en zig-zag.\nSi muevo un pelo me coserán a tiros, mejor me rindo.\nAgito mi arma para que piensen que voy a usarla y huyo.\nMe hago invisible, así no podran verme.", "Seleccionar", "");
				}
                case 5:
				{
                    //Info[playerid][pTestErrores] += 1;
                	ShowPlayerDialog(playerid, TEST_7, DIALOG_STYLE_LIST, ""COL_GENERAL"Huyes a pie, la policía te rodea y apunta, ¿qué debes hacer?","Tomo mi arma e intento abatirlos a todos.\nEsquivar las balas corriendo en zig-zag.\nSi muevo un pelo me coserán a tiros, mejor me rindo.\nAgito mi arma para que piensen que voy a usarla y huyo.\nMe hago invisible, así no podran verme.", "Seleccionar", "");
				}
				case 6:
                {
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_7, DIALOG_STYLE_LIST, ""COL_GENERAL"Huyes a pie, la policía te rodea y apunta, ¿qué debes hacer?","Tomo mi arma e intento abatirlos a todos.\nEsquivar las balas corriendo en zig-zag.\nSi muevo un pelo me coserán a tiros, mejor me rindo.\nAgito mi arma para que piensen que voy a usarla y huyo.\nMe hago invisible, así no podran verme.", "Seleccionar", "");
				}
			}
		}
        case TEST_7:
		{
	    	if(!response) return 1;
	    	switch(listitem){
	        	case 0:
	        	{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_8, DIALOG_STYLE_LIST, ""COL_GENERAL"Quieres conseguir un arma, ¿qué harías?","Envió un anuncio para que me llame algún vendedor de armas\nVoy por la calle preguntando para que me vendan un arma.\nVoy al departamento de policías y pido armas.\nNinguna es correcta.\nTodas son correctas.", "Seleccionar", "");
				}
				case 1:
				{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_8, DIALOG_STYLE_LIST, ""COL_GENERAL"Quieres conseguir un arma, ¿qué harías?","Envió un anuncio para que me llame algún vendedor de armas\nVoy por la calle preguntando para que me vendan un arma.\nVoy al departamento de policías y pido armas.\nNinguna es correcta.\nTodas son correctas.", "Seleccionar", "");
				}
				case 2:
				{
					ShowPlayerDialog(playerid, TEST_8, DIALOG_STYLE_LIST, ""COL_GENERAL"Quieres conseguir un arma, ¿qué harías?","Envió un anuncio para que me llame algún vendedor de armas\nVoy por la calle preguntando para que me vendan un arma.\nVoy al departamento de policías y pido armas.\nNinguna es correcta.\nTodas son correctas.", "Seleccionar", "");
				}
				case 3:
				{
				    //Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_8, DIALOG_STYLE_LIST, ""COL_GENERAL"Quieres conseguir un arma, ¿qué harías?","Envió un anuncio para que me llame algún vendedor de armas\nVoy por la calle preguntando para que me vendan un arma.\nVoy al departamento de policías y pido armas.\nNinguna es correcta.\nTodas son correctas.", "Seleccionar", "");
				}
				case 4:
				{
				    //Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_8, DIALOG_STYLE_LIST, ""COL_GENERAL"Quieres conseguir un arma, ¿qué harías?","Envió un anuncio para que me llame algún vendedor de armas\nVoy por la calle preguntando para que me vendan un arma.\nVoy al departamento de policías y pido armas.\nNinguna es correcta.\nTodas son correctas.", "Seleccionar", "");
				}
                case 5:
				{
                    //Info[playerid][pTestErrores] += 1;
                	ShowPlayerDialog(playerid, TEST_8, DIALOG_STYLE_LIST, ""COL_GENERAL"Quieres conseguir un arma, ¿qué harías?","Envió un anuncio para que me llame algún vendedor de armas\nVoy por la calle preguntando para que me vendan un arma.\nVoy al departamento de policías y pido armas.\nNinguna es correcta.\nTodas son correctas.", "Seleccionar", "");
				}
				case 6:
                {
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_8, DIALOG_STYLE_LIST, ""COL_GENERAL"Quieres conseguir un arma, ¿qué harías?","Envió un anuncio para que me llame algún vendedor de armas\nVoy por la calle preguntando para que me vendan un arma.\nVoy al departamento de policías y pido armas.\nNinguna es correcta.\nTodas son correctas.", "Seleccionar", "");
				}
                case 7:
                {
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_8, DIALOG_STYLE_LIST, ""COL_GENERAL"Quieres conseguir un arma, ¿qué harías?","Envió un anuncio para que me llame algún vendedor de armas\nVoy por la calle preguntando para que me vendan un arma.\nVoy al departamento de policías y pido armas.\nNinguna es correcta.\nTodas son correctas.", "Seleccionar", "");
				}
			}
		}
        case TEST_8:
		{
	    	if(!response) return 1;
	    	switch(listitem){
	        	case 0:
	        	{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_9, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Donde y en que momento puedo estar AFK?","Donde sea y cuando se me de la gana.\nEn ningun lugar ni momento, debo desconectarme.\nLe pido a un administrador que me lleve lejos y ahi me quedo.\nLo reporto al staff para que no me kickeen.", "Seleccionar", "");
				}
				case 1:
				{
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_9, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Donde y en que momento puedo estar AFK?","Donde sea y cuando se me de la gana.\nEn ningun lugar ni momento, debo desconectarme.\nLe pido a un administrador que me lleve lejos y ahi me quedo.\nLo reporto al staff para que no me kickeen.", "Seleccionar", "");
				}
				case 2:
				{
				    //Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_9, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Donde y en que momento puedo estar AFK?","Donde sea y cuando se me de la gana.\nEn ningun lugar ni momento, debo desconectarme.\nLe pido a un administrador que me lleve lejos y ahi me quedo.\nLo reporto al staff para que no me kickeen.", "Seleccionar", "");
				}
				case 3:
				{
					ShowPlayerDialog(playerid, TEST_9, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Donde y en que momento puedo estar AFK?","Donde sea y cuando se me de la gana.\nEn ningun lugar ni momento, debo desconectarme.\nLe pido a un administrador que me lleve lejos y ahi me quedo.\nLo reporto al staff para que no me kickeen.", "Seleccionar", "");
				}
				case 4:
				{
				    //Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_9, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Donde y en que momento puedo estar AFK?","Donde sea y cuando se me de la gana.\nEn ningun lugar ni momento, debo desconectarme.\nLe pido a un administrador que me lleve lejos y ahi me quedo.\nDentro de mi casa, escondido.", "Seleccionar", "");
				}
                case 5:
				{
                    //Info[playerid][pTestErrores] += 1;
                	ShowPlayerDialog(playerid, TEST_9, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Donde y en que momento puedo estar AFK?","Donde sea y cuando se me de la gana.\nEn ningun lugar ni momento, debo desconectarme.\nLe pido a un administrador que me lleve lejos y ahi me quedo.\nDentro de mi casa, escondido.", "Seleccionar", "");
				}
				case 6:
                {
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_9, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Donde y en que momento puedo estar AFK?","Donde sea y cuando se me de la gana.\nEn ningun lugar ni momento, debo desconectarme.\nLe pido a un administrador que me lleve lejos y ahi me quedo.\nDentro de mi casa, escondido.", "Seleccionar", "");
				}
                case 7:
                {
					//Info[playerid][pTestErrores] += 1;
					ShowPlayerDialog(playerid, TEST_9, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Donde y en que momento puedo estar AFK?","Donde sea y cuando se me de la gana.\nEn ningun lugar ni momento, debo desconectarme.\nLe pido a un administrador que me lleve lejos y ahi me quedo.\nDentro de mi casa, escondido.", "Seleccionar", "");
				}
			}
		}
        case TEST_9:
		{
	    	if(!response) return 1;
	    	switch(listitem){
	        	case 0:
	        	{
                    //Info[playerid][pTestErrores] += 1;
	        		if(Info[playerid][pReg] == 0)
					{
					    Info[playerid][pReg] = 1;
                        new rt[] = "{FFFFFF}Has completado satisfactoriamente el test de roleplay.\n\n{FFFFFF}Esperamos que respetes las reglas de rol.\n\n{FFFFFF}Para mas informacion puedes ingresar a nuestro foro para leer las reglas.\n{FFFFFF}Suerte! Gracias por preferirnos\n\n{FFFFFF}Bienvenido a New Paradise RP.";
	                    ShowPlayerDialog(playerid,DIALOG_REG_FIN2,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Fin del Test", rt,"Finalizar","");

					    /*
             			Info[playerid][pTestErrores] = 0;
	    	 		    new rt[] = "{FFFFFF}No has podido aprobar en el test de RP, te daremos otra oportunidad.\n\n{FFFFFF}Comenzaras a contestar nuevamente el test, no podras completar tu registro hasta que lo hagas correctamente.\n\n{FFFFFF}Te deseamos mucha suerte y recuerda: esto es para mantener el orden dentro del servidor.\n\n{FFFFFF}¿Preparado?";
                     	ShowPlayerDialog(playerid,DIALOG_REG_FIN1,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Fin del Test", rt,"Iniciar","");
					   	return 1; */
					}
					else
					{
                        Info[playerid][pReg] = 1;
                        new rt[] = "{FFFFFF}Has completado satisfactoriamente el test de roleplay.\n\n{FFFFFF}Esperamos que respetes las reglas de rol.\n\n{FFFFFF}Para mas informacion puedes ingresar a nuestro foro para leer las reglas.\n{FFFFFF}Suerte! Gracias por preferirnos\n\n{FFFFFF}Bienvenido a New Paradise RP.";
	                    ShowPlayerDialog(playerid,DIALOG_REG_FIN2,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Fin del Test", rt,"Finalizar","");
					}
				}
				case 1:
				{
	        		//Info[playerid][pTestErrores] += 1;
	        		if(Info[playerid][pReg] == 0)
					{
					    Info[playerid][pReg] = 1;
                        new rt[] = "{FFFFFF}Has completado satisfactoriamente el test de roleplay.\n\n{FFFFFF}Esperamos que respetes las reglas de rol.\n\n{FFFFFF}Para mas informacion puedes ingresar a nuestro foro para leer las reglas.\n{FFFFFF}Suerte! Gracias por preferirnos\n\n{FFFFFF}Bienvenido a New Paradise RP.";
	                    ShowPlayerDialog(playerid,DIALOG_REG_FIN2,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Fin del Test", rt,"Finalizar","");

					    /*
             			Info[playerid][pTestErrores] = 0;
	    	 		    new rt[] = "{FFFFFF}No has podido aprobar en el test de RP, te daremos otra oportunidad.\n\n{FFFFFF}Comenzaras a contestar nuevamente el test, no podras completar tu registro hasta que lo hagas correctamente.\n\n{FFFFFF}Te deseamos mucha suerte y recuerda: esto es para mantener el orden dentro del servidor.\n\n{FFFFFF}¿Preparado?";
                     	ShowPlayerDialog(playerid,DIALOG_REG_FIN1,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Fin del Test", rt,"Iniciar","");
					   	return 1; */
					}
					else
					{
                        Info[playerid][pReg] = 1;
                        new rt[] = "{FFFFFF}Has completado satisfactoriamente el test de roleplay.\n\n{FFFFFF}Esperamos que respetes las reglas de rol.\n\n{FFFFFF}Para mas informacion puedes ingresar a nuestro foro para leer las reglas.\n{FFFFFF}Suerte! Gracias por preferirnos\n\n{FFFFFF}Bienvenido a New Paradise RP.";
	                    ShowPlayerDialog(playerid,DIALOG_REG_FIN2,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Fin del Test", rt,"Finalizar","");
					}
				}
				case 2:
				{
                    //Info[playerid][pTestErrores] += 1;
	        		if(Info[playerid][pReg] == 0)
					{
					    Info[playerid][pReg] = 1;
                        new rt[] = "{FFFFFF}Has completado satisfactoriamente el test de roleplay.\n\n{FFFFFF}Esperamos que respetes las reglas de rol.\n\n{FFFFFF}Para mas informacion puedes ingresar a nuestro foro para leer las reglas.\n{FFFFFF}Suerte! Gracias por preferirnos\n\n{FFFFFF}Bienvenido a New Paradise RP.";
	                    ShowPlayerDialog(playerid,DIALOG_REG_FIN2,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Fin del Test", rt,"Finalizar","");

					    /*
             			Info[playerid][pTestErrores] = 0;
	    	 		    new rt[] = "{FFFFFF}No has podido aprobar en el test de RP, te daremos otra oportunidad.\n\n{FFFFFF}Comenzaras a contestar nuevamente el test, no podras completar tu registro hasta que lo hagas correctamente.\n\n{FFFFFF}Te deseamos mucha suerte y recuerda: esto es para mantener el orden dentro del servidor.\n\n{FFFFFF}¿Preparado?";
                     	ShowPlayerDialog(playerid,DIALOG_REG_FIN1,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Fin del Test", rt,"Iniciar","");
					   	return 1; */
					}
					else
					{
                        Info[playerid][pReg] = 1;
                        new rt[] = "{FFFFFF}Has completado satisfactoriamente el test de roleplay.\n\n{FFFFFF}Esperamos que respetes las reglas de rol.\n\n{FFFFFF}Para mas informacion puedes ingresar a nuestro foro para leer las reglas.\n{FFFFFF}Suerte! Gracias por preferirnos\n\n{FFFFFF}Bienvenido a New Paradise RP.";
	                    ShowPlayerDialog(playerid,DIALOG_REG_FIN2,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Fin del Test", rt,"Finalizar","");
					}
				}
				case 3:
				{
                    //Info[playerid][pTestErrores] += 1;
	        		if(Info[playerid][pReg] == 0)
					{
					    Info[playerid][pReg] = 1;
                        new rt[] = "{FFFFFF}Has completado satisfactoriamente el test de roleplay.\n\n{FFFFFF}Esperamos que respetes las reglas de rol.\n\n{FFFFFF}Para mas informacion puedes ingresar a nuestro foro para leer las reglas.\n{FFFFFF}Suerte! Gracias por preferirnos\n\n{FFFFFF}Bienvenido a New Paradise RP.";
	                    ShowPlayerDialog(playerid,DIALOG_REG_FIN2,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Fin del Test", rt,"Finalizar","");
	                    
					    /*
             			Info[playerid][pTestErrores] = 0;
	    	 		    new rt[] = "{FFFFFF}No has podido aprobar en el test de RP, te daremos otra oportunidad.\n\n{FFFFFF}Comenzaras a contestar nuevamente el test, no podras completar tu registro hasta que lo hagas correctamente.\n\n{FFFFFF}Te deseamos mucha suerte y recuerda: esto es para mantener el orden dentro del servidor.\n\n{FFFFFF}¿Preparado?";
                     	ShowPlayerDialog(playerid,DIALOG_REG_FIN1,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Fin del Test", rt,"Iniciar","");
					   	return 1; */
					}
					else
					{
                        Info[playerid][pReg] = 1;
                        new rt[] = "{FFFFFF}Has completado satisfactoriamente el test de roleplay.\n\n{FFFFFF}Esperamos que respetes las reglas de rol.\n\n{FFFFFF}Para mas informacion puedes ingresar a nuestro foro para leer las reglas.\n{FFFFFF}Suerte! Gracias por preferirnos\n\n{FFFFFF}Bienvenido a New Paradise RP.";
	                    ShowPlayerDialog(playerid,DIALOG_REG_FIN2,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Fin del Test", rt,"Finalizar","");
					}
				}
			}
		}
    	case TESTLIC_0:
		{
	    	if(!response) return 1;
	    	switch(listitem)
			{
	        	case 0:ShowPlayerDialog(playerid, TESTLIC_1, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Para qué sirven las luces de los vehículos?","Para hacer señales.\nPara ver los carteles.\nPara ver, ser vistos y hacer señales.", "Seleccionar", "");
				case 1:ShowPlayerDialog(playerid, TESTLIC_1, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Para qué sirven las luces de los vehículos?","Para hacer señales.\nPara ver los carteles.\nPara ver, ser vistos y hacer señales.", "Seleccionar", "");
				case 2:ShowPlayerDialog(playerid, TESTLIC_1, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Para qué sirven las luces de los vehículos?","Para hacer señales.\nPara ver los carteles.\nPara ver, ser vistos y hacer señales.", "Seleccionar", "");
			}
	    }
	    case TESTLIC_1:
		{
		    if(!response) return 1;
		    switch(listitem)
			{
		        case 0:
		        {
	                ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_3, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Qué utilidad tienen los semaforos?","Decorativos, no tienen utilidad.\nPara regular el transito.\nPara regular peatones.", "Seleccionar", "");
				}
				case 1:
				{
					ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_3, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Qué utilidad tienen los semaforos?","Decorativos, no tienen utilidad.\nPara regular el transito.\nPara regular peatones.", "Seleccionar", "");
				}
				case 2:
				{
					ShowPlayerDialog(playerid, TESTLIC_3, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Qué utilidad tienen los semaforos?","Decorativos, no tienen utilidad.\nPara regular el transito.\nPara regular peatones.", "Seleccionar", "");
				}
			}
		}
	    case TESTLIC_2:
		{
		    if(!response) return 1;
		    switch(listitem)
			{
		        case 0:
		        {
	                ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_3, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Qué utilidad tienen los cinturones de seguridad?","Disminuyen los daños físicos a las personas, en caso de accidentes\nPara estar ajustado al vehículo.\nSon útiles solo para altas velocidades.", "Seleccionar", "");
				}
				case 1:
				{
					ShowPlayerDialog(playerid, TESTLIC_3, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Qué utilidad tienen los cinturones de seguridad?","Disminuyen los daños físicos a las personas, en caso de accidentes\nPara estar ajustado al vehículo.\nSon útiles solo para altas velocidades.", "Seleccionar", "");
				}
				case 2:
				{
					ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_3, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Qué utilidad tienen los cinturones de seguridad?","Disminuyen los daños físicos a las personas, en caso de accidentes\nPara estar ajustado al vehículo.\nSon útiles solo para altas velocidades.", "Seleccionar", "");
				}
			}
		}
	    case TESTLIC_3:
		{
		    if(!response) return 1;
		    switch(listitem)
			{
		        case 0:
		        {
					ShowPlayerDialog(playerid, TESTLIC_4, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Es obligatorio el uso de cinturones de seguridad?","Sólo los que ocupen el asiento delantero.\nSí, sin excepción.\nÚnicamente cuando circulen en rutas o autopistas.", "Seleccionar", "");
				}
				case 1:
				{
					ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_4, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Es obligatorio el uso de cinturones de seguridad?","Sólo los que ocupen el asiento delantero.\nSí, sin excepción.\nÚnicamente cuando circulen en rutas o autopistas.", "Seleccionar", "");
				}
				case 2:
				{
	                ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_4, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Es obligatorio el uso de cinturones de seguridad?","Sólo los que ocupen el asiento delantero.\nSí, sin excepción.\nÚnicamente cuando circulen en rutas o autopistas.", "Seleccionar", "");
				}
			}
		}
	    case TESTLIC_4:
		{
		    if(!response) return 1;
		    switch(listitem)
			{
		        case 0:
		        {
					ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_5, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Cuál es la velocidad máxima permitida en avenidas?","80 km/h.\n60 km/h.\n40 km/h", "Seleccionar", "");
				}
				case 1:
				{
					ShowPlayerDialog(playerid, TESTLIC_5, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Cuál es la velocidad máxima permitida en avenidas?","80 km/h.\n60 km/h.\n40 km/h", "Seleccionar", "");
				}
				case 2:
				{
	                ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_5, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Cuál es la velocidad máxima permitida en avenidas?","80 km/h.\n60 km/h.\n40 km/h", "Seleccionar", "");
				}
			}
		}
	    case TESTLIC_5:
		{
		    if(!response) return 1;
		    switch(listitem)
			{
		        case 0:
		        {
					ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_6, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Cuál es la velocidad máxima permitida en calles?","50 km/h.\n30 km/h.\n40 km/h", "Seleccionar", "");
				}
				case 1:
				{
					ShowPlayerDialog(playerid, TESTLIC_6, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Cuál es la velocidad máxima permitida en calles?","50 km/h.\n30 km/h.\n40 km/h", "Seleccionar", "");
				}
				case 2:
				{
	                ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_6, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Cuál es la velocidad máxima permitida en calles?","50 km/h.\n30 km/h.\n40 km/h", "Seleccionar", "");
				}
			}
		}
	    case TESTLIC_6:
		{
		    if(!response) return 1;
		    switch(listitem)
			{
		        case 0:
		        {
	                ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_7, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Cuál es la velocidad máxima permitida en autopistas?","200 km/h.\n150 km/h.\n130 km/h.", "Seleccionar", "");
				}
				case 1:
				{
					ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_7, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Cuál es la velocidad máxima permitida en autopistas?","200 km/h.\n150 km/h.\n130 km/h", "Seleccionar", "");
				}
				case 2:
				{
					ShowPlayerDialog(playerid, TESTLIC_7, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Cuál es la velocidad máxima permitida en autopistas?","200 km/h.\n150 km/h.\n130 km/h", "Seleccionar", "");
				}
			}
		}
	    case TESTLIC_7:
		{
		    if(!response) return 1;
		    switch(listitem)
			{
   				case 0:
		        {
	                ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_8, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Cuál es el nivel máximo de alcoholemia admitido para conducir?","0,8 gr. por litro de sangre.\n0,5 gr. por litro de sangre.\n1,5 gr. por litro de sangre.", "Seleccionar", "");
				}
				case 1:
				{
					ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_8, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Cuál es el nivel máximo de alcoholemia admitido para conducir?","0,8 gr. por litro de sangre.\n0,5 gr. por litro de sangre.\n1,5 gr. por litro de sangre.", "Seleccionar", "");
				}
				case 2:
				{
					ShowPlayerDialog(playerid, TESTLIC_8, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Cuál es el nivel máximo de alcoholemia admitido para conducir?","0,8 gr. por litro de sangre.\n0,5 gr. por litro de sangre.\n1,5 gr. por litro de sangre.", "Seleccionar", "");
				}
			}
		}
	    case TESTLIC_8:
		{
		    if(!response) return 1;
		    switch(listitem)
			{
		        case 0:
		        {
	                ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_9, DIALOG_STYLE_LIST, ""COL_GENERAL"En la senda peatonal, usted debe:","Disminuir la marcha y tener cuidado.\nParar y cederle el paso al peatón.\nSeguir y atravesar el cruce, porque tiene prioridad.", "Seleccionar", "");
				}
				case 1:
				{
					ShowPlayerDialog(playerid, TESTLIC_9, DIALOG_STYLE_LIST, ""COL_GENERAL"En la senda peatonal, usted debe:","Disminuir la marcha y tener cuidado.\nParar y cederle el paso al peatón.\nSeguir y atravesar el cruce, porque tiene prioridad.", "Seleccionar", "");
				}
				case 2:
				{
					ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_9, DIALOG_STYLE_LIST, ""COL_GENERAL"En la senda peatonal, usted debe:","Disminuir la marcha y tener cuidado.\nParar y cederle el paso al peatón.\nSeguir y atravesar el cruce, porque tiene prioridad.", "Seleccionar", "");
				}
			}
		}
	    case TESTLIC_9:
		{
		    if(!response) return 1;
		    switch(listitem)
			{
		        case 0:
		        {
	                ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_10, DIALOG_STYLE_LIST, ""COL_GENERAL"Se acerca una ambulancia o patrulla, ¿qué debe hacer?","Interrumpir el paso, que espere.\nFacilitar el paso.\nPonerme enfrente y acelerar.", "Seleccionar", "");
				}
				case 1:
				{
					ShowPlayerDialog(playerid, TESTLIC_10, DIALOG_STYLE_LIST, ""COL_GENERAL"Se acerca una ambulancia o patrulla, ¿qué debe hacer?","Interrumpir el paso, que espere.\nFacilitar el paso.\nPonerme enfrente y acelerar.", "Seleccionar", "");
				}
				case 2:
				{
					ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_10, DIALOG_STYLE_LIST, ""COL_GENERAL"Se acerca una ambulancia o patrulla, ¿qué debe hacer?","Interrumpir el paso, que espere.\nFacilitar el paso.\nPonerme enfrente y acelerar.", "Seleccionar", "");
				}
			}
		}
	    case TESTLIC_10:
		{
		    if(!response) return 1;
		    switch(listitem)
			{
		        case 0:
		        {
	                ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_11, DIALOG_STYLE_LIST, ""COL_GENERAL"Adelantarse en una curva está permitido:","Solo si la curva no es muy cerrada.\nSolo si no viene un vehículo en sentido contrario.\nNo, está prohibido.", "Seleccionar", "");
				}
				case 1:
				{
					ShowPlayerDialog(playerid, TESTLIC_11, DIALOG_STYLE_LIST, ""COL_GENERAL"Adelantarse en una curva está permitido:","Solo si la curva no es muy cerrada.\nSolo si no viene un vehículo en sentido contrario.\nNo, está prohibido.", "Seleccionar", "");
				}
				case 2:
				{
					ErroresLic[playerid] += 1;
					ShowPlayerDialog(playerid, TESTLIC_11, DIALOG_STYLE_LIST, ""COL_GENERAL"Adelantarse en una curva está permitido:","Solo si la curva no es muy cerrada.\nSolo si no viene un vehículo en sentido contrario.\nNo, está prohibido.", "Seleccionar", "");
				}
			}
		}
	    case TESTLIC_11:
		{
		    if(!response) return 1;
		    switch(listitem)
			{
		        case 0:
		        {
	                new string[256];
	                ErroresLic[playerid] += 1;
	                if(ErroresLic[playerid] > 3)
					{
						format(string, sizeof(string), "{FFFFFF}Has finalizado la parte teorica del examen de conduccion,\n{FFFFFF}lamentablemente "COL_GENERAL"has desaprobado.\n{FFFFFF}Puedes volver a iniciarlo en cuanto estes listo.", ErroresLic[playerid]);
						ShowPlayerDialog(playerid, TESTLIC_FIN1, DIALOG_STYLE_MSGBOX,""COL_GENERAL"Licencias - "COL_WHITE"Los Santos",string,"Aceptar","");
					}
					else
					{
						format(string, sizeof(string), "{FFFFFF}Has finalizado la parte teorica del examen de conduccion,\n{FFFFFF}queremos felicitarte ya que "COL_GENERAL"has aprobado.\n\n{FFFFFF}Ahora pasaras a la parte practica.", ErroresLic[playerid]);
						ShowPlayerDialog(playerid, TESTLIC_FIN2, DIALOG_STYLE_MSGBOX,""COL_GENERAL"Licencias - "COL_WHITE"Los Santos",string,"Aceptar","");
					}
					ErroresLic[playerid] = 0;
				}
				case 1:
				{
	                new string[256];
	                ErroresLic[playerid] += 1;
	                if(ErroresLic[playerid] > 3)
					{
						format(string, sizeof(string), "{FFFFFF}Has finalizado la parte teorica del examen de conduccion,\n{FFFFFF}lamentablemente "COL_GENERAL"has desaprobado.\n{FFFFFF}Puedes volver a iniciarlo en cuanto estes listo.", ErroresLic[playerid]);
						ShowPlayerDialog(playerid, TESTLIC_FIN1, DIALOG_STYLE_MSGBOX,""COL_GENERAL"Licencias - "COL_WHITE"Los Santos",string,"Aceptar","");
					}
					else
					{
						format(string, sizeof(string), "{FFFFFF}Has finalizado la parte teorica del examen de conduccion,\n{FFFFFF}queremos felicitarte ya que "COL_GENERAL"has aprobado.\n\n{FFFFFF}Ahora pasaras a la parte practica.", ErroresLic[playerid]);
						ShowPlayerDialog(playerid, TESTLIC_FIN2, DIALOG_STYLE_MSGBOX,""COL_GENERAL"Licencias - "COL_WHITE"Los Santos",string,"Aceptar","");
					}
					ErroresLic[playerid] = 0;
				}
				case 2:
				{
	                new string[256];
	                if(ErroresLic[playerid] > 3)
					{
						format(string, sizeof(string), "{FFFFFF}Has finalizado la parte teorica del examen de conduccion,\n{FFFFFF}lamentablemente "COL_GENERAL"has desaprobado.\n{FFFFFF}Puedes volver a iniciarlo en cuanto estes listo.", ErroresLic[playerid]);
						ShowPlayerDialog(playerid, TESTLIC_FIN1, DIALOG_STYLE_MSGBOX,""COL_GENERAL"Licencias - "COL_WHITE"Los Santos",string,"Aceptar","");
					}
					else
					{
						format(string, sizeof(string), "{FFFFFF}Has finalizado la parte teorica del examen de conduccion,\n{FFFFFF}queremos felicitarte ya que "COL_GENERAL"has aprobado.\n\n{FFFFFF}Ahora pasaras a la parte practica.", ErroresLic[playerid]);
						ShowPlayerDialog(playerid, TESTLIC_FIN2, DIALOG_STYLE_MSGBOX,""COL_GENERAL"Licencias - "COL_WHITE"Los Santos",string,"Aceptar","");
					}
					ErroresLic[playerid] = 0;
				}
			}
		}
		case TESTLIC_FIN1: return 1;
		case TESTLIC_FIN2:
		{
			GivePlayerCash(playerid,-8000);
			Tax += 8000;
			SendClientMessage(playerid, COLOR_WHITE, "Ve através de los checkpoints para conseguir tu licencia.");
			SendClientMessage(playerid, -1, ""COL_GENERAL"INFO: 3 vueltas completas - 3 tipos de coches - Ten cuidado con el coche.");
			foreach(Player,i)
	  		{
	    		for(new v = 0 ; v < 6 ; v++)
	      		{
	      			if(!IsPlayerInVehicle(playerid, VehiculosExamen[0][v]))
	      			{
	      				Info[playerid][pVW] = 1;
	      				SetPlayerVirtualWorld(playerid, 1);
	      				Info[playerid][pInt] = 0;
	      				SetPlayerInterior(playerid, 0);
	      				LinkVehicleToInterior(VehiculosExamen[0][v], 0);
	      				SetVehicleVirtualWorld(VehiculosExamen[0][v], 1);
						PutPlayerInVehicle(playerid, VehiculosExamen[0][v], 0);
						SetVehiclePos(VehiculosExamen[0][v], -2038.1909, -138.9588, 35.0156);
						SetVehicleZAngle(VehiculosExamen[0][v], 90);
						ExamenManejo[playerid] = 1;
						MostrarTDLic(playerid);
						SetPlayerRaceCheckpoint(playerid, 0, -2061.3032, -170.0741, 35.0273, -2063.0195, -209.9654, 35.0267, 5.0);
						break;
					}
					else return SendClientMessage(playerid, COLOR_WHITE, "Ya hay otras 6 personas realizando el test de conducción, intenta mas tarde.");
				}
			}
		}
		case DIALOG_LIC_BUY:
		{
			if(!response) return 1;
			ShowPlayerDialog(playerid, DIALOG_LIC_01, DIALOG_STYLE_LIST, "Centro de Licencias", "Licencia de Conducción ($3.000)\nLicencia de Navegación ($5.000)\nLicencia de Aviación ($8.000)\nLicencia de Taxista ($2.500)\nLicencia de Armas ($10.000)", "Aceptar", "Cancelar");
		}
		case DIALOG_LIC_01:
		{
			switch(listitem)
			{
				case 0:
				{
				    if(Info[playerid][pCarLic] == 1) return SendClientMessage(playerid, -1, "Ya tienes tu licencia de conducción!");
			        if(GetPlayerMoney(playerid) <= 2999) return SendClientMessage(playerid, -1, "No tienes dinero para pagar la licencia.");
					ShowPlayerDialog(playerid, TESTLIC_1, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Para qué sirven las luces de los vehículos?","Para hacer señales.\nPara ver los carteles.\nPara ver, ser vistos y hacer señales.", "Seleccionar", "");
				}
				case 1:
				{
	  				if(Info[playerid][pBoatLic] == 1) return SendClientMessage(playerid, -1, "Ya tienes tu licencia de navegación!");
			        if(GetPlayerMoney(playerid) <= 4999) return SendClientMessage(playerid, -1, "No tienes dinero para pagar la licencia.");
	                GivePlayerCash(playerid,-5000);
					Tax += 5000;
					SendClientMessage(playerid, COLOR_WHITE, "Ve através de los checkpoints para conseguir tu licencia.");
	  				SendClientMessage(playerid, COLOR_WHITE, "INFO: 1 bote - Ten cuidado con el estado del vehiculo.");
					foreach(Player,i)
			        {
			            for(new v = 0 ; v < 6 ; v++)
			            {
			                if(!IsPlayerInVehicle(playerid, VehiculosExamen[5][v]))
			                {
			                    Info[playerid][pVW] = 1;
			                    SetPlayerVirtualWorld(playerid, 1);
			                    Info[playerid][pInt] = 0;
			                    SetPlayerInterior(playerid, 0);
								PutPlayerInVehicle(playerid, VehiculosExamen[5][v], 0);
								ExamenNav[playerid] = 1;
								MostrarTDLic(playerid);
								new engine,lights,alarm,doors,bonnet,boot,objective;
								GetVehicleParamsEx(VehiculosExamen[5][v],engine,lights,alarm,doors,bonnet,boot,objective);
								SetVehicleParamsEx(VehiculosExamen[5][v],VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
								arr_Engine{VehiculosExamen[5][v]} = 1;
								SetPlayerRaceCheckpoint(playerid, 0, -258.4862, -740.0344, 0.0, -158.6945, -795.5346, 0.0, 7.0);
								break;
							}
							else return SendClientMessage(playerid, COLOR_WHITE, "Ya hay otras 6 personas realizando el test de conducción, intenta mas tarde.");
						}
					}
				}
				case 2:
				{
	  				if(Info[playerid][pFlyLic] == 1) return SendClientMessage(playerid, -1, "Ya tienes tu licencia de aviación!");
			        if(GetPlayerMoney(playerid) <= 7999) return SendClientMessage(playerid, -1, "No tienes dinero para pagar la licencia.");
					GivePlayerCash(playerid,-8000);
					Tax += 8000;
					SendClientMessage(playerid, COLOR_WHITE, "Ve através de los checkpoints para conseguir tu licencia.");
	  				SendClientMessage(playerid, COLOR_WHITE, "INFO: 1 avion y 1 helicoptero - Ten cuidado con el estado del vehiculo.");
	  				foreach(Player,i)
			        {
			            for(new v = 0 ; v < 6 ; v++)
			            {
			                if(!IsPlayerInVehicle(playerid, VehiculosExamen[3][v]))
			                {
			                    Info[playerid][pVW] = 1;
			                    SetPlayerVirtualWorld(playerid, 1);
			                    Info[playerid][pInt] = 0;
			                    SetPlayerInterior(playerid, 0);
			                    LinkVehicleToInterior(VehiculosExamen[3][v], 0);
			                    SetVehicleVirtualWorld(VehiculosExamen[3][v], 1);
								PutPlayerInVehicle(playerid, VehiculosExamen[3][v], 0);
								SetVehiclePos(VehiculosExamen[3][v], 404.6674,2504.5200,17.2091);
								SetVehicleZAngle(VehiculosExamen[3][v], 99.5788);
								ExamenVuelo[playerid] = 1;
								MostrarTDLic(playerid);
								new engine,lights,alarm,doors,bonnet,boot,objective;
								GetVehicleParamsEx(VehiculosExamen[3][v],engine,lights,alarm,doors,bonnet,boot,objective);
								SetVehicleParamsEx(VehiculosExamen[3][v],VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
								arr_Engine{VehiculosExamen[3][v]} = 1;
								SetPlayerRaceCheckpoint(playerid, 3, 203.8663, 2505.8926, 17.2487, -166.1240, 2352.7434, 104.8213, 5.0);
								break;
							}
							else return SendClientMessage(playerid, COLOR_WHITE, "Ya hay otras 6 personas realizando el test de conducción, intenta mas tarde.");
						}
					}
				}
				case 3:
				{
				    if(Info[playerid][pCarLic] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Necesitas tener licencia de conduccion para conseguir esta!");
			    	if(Info[playerid][pTaxiLicense] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Ya tienes tu licencia de taxista!");
	    	        if(GetPlayerMoney(playerid) <= 2499) return SendClientMessage(playerid, -1, "No tienes dinero para pagar la licencia.");
	  				GivePlayerCash(playerid,-2500);
					Tax += 2500;
					Info[playerid][pTaxiLicense] = 1;
					SendClientMessageEx(playerid, COLOR_GREY, "Has adquirido con éxito una licencia de taxi; podrás utilizar /tarifa en cualquier vehículo y aceptar llamadas de taxis.");
				}
				case 4:
				{
				    if(Info[playerid][pGunLic] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Ya tienes tu licencia de armas!");
				    if(Info[playerid][pGunLic] == -1) return SendClientMessage(playerid, COLOR_WHITE, "Te suspendieron la licencia de armas de por vida!");
					if(GetPlayerMoney(playerid) <= 9999) return SendClientMessage(playerid, -1, "No tienes dinero para pagar la licencia.");
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
					{
					    if(IsPlayerConnected(i) && TestGunLic[i]) return SendClientMessage(playerid, -1, "Sala de tiro llena!");
					}
					new gun[][] =
					{
						"Esta licencia sólo comprende:\n\n",
						"Armas de fuego cortas, las pistolas y revólveres.\n\n",
						"Obligaciones:\n\n",
						" Tendrás que enseñar la licencia cada vez que un policía\n",
						"  lo solicite.\n",
						" No usarás el arma en discotecas o pubs, nightclubs.\n",
						" Pago mensual de $55.\n\n",
						"Tener armas es una responsabilidad muy grande y debes tener en cuenta\n",
						"que puedes hacer daño a las personas y esta licencia sólo es para uso\n",
						"de protección ante secuestros, robos, etc.\n\n",
						"Advertencias:\n\n",
						" Si caes preso nunca más volverás a tener armas de fuego.\n",
						" En caso de imcumplir las obligaciones, se suspenderá la licencia.\n",
						" El arma debe ser comprada exclusivamente en Ammunation.\n\n",
						"¿Estás de acuerdo con las obligaciones y advertencias?"
					};
	    			new dialogs[740];
					format(dialogs,sizeof(dialogs),"%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",gun[0],gun[1],gun[2],gun[3],gun[4],gun[5],gun[6],gun[7],gun[8],gun[9],gun[10],gun[11],gun[12],gun[13],gun[14]);
					ShowPlayerDialog(playerid, DIALOG_GUNLIC, DIALOG_STYLE_MSGBOX, "Lee Atentamente:",dialogs, "Ok", "Cancelar");
				}
			}
		}
		case DIALOG_GUNLIC: if(response)
		{
		    for(new i = 0 ; i < MAX_PLAYERS ; i++)
			{
  				if(IsPlayerConnected(i) && TestGunLic[i]) return SendClientMessage(playerid, -1, "Sala de tiro llena!");
			}
			Bought(playerid, 10000);
		    TestGunLic[playerid] = true;
			TestGunLicLevel[playerid] = 1;
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, 22, 140);
			SetPlayerArmedWeapon(playerid, 22);
			SetPlayerPos(playerid, 300.0880, -134.0897, 1004.0625);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerInterior(playerid, 7);
			ObjectLic[playerid][0] = CreateObject(1985,291.1000100,-142.5000000,1006.5000000,0.0000000,0.0000000,0.0000000);
			MoveObject(ObjectLic[playerid][0], 291.1000100,-128.1000100,1006.5000000, 2.0);
			ShowInfoForPlayer(playerid, "~w~Dispara ~r~5 ~w~veces~n~a cada blanco", 3000);
		}
	    case SPRAYTAG_DIALOG_RETURN: SprayTag_Dialog(playerid, TYPE_LIST_MENU);
		case SPRAYTAG_MENU:
		{
			if(!response) return 1;
			switch(listitem)
			{
				case 0:
				{
					SprayTag_Dialog(playerid, TYPE_LIST_TAGS_CREATE);
				}
				case 1: SprayTag_Dialog(playerid, TYPE_LIST_TAGS);
				case 2: SprayTag_Dialog(playerid, TYPE_LIST_TAGS_DELETE);
				case 3: SprayTag_Dialog(playerid, TYPE_LIST_TAGS_FIND);
			}
		}
		case SPRAYTAG_EDIT_MAIN:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_MENU);
			if(SprayTags[playerid][listitem][_spPosX] == 0.0)
				return ShowPlayerDialog(playerid, SPRAYTAG_DIALOG_RETURN, DIALOG_STYLE_MSGBOX, ""COL_GENERAL"NP:RP - "COL_WHITE"Graffitis", "¡Ups!, no hay nada en esta ranura.", "Entendido", "");

			spraytag_slot[playerid] = listitem;

			spraytag_bold[playerid] = SprayTags[playerid][listitem][_spBold];
			spraytag_color[playerid] = SprayTags[playerid][listitem][_spFontColor];
			format(spraytag_text[playerid], 50, SprayTags[playerid][listitem][_spText]);
			format(spraytag_font[playerid], 50, SprayTags[playerid][listitem][_spFont]);
			spraytag_size[playerid] = SprayTags[playerid][listitem][_spFontSize];
			SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
		}
		case SPRAYTAG_DELETE:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_MENU);

			if(SprayTags[playerid][listitem][_spPosX] == 0.0)
				return ShowPlayerDialog(playerid, SPRAYTAG_DIALOG_RETURN, DIALOG_STYLE_MSGBOX, ""COL_GENERAL"NP:RP - "COL_WHITE"Graffitis", "¡Ups!, no hay nada en esta ranura.", "Entendido", "");

			Tags_Clear(playerid, listitem);
			format(szMessage, sizeof szMessage, "[NP:RP] El graffiti ID %i se ha borrado correctamente.", listitem);
			SendClientMessage(playerid, COLOR_GRAD1, szMessage);
			SprayTag_Dialog(playerid, TYPE_LIST_MENU);
		}
		case SPRAYTAG_FIND:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_MENU);

			if(SprayTags[playerid][listitem][_spPosX] == 0.0)
				return ShowPlayerDialog(playerid, SPRAYTAG_DIALOG_RETURN, DIALOG_STYLE_MSGBOX, ""COL_GENERAL"NP:RP - "COL_WHITE"Graffitis", "¡Ups!, no hay nada en esta ranura.", "Entendido", "");

			spraytag_find[playerid] = SetPlayerCheckpoint(playerid, SprayTags[playerid][listitem][_spPosX], SprayTags[playerid][listitem][_spPosY], SprayTags[playerid][listitem][_spPosZ], 3.0);
			format(szMessage, sizeof szMessage, "[NP:RP] Un checkpoint fue marcado en el graffiti ID %i.", listitem);
			SendClientMessage(playerid, COLOR_GRAD1, szMessage);
		}
		case SPRAYTAG_CREATE:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_MENU);

			if(SprayTags[playerid][listitem][_spPosX] == 0.0)
			{
				spraytag_slot[playerid] = listitem;
				format(spraytag_text[playerid], 50, "Exemplo");
				format(spraytag_font[playerid], 50, "Arial");
				spraytag_color[playerid] = -1;
				spraytag_size[playerid] = 24;
				spraytag_bold[playerid] = 0;
				SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
			} else ShowPlayerDialog(playerid, SPRAYTAG_DIALOG_RETURN, DIALOG_STYLE_MSGBOX, ""COL_GENERAL"NP:RP - "COL_WHITE"Graffitis", "Esta ranura esta en uso.", "Entendido", "");
		}
		case SPRAYTAG_EDIT_LIST:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_TAGS);

			new
				iIndex = spraytag_slot[playerid]
			;

			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, SPRAYTAG_EDIT_TEXT, DIALOG_STYLE_INPUT, ""COL_GENERAL"NP:RP - "COL_WHITE"Texto", "Introduzca el texto que aparecera en el graffiti.", "Aceptar", "Volver");
				case 1: ShowPlayerDialog(playerid, SPRAYTAG_EDIT_FONT, DIALOG_STYLE_LIST, ""COL_GENERAL"NP:RP - "COL_WHITE"Fuente", "Arial\nCourier\nImpact\nPricedown\nDaredevil\nBombing\nNaight Fat\nFrom Street Art\nGhang\nGraffogie\nGraphers Blog\nNosegrind Demo", "Aceptar", "Volver");
				case 2: ShowPlayerDialog(playerid, SPRAYTAG_EDIT_SIZE, DIALOG_STYLE_INPUT, ""COL_GENERAL"NP:RP - "COL_WHITE"Tamaño", "Introduzca el tamaño del texto del graffiti.", "Aceptar", "Volver");
				case 3: ShowPlayerDialog(playerid, SPRAYTAG_EDIT_COLOR, DIALOG_STYLE_LIST, ""COL_GENERAL"NP:RP - "COL_WHITE"Color", "{FF0000}Rojo\n{04B404}Verde\n{00B5CD}Azul Claro\n{FFFF00}Amarillo\n{0000FF}Azul\n{848484}Gris\n{FF00FF}Rosa\n{FFFFFF}Blanco", "Aceptar", "Volver");
				case 4:
				{
					switch(spraytag_bold[playerid])
					{
						case 0: spraytag_bold[playerid] = 1;
						case 1: spraytag_bold[playerid] = 0;
					}
					SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
				}
				case 5:
				{
					EditDynamicObject(playerid, SprayTags[playerid][iIndex][_spObject]);
					SetPVarInt(playerid, "SPRAYTAG_EDIT", 2);
				}
			}
		}
		case SPRAYTAG_EDIT_TEXT:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
			format(spraytag_text[playerid], 32, inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
		}
		case SPRAYTAG_EDIT_FONT:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
			format(spraytag_font[playerid], 32, inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
		}
		case SPRAYTAG_EDIT_SIZE:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
			spraytag_size[playerid] = strval(inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
		}
		case SPRAYTAG_EDIT_COLOR:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
			new iColor;
			switch(listitem)
	        {
	            case 0: iColor = HexToInt("0xFFFF0000");
	            case 1: iColor = HexToInt("0xFF04B404");
	            case 2: iColor = HexToInt("0xFF00B5CD");
	            case 3: iColor = HexToInt("0xFFFFFF00");
	            case 4: iColor = HexToInt("0xFF0000FF");
	            case 5: iColor = HexToInt("0xFF848484");
	            case 6: iColor = HexToInt("0xFFFF00FF");
	            case 7: iColor = HexToInt("0xFFFFFFFF");
	        }
			spraytag_color[playerid] = iColor;
			SprayTag_Dialog(playerid, TYPE_LIST_EDIT);
		}

		case SPRAYTAG_CREATE_MAIN:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_TAGS_CREATE);
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, SPRAYTAG_CREATE_TEXT, DIALOG_STYLE_INPUT, ""COL_GENERAL"NP:RP - "COL_WHITE"Texto", "Introduzca el texto que aparecera en el graffiti.", "Aceptar", "Volver");
				case 1: ShowPlayerDialog(playerid, SPRAYTAG_CREATE_FONT, DIALOG_STYLE_LIST, ""COL_GENERAL"NP:RP - "COL_WHITE"Fuente", "Arial\nCourier\nImpact\nPricedown\nDaredevil\nBombing\nNaight Fat\nFrom Street Art\nGhang\nGraffogie\nGraphers Blog\nNosegrind Demo", "Aceptar", "Volver");
				case 2: ShowPlayerDialog(playerid, SPRAYTAG_CREATE_SIZE, DIALOG_STYLE_INPUT, ""COL_GENERAL"NP:RP - "COL_WHITE"Tamaño", "Introduzca el tamaño del texto del graffiti.", "Aceptar", "Volver");
				case 3: ShowPlayerDialog(playerid, SPRAYTAG_CREATE_COLOR, DIALOG_STYLE_LIST, ""COL_GENERAL"NP:RP - "COL_WHITE"Color", "{FF0000}Rojo\n{04B404}Verde\n{00B5CD}Azul Claro\n{FFFF00}Amarillo\n{0000FF}Azul\n{848484}Gris\n{FF00FF}Rosa\n{FFFFFF}Blanco", "Aceptar", "Volver");
				case 4:
				{
					switch(spraytag_bold[playerid])
					{
						case 0: spraytag_bold[playerid] = 1;
						case 1: spraytag_bold[playerid] = 0;
					}
					SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
				}
				case 5:
				{
					new
						Float:Position[3],
						szText[50],
						szFont[50]
					;

					GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
					format(szText, 50, spraytag_text[playerid]);
					format(szFont, 50, spraytag_font[playerid]);

					spraytag_object[playerid] = CreateDynamicObject(SPRAY_TAG_OBJECT, Position[0]-1.0, Position[1], Position[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, SPRAY_TAG_OBJECT_DISTANCE);
					SetDynamicObjectMaterialText(spraytag_object[playerid], 0, szText, OBJECT_MATERIAL_SIZE_512x512, szFont, spraytag_size[playerid], spraytag_bold[playerid], spraytag_color[playerid], 0, 1);
					EditDynamicObject(playerid, spraytag_object[playerid]);
					SetPVarInt(playerid, "SPRAYTAG_EDIT", 1);
				}
			}
		}
		case SPRAYTAG_CREATE_TEXT:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
			format(spraytag_text[playerid], 50, inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
		}
		case SPRAYTAG_CREATE_FONT:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
			format(spraytag_font[playerid], 50, inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
		}
		case SPRAYTAG_CREATE_SIZE:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
			spraytag_size[playerid] = strval(inputtext);
			SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
		}
		case SPRAYTAG_CREATE_COLOR:
		{
			if(!response) return SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
			new iColor;
			switch(listitem)
	        {
	            case 0: iColor = HexToInt("0xFFFF0000");
	            case 1: iColor = HexToInt("0xFF04B404");
	            case 2: iColor = HexToInt("0xFF00B5CD");
	            case 3: iColor = HexToInt("0xFFFFFF00");
	            case 4: iColor = HexToInt("0xFF0000FF");
	            case 5: iColor = HexToInt("0xFF848484");
	            case 6: iColor = HexToInt("0xFFFF00FF");
	            case 7: iColor = HexToInt("0xFFFFFFFF");
	        }
			spraytag_color[playerid] = iColor;
			SprayTag_Dialog(playerid, TYPE_LIST_CREATE);
		}
		case MPSPAYTICKETS:
		{
		    if(response)
		    {
				if(Info[playerid][pWantedLevel] != 0)
				{
					format(szMessage, sizeof(szMessage), "%s intenta pagar multas y es buscado por la policía  ((Nivel de búsqueda: %i))", GetPlayerNameEx(playerid), Info[playerid][pWantedLevel]);
					SendRadioMessage(1, TEAM_RADIO_COLOR, szMessage);
					SendRadioMessage(2, TEAM_RADIO_COLOR, szMessage);
					return SendClientMessageEx(playerid, COLOR_GRAD1, "La policía ha dado comunicado que usted está buscado, y están en camino.");
				}
				if(PlayerVehicleInfo[listitem][pvTicket])
				{
					if(GetPlayerCash(playerid) < PlayerVehicleInfo[listitem][pvTicket]) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero para pagar la multa.");
					GivePlayerCash(playerid, -PlayerVehicleInfo[listitem][pvTicket]);
					Tax += PlayerVehicleInfo[listitem][pvTicket];
					format(szMessage, sizeof(szMessage), "Pagaste la multa de $%d de tu %s.", PlayerVehicleInfo[listitem][pvTicket], VehicleName[PlayerVehicleInfo[listitem][pvModelId] - 400]);
					SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
					PlayerVehicleInfo[listitem][pvTicket] = 0;
				}
				else if(PlayerVehicleInfo[listitem][pvImpounded])
				{
					new iCost = (PlayerVehicleInfo[listitem][pvPrice] / 20) + PlayerVehicleInfo[listitem][pvTicket] + (Info[playerid][pLevel] * 2);
					if(GetPlayerCash(playerid) < iCost)
					{
						return SendClientMessageEx(playerid, COLOR_GREY, "No tienes suficiente dinero para pagar la multa.");
					}
					format(szMessage, sizeof(szMessage), "Liberaste tu %s por $%i.", VehicleName[PlayerVehicleInfo[listitem][pvModelId] - 400], iCost);
					SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					SendClientMessageEx(playerid, COLOR_GRAD1, "Tu auto se encuentra en el depósito municipal, puedes abrir la reja usando /deposito.");
					GivePlayerCash(playerid, -iCost);
					Tax += iCost;
					PlayerVehicleInfo[listitem][pvImpounded] = 0;
					PlayerVehicleInfo[listitem][pvPosX] = 1655.4379;
					PlayerVehicleInfo[listitem][pvPosY] = -1829.5668;
					PlayerVehicleInfo[listitem][pvPosZ] = 13.2677;
					PlayerVehicleInfo[listitem][pvPosAngle] = 91.6165;
					PlayerVehicleInfo[listitem][pvTicket] = 0;
					PlayerVehicleInfo[listitem][pvVW] = 0;
		            ++PlayerCars;
					PlayerVehicleInfo[listitem][pvId] = CreateVehicle(PlayerVehicleInfo[listitem][pvModelId], PlayerVehicleInfo[listitem][pvPosX], PlayerVehicleInfo[listitem][pvPosY], PlayerVehicleInfo[listitem][pvPosZ], PlayerVehicleInfo[listitem][pvPosAngle],PlayerVehicleInfo[listitem][pvColor1], PlayerVehicleInfo[listitem][pvColor2], -1);
					SetPlayerVirtualWorld(PlayerVehicleInfo[listitem][pvId], PlayerVehicleInfo[listitem][pvVW]);
					VehicleFuel[PlayerVehicleInfo[listitem][pvId]] = PlayerVehicleInfo[listitem][pvFuel];
					if(PlayerVehicleInfo[listitem][pvLocked] == 1) LockPlayerVehicle(playerid, PlayerVehicleInfo[listitem][pvId], PlayerVehicleInfo[listitem][pvLock]);
					LoadAllPlayerVehicleMods(playerid);
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "* Este coche, o bien no existe, o no es necesario liberar o tiene sus multas pagadas.");
		    }
			return 1;
		}
		case DIALOG_ENVENTA:
		{
		    if(!IsPlayerInAnyVehicle(playerid))
			{
	    		TogglePlayerControllable(playerid, 1);
				return SendClientMessageEx(playerid,COLOR_GREY,"* Necesitas estar en el vehículo que desea comprar.");
			}
			if(!response)
			{
				RemovePlayerFromVehicle(playerid);
	        	new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
				return TogglePlayerControllable(playerid, 1);
			}
			if(Info[playerid][pLevel] <= 1) return SendClientMessage(playerid, COLOR_GREY, "Necesitas ser nivel 2 o mayor.");
			for(new v = 0 ; v < MAX_PLAYERVEHICLES ; v++)
			{
			    if(GetPlayerVehicleID(playerid) == PlayerVehicleInfo[v][pvId] && PlayerVehicleInfo[v][pvEnVenta] == 1)
			    {
			        if(GetPlayerCash(playerid) <= PlayerVehicleInfo[v][pvEnVentaP]-1) return SendClientMessageEx(playerid, COLOR_GREY, "   No puedes pagar este coche!");
			        new playervehicleid = GetPlayerFreeVehicleId(), carsamount = VehicleCount(playerid), pnamep[MAX_PLAYER_NAME];
			        if(carsamount >= 5 || playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: No puedes tener más autos.");
                    format(szMessage, sizeof(szMessage), "* Compraste un %s por $%d, de %s.", GetVehicleName(PlayerVehicleInfo[v][pvId]), PlayerVehicleInfo[v][pvEnVentaP],PlayerVehicleInfo[v][pvOwner]);
                   	SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					Bought(playerid, PlayerVehicleInfo[v][pvEnVentaP]);
					if(INI_Exist(PlayerVehicleInfo[v][pvOwner]))
					{
					    new PlayerFile[MAX_PLAYER_NAME + 32];
    					format( PlayerFile , sizeof PlayerFile, USERFILE, PlayerVehicleInfo[v][pvOwner]);
    					INI_ParseFile(PlayerFile, "GetMoneyBank", false, true, playerid, true, false);
    					new INI:File = INI_Open(PlayerFile);
						INI_SetTag(File,"data");
    					INI_WriteInt(File,"Bank",MoneyBankTempFix[playerid]+PlayerVehicleInfo[v][pvEnVentaP]);
						INI_Close(File);
						MoneyBankTempFix[playerid] = 0;
					}
					format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
					PlayerVehicleInfo[v][pvOwner] = pnamep;
					return 1;
				}
			}
		}
		case DIALOG_CDBUY:
		{
		    if(!IsPlayerInAnyVehicle(playerid))
			{
			    TogglePlayerControllable(playerid, 1);
				SendClientMessageEx(playerid,COLOR_GREY,"* Necesitas estar en el vehículo que desea comprar.");
				return 1;
			}
			new vehicleid = GetPlayerVehicleID(playerid);
			#pragma unused vehicleid
			new d = GetCarSale(vehicleid);
			if(response)
			{
		        if(varCarSale[d][VehSpawn][0] == 0.0 && varCarSale[d][VehSpawn][1] == 0.0 && varCarSale[d][VehSpawn][2] == 0.0)
		        {
					SendClientMessageEx(playerid, COLOR_GREY, "* Por el momento no puede comprarse este coche.");
					RemovePlayerFromVehicle(playerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+1.2);
					TogglePlayerControllable(playerid, 1);
					return 1;
		        }
		        new playervehicleid = GetPlayerFreeVehicleId();
		        new carsamount = VehicleCount(playerid);
		        if((Info[playerid][pVIP] == 0) && carsamount >= 5)
				{
		            SendClientMessageEx(playerid, COLOR_GREY, "* No puedes tener más coches, usuarios normales sólo pueden tener 5 coches.");
		            RemovePlayerFromVehicle(playerid);
		            new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+1.2);
		            TogglePlayerControllable(playerid, 1);
		            return 1;
				}
		        if(Info[playerid][pVIP] == 1 && carsamount >= 5)
		        {
		            SendClientMessageEx(playerid, COLOR_GREY, "* No puedes tener más coches, BVIP Sólo puede tener 5 coches.");
		            RemovePlayerFromVehicle(playerid);
		            new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+1.2);
		            TogglePlayerControllable(playerid, 1);
		            return 1;
		        }
		        if(Info[playerid][pVIP] == 2 && carsamount >= 6)
		        {
		            SendClientMessageEx(playerid, COLOR_GREY, "* No puedes tener más coches, SVIP Sólo puede tener 6 coches.");
		            RemovePlayerFromVehicle(playerid);
		            new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+1.2);
		            TogglePlayerControllable(playerid, 1);
		            return 1;
		        }
		        if(Info[playerid][pVIP] == 3 && carsamount >= 8)
		        {
		            SendClientMessageEx(playerid, COLOR_GREY, "* No puedes tener más coches, GVIP Sólo puede tener 8 coches.");
		            RemovePlayerFromVehicle(playerid);
		            new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+1.2);
		            TogglePlayerControllable(playerid, 1);
		            return 1;
		        }
			    if(playervehicleid == -1)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY, "* Este jugador no puede tener más coches.");
		            RemovePlayerFromVehicle(playerid);
		            new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+1.2);
		            TogglePlayerControllable(playerid, 1);
		            return 1;
			    }
			    new randcolor1 = Random(0, 126);
			    new randcolor2 = Random(0, 126);
			    TogglePlayerControllable(playerid, 1);
			    new cost;
			    if(Info[playerid][pVIP] < 1)
		        {
		            cost = varCarSale[d][CSVehCost];
		            if(GetPVarInt(playerid, "Cash") < cost)
		            {
						SendClientMessageEx(playerid, COLOR_GREY, "* No tienes dinero suficiente para comprar este coche.");
						RemovePlayerFromVehicle(playerid);
						new Float:slx, Float:sly, Float:slz;
						GetPlayerPos(playerid, slx, sly, slz);
						SetPlayerPos(playerid, slx, sly, slz+1.2);
						return 1;
		            }
			        SendClientMessageEx(playerid, COLOR_WHITE, "* Gracias por la compra, usa /ayuda y en la sección COCHE puedes ver los comandos disponibles.");
			        SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")-varCarSale[d][CSVehCost]);
			        Tax += ( varCarSale[d][CSVehCost] * 40 ) / ( 100 );
		        }
		        else
		        {
					cost = ( varCarSale[d][CSVehCost] * 40 ) / ( 100 );
		            if(GetPVarInt(playerid, "Cash") < cost)
		            {
						SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: No tienes dinero suficiente para comprar este coche.");
						RemovePlayerFromVehicle(playerid);
						new Float:slx, Float:sly, Float:slz;
						GetPlayerPos(playerid, slx, sly, slz);
						SetPlayerPos(playerid, slx, sly, slz+1.2);
						return 1;
		            }
		            SendClientMessageEx(playerid, COLOR_WHITE, "* Gracias por la compra, usa /ayuda y en la sección COCHE puedes ver los comandos disponibles.");
			        SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash") - cost );
					Tax += cost;
		 		}
     			//new car
		        CreatePlayerVehicle(playerid, playervehicleid, varCarSale[d][CSVehModel], varCarSale[d][VehSpawn][0], varCarSale[d][VehSpawn][1], varCarSale[d][VehSpawn][2], varCarSale[d][VehSpawn][3], randcolor1, randcolor2, cost);
		        SetPlayerPos(playerid, varCarSale[d][VehSpawn][0], varCarSale[d][VehSpawn][1], varCarSale[d][VehSpawn][2]+2);
				//SetTimerEx("PutPlayerInVeh", 2000, 0, "dd", playerid, car);
				//PutPlayerInVehicle(playerid, car, 1);
			}
			else
			{
		        RemovePlayerFromVehicle(playerid);
		        new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
		        TogglePlayerControllable(playerid, 1);
				return 1;
			}
		}
		case    D_SPEEDCAMRANGE:
		{
			if(response)
			{
				if(!isnumeric(inputtext)) return ShowPlayerDialog(playerid,D_SPEEDCAMRANGE,DIALOG_STYLE_INPUT,"Editar Cámara - Rango","Sólo números.\nEscribe el rango que alcanzará la cámara.","Ok","Cancelar");
				new id = GetPVarInt(playerid, "IDSpeedCam");
				new range = strval(inputtext);
				if(range < 5 || range > 30) return ShowPlayerDialog(playerid,D_SPEEDCAMRANGE,DIALOG_STYLE_INPUT,"Editar Cámara - Rango","* Rango no mayor de 30.\n* Rango no menor de 5.\nEscribe el rango que alcanzará la cámara.","Ok","Cancelar");
				vCameraInfo[id][vCameraRange] = range;
				SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el rango de la cámara.");
		        saveSpeedCam();
		        DeletePVar(playerid,"IDSpeedCam");
			}
			else return DeletePVar(playerid,"IDSpeedCam");
		}
		case    D_SPEEDCAMLIMIT:
		{
			if(response)
			{
				if(!isnumeric(inputtext)) return ShowPlayerDialog(playerid,D_SPEEDCAMLIMIT,DIALOG_STYLE_INPUT,"Editar Cámara - Límite","Sólo números.\nEscribe el límite de velocidad que podrán pasar los coches.","Ok","Cancelar");
				new id = GetPVarInt(playerid, "IDSpeedCam");
				new text_info[64], limit = strval(inputtext);
				if(limit < 10 || limit > 250) return ShowPlayerDialog(playerid,D_SPEEDCAMLIMIT,DIALOG_STYLE_INPUT,"Editar Cámara - Límite","* Límite no mayor de 250.\n* Límite no menor de 10.\nEscribe el límite de velocidad que podrán pasar los coches.","Ok","Cancelar");
				vCameraInfo[id][vCameraLimit] = limit;
				SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el Límite de la cámara, puedes verlo en el 3dlabel.");
		        saveSpeedCam();
		        DeletePVar(playerid,"IDSpeedCam");
		   		switch(vCameraInfo[id][vCameraStatus])
		   		{
		   			case 0: format(text_info, sizeof(text_info), ""COL_WHITE"(%d)\nCámara de Velocidad\nLímite: "COL_GENERAL"MPH %d", id,vCameraInfo[id][vCameraLimit]);
					case 1: format(text_info, sizeof(text_info), ""COL_WHITE"(%d)\nCámara de Velocidad\n"COL_RED"(DESACTIVADA)", id);
		   		}
				UpdateDynamic3DTextLabelText(vCameraInfo[id][vCameraLabel],-1,text_info);
			}
			else return DeletePVar(playerid,"IDSpeedCam");
		}
		case 	D_SPEEDCAMSTATUS:
		{
		    if(response)
		    {
		        new id = GetPVarInt(playerid, "IDSpeedCam"), text_info[64];
		   		switch(listitem)
		   		{
		   			case 0:
		   			{
					   vCameraInfo[id][vCameraStatus] = 0;
					   format(text_info, sizeof(text_info), ""COL_WHITE"(%d)\nCámara de Velocidad\nLímite: "COL_GENERAL"MPH %d", id,vCameraInfo[id][vCameraLimit]);
					}
		   			case 1:
					{
					   vCameraInfo[id][vCameraStatus] = 1;
					   format(text_info, sizeof(text_info), ""COL_WHITE"(%d)\nCámara de Velocidad\n"COL_RED"(DESACTIVADA)", id);
					}
		   		}
				UpdateDynamic3DTextLabelText(vCameraInfo[id][vCameraLabel],-1,text_info);
		    	SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el estado de la cámara, puedes verlo en el 3dlabel.");
		        saveSpeedCam();
		        DeletePVar(playerid,"IDSpeedCam");
		   	}
		   	else return DeletePVar(playerid,"IDSpeedCam");
		}
case 	D_SPEEDCAMFINE:
{
    if(response)
    {
        if(!isnumeric(inputtext)) return ShowPlayerDialog(playerid,D_SPEEDCAMFINE,DIALOG_STYLE_INPUT,"Editar Cámara - Límite","Sólo números.\nEscribe la multa que dará la cámara.","Ok","Cancelar");
        new id = GetPVarInt(playerid, "IDSpeedCam");
        new fine = strval(inputtext);
        if(fine < 100 || fine > 15000) return ShowPlayerDialog(playerid,D_SPEEDCAMFINE,DIALOG_STYLE_INPUT,"Editar Cámara - Multa","* Multa no mayor de 15000.\n* Límite no menor de 100.\nEscribe la multa que dará la cámara.","Ok","Cancelar");
        vCameraInfo[id][vCameraTicket] = fine;
		SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste la multa de la cámara.");
        saveSpeedCam();
        DeletePVar(playerid,"IDSpeedCam");
   	}
   	else return DeletePVar(playerid,"IDSpeedCam");
}
case    D_NEWVEH:
{
	if(response)
	{
		if(!isnumeric(inputtext)) return ShowPlayerDialog(playerid,D_NEWVEH,DIALOG_STYLE_INPUT,"Crear Vehículo","Sólo números.\nEscribe la ID del modelo del coche que quieres crear.","Ok","Cancelar");
		new modelid;
		modelid = strval(inputtext);
		if(modelid < 400 || modelid > 611) { SendClientMessageEx(playerid, COLOR_GREY, "* ID no menor de 400 y no mayor de 611 !"); return 1; }
        SendClientMessageEx(playerid, -1, "Ahora vé a la posición donde quieres que esté el vehículo.");
		SendClientMessageEx(playerid, -1, "Una vez listo, presiona el botón FIRE - DISPARAR (CLICK).");
        SetPVarInt(playerid, "ModelCarSale", modelid);
        SetPVarInt(playerid, "CreandoCoche", 1);
	}
	else return DeletePVar(playerid,"IDCarSale");
}
case 	D_NEWVEH_1:
{
	if(response)
	{
    	new Float: Pos[4];
		GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
		GetPlayerFacingAngle(playerid, Pos[3]);
		SetPVarFloat(playerid,"CarSaleX",Pos[0]);
		SetPVarFloat(playerid,"CarSaleY",Pos[1]);
		SetPVarFloat(playerid,"CarSaleZ",Pos[2]);
		SetPVarFloat(playerid,"CarSaleA",Pos[3]);
		ShowPlayerDialog(playerid,D_NEWVEH_2,DIALOG_STYLE_INPUT,"Creando vehículo","Bien, ahora ingresa el precio de este vehículo.","Ok","Cancelar");
	}
	else
	{
	    DeletePVar(playerid,"IDCarSale");
	    DeletePVar(playerid,"CreandoCoche");
	   	return DeletePVar(playerid,"ModelCarSale");
	}
}
case D_NEWVEH_2:
{
	if(response)
	{
		if (isnumeric(inputtext))
    	{
        	SetPVarInt(playerid, "PriceSaleCar", strval(inputtext));
        	DeletePVar(playerid,"CreandoCoche");
        	SetPVarInt(playerid, "CreandoCoche2", 1);
        	SendClientMessageEx(playerid, -1, "Ahora vé a la posición donde quieres que aparezca el vehículo al comprarlo.");
			SendClientMessageEx(playerid, -1, "Una vez listo, presiona el botón FIRE - DISPARAR (CLICK).");
    	}
    	else
    	{
    	    return ShowPlayerDialog(playerid,D_NEWVEH_2,DIALOG_STYLE_INPUT,"Creando vehículo","Sólo números.\nIngresa el precio para el vehículo.","Ok","Cancelar");
    	}
	}
	else
	{
	    DeletePVar(playerid,"CarSaleX");
	    DeletePVar(playerid,"CarSaleY");
	    DeletePVar(playerid,"CarSaleZ");
	    DeletePVar(playerid,"CarSaleA");
	    DeletePVar(playerid,"IDCarSale");
	    DeletePVar(playerid,"CreandoCoche");
	   	return DeletePVar(playerid,"ModelCarSale");
	}
}
case D_NEWVEH_3:
{
	if(response)
	{
		new Float: Pos[4];
		GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
		GetPlayerFacingAngle(playerid, Pos[3]);
		new Float: x, Float: y, Float: z, Float: a;
		new model, id, price;
		price = GetPVarInt(playerid, "PriceSaleCar");
		model = GetPVarInt(playerid, "ModelCarSale");
		id = GetPVarInt(playerid, "IDCarSale");
		x = GetPVarFloat(playerid,"CarSaleX");
		y = GetPVarFloat(playerid,"CarSaleY");
		z = GetPVarFloat(playerid,"CarSaleZ");
		a = GetPVarFloat(playerid,"CarSaleA");
		varCarSale[id][VehSpawn][0] = Pos[0];
		varCarSale[id][VehSpawn][1] = Pos[1];
		varCarSale[id][VehSpawn][2] = Pos[2];
		varCarSale[id][VehSpawn][3] = Pos[3];
		CreateSaleCar(id,model,x,y,z,a,price);

	    DeletePVar(playerid,"CarSaleX");DeletePVar(playerid,"CarSaleY");
	    DeletePVar(playerid,"CarSaleZ");DeletePVar(playerid,"CarSaleA");
	    DeletePVar(playerid,"IDCarSale");DeletePVar(playerid,"CreandoCoche");
	    DeletePVar(playerid,"CreandoCoche2");DeletePVar(playerid,"ModelCarSale");
	   	DeletePVar(playerid,"PriceSaleCar");
	   	return 1;
	}
}
case    D_SERVICES: if(response)
{
	switch(listitem)
	{
	    case    0:
	    {
			if(GetPVarInt(playerid, "Injured") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No estás herido, no puedes llamar a médicos ahora!");
			new zone[MAX_ZONE_NAME];
			GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
			SetPVarInt(playerid, "EMSAttempt", 1);
			SendClientMessageEx(playerid, COLOR_WHITE, "La SAMD ha sido informado de su ubicación actual y están en camino.");
			format(szMessage, sizeof(szMessage), "* Central: Reportan a un tal (%d) %s que puede estar herido en %s, se requiere emegercia inmediata.",playerid, GetPlayerNameEx(playerid), zone);
			SendRadioMessage(4, TEAM_MED_COLOR, szMessage);
			Info[playerid][pServiceTime] = 30;
			return 1;
	    }
	    case    1:
	    {
  			SetPlayerAttachedObject(playerid, 9, 330, 6); // 4 = attachment slot, 330 = cellphone model, 6 = right hand
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SendClientMessageEx(playerid, COLOR_GREY, 		"Tip: Ahora usa T, y habla por el chat por teléfono. Usa /colgar para finalizar la llamada.");
			SendClientMessageEx(playerid, COLOR_ALLDEPT, 	"Comisaría: Buenas, explícanos brevemente lo que ha sucecido.");
			Mobile[playerid] = 912;
			return 1;
	    }
	    case    2:
	    {
			if(Medics < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* En este momento no se encuentran médicos disponibles, intenta más tarde!");
			format(szMessage, sizeof(szMessage), "** %s necesita un médico - usa /aceptar medico para aceptar la llamada.", GetPlayerNameEx(playerid));
			SendRadioMessage(4, TEAM_AZTECAS_COLOR, szMessage);
			SendClientMessageEx(playerid, COLOR_GENERAL, "* Llamaste a un médico espera a una llamada.");
			MedicCall = playerid;
			Info[playerid][pServiceTime] = 30;
			return 1;
	    }
	    case    3:
	    {
	        if(TaxiDrivers < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* En este momento no se encuentran taxistas trabajando, intenta más tarde!");
			format(szMessage, sizeof(szMessage), "** %s necesita un taxista en su posición - usa /aceptar taxi para aceptar la llamada.", GetPlayerNameEx(playerid));
			MessageTaxiDriver(9, TEAM_AZTECAS_COLOR, szMessage);
			SendClientMessageEx(playerid, COLOR_GENERAL, "* Has solicitado un taxista, espera por una respuesta.");
			Info[playerid][pServiceTime] = 30;
			TaxiCall = playerid;
			return 1;
	    }
	    case    4:
	    {
			if(Mechanics < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* En este momento no se encuentran mecánicos en servicio, intenta más tarde.");
			format(szMessage, sizeof(szMessage), "** %s necesita un mecánico - usa /aceptar mecanico para aceptar la llamada.", GetPlayerNameEx(playerid));
			SendFamilyMessage(6, TEAM_AZTECAS_COLOR, szMessage);
			SendClientMessageEx(playerid, COLOR_GENERAL, "* Has solicitado un mecanico, espera por una respuesta.");
			MechanicCall = playerid;
			Info[playerid][pServiceTime] = 30;
			return 1;
		}

	}
}
case	ELEVATOR:
{
 	if(response)
	{
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 276.0980, 122.1232, 1004.6172);
			SetPlayerInterior(playerid, 10);
			SetPlayerVirtualWorld(playerid, 500);
		}
		else
		{
			SetPlayerPos(playerid, 1568.6676, -1689.9708, 6.2188);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
}
case	ELEVATOR2:
{
 	if(response)
	{
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 1564.8, -1666.2, 28.32);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
		else
		{
			SetPlayerPos(playerid, 276.0980, 122.1232, 1004.6172);
			SetPlayerInterior(playerid, 10);
			SetPlayerVirtualWorld(playerid, 500);
		}
	}
}
case	ELEVATOR3:
{
 	if(response)
	{
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 1564.8, -1666.2, 28.3);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
		else
		{
			SetPlayerPos(playerid, 1568.6676, -1689.9708, 6.2188);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
}
case	ELEVATOR4:
{
 	if(response)
	{
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 301.5812,-1490.6759,-45.1302);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 600);
		}
		else
		{
			SetPlayerPos(playerid, 308.8113,-1509.8134,77.7645);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
}
case	ELEVATOR5:
{
 	if(response)
	{
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 316.2381,-1513.3770,24.9219);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
		else
		{
			SetPlayerPos(playerid, 308.8113,-1509.8134,77.7645);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
}
case	ELEVATOR7:
{
 	if(response)
	{
		if (listitem == 0)
		{
			SetPlayerPos(playerid, 301.5812,-1490.6759,-45.1302);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 600);
		}
		else
		{
			SetPlayerPos(playerid, 316.2381,-1513.3770,24.9219);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
}
case	DIALOG_NAMECHANGE:
{
	if(response)
	{
	    if(isnull(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* No has ingresado nada, vuelve a intentarlo." );
	    if(strlen(inputtext) >= 15) return SendClientMessageEx( playerid, COLOR_GREY, "* No se puede usar un nombre que está por encima de 15 caracteres." );
	    for(new i = 0; i < strlen( inputtext ); i++) if (inputtext[i] == ' ') return SendClientMessageEx(playerid, COLOR_GREY, "* Porfavor usar '_'(Guión bajo) - Nombre_Apellido.");
	    switch(Info[playerid][pMember])
	    {
	        case 8:
	        {
	            SetPVarString(playerid, "NewNameRequest", inputtext);
	            SetPVarInt(playerid, "RequestingNameChange", 1);
	            format(szMessage, sizeof(szMessage), "Has solicitado un cambio de nombre libre, espera que los administradores generales lo aprueben.", inputtext);
	            SendClientMessageEx(playerid,COLOR_GRAD1,szMessage);
	            format( szMessage, sizeof( szMessage ), ""COL_BLUE"Administración >"COL_WHITE" %s (HITMAN) (ID %d) solicitó un cambio de nombre libre a %s - /aname %d o /rname %d", GetPlayerNameEx(playerid), playerid, inputtext, playerid, playerid);
	            ABroadCast( COLOR_GENERAL, szMessage, 2 );
	        }
	        default: return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hacer esto.");
	    }
	}
	else return 1;
}
case	BUYTOYSCOP:
{
    new stringg[512];
	for(new x;x<MAX_PLAYERTOYS;x++)
	{
		new name[24] = "Nada";

		for(new i;i<sizeof(HoldingObjectsAll);i++)
		{
			if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			{
				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
			}
		}
		format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
	}
	ShowPlayerDialog(playerid, BUYTOYSCOP2, DIALOG_STYLE_LIST, ""COL_GENERAL"Selecciona un Slot", stringg, "Seleccionar", "Cancelar");
}
case	BUYTOYSCOP2: if(response)
{
    if(listitem >= 8 && Info[playerid][pVIP] <= 1 || listitem >= 8) return SendClientMessageEx(playerid, COLOR_GREY, "* Debes ser un nivel mayor de VIP.");
    if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "* Ya tienes algo en esa ranura, eliminala con /toys");
	slotselection[playerid] = listitem;
	new stringg[512];
	for(new x;x<sizeof(HoldingObjectsCop);x++)
	{
	    format(stringg, sizeof(stringg), "%s%s ($%d)\n", stringg, HoldingObjectsCop[x][holdingmodelname], HoldingObjectsCop[x][holdingprice]);
	}
	ShowPlayerDialog(playerid, BUYTOYSCOP3, DIALOG_STYLE_LIST, ""COL_GENERAL"Selecciona un Objeto", stringg, "Comprar", "Cancelar");
}
case	BUYTOYSCOP3: if(response)
{
	if(GetPlayerCash(playerid) < HoldingObjectsCop[listitem][holdingprice]) return SendClientMessageEx(playerid, COLOR_WHITE, "* No puedes pagar eso!");
	else
	{
		GivePlayerCash(playerid, -HoldingObjectsCop[listitem][holdingprice]);
	    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = HoldingObjectsCop[listitem][holdingmodelid];
	    Tax += HoldingObjectsCop[listitem][holdingprice];

		new modelid = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
	    if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
	    {
	        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
	    }
	    else if(modelid >= 18891 && modelid <= 18910)
	    {
	    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
		}
		else if(modelid >= 18926 && modelid <= 18935)
		{
			PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
		}
		else if(modelid >= 18911 && modelid <= 18920)
		{
		    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
		}
		else if(modelid == 19078 || modelid == 19078)
		{
		    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
		}
		else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
		{
		    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
		}
	    else
	    {
			PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX] = 1;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY] = 1;
			PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ] = 1;
		}

		format(szMessage, sizeof(szMessage), "* Has comprado un %s por $%d (Slot: %d)", HoldingObjectsCop[listitem][holdingmodelname], HoldingObjectsCop[listitem][holdingprice], slotselection[playerid]);
	    SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	    SendClientMessageEx(playerid, COLOR_WHITE, " Usa /toys para editar tus objetos");
	}
}
case	BUYTOYSGOLD: if(response)
{
	if(Info[playerid][pVIP] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "* No tienes acceso a este comando.");
    new stringg[512];
	for(new x;x<MAX_PLAYERTOYS;x++)
	{
		new name[24] = "Nada";
		for(new i;i<sizeof(HoldingObjectsAll);i++)
		{
			if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID]){format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);}
		}
		format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
	}
	ShowPlayerDialog(playerid, BUYTOYSGOLD2, DIALOG_STYLE_LIST, ""COL_GENERAL"Selecciona un Slot", stringg, "Seleccionar", "Cancelar");
}
case	BUYTOYSGOLD2:
{
	if(response)
	{
    	if(Info[playerid][pVIP] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "* No tienes acceso a este comando.");
		if(listitem >= 8 && Info[playerid][pVIP] != 2) return SendClientMessageEx(playerid, COLOR_GREY, "* Debes ser un nivel mayor de VIP para usar este slot.");
		slotselection[playerid] = listitem;
		ShowModelSelectionMenu(playerid, ToyListGold, "Objetos VIP Gold+", 0x000000FF, COLOR_GREY, 0xFFF6BDFF);
	}
	else return 1;
}
case	BUYTOYS:
{
    if(response)
    {
    	new stringg[512];
		for(new x;x<MAX_PLAYERTOYS;x++)
		{
			new name[24];
    		format(name, sizeof(name), "Nada");
			for(new i; i < sizeof(HoldingObjectsAll); i++)
   			{
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
    			{
   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}
			format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		ShowPlayerDialog(playerid, BUYTOYS2, DIALOG_STYLE_LIST, ""COL_GENERAL"Selecciona un Slot", stringg, "Seleccionar", "Cancelar");
	}
	if(!response)
	{
    	if(Info[playerid][pVIP] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "* No tienes acceso a esta función. (VIP Gold)");
    	return ShowPlayerDialog(playerid, BUYTOYSGOLD, DIALOG_STYLE_MSGBOX, "Tienda de Accesorios VIP", "Bienvenido a la tienda de accesorios VIP! Aquí puedes comprar accesorios para ti.\nPrimero, tienes que elegir un slot.","Ok", "Salir");
	}
}
case	BUYTOYS2:
{
	if(response)
	{
 	   if(listitem >= 8 && Info[playerid][pVIP] != 3) return SendClientMessageEx(playerid, COLOR_GREY, "* Debes ser un nivel mayor de VIP para usar este slot.");
       if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "* Ya tienes algo en esa ranura, eliminala con /toys");
	   slotselection[playerid] = listitem;
       ShowModelSelectionMenu(playerid, ToyList, "Selecciona un objeto", 0x000000FF, COLOR_GREY, 0xFFF6BDFF);
	}
	else return ShowPlayerDialog(playerid, BUYTOYS, DIALOG_STYLE_MSGBOX, "Tienda de Accesorios", "Bienvenido a la tienda de accesorios! Aquí puedes comprar accesorios para ti.\nPrimero, tienes que elegir que menú verás","Normal", "VIP");
}
case	TOYS:
{
	if(response)
	{
		switch(listitem)
		{
			case	0:
			{
	    		new stringg[512];
				for(new x;x<MAX_PLAYERTOYS;x++)
				{
		    		new name[24];
		    		format(name, sizeof(name), "Nada");
		    		for(new i;i<sizeof(HoldingObjectsAll);i++)
		    		{
   						if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
		        		{
       						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						}
					}
					format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
				}
				ShowPlayerDialog(playerid, WEARTOY, DIALOG_STYLE_LIST, ""COL_GENERAL"Selecciona un Objeto", stringg, "Seleccionar", "Atrás");
    		}
    		case	1:
			{
	    		new stringg[512];
				for(new x;x<MAX_PLAYERTOYS;x++)
				{
		    		new name[24];
		    		format(name, sizeof(name), "Nada");
					for(new i;i<sizeof(HoldingObjectsAll);i++)
		    		{
   						if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
		        		{
       						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						}
					}
					format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
				}
				ShowPlayerDialog(playerid, EDITTOYS, DIALOG_STYLE_LIST, ""COL_GENERAL"Selecciona un Objeto", stringg, "Seleccionar", "Atrás");
			}
			case	2:
			{
	    		new stringg[512];
				for(new x;x<MAX_PLAYERTOYS;x++)
				{
		    		new name[24];
		    		format(name, sizeof(name), "Nada");
		    		for(new i;i<sizeof(HoldingObjectsAll);i++)
		    		{
   						if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
		        		{
       						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						}
					}
					format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
				}
				ShowPlayerDialog(playerid, DELETETOY, DIALOG_STYLE_LIST, ""COL_GENERAL"Selecciona un Objeto", stringg, "Borrar", "Atrás");
			}
		}
	}
}
case	EDITTOYS:
{
	if(response)
	{
    	if(PlayerToyInfo[playerid][listitem][ptModelID] == 0) return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, ""COL_GENERAL"Menu Accesorios: {FFFFFF}Edición", "No tienes nada en ese slot!", "OK", "");
		SendClientMessageEx(playerid, COLOR_WHITE, "TIP: Posiciona bien la cámara y usa /headmove para una edición mucho mejor.");
	    slotselection[playerid] = listitem;
	    ShowEditMenu(playerid);
	}
	else return ShowPlayerDialog( playerid, TOYS, DIALOG_STYLE_LIST, ""COL_GENERAL"Toy Menu", ""COL_GENERAL"* "COL_WHITE"Poner/Quitar un Toy\n"COL_GENERAL"* "COL_WHITE"Editar un Toy\n"COL_GENERAL"* "COL_WHITE"Eliminar un Toy","OK", "Cancelar" );
}
case	EDITTOYS2:
{
    if(response)
    {
        switch(listitem)
		{
            case 0: ShowPlayerDialog(playerid, EDITTOYSBONE, DIALOG_STYLE_LIST, ""COL_GENERAL"Selecciona una Parte", "Columna\nCabeza\nBrazo Izq Sup\nBrazo Der Sup\nMano Izq\nMano Derecha\nMuslo Izq\nMuslo Der\nPie Izq\nPie Der\nRight calf\nLeft calf\nAnteBrazo Izq\nAnteBrazo Der\nClavicula Izq\nClavicula Der\nCuello\nQuijada", "Seleccionar", "Cancelar");
			case 1:
			{
				//SetPlayerAttachedObject(playerid, slotselection[playerid], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID],
				//PlayerToyInfo[playerid][slotselection[playerid]][ptBone], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX],
				//PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
				//PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY],
				//PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleX],
				//PlayerToyInfo[playerid][slotselection[playerid]][ftscaleY], PlayerToyInfo[playerid][slotselection[playerid]][ftscaleZ]);
				EditAttachedObject(playerid, slotselection[playerid]);
				Editing[playerid] =1;
			    return SendClientMessage(playerid, -1, "* Mantén presionado "COL_GENERAL"~k~~PED_SPRINT~{FFFFFF} para cambiar la posición de la cámara.");
			}
		}
	}
	else
	{
	    new stringg[512];
		for(new x;x<MAX_PLAYERTOYS;x++)
		{
		    new name[24];
		    format(name, sizeof(name), "Nada");

		    for(new i;i<sizeof(HoldingObjectsAll);i++)
		    {
   				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
		        {
       				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}
			format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		ShowPlayerDialog(playerid, EDITTOYS, DIALOG_STYLE_LIST, ""COL_GENERAL"Selecciona un Accesorio", stringg, "Seleccionar", "Cancelar");
	}
}
case	EDITTOYSBONE:
{
    if(response){PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = listitem+1;}
 	ShowEditMenu(playerid);
}
case	WEARTOY:
{
    if(response)
    {
    	if(PlayerToyInfo[playerid][listitem][ptModelID] == 0)
    	{
        	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, ""COL_GENERAL"Menu Accesorios: {FFFFFF}Poner/Quitar", "No tienes ningún objeto en este slot!", "OK", "");
		}
		else
		{
	    	if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
			{
		 		new name[24];
		    	format(name, sizeof(name), "Nada");
				for(new i;i<sizeof(HoldingObjectsAll);i++)
   				{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][listitem][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
		    	format(szMessage, sizeof(szMessage), "Te quitaste correctamente tu %s (Bone: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][listitem][ptBone]], listitem);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
		    	RemovePlayerAttachedObject(playerid, listitem);
			}
			else
			{
		    	SetPlayerAttachedObject(playerid, listitem, PlayerToyInfo[playerid][listitem][ptModelID], PlayerToyInfo[playerid][listitem][ptBone], PlayerToyInfo[playerid][listitem][ptPosX], PlayerToyInfo[playerid][listitem][ptPosY], PlayerToyInfo[playerid][listitem][ptPosZ], PlayerToyInfo[playerid][listitem][ptRotX], PlayerToyInfo[playerid][listitem][ptRotY], PlayerToyInfo[playerid][listitem][ptRotZ], PlayerToyInfo[playerid][listitem][ftscaleX],
				PlayerToyInfo[playerid][listitem][ftscaleY], PlayerToyInfo[playerid][listitem][ftscaleZ]);
		    	new name[24];
		    	format(name, sizeof(name), "Nada");
				for(new i;i<sizeof(HoldingObjectsAll);i++)
   				{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][listitem][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				format(szMessage, sizeof(szMessage), "%s puesto correctamente. (Parte: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][listitem][ptBone]], listitem);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			}
		}
	}
	else return ShowPlayerDialog( playerid, TOYS, DIALOG_STYLE_LIST, ""COL_GENERAL"Toy Menu", ""COL_GENERAL"* "COL_WHITE"Poner/Quitar un Toy\n"COL_GENERAL"* "COL_WHITE"Editar un Toy\n"COL_GENERAL"* "COL_WHITE"Eliminar un Toy","OK", "Cancelar" );
}
case	DELETETOY:
{
	if(response)
	{
		PlayerToyInfo[playerid][listitem][ptModelID] = 0;
		PlayerToyInfo[playerid][listitem][ptBone] = 0;
		PlayerToyInfo[playerid][listitem][ptPosX] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosY] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosZ] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosX] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosY] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosZ] = 0.0;
		PlayerToyInfo[playerid][listitem][ftscaleZ] = 0.0;
		PlayerToyInfo[playerid][listitem][ftscaleY] = 0.0;
		PlayerToyInfo[playerid][listitem][ftscaleX] = 0.0;
		if(IsPlayerAttachedObjectSlotUsed(playerid, listitem)) RemovePlayerAttachedObject(playerid, listitem);
		format(szMessage, sizeof(szMessage), "Has eliminado tu accesorio del slot %d", listitem);
    	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, ""COL_GENERAL"Menu Accesorios", szMessage, "OK", "");
	}
	else return ShowPlayerDialog( playerid, TOYS, DIALOG_STYLE_LIST, ""COL_GENERAL"Toy Menu", ""COL_GENERAL"* "COL_WHITE"Poner/Quitar un Toy\n"COL_GENERAL"* "COL_WHITE"Editar un Toy\n"COL_GENERAL"* "COL_WHITE"Eliminar un Toy","OK", "Cancelar" );
}
case	EQUIPO_CNN:
{
    if(response == 1)
    {
        ResetPlayerWeaponsEx(playerid);
		switch(listitem)
        {
	        case 0:
	        {
				GivePlayerValidWeapon(playerid, 1, 99999);
				GivePlayerValidWeapon(playerid, 41, 1500); Skin(playerid, 164);
				SetHP(playerid, 100);
	            format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s coge el equipo de seguridad.", GetPlayerNameEx(playerid));
                NearMsg(playerid, -1, szMessage,20.0);
			}
	        case 1:
	        {
				GivePlayerValidWeapon(playerid, 41, 1500);
                GivePlayerValidWeapon(playerid, 46, 1);
				SetHP(playerid, 100);
	            format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s coge el equipo de Periodista.", GetPlayerNameEx(playerid));
	            NearMsg(playerid, -1, szMessage,20.0);
	        }
	        case 2:
			{
			    Skin(playerid, Info[playerid][pChar]);
			    format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s se viste con ropa normal.", GetPlayerNameEx(playerid));
			    NearMsg(playerid, -1, szMessage,20.0);
			}
	    }
    }
}
case	EQUIPO_GOB:
{
    if(response == 1)
    {
        switch(listitem)
        {
	        case 0:
	        {
				GivePlayerValidWeapon(playerid, 22, 68);
				GivePlayerValidWeapon(playerid, 1, 99999);
				GivePlayerValidWeapon(playerid, 41, 1500);
				SetPlayerSkin(playerid, 163);
				SetHP(playerid, 100);
	            format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s coge el equipo de seguridad.", GetPlayerNameEx(playerid));
	            NearMsg(playerid, -1, szMessage,20.0);
	        }
	        case 1:
	        {
				GivePlayerValidWeapon(playerid, 22, 68);
				GivePlayerValidWeapon(playerid, 1, 99999);
				GivePlayerValidWeapon(playerid, 41, 1500);
				SetHP(playerid, 100);
				SetPlayerSkin(playerid, 166);
	            format(szMessage, sizeof(szMessage), "*"COL_PURPLE"* %s coge el equipo de chofér.", GetPlayerNameEx(playerid));
	            NearMsg(playerid, -1, szMessage,20.0);
	        }
	        case 2:
	        {
				SetHP(playerid, 100);
				format(szMessage, sizeof(szMessage), "*"COL_PURPLE"* %s coge botiquín de salud.", GetPlayerNameEx(playerid));
	            NearMsg(playerid, -1, szMessage,20.0);
	        }
	        case 3:
	        {
				GiveArmorToPlayer(playerid, 100);
				format(szMessage, sizeof(szMessage), "*"COL_PURPLE"* %s coge un chaleco kevlar.", GetPlayerNameEx(playerid));
	            NearMsg(playerid, -1, szMessage,20.0);
	        }
	        case 4:
			{
			    SetPlayerSkin(playerid, Info[playerid][pChar]);
			    format(szMessage, sizeof(szMessage), "*"COL_PURPLE"* %s se viste con ropa normal.", GetPlayerNameEx(playerid));
			    NearMsg(playerid, -1, szMessage,20.0);
			}
	    }
    }
}
case	TELEPORTS_FACCIONES:
{
    if(response == 1){
        switch (listitem){
            case 0:{
				SetPosEx(playerid, 1553.1155,-1675.7045,16.1953,0,0,0);
				SendClientMessageEx(playerid, COLOR_WHITE, "San Andreas Police Department.");
			}
			case 1:{
				SetPosEx(playerid, 363.0130,-1534.7684,33.3782,0,0,0);
				SendClientMessageEx(playerid, COLOR_WHITE, "Federal Bureau Of Investigation.");
			}
			case 2:{
				SetPosEx(playerid, 1209.5090,-1325.6429,13.3984,0,0,0);
				SendClientMessageEx(playerid, COLOR_WHITE, "San Andreas Medical Department.");
			}
			case 3:{
				SetPosEx(playerid, 792.8608,-1317.8787,13.3828,0,0,0);
				SendClientMessageEx(playerid, COLOR_WHITE, "Cable News Network.");
			}
			case 4:{
				SetPosEx(playerid, 1753.9758,-1887.2660,13.3828,0,0,0);
				SendClientMessageEx(playerid, COLOR_WHITE, "Taxi Yellow Company.");
			}
			case 5:{
				SetPosEx(playerid, 2228.7241,-1964.6078,13.5442,0,0,0);
				SendClientMessageEx(playerid, COLOR_WHITE, "Car point.");
			}
			case 6:{
				SetPosEx(playerid, 1479.9824,-1766.3359,13.5469,0,0,0);
				SendClientMessageEx(playerid, COLOR_WHITE, "Gobierno de San Andreas.");
			}
		}
	}
}
case	PETITION_DIALOG:
{
    if(response == 1)
    {
        format(szMessage, sizeof(szMessage), "*"COL_PURPLE"* %s acepta una petición.", GetPlayerNameEx(playerid));
  		NearMsg(playerid, -1, szMessage,20.0);
		if(Petition_ID[playerid] == 2)
        {
			format(szMessage, sizeof(szMessage), "* Pagaste una multa de $%d al oficial %s.", TicketMoney[playerid], GetPlayerNameEx(TicketOffer[playerid]));
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			format(szMessage, sizeof(szMessage), "* %s te ha pagado la multa de $%d.", GetPlayerNameEx(playerid), TicketMoney[playerid]);
			SendClientMessageEx(TicketOffer[playerid], COLOR_WHITE, szMessage);
			GivePlayerCash(playerid, - TicketMoney[playerid]);
			GivePlayerCash(TicketOffer[playerid], TicketMoney[playerid]);
			Tax += TicketMoney[playerid];
			TicketOffer[playerid] = 999;
			TicketMoney[playerid] = 0;
			Facturing[playerid] = 0;
			Petition_ID[playerid] = 0;
        }
    }
    else
    {
        format(szMessage, sizeof(szMessage), "*"COL_PURPLE"* %s ha rechazado una petición.", GetPlayerNameEx(playerid));
  		NearMsg(playerid, -1, szMessage,20.0);
        if(Petition_ID[playerid] == 2)
        {
			SendClientMessageEx(playerid, COLOR_RED2, "Multa rechazada!");
			format(szMessage, sizeof(szMessage), "* %s te rechazó la multa!", GetPlayerNameEx(playerid));
			SendClientMessageEx(TicketOffer[playerid], COLOR_RED2, szMessage);
			TicketOffer[playerid] = 999;
			TicketMoney[playerid] = 0;
			Facturing[playerid] = 0;
			Petition_ID[playerid] = 0;
        }
    }
}
case	NGMENU:
{
	if(response) switch(listitem)
	{
		case 0: // NG Duty
		{
			if(OnDuty[playerid]==0)
			{
				format(szMessage, sizeof(szMessage), "* Soldado %s toma una placa y una pistola de su casillero.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				//SetPlayerColor(playerid, COLOR_NG);
				SetPlayerColor(playerid, TEAM_HIT_COLOR);
				SetPlayerSkin(playerid, 287);
    			GiveArmorToPlayer(playerid, 100.0);
				GivePlayerValidWeapon(playerid, 24, 42);
				GivePlayerValidWeapon(playerid, 31, 230);
				OnDuty[playerid] = 1;
			}
			else if(OnDuty[playerid]==1)
			{
				format(szMessage, sizeof(szMessage), "* Soldado %s deja su placa y armas en el casillero.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ResetPlayerWeaponsEx(playerid);
				SetPlayerColor(playerid, TEAM_HIT_COLOR);
				GiveArmorToPlayer(playerid, 0.0);
				SetPlayerSkin(playerid, Info[playerid][pChar]);
				OnDuty[playerid] = 0;
			}
		}
		case 1: // NG Uniforms
		{
		    ShowPlayerDialog(playerid, NGMENUSKIN, DIALOG_STYLE_LIST, "SAEM Skins", "Coronel\nOficial 1 (OFF)\nOfcial 2 (OFF)\nRanger\nOff Duty Hombre\nOff Duty Mujer\n\
			Seguridad Negro\nSeguridad Blanco\nMédico\nTraje Táctico", "Ok", "Cancelar");
		}
		case 2: // NG Weapons
		{
			ShowPlayerDialog(playerid, NGMENUWEP, DIALOG_STYLE_LIST, "SAEM Armas","Deagle\nSpas12\nShotgun\nMP5\nM4\nAK47\nSniper Rifle\nRifle\n\
			SDPistol\nGrenada\nTear Gas\nNitestick\nSpray\nCamara", "Purchase", "Cancelar");
		}
		case 3: // NG Undercover
		{
			ShowPlayerDialog(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Encubierto","Escoge un skin (por ID).", "Ok", "Cancelar");
		}
		case 4: // NG Heal
		{
			GiveArmorToPlayer(playerid, 100);
		}
		case 5: SetHP(playerid, 100);
		case 6: ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accesorios", "Bienvenido a la taquilla de accesorios de SAEM","Continuar", "Cancelar" );
		case 7: GivePlayerValidWeapon(playerid, 46, 1);
	}
}
case	NGMENUSKIN:
{
	if(response)
	{
		if(listitem == 0) // LSPD Uniforms
		{
		    if(Info[playerid][pRank] == 6)
		    {
				SetPlayerSkin(playerid, 295);
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "* No eres rango 6.");
			}
		}
		if(listitem == 1) //LSPD Uniforms
		{
			SetPlayerSkin(playerid, 240);
		}
		if(listitem == 2) // LSPD Uniforms
		{
			SetPlayerSkin(playerid, 186);
		}
		if(listitem == 3) //LSPD Uniforms
		{
			SetPlayerSkin(playerid, 287);
		}
		if(listitem == 4) //LSPD Uniforms
		{
			SetPlayerSkin(playerid, 179);
		}
		if(listitem == 5) // LSPD Uniforms
		{
			SetPlayerSkin(playerid, 191);
		}
		if(listitem == 6) // LSPD Uniforms
		{
			SetPlayerSkin(playerid, 163);
		}
		if(listitem == 7) //LSPD Uniforms
		{
			SetPlayerSkin(playerid, 164);
		}
		if(listitem == 8) //LSPD Uniforms
		{
			SetPlayerSkin(playerid, 276);
		}
		if(listitem == 9) //LSPD Uniforms
		{
			SetPlayerSkin(playerid, 285);
		}
	}
}
case	NGMENUWEP:
{
	if(response)
	{
		if(listitem == 0) return GivePlayerValidWeapon(playerid, 24, 42);
		if(listitem == 1) return GivePlayerValidWeapon(playerid, 27, 120);
		if(listitem == 2) return GivePlayerValidWeapon(playerid, 25, 62);
		if(listitem == 3) return GivePlayerValidWeapon(playerid, 29, 150);
		if(listitem == 4) return GivePlayerValidWeapon(playerid, 31, 230);
		if(listitem == 5) return GivePlayerValidWeapon(playerid, 30, 150);
		if(listitem == 6) return GivePlayerValidWeapon(playerid, 34, 6);
		if(listitem == 7) return GivePlayerValidWeapon(playerid, 33, 32);
		if(listitem == 8) return GivePlayerValidWeapon(playerid, 23, 68);
		if(listitem == 9) return GivePlayerValidWeapon(playerid, 16, 6);
		if(listitem == 10) return GivePlayerValidWeapon(playerid, 17, 6);
		if(listitem == 11) return GivePlayerValidWeapon(playerid, 3, 99999);
		if(listitem == 12) return GivePlayerValidWeapon(playerid, 41, 1500);
		if(listitem == 13) return GivePlayerValidWeapon(playerid, 46, 1);
	}
}
	case DIALOG_CREATEGUN:
	{
		if(!response)
			return 1;
	    switch(listitem){
			case 0:{
				if(Info[playerid][pMats] >= 30){
					GivePlayerValidWeapon(playerid, 8, 99999);
			        Info[playerid][pMats] -= 30;
			        SendClientMessage(playerid, COLOR_WHITE, "Creaste una katana. Usa /dararma [playerid] para dar el arma.");
			        format(szMessage, sizeof(szMessage), "* %s crea una katana con sus materiales.", GetPlayerNameEx(playerid));
			        ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			        Info[playerid][pArmsSkill]++;
			        Info[playerid][pScrewdriver]--;
			        SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
					switch(Info[playerid][pArmsSkill]) {
						case 50, 100, 150, 200, 250, 300, 350, 400, 450, 500: {
							format(szMessage,sizeof(szMessage),"Felicitaciones! Tu nivel de creación de armas es ahora %d. Ahora puedes crear mas armas.",Info[playerid][pArmsSkill]/50);
							SendClientMessage(playerid,COLOR_WHITE,szMessage);
						}
					}
			    }
				else return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficientes materiales.");
			}
			case 1: {
				if(Info[playerid][pMats] >= 30) {
					GivePlayerValidWeapon(playerid, 15, 99999);
					Info[playerid][pMats] -= 30;
					SendClientMessage(playerid, COLOR_WHITE,"Creaste una Caña. Usa /dararma [playerid] para dar el arma.");
			        format(szMessage, sizeof(szMessage), "* %s crea una caña con sus materiales.", GetPlayerNameEx(playerid));
			        ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			        Info[playerid][pArmsSkill]++;
			        Info[playerid][pScrewdriver]--;
			        SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
					switch(Info[playerid][pArmsSkill]) {
						case 50, 100, 150, 200, 250, 300, 350, 400, 450, 500: {
							format(szMessage,sizeof(szMessage),"Felicitaciones! Tu nivel de creación de armas es ahora %d. Ahora puedes crear mas armas.",Info[playerid][pArmsSkill]/50);
							SendClientMessage(playerid,COLOR_WHITE,szMessage);
						}
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficientes materiales.");
			}
			case 2: {
				if(Info[playerid][pMats] >= 33) {
					GivePlayerValidWeapon(playerid, 7, 99999);
					Info[playerid][pMats] -= 33;
					SendClientMessage(playerid, COLOR_WHITE,"Creaste un palo de Billar. Usa /dararma [playerid] para dar el arma.");
					format(szMessage, sizeof(szMessage), "* %s crea un palo de billar con sus materiales.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			        Info[playerid][pArmsSkill]++;
			        Info[playerid][pScrewdriver]--;
			        SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
					switch(Info[playerid][pArmsSkill]) {
						case 50, 100, 150, 200, 250, 300, 350, 400, 450, 500: {
							format(szMessage,sizeof(szMessage),"Felicitaciones! Tu nivel de creación de armas es ahora %d. Ahora puedes crear mas armas.",Info[playerid][pArmsSkill]/50);
							SendClientMessage(playerid,COLOR_WHITE,szMessage);
						}
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficientes materiales.");
			}
			case 3: {
				if(Info[playerid][pMats] >= 33) {
					GivePlayerValidWeapon(playerid, 5, 99999);
					Info[playerid][pMats] -= 33;
					SendClientMessage(playerid, COLOR_WHITE,"Creaste un bat. Usa /dararma [playerid] para dar el arma.");
					format(szMessage, sizeof(szMessage), "* %s crea un bat con sus materiales.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			        Info[playerid][pArmsSkill]++;
			        Info[playerid][pScrewdriver]--;
			        SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
					switch(Info[playerid][pArmsSkill]) {
						case 50, 100, 150, 200, 250, 300, 350, 400, 450, 500: {
							format(szMessage,sizeof(szMessage),"Felicitaciones! Tu nivel de creación de armas es ahora %d. Ahora puedes crear mas armas.",Info[playerid][pArmsSkill]/50);
							SendClientMessage(playerid,COLOR_WHITE,szMessage);
						}
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficientes materiales.");
			}
			case 4: {
				if(Info[playerid][pMats] >= 50) {
					GivePlayerValidWeapon(playerid, 6, 99999);
					Info[playerid][pMats] -= 50;
					SendClientMessage(playerid, COLOR_WHITE,"Creaste una Pala. Usa /dararma [playerid] para dar el arma.");
					format(szMessage, sizeof(szMessage), "* %s crea una Pala con sus materiales.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			        Info[playerid][pArmsSkill]++;
			        Info[playerid][pScrewdriver]--;
			        SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
					switch(Info[playerid][pArmsSkill]) {
						case 50, 100, 150, 200, 250, 300, 350, 400, 450, 500: {
							format(szMessage,sizeof(szMessage),"Felicitaciones! Tu nivel de creación de armas es ahora %d. Ahora puedes crear mas armas.",Info[playerid][pArmsSkill]/50);
							SendClientMessage(playerid,COLOR_WHITE,szMessage);
						}
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficientes materiales.");
			}
			case 5: {
				if(Info[playerid][pMats] >= 250) {
					GivePlayerValidWeapon(playerid, 22, 14);
					Info[playerid][pMats] -= 250;
					SendClientMessage(playerid, COLOR_WHITE,"Creastes una pistola 9mm. Usa /dararma [playerid] para dar el arma.");
					format(szMessage, sizeof(szMessage), "* %s crea una pistola 9mm con sus materiales.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					Info[playerid][pArmsSkill]++;
					Info[playerid][pScrewdriver]--;
					SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
					switch(Info[playerid][pArmsSkill]) {
						case 50, 100, 150, 200, 250, 300, 350, 400, 450, 500: {
							format(szMessage,sizeof(szMessage),"Felicitaciones! Tu nivel de creación de armas es ahora %d. Ahora puedes crear mas armas.",Info[playerid][pArmsSkill]/50);
							SendClientMessage(playerid,COLOR_WHITE,szMessage);
						}
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficientes materiales.");
			}
			case 6: {
				if(Info[playerid][pMats] >= 300) {
					GivePlayerValidWeapon(playerid, 23, 14);
					Info[playerid][pMats] -= 300;
					SendClientMessage(playerid, COLOR_WHITE, "Creastes una pistola con silenciador. Usa /dararma [playerid] para dar el arma.");
					format(szMessage, sizeof(szMessage), "* %s crea una pistola con silenciador con sus materiales.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					Info[playerid][pArmsSkill]++;
					Info[playerid][pScrewdriver]--;
					SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
					switch(Info[playerid][pArmsSkill]) {
						case 50, 100, 150, 200, 250, 300, 350, 400, 450, 500: {
							format(szMessage,sizeof(szMessage),"Felicitaciones! Tu nivel de creación de armas es ahora %d. Ahora puedes crear mas armas.",Info[playerid][pArmsSkill]/50);
							SendClientMessage(playerid,COLOR_WHITE,szMessage);
						}
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficientes materiales.");
			}
			case 7: {
				if(Info[playerid][pMats] >= 550) {
					GivePlayerValidWeapon(playerid, 25, 8);
					Info[playerid][pMats] -= 550;
					SendClientMessage(playerid, COLOR_WHITE,"Creastes una shotgun. Usa /dararma [playerid] para dar el arma.");
					format(szMessage, sizeof(szMessage),"* %s crea una shotgun con sus materiales.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					Info[playerid][pArmsSkill]++;
					Info[playerid][pScrewdriver]--;
					SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
					switch(Info[playerid][pArmsSkill]) {
						case 50, 100, 150, 200, 250, 300, 350, 400, 450, 500: {
							format(szMessage,sizeof(szMessage),"Felicitaciones! Tu nivel de creación de armas es ahora %d. Ahora puedes crear mas armas.",Info[playerid][pArmsSkill]/50);
							SendClientMessage(playerid,COLOR_WHITE,szMessage);
						}
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficientes materiales.");
			}
			case 8: {
				if(Info[playerid][pMats] >= 1000) {
					GivePlayerValidWeapon(playerid, 24, 7);
					Info[playerid][pMats] -= 1000;
					SendClientMessage(playerid, COLOR_WHITE, "Creastes una Desert Eagle. Usa /dararma [playerid] para dar el arma.");
					format(szMessage, sizeof(szMessage), "* %s crea una Desert Eagle con sus materiales.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					Info[playerid][pArmsSkill]++;
					Info[playerid][pScrewdriver]--;
					SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
					switch(Info[playerid][pArmsSkill]) {
						case 50, 100, 150, 200, 250, 300, 350, 400, 450, 500: {
							format(szMessage,sizeof(szMessage),"Felicitaciones! Tu nivel de creación de armas es ahora %d. Ahora puedes crear mas armas.",Info[playerid][pArmsSkill]/50);
							SendClientMessage(playerid,COLOR_WHITE,szMessage);
						}
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficientes materiales.");
			}
			case 9: {
				if( Info[playerid][pMats] >= 1500 ){
					GivePlayerValidWeapon(playerid, 29, 25);
					Info[playerid][pMats] -= 1500;
					SendClientMessage(playerid, COLOR_WHITE, "Creastes una MP5. Usa /dararma [playerid] para dar el arma.");
					format(szMessage, sizeof(szMessage), "* %s crea una MP5 con sus materiales.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					Info[playerid][pArmsSkill]++;
					Info[playerid][pScrewdriver]--;
					SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
					switch(Info[playerid][pArmsSkill]) {
						case 50, 100, 150, 200, 250, 300, 350, 400, 450, 500: {
							format(szMessage,sizeof(szMessage),"Felicitaciones! Tu nivel de creación de armas es ahora %d. Ahora puedes crear mas armas.",Info[playerid][pArmsSkill]/50);
							SendClientMessage(playerid,COLOR_WHITE,szMessage);
						}
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficientes materiales.");
			}
			case 10: {
			    if(Info[playerid][pVIP] <= 3) return SendClientMessage(playerid, COLOR_GREY, "* No eres VIP Gold.");
				if(Info[playerid][pMats] >= 900 ){
					GivePlayerValidWeapon(playerid, 28, 25);
					Info[playerid][pMats] -= 900;
					SendClientMessage(playerid, COLOR_WHITE, "Creastes un Micro Uzi. Usa /dararma [playerid] para dar el arma.");
					format(szMessage, sizeof(szMessage), "* %s crea una Micro Uzi con sus materiales.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					Info[playerid][pArmsSkill]++;
					Info[playerid][pScrewdriver]--;
					SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
					switch(Info[playerid][pArmsSkill]) {
						case 50, 100, 150, 200, 250, 300, 350, 400, 450, 500: {
							format(szMessage,sizeof(szMessage),"Felicitaciones! Tu nivel de creación de armas es ahora %d. Ahora puedes crear mas armas.",Info[playerid][pArmsSkill]/50);
							SendClientMessage(playerid,COLOR_WHITE,szMessage);
						}
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficientes materiales.");
			}
			case 11: {
				if(Info[playerid][pMats] >= 15500) {
					GivePlayerValidWeapon(playerid, 30, 18);
					Info[playerid][pMats] -= 15500;
					SendClientMessage(playerid, COLOR_WHITE, "Creastes una AK-47. Usa /dararma [playerid] para dar el arma.");
					format(szMessage, sizeof(szMessage), "* %s crea una AK-47 con sus materiales.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					Info[playerid][pArmsSkill]++;
					Info[playerid][pScrewdriver]--;
					SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
					switch(Info[playerid][pArmsSkill]) {
						case 50, 100, 150, 200, 250, 300, 350, 400, 450, 500: {
							format(szMessage,sizeof(szMessage),"Felicitaciones! Tu nivel de creación de armas es ahora %d. Ahora puedes crear mas armas.",Info[playerid][pArmsSkill]/50);
							SendClientMessage(playerid,COLOR_WHITE,szMessage);
						}
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficientes materiales.");
			}
			case 12:{
				if(Info[playerid][pMats] >= 15500){
					GivePlayerValidWeapon(playerid, 31, 18);
					Info[playerid][pMats] -= 15500;
					SendClientMessage(playerid, COLOR_WHITE, "Creastes una M4A1. Usa /dararma [playerid] para dar el arma.");
					format(szMessage, sizeof(szMessage), "* %s crea una M4A1 con sus materiales.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					Info[playerid][pArmsSkill]++;
					Info[playerid][pScrewdriver]--;
					SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
					switch(Info[playerid][pArmsSkill]) {
						case 50, 100, 150, 200, 250, 300, 350, 400, 450, 500: {
							format(szMessage,sizeof(szMessage),"Felicitaciones! Tu nivel de creación de armas es ahora %d. Ahora puedes crear mas armas.",Info[playerid][pArmsSkill]/50);
							SendClientMessage(playerid,COLOR_WHITE,szMessage);
						}
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficientes materiales.");
			}
			case 13: {
				if(Info[playerid][pMats] >= 30000) {
                    GivePlayerValidWeapon(playerid, 34, 2);
					Info[playerid][pMats] -= 30000;
					SendClientMessage(playerid, COLOR_WHITE,"Creastes un sniper rifle. Usa /dararma [playerid] para dar el arma.");
					format(szMessage, sizeof(szMessage), "* %s crea un sniper rifle con sus materiales.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
					Info[playerid][pArmsSkill]++;
					Info[playerid][pScrewdriver]--;
					SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
					switch(Info[playerid][pArmsSkill]) {
						case 50, 100, 150, 200, 250, 300, 350, 400, 450, 500: {
							format(szMessage,sizeof(szMessage),"Felicitaciones! Tu nivel de creación de armas es ahora %d. Ahora puedes crear armas más poderosas.",Info[playerid][pArmsSkill]/50);
							SendClientMessage(playerid,COLOR_WHITE,szMessage);
						}
					}
				}
				else return SendClientMessage(playerid, COLOR_GREY, "* No tienes suficientes materiales.");
			}
		}
	}
    case DIALOG_GMX:
	{
		if(!response) return SendClientMessage(playerid, COLOR_GREY, "* Intento de reiniciar servidor cancelado.");
		foreach(Player, x)
		{
			if(Info[x][pAdmin] > 1)
			{
				if(Info[x][pTempName] == 1)
				{
					SetPlayerName(x, Info[x][pNormalName]);
					Info[x][pTempName] = 0;
					Info[x][pAdminDuty] = 0;
					SendClientMessage(x, COLOR_WHITE, "El servidor será reiniciado; se forzó tu cambio de nombre original para evitar perdidas en tu cuenta.");
				}
			}
		}

		saveAccounts();
		SaveStuff();
	    UpdatePoints();
		atmSave();
		saveCarSale();
		saveCodes();
		SendClientMessage(playerid, COLOR_WHITE, "El servidor será reiniciado; se guardaron todos los datos de cuentas y servicios.");
		GameTextForAll("Protocolo de reinicio activado", 1110, 5);

		iGMXTick = 6;
		iGMXTimer = SetTimer("restartTimer", 1000, true);
	}
	case DIALOG_ADMAIN: if(response) switch(listitem)
	{
		case 0:{
			new addialog[2256], itemid = 0;
			for(new i = 0; i < MAX_AD; i++){
				if(ADInfo[i][aActive] == 1 && itemid < 40){
					ListItemTrackId[playerid][itemid] = i;
					itemid++;
					format(addialog, sizeof(addialog), "%s[%i] %s...[%d]", addialog, i, (ADInfo[i][aResume]), ADInfo[i][aNumber] );
					format(addialog, sizeof(addialog), "%s\n", addialog);
				}
			}
			format(addialog, sizeof(addialog), "%s\n", addialog);
			if(ADAvalibles() == 0) {
			    // Fix BUG Dialog String null - CRASH
				ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Anuncios", "Lista de Anuncios\nBuscar Anuncios\nPoner un Anuncio\nBorrar Anuncio", "Seleccionar", "Cancelar");
				SendClientMessage(playerid, COLOR_GREY, "* Ningún anuncio ha sido publicado.");
			}
			else return ShowPlayerDialog(playerid, DIALOG_ADLIST, DIALOG_STYLE_LIST, "Anuncios - Lista", addialog, "Seleccionar", "Atrás");
		}
		case 1: ShowPlayerDialog(playerid, DIALOG_ADSEARCH, DIALOG_STYLE_INPUT, "Anuncios - Buscar", "Ingresa alguna frase de lo que buscas. (Más de 3 letras)", "Buscar", "Atrás");
		case 2:
		{
			if(Info[playerid][pADMute] == 1)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "* Estás prohibido de hacer anuncios.");
			}
			else if(Info[playerid][pPnumber] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "* No tienes un teléfono.");
			}
			else ShowPlayerDialog(playerid, DIALOG_ADPLACE, DIALOG_STYLE_INPUT, "Anuncios - Hacer Anuncio", "Ingresa el anuncio que dejarás, recuerda que los anuncios son exclusivamente para compra y venta\nNota: Tamaño del texto sólo será máximo 128 Letras", "Enviar", "Atrás");
		}
		case 3:
		{
			if(Info[playerid][pAdverID] == -1) return SendClientMessageEx(playerid, COLOR_GREY, "* No hay ningún anuncio a tu nombre.");
			ClearAd(Info[playerid][pAdverID]);
			return SendClientMessageEx(playerid, COLOR_GREY, "* Borraste tu anuncio, puedes hacer otro o dejar ese espacio para otra persona.");
		}
		case 4:
		{
			if(Info[playerid][pADMute] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "* Estás prohibido de hacer anuncios.");
			if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes un teléfono.");
			if(iAdverTimer >= 1)
			{
				ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Anuncios", "Lista de Anuncios\nBuscar Anuncios\nPoner un Anuncio\nBorrar Anuncio", "Seleccionar", "Cancelar");
                new szerror[128];
				format(szerror, sizeof(szerror), "Sólo se puede enviar un anuncio global cada 1 Minuto, faltan %d segundos.", iAdverTimer);
				return SendClientMessageEx(playerid, COLOR_GREY, szerror);
			}
			else ShowPlayerDialog(playerid, DIALOG_ADPLACEP, DIALOG_STYLE_INPUT, "Anuncios - Anuncio Rápido","Ingresa el anuncio rápido, recuerda que los anuncios son exclusivamente para compra y venta\nNota: Tamaño del texto sólo será máximo 128 Letras.\nNota: Este anuncio se hará desde CNN y el costo es de $35", "Enviar", "Atrás");
		}
	}
	case DIALOG_ADPLACE:{
		if(response){
			new
				iLength = strlen(inputtext);
			if(Info[playerid][pAdverID] != -1) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya hiciste un anuncio, primero borra el anterior.");
			if(isnull(inputtext)){
			    ShowPlayerDialog(playerid, DIALOG_ADPLACE, DIALOG_STYLE_INPUT, "Anuncios - Hacer Anuncio", "Ingresa el anuncio que dejarás, recuerda que los anuncios son exclusivamente para compra y venta\nNota: Tamaño del texto sólo será máximo 128 Letras", "Enviar", "Atrás");
			    return SendClientMessageEx(playerid, COLOR_GREY, "* No ingresaste nada.");
			}
			if(strlen(inputtext) >= 128){
				ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Anuncios", "Lista de Anuncios\nBuscar Anuncios\nPoner un Anuncio\nBorrar Anuncio", "Seleccionar", "Cancelar");
				return SendClientMessageEx(playerid, COLOR_GREY, "* Ingresaste un anuncio con más de 128 Letras.");
			}
			iLength *= 5;
			if(GetPlayerCash(playerid) < iLength) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero para pagar el anuncio.");
			GivePlayerCash(playerid, -iLength);
			SendAD(playerid, inputtext, Info[playerid][pPnumber]);
			SendClientMessageEx(playerid, COLOR_WHITE, "Felicitaciones tu anuncio saldrá en la lista.");
		}
		else ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Anuncios", "Lista de Anuncios\nBuscar Anuncios\nPoner un Anuncio\nBorrar Anuncio", "Seleccionar", "Cancelar");
	}
	case DIALOG_ADPLACEP:{
		if(response){
			if(GetPlayerCash(playerid) < 35){
				ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Anuncios", "Lista de Anuncios\nBuscar Anuncios\nPoner un Anuncio\nBorrar Anuncio", "Seleccionar", "Cancelar");
				return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes dinero para hacer este anuncio.");
			}
			else if(strlen(inputtext) >= 128){
				ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Anuncios", "Lista de Anuncios\nBuscar Anuncios\nPoner un Anuncio\nBorrar Anuncio", "Seleccionar", "Cancelar");
				return SendClientMessageEx(playerid, COLOR_GREY, "* Ingresaste un anuncio con más de 128 Letras.");
			}
			iAdverTimer = 60;
			GivePlayerCash(playerid, -35);
			Tax += 35;
			new
				szMessage1[255];
			format(szMessage1, sizeof(szMessage1), "Anuncio: %s... Contacto %s (%i)", inputtext, GetPlayerNameEx(playerid), Info[playerid][pPnumber]);
			OOCNews(TEAM_GROVE_COLOR,szMessage1);
			return PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		}
		else ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Anuncios", "Lista de Anuncios\nBuscar Anuncios\nPoner un Anuncio\nBorrar Anuncio", "Seleccionar", "Cancelar");
	}
	case DIALOG_ADSEARCH:
	{
		if(response)
		{
			if(strlen(inputtext) <= 3) return ShowPlayerDialog(playerid, DIALOG_ADSEARCH, DIALOG_STYLE_INPUT, "Anuncios - Buscar", "ERROR: Lo que buscas debe tener más de 3 letras. Ingresa alguna frase de lo que buscas. (Más de 3 letras)", "Buscar", "Atrás");
			new addialog[1000], itemid = 0;
			for(new i = 0; i < MAX_AD; i++)
			{
				//if(strfind(ADInfo[i][aAdvert], inputtext, true) != -1)
				//if(strfind(szBuffer          , inputtext, true) != -1)
				if(strfind(ADInfo[i][aAdvert], inputtext, true) != -1)
				{
					if(ADInfo[i][aActive] == 1 && itemid < 40)
					{
						ListItemTrackId[playerid][itemid] = i;
						itemid++;
						format(addialog, sizeof(addialog), "%s[%i] %s...[%d]", addialog, i, (ADInfo[i][aResume]), ADInfo[i][aNumber] );
						format(addialog, sizeof(addialog), "%s\n", addialog);
					}
					format(addialog, sizeof(addialog), "%s\n", addialog);
					return ShowPlayerDialog(playerid, DIALOG_ADLIST, DIALOG_STYLE_LIST, "Anuncios - Resultados", addialog,"Ok" ,"Atrás");
				}
				else ShowPlayerDialog(playerid, DIALOG_ADSEARCH, DIALOG_STYLE_INPUT, "Anuncios - Buscar", "No se encontraron resultados.\n\nIngresa una frase de lo que buscas. (Más de 3 letras)", "Buscar", "Volver");
			}
		}
		else ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Anuncios", "Lista de Anuncios\nBuscar Anuncios\nPoner un Anuncio\nBorrar Anuncio", "Seleccionar", "Cancelar");
	}
	case DIALOG_ADLIST:
	{
		if(response)
		{
			new
				i = ListItemTrackId[playerid][listitem];
			format(szDialog, sizeof(szDialog), "%s\n\nContacto: %i - %s.", ADInfo[i][aAdvert], ADInfo[i][aNumber], ADInfo[i][aContact]);
			return ShowPlayerDialog(playerid, DIALOG_ADFINAL, DIALOG_STYLE_MSGBOX, "Anuncio:", szDialog, "Atrás", "Salir");
		}
		else ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Anuncios", "Lista de Anuncios\nBuscar Anuncios\nPoner un Anuncio\nBorrar Anuncio", "Seleccionar", "Cancelar");
	}
	case DIALOG_ADFINAL:
	{
		if(response) return ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Anuncios", "Lista de Anuncios\nBuscar Anuncios\nPoner un Anuncio\nBorrar Anuncio", "Seleccionar", "Cancelar");
	}
	case DIALOG_SHOPORDER:{
		if(response){
			if(!isnumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_SHOPERROR, DIALOG_STYLE_MSGBOX, "ID de Reclamo","ERROR: Los reclamos de coins sólo son números.", "Intentar", "Cancelar");
			new orderid = strval(inputtext);
			if(orderid == 0) return ShowPlayerDialog(playerid, DIALOG_SHOPERROR, DIALOG_STYLE_MSGBOX, "ID de Reclamo","ERROR: El reclamo de coins no puede ser 0.", "Intentar", "Cancelar");
			Info[playerid][pOrder] = orderid;
			new shoptechs;
			foreach(Player, i){
				if(Info[i][pShopTech] == 1){
					shoptechs++;
				}
			}
			new shopstring[512];
			if(shoptechs > 0){
				format(shopstring, sizeof(shopstring), "{FFFFFF}Ahora usted debe esperar para que revisen su reclamo número: %d\n\nUn técnico será el responsable.\n\nSi usted tiene más de un reclamo por favor esperar a que terminen con una.\n\nTécnicos Online: %d\n\nNOTA: El reclamo de coins queda guardada incluso si usted se desconecta.\n\nGracias", orderid, shoptechs);
            	ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "Reclamo de Coins", shopstring, "Cerrar", "");
				format(shopstring, sizeof(shopstring), ""COL_BLUE"Administración >"COL_WHITE" %s hizo un nuevo reclamo de coins y está esperando - /reclamos.",GetPlayerNameEx(playerid));
				ShopTechBroadCast(COLOR_SHOP,shopstring);
				SendClientMessage(playerid, COLOR_GREY, "* Si no tienes un reclamo de coins, por favor usa /cancelarreclamo." );
			}
			else{
				format(shopstring, sizeof(shopstring), "{FFFFFF}Ahora usted debe esperar para que revisen su reclamo número: %d\n\nUn técnico será el responsable.\n\nSi usted tiene más de un reclamo por favor esperar a que terminen con una.\n\nActualmente no hay técnicos online.\n\nNOTA: El reclamo de coins queda guardada incluso si usted se desconecta.\n\nGracias", orderid);
  				ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "Reclamo de Coins", shopstring, "Cerrar", "");
  				SendClientMessage(playerid, COLOR_GREY, "* Si no tienes un reclamo de coins, por favor usa /cancelarreclamo." );
			}
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(szMessage, sizeof(szMessage), "Reclamo de Coins ID %d de %s (IP: %s) esta pendiente.", orderid, GetPlayerNameEx(playerid), playerip);
			Log("logs/shoporders.log", szMessage);
		}
	}
	case DIALOG_SHOPERROR: if(response) return ShowPlayerDialog(playerid, DIALOG_SHOPORDER, DIALOG_STYLE_INPUT,
	"Reclamo de Coins", "Esto es para los reclamos de coins de tienda de www.newparadise-rp.net\n\nSi usted no tiene un reclamo, por favor cancele este cuadro de diálogo ahora mismo.\n\nAdvertencia: Abuso de esta característica es sancionable con baneo permanente.\n\nPor favor ingrese el PIN (Si no la sabe ingrese 1):", "Enviar", "Cancelar" );
	case DOORLOCK:
	{
		if(response == 1)
		{
		    new i = GetPVarInt(playerid, "Door");
		    if(isnull(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* No ingresaste nada." );
		    if(strlen(inputtext) > 24) return SendClientMessageEx(playerid, COLOR_GREY, "* La contraseña no es más de 24 letras o números.");
		    if(strcmp(inputtext, DDoorsInfo[i][dPass], true) == 0){
		        if(DDoorsInfo[i][dLocked] == 0){
					DDoorsInfo[i][dLocked] = 1;
					SendClientMessageEx(playerid, COLOR_WHITE, "Contraseña Aceptada, puerta bloqueada.");
		        }
		        else{
		            DDoorsInfo[i][dLocked] = 0;
		            SendClientMessageEx(playerid, COLOR_WHITE, "Contraseña Aceptada, puerta desbloqueada.");
		        }
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "¡Contraseña Incorrecta!");
		}
	}
	case ADMUTE:
	{
	    if(response == 1)
	    {
	        switch(listitem)
	        {
	            case 0: // Jailtime
				{
				    if(Info[playerid][pADMuteTotal] < 4)
				    {
					    Info[playerid][pADMute] = 0;
				        ResetPlayerWeaponsEx(playerid);
						if(Info[playerid][pJailed] != 0)
						{
						    Info[playerid][pJailTime] += Info[playerid][pADMuteTotal]*15*60;
						}
						else
						{
						    GameTextForPlayer(playerid, "~w~Bienvenido a ~n~~r~Fort DeMorgan", 5000, 3);
							Info[playerid][pJailed] = 1; PhoneOnline[playerid] = 1;
							Info[playerid][pJailTime] = Info[playerid][pADMuteTotal]*15*60;
							SetPlayerFacingAngle(playerid, 0);
							TogglePlayerControllable(playerid, 1);
							new rand = random(sizeof(OOCJail));
							LoadObjects(playerid);
							SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
							SetPlayerVirtualWorld(playerid, 1000);
							SetPlayerInterior(playerid,0);
							SetPlayerToTeamColor(playerid);
						}
				    }
				    else if(Info[playerid][pADMuteTotal] >= 4 || Info[playerid][pADMuteTotal] < 7)
				    {
					    Info[playerid][pADMute] = 0;
						ResetPlayerWeaponsEx(playerid);
						if(Info[playerid][pJailed] != 0)
						{
						    Info[playerid][pJailTime] += Info[playerid][pADMuteTotal]*15*60;
						}
						else
						{
						    GameTextForPlayer(playerid, "~w~Bienvenido a ~n~~r~Fort DeMorgan", 5000, 3);
							new rand = random(sizeof(OOCJail));
							LoadObjects(playerid);
							SetPlayerPos(playerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
							SetPlayerVirtualWorld(playerid, 1000);
							SetPlayerInterior(playerid,0);
							Info[playerid][pJailed] = 1;
							Info[playerid][pJailTime] = Info[playerid][pADMuteTotal]*15*60;
							PhoneOnline[playerid] = 1;
							SetPlayerToTeamColor(playerid);
							SetPlayerWantedLevel(playerid, 0);
							ClearAnimations(playerid);
						}
				    }
					format(szMessage,sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s estará en prisión %d Minutos, gracias a la oportunidad de AD Unmuted.",GetPlayerNameEx(playerid),Info[playerid][pADMuteTotal]*15);
					ABroadCast(COLOR_GENERAL,szMessage,2);
            	}
            	case 1: // Fine
            	{
            	    new playername[MAX_PLAYER_NAME];
            	    GetPlayerName(playerid, playername, sizeof(playername));

	                new allmoney;
 					if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0)
					{
 						allmoney = HouseInfo[Info[playerid][pPhousekey]][hSafeMoney]+GetPlayerCash(playerid)+Info[playerid][pMoneyBank];
   					}
   					else
    				{
   						allmoney = GetPlayerCash(playerid)+Info[playerid][pMoneyBank];
    				}
                    Info[playerid][pADMute] = 0;
				    new fine = 10*allmoney/100;
	                format(szMessage,sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s pagó $%d por la oportunidad de AD Unmuted.",GetPlayerNameEx(playerid),fine);
	                GivePlayerCash(playerid,-fine);
					ABroadCast(COLOR_GENERAL,szMessage,2);
	            }
	        }
	    }
	    else
	    {
	        format(szMessage,sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s canceló su oportunidad de ser desmuteado del comando /ad.",GetPlayerNameEx(playerid));
			ABroadCast(COLOR_GENERAL,szMessage,2);
	    }
	}
	case DUTYMENU:
	{
		if(response)
		{
			if(listitem == 0) // LSPD Duty
			{
				if(OnDuty[playerid] == 0)
				{
                    switch(Info[playerid][pSex])
                    {
					    case 1:
				        {
					        format(szMessage, sizeof(szMessage), "* Oficial %s coje una placa y su pistola.", GetPlayerNameEx(playerid));
					        ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					        //SetPlayerColor(playerid, TEAM_BLUE_COLOR);
                            SetPlayerSkin(playerid, 280);
					        GiveArmorToPlayer(playerid, 100.0);
					        GivePlayerValidWeapon(playerid, 24, 42);
					        GivePlayerValidWeapon(playerid, 41, 1500);
					        GivePlayerValidWeapon(playerid, 3, 99999);
					        OnDuty[playerid] = 1;
                        }
                        case 2:
				        {
					        format(szMessage, sizeof(szMessage), "* Oficial %s coje una placa y su pistola.", GetPlayerNameEx(playerid));
					        ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					        SetPlayerSkin(playerid, 194);
    				        GiveArmorToPlayer(playerid, 100.0);
					        GivePlayerValidWeapon(playerid, 24, 42);
					        GivePlayerValidWeapon(playerid, 41, 1500);
					        GivePlayerValidWeapon(playerid, 3, 99999);
					        OnDuty[playerid] = 1;
                        }
					}
				}
				else if(OnDuty[playerid] == 1)
				{
					format(szMessage, sizeof(szMessage), "* Oficial %s deja sus cosas en su casillero.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					GiveArmorToPlayer(playerid, 0.0);
					SetPlayerSkin(playerid, Info[playerid][pChar]);
					OnDuty[playerid] = 0;
				}
			}
			if(listitem == 1) // LSPD Weapons
			{
				ShowPlayerDialog(playerid, DUTYMENU2, DIALOG_STYLE_LIST, "LSPD Equipo","Mace\nNite Stick\nDesert Eagle\nSPAS-12\nMP5\nM4A1\nAK-47\nSmoke Grenade\nShotgun\nRifle\nSniper Rifle\nKevlar Vest\nFirst Aid Kit\nAccessorios", "Ok", "Cancelar");
			}
			if(listitem == 2) // LSPD SWAT Uniform
			{
			    if(Info[playerid][pDivision] == 5)
			    {
					SetPlayerSkin(playerid, 285);
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "No eres de la división de SWAT.");
				}
			}
			if(listitem == 3) // LSPD Uniforms
			{
				ShowPlayerDialog(playerid, DUTYMENU3, DIALOG_STYLE_LIST, "Uniformes LSPD","Cadete\nOficial Femenina\nOficial 1\nOficial 2\nOficial 3\nOficial Negro\nOficial Latino\nOficial Moto.\nOficial SWAT\nSargento\nCapitan\nComandante", "Ponerse", "Cancelar");
			}
			if(listitem == 4) // LSPD Undercover Uniform
			{
				ShowPlayerDialog(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Encubierto","Elige un Skin (por ID).", "Ok", "Cancelar");
			}
		}
	}
 	case DUTYMENU2:
	{
		if(response)
		{
	    	if(Tax > 0) switch(listitem)
			{
				case 0: GivePlayerValidWeapon(playerid, 41, 1500);
				case 1: GivePlayerValidWeapon(playerid, 3, 99999);
				case 2: GivePlayerValidWeapon(playerid, 24, 42);
				case 3:
				{
					if(Info[playerid][pDivision] == 5 || Info[playerid][pRank] >= 1)
					{
						GivePlayerValidWeapon(playerid, 27, 120);
						Tax -= 10000;
					}
					else SendClientMessageEx(playerid, COLOR_GREY, "* No eres de la división SWAT, o no eres mayor al rango 2.");
				}
				case 4: GivePlayerValidWeapon(playerid, 29, 150);
				case 5: GivePlayerValidWeapon(playerid, 31, 230);
				case 6: // LSPD ak-47 *
				{
					if(Info[playerid][pDivision] == 5 || Info[playerid][pRank] >= 1)
					{
						GivePlayerValidWeapon(playerid, 30, 150);
					}
					else SendClientMessageEx(playerid, COLOR_GREY, "* No eres de la división SWAT, o no eres mayor al rango 3.");
				}
				case 7: // LSPD Smoke Bomb *
				{
					if(Info[playerid][pDivision] == 5 || Info[playerid][pRank] >= 1)
					{
						GivePlayerValidWeapon(playerid, 17, 6);
					}
					else SendClientMessageEx(playerid, COLOR_GREY, "* No eres de la división SWAT, o no eres mayor al rango 3.");
				}
				case 8: GivePlayerValidWeapon(playerid, 25, 62);
				case 9: GivePlayerValidWeapon(playerid, 33, 32);
				case 10: // LSPD Sniper *
				{
					if(Info[playerid][pDivision] == 5 || Info[playerid][pRank] >= 1)
					{
      GivePlayerValidWeapon(playerid, 34, 6);
					}
					else SendClientMessageEx(playerid, COLOR_GREY, "* No eres de la división SWAT, o no eres mayor al rango 3.");
				}
				case 11: GiveArmorToPlayer(playerid, 100.0);
				case 12: SetHP(playerid, 100);
				case 13: ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessorios", "Bienvenido al casillero de accesorios del SAPD","Continuar", "Cancelar" );
			}
			else return SendClientMessageEx(playerid,COLOR_WHITE,"El gobierno no tiene fondos para facilitar armas.");
		}
	}
	case DUTYMENU3:
	{
		if(response)
		{
		    switch(listitem)
		    {
		        case 0: SetPlayerSkin(playerid, 71);
		        case 1: SetPlayerSkin(playerid, 141);
		        case 2: SetPlayerSkin(playerid, 280);
		        case 3: SetPlayerSkin(playerid, 266);
		        case 4: SetPlayerSkin(playerid, 281);
		        case 5: SetPlayerSkin(playerid, 265);
		        case 6: SetPlayerSkin(playerid, 267);
		        case 7: SetPlayerSkin(playerid, 284);
		        case 8: SetPlayerSkin(playerid, 285);
				case 9: SetPlayerSkin(playerid, 282);
		        case 10: SetPlayerSkin(playerid, 283);
		        case 11: SetPlayerSkin(playerid, 288);
		    }
		}
	}
	case FDUTYMENU:
	{
		if(response)
		{
			if(listitem == 0) // FBI Duty
			{
				if(OnDuty[playerid] == 0)
				{
					format(szMessage, sizeof(szMessage), "* Agente %s coge una placa y una pistola de su casillero.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				//	SetPlayerColor(playerid, TEAM_FBI_COLOR);
					GiveArmorToPlayer(playerid, 100.0);
					GivePlayerValidWeapon(playerid, 24, 42);
					GivePlayerValidWeapon(playerid, 41, 1500);
					GivePlayerValidWeapon(playerid, 3, 99999);
					GivePlayerValidWeapon(playerid, 29, 150);
					OnDuty[playerid] = 1;
				}
				else if(OnDuty[playerid] == 1)
				{
					format(szMessage, sizeof(szMessage), "* Agente %s deja su placa y su arma en su casillero.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerSkin(playerid, Info[playerid][pChar]);
					GiveArmorToPlayer(playerid, 0.0);
					OnDuty[playerid] = 0;
				}
			}
		}
		if(listitem == 1) // FBI Weapons
		{
			ShowPlayerDialog(playerid, FDUTYMENU2, DIALOG_STYLE_LIST, "FBI Armas","Mace\nNite Stick\nDesert Eagle\nSPAS-12\nMP5\nM4A1\nAK-47\nSmoke Grenade\nCamara\nSniper Rifle\nTactical Vest\nFirst Aid Kit\nAccesorios", "Ok", "Cancelar");
		}
		if(listitem == 2) // FBI SWAT Uniform
		{
       	    if(Info[playerid][pRank] > 3)
			{
				SetPlayerSkin(playerid, 285);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "* No tienes el rango requerido (3)!");
				return 1;
			}
		}
		if(listitem == 3) // FBI Uniforms
		{
			ShowPlayerDialog(playerid, FDUTYMENU3, DIALOG_STYLE_LIST, "Uniformes FBI","Agente con escudo\nAgente 1\nAgente 2\nAgente Asiatico\nAgente Asiatico 2\nSWAT\nMujer", "Poner", "Cancelar");
		}
		if(listitem == 4) // FBI Undercover Uniform
		{
			ShowPlayerDialog(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Encubierto","Elige un skin (por ID).", "Ok", "Cancelar");
		}
	}
	case FDUTYMENU2:
	{
		if(response)
		{
	    	if(Tax <= 0) return SendClientMessageEx(playerid,COLOR_WHITE,"El gobierno no tiene fondos para facilitar armas.");
	    	if(Info[playerid][pConnectTime] < 2 || Info[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes obtener armas debido a tu restricción de dos horas!");
				else switch(listitem) {
				case 0: GivePlayerValidWeapon(playerid, 41, 1500);
				case 1: GivePlayerValidWeapon(playerid, 3, 99999);
				case 2: GivePlayerValidWeapon(playerid, 24, 42);
				case 3:	GivePlayerValidWeapon(playerid, 27, 120);
				case 4: GivePlayerValidWeapon(playerid, 29, 150);
				case 5: GivePlayerValidWeapon(playerid, 31, 230);
				case 6: GivePlayerValidWeapon(playerid, 30, 150);
				case 7: GivePlayerValidWeapon(playerid, 17, 6);
				case 8: GivePlayerValidWeapon(playerid, 46, 1);
				case 9: GivePlayerValidWeapon(playerid, 34, 6);
				case 10: GiveArmorToPlayer(playerid, 100);
				case 11: SetHP(playerid, 100);
				default: ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accesorios", "Bienvenido al casillero de accesorios del FBI!","Continuar", "Cancelar" );
			}
		}
	}
	case FDUTYMENU3:
	{
		if(response)
		{
			if(listitem == 0) // FBI Uniforms
			{
				SetPlayerSkin(playerid, 286);
			}
			if(listitem == 1) //FBI Uniforms
			{
				SetPlayerSkin(playerid, 166);
			}
			if(listitem == 2) // FBI Uniforms
			{
				SetPlayerSkin(playerid, 165);
			}
			if(listitem == 3) // FBI Uniforms
			{
				SetPlayerSkin(playerid, 294);
			}
			if(listitem == 4) // FBI Uniforms
			{
				SetPlayerSkin(playerid, 120);
			}
			if(listitem == 5) //FBI Uniforms
			{
				SetPlayerSkin(playerid, 285);
			}
			if(listitem == 6) //FBI Uniforms
			{
				SetPlayerSkin(playerid, 141);
			}
		}
	}
	case FDUTYMENU4:
	{
		if(response)
		{
 	        new skinid = strval(inputtext);
	        if(!IsValidSkin(skinid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR! Skin de 1 a 299");
			if(!IsPublicSkin(skinid)) return ShowPlayerDialog(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Encubierto","Skin Inválido. Escoge otro.", "Seleccionar", "Cancelar");
			Info[playerid][pChar] = skinid;
			SetPlayerSkin(playerid, Info[playerid][pChar]);
		}
	}
	case DIALOG_LOADTRUCK: // TRUCKER JOB LOAD TRUCK
	{
		if(response)
		{
			if(listitem == 0) // Legal goods
			{
		    	ShowPlayerDialog(playerid, DIALOG_LOADTRUCKL, DIALOG_STYLE_LIST, "¿Que quieres transportar?","{00F70C}Comida y Bebida\n{00F70C}Ropa\n{00F70C}Materiales\n{00F70C}Objetos del 24/7", "Ok", "Cancelar");
			}
			if(listitem == 1) // Illegal goods
			{
				new level = Info[playerid][pTruckSkill];
				switch(level)
				{
					case 0 .. 50: ShowPlayerDialog(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "¿Que quieres transportar?",""COL_GENERAL"Armas 			{FFFFFF}(No Bonus)\n"COL_GENERAL"Drogas 			{FFFFFF}(Nivel 1 Bonus: 3gr de Droga)\n"COL_GENERAL"Materiales I.  	{FFFFFF}(Nivel 1 Bonus: 25 materiales)", "Ok", "Cancelar");

					case 51 .. 100: ShowPlayerDialog(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "¿Que quieres transportar?",""COL_GENERAL"Armas 			{FFFFFF}(No Bonus)\n"COL_GENERAL"Drogas 			{FFFFFF}(Nivel 2 Bonus: 5gr de Droga)\n"COL_GENERAL"Materiales I.  	{FFFFFF}(Nivel 2 Bonus: 50 materiales)", "Ok", "Cancelar");

					case 101 .. 200: ShowPlayerDialog(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "¿Que quieres transportar?",""COL_GENERAL"Armas 			{FFFFFF}(No Bonus)\n"COL_GENERAL"Drogas 			{FFFFFF}(Nivel 3 Bonus: 8gr de Droga)\n"COL_GENERAL"Materiales I.  	{FFFFFF}(Nivel 3 Bonus: 100 materiales)", "Ok", "Cancelar");

					case 201 .. 400: ShowPlayerDialog(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "¿Que quieres transportar?",""COL_GENERAL"Armas 			{FFFFFF}(No Bonus)\n"COL_GENERAL"Drogas 			{FFFFFF}(Nivel 4 Bonus: 10gr de Droga)\n"COL_GENERAL"Materiales I.  	{FFFFFF}(Nivel 4 Bonus: 150 materiales)", "Ok", "Cancelar");

					default: ShowPlayerDialog(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "¿Que quieres transportar?",""COL_GENERAL"Armas 			{FFFFFF}(No Bonus)\n"COL_GENERAL"Drogas 			{FFFFFF}(Nivel 5 Bonus: 15gr de Droga)\n"COL_GENERAL"Materiales I.  	{FFFFFF}(Nivel 5 Bonus: 200 materiales)", "Ok", "Cancelar");
				}
			}
		}
		else
		{
	    	DeletePVar(playerid, "IsFrozen");
			TogglePlayerControllable(playerid, 1);
			SendClientMessageEx(playerid, COLOR_GENERAL, "Cancelaste la carga del camión, usa /cargarcamion para intentarlo de nuevo.");
		}
	}
	case DIALOG_LOADTRUCKL: // TRUCKER JOB LEGAL GOODS
	{
		if(response)
		{
			if(listitem == 0) // Food & beverages
			{
				new route = Random(1, 4);
				switch(route)
				{
				    case 1: SetPVarInt(playerid, "TruckDeliver", 1);
				    case 2: SetPVarInt(playerid, "TruckDeliver", 2);
				    case 3: SetPVarInt(playerid, "TruckDeliver", 3);
				}
				TogglePlayerControllable(playerid, 0);
		        SetPVarInt(playerid, "IsFrozen", 1);
				TextDrawShowForPlayer(playerid, boxGM);
			}
			if(listitem == 1) // Clothing
			{
				new route = Random(1, 4);
				switch(route)
				{
				    case 1: SetPVarInt(playerid, "TruckDeliver", 4);
				    case 2: SetPVarInt(playerid, "TruckDeliver", 5);
				    case 3: SetPVarInt(playerid, "TruckDeliver", 6);
				}
            	TextDrawShowForPlayer(playerid, boxGM);
            	TogglePlayerControllable(playerid, 0); //acalodejeloco
	         	SetPVarInt(playerid, "IsFrozen", 1);
			}
			if(listitem == 2) // Materials
			{
				SetPVarInt(playerid, "TruckDeliver", 7);
				TogglePlayerControllable(playerid, 0);
	          	SetPVarInt(playerid, "IsFrozen", 1);
            	TextDrawShowForPlayer(playerid, boxGM);
			}
			if(listitem == 3) // 24/7 Items
			{
				new route = Random(1, 4);
				switch(route)
				{
				    case 1: SetPVarInt(playerid, "TruckDeliver", 8);
				    case 2: SetPVarInt(playerid, "TruckDeliver", 9);
				    case 3: SetPVarInt(playerid, "TruckDeliver", 10);
				}
				TogglePlayerControllable(playerid, 0);
	         	SetPVarInt(playerid, "IsFrozen", 1);
            	TextDrawShowForPlayer(playerid, boxGM);
			}
			LoadTruckBar[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
			SetProgressBarValue(LoadTruckBar[playerid], 100.0);
			ShowProgressBarForPlayer(playerid, LoadTruckBar[playerid]);
			SetTimerEx("LoadTruck", 1000, 0, "d", playerid);
		}
		else
		{
	    	DeletePVar(playerid, "IsFrozen");
			TogglePlayerControllable(playerid, 1);
			SendClientMessageEx(playerid, COLOR_GENERAL, "Has cancelado la carga de los camiones, usa /cargarcamion para intentarlo de nuevo.");
		}
	}
	case DIALOG_LOADTRUCKI: // TRUCKER JOB ILLEGAL GOODS
	{
		if(response)
		{
	    	new level = Info[playerid][pTruckSkill];
			if(listitem == 0) // Weapons
			{
				if(level >= 0 && level <= 50)
				{
                	SetPVarInt(playerid, "TruckDeliver", 11); // Bonus: 9mm
				}
				else if(level >= 51 && level <= 100)
				{
                	SetPVarInt(playerid, "TruckDeliver", 12); // Bonus: MP5
				}
				else if(level >= 101 && level <= 200)
				{
            		SetPVarInt(playerid, "TruckDeliver", 13); // Bonus: Deagle
				}
				else if(level >= 201 && level <= 400)
				{
                	SetPVarInt(playerid, "TruckDeliver", 14); // Bonus: AK-47
				}
				else if(level >= 401)
				{
                	SetPVarInt(playerid, "TruckDeliver", 15); // Bonus: Ak-47 or M4
				}
				TextDrawShowForPlayer(playerid, boxGM);
				TogglePlayerControllable(playerid, 0);
		        SetPVarInt(playerid, "IsFrozen", 1);
			}
			if(listitem == 1) // Drugs
			{
				if(level >= 0 && level <= 50)
				{
                	SetPVarInt(playerid, "TruckDeliver", 16); // Bonus: 10 pot, 5 crack
				}
				else if(level >= 51 && level <= 100)
				{
                	SetPVarInt(playerid, "TruckDeliver", 17); // Bonus: 20 pot, 10 crack
				}
				else if(level >= 101 && level <= 200)
				{
                	SetPVarInt(playerid, "TruckDeliver", 18); // Bonus: 30 pot, 15 crack
				}
				else if(level >= 201 && level <= 400)
				{
                	SetPVarInt(playerid, "TruckDeliver", 19); // Bonus: 40 pot, 20 crack
				}
				else if(level >= 401)
				{
               		SetPVarInt(playerid, "TruckDeliver", 20); // Bonus: 50 pot, 25 crack
				}
            	TextDrawShowForPlayer(playerid, boxGM);
            	TogglePlayerControllable(playerid, 0);
		        SetPVarInt(playerid, "IsFrozen", 1);
			}
			if(listitem == 2) // Illegal materials
			{
				if(level >= 0 && level <= 50)
				{
                	SetPVarInt(playerid, "TruckDeliver", 21); // Bonus: 100 materials
				}
				else if(level >= 51 && level <= 100)
				{
                	SetPVarInt(playerid, "TruckDeliver", 22); // Bonus: 300 materials
				}
				else if(level >= 101 && level <= 200)
				{
                	SetPVarInt(playerid, "TruckDeliver", 23); // Bonus: 750 materials
				}
				else if(level >= 201 && level <= 400)
				{
                	SetPVarInt(playerid, "TruckDeliver", 24); // Bonus: 1500 materials
				}
				else if(level >= 401)
				{
                	SetPVarInt(playerid, "TruckDeliver", 25); // Bonus: 2500 materials
				}
            	TextDrawShowForPlayer(playerid, boxGM);
            	TogglePlayerControllable(playerid, 0);
		        SetPVarInt(playerid, "IsFrozen", 1);
			}
			LoadTruckBar[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
			SetProgressBarValue(LoadTruckBar[playerid], 100.0);
			ShowProgressBarForPlayer(playerid, LoadTruckBar[playerid]);
			SetTimerEx("LoadTruck", 1000, 0, "d", playerid);
		}
		else
		{
	    	DeletePVar(playerid, "IsFrozen");
			TogglePlayerControllable(playerid, 1);
			SendClientMessageEx(playerid, COLOR_GENERAL, "Has cancelado la carga de los camiones, usa /cargarcamion para intentarlo de nuevo.");
		}
	}
	case EQUIPO_PANDILLA:
	{
	    if(!response) return 1;
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(GetPlayerCash(playerid) < 50) return SendClientMessageEx(playerid, COLOR_GREY, "No tienes dinero suficiente!");
            	GivePlayerValidWeapon(playerid, 5, 99999);
            	GivePlayerValidWeapon(playerid, 22, 120);
            	Bought(playerid, 50);
            	cmd_me(playerid, "toma su armamento y lo guarda.");
			}
			case 1:
	        {
	            if(GetPlayerCash(playerid) < 250) return SendClientMessageEx(playerid, COLOR_GREY, "No tienes dinero suficiente!");
            	GivePlayerValidWeapon(playerid, 28, 150);
            	Bought(playerid, 250);
            	cmd_me(playerid, "toma su armamento y lo guarda.");
			}
			case 2:
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "Tomaste un kit de secuestro, usa: /atar - /vendar");
				Rope[playerid] = 1;
			}
			case 3:
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "Tomaste una máscara, usa: /mascara");
				Info[playerid][pMask] = 1;
			}
			case 4:
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "Tomaste una palanca, usa: /forzarpuerta");
				Info[playerid][pPalanca] = 1;
			}
		}
	}
    case EQUIPO_MAFIA:
	{
    	if(response == 1)
    	{
        	switch(listitem)
        	{
            	case 0:
            	{
                    if(GetPlayerCash(playerid) < 200) return SendClientMessageEx(playerid, COLOR_GREY, "No tienes dinero suficiente!");
                	GivePlayerValidWeapon(playerid, 4, 99999);
                	GivePlayerValidWeapon(playerid, 24, 42);
                	GivePlayerCash(playerid, -200);
            	}
            	case 1:
            	{
                    if(GetPlayerCash(playerid) < 350) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes dinero suficiente!");
           	    	GivePlayerValidWeapon(playerid, 29, 150);
           	    	GivePlayerCash(playerid, -350);
            	}
				case 2:
				{
				   	SendClientMessageEx(playerid, COLOR_WHITE, "Tomaste un kit de secuestro, usa: /atar - /vendar");
					Rope[playerid] = 1;
				}
				case 3:
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "Tomaste una máscara, usa: /mascara");
					Info[playerid][pMask] = 1;
				}
				case 4:
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "Tomaste una palanca, usa: /forzarpuerta");
					Info[playerid][pPalanca] = 1;
				}
			}
		}
	}
	case DIALOG_HITMAN:
	{
    	if(response == 1)
    	{
        	switch(listitem)
        	{
            	case 0:
            	{
                    if(GetPlayerCash(playerid) < 100) return SendClientMessageEx(playerid, COLOR_GREY, "No tienes dinero suficiente!");
                	GivePlayerValidWeapon(playerid, 4, 99999);
                	GivePlayerValidWeapon(playerid, 23, 68);
                	GivePlayerCash(playerid, -100);
            	}
            	case 1:
            	{
                    if(GetPlayerCash(playerid) < 60) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes dinero suficiente!");
                 GivePlayerValidWeapon(playerid, 34, 6);
           	    	GivePlayerCash(playerid, -60);
            	}
            	case 2: ShowPlayerDialog(playerid, DIALOG_HIT, DIALOG_STYLE_INPUT, "> Disfraz <", "{78F700}Escribe el ID del que desees\n{FFFFFF}Skin's libres para Hitman's.\nTIP <1 - 299>\n", "Ok", "Salir");
				case 3:
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "Adquiriste una máscara, usa: '/mascara'.");
					Info[playerid][pMask] = 1;
				}
				case 4:
				{
				   	SendClientMessageEx(playerid, COLOR_WHITE, "Adquiriste un kit de secuestro, usa /atar - /vendar");
					Rope[playerid] = 1;
				}
				case 5: ShowPlayerDialog(playerid, DIALOG_NAMECHANGE, DIALOG_STYLE_INPUT, "Cambiar Nombre","Por favor ingresa el nuevo nombre!\n\nNota: Los cambios de nombre son libres para Hitman y FBI.", "Cambiar", "Cancelar" );
			}
		}
	}
    case DIALOG_HIT:
  	{
    	if(response == 1)
    	{
        	if(strval(inputtext) < 1 || strval(inputtext) > 299) return SendClientMessageEx(playerid, COLOR_GREY, "* Skin de 1 a 299.");
			Info[playerid][pChar] = strval(inputtext);
            SetPlayerSkin(playerid, Info[playerid][pChar]);
	    	return 1;
    	}
	}
	case CPASS:
	{
	    if( strlen( inputtext ) > 12 )
	    {
	        SendClientMessageEx( playerid, COLOR_WHITE, "No puedes cambiar una password a más de 12 carácteres." );
	    }
	    else
	    {
	        if( strlen( inputtext ) >= 1 )
	        {
	            if(!response) { SendClientMessageEx(playerid, COLOR_WHITE, "No has cambiado tu contraseña." ); }
	            else
	            {
		            new String[ 84 ];
    				new INI:File = INI_Open(UserPath(playerid));
    				INI_SetTag(File,"data");
 					INI_WriteInt(File,"Password",strval(inputtext));
					INI_Close(File);
					format( String, sizeof( String ), "%s (IP: %s) a cambiado su contraseña.", GetPlayerNameEx(playerid), Info[playerid][pIP]);
					Log("logs/password.log", String);
		            format( String, sizeof( String ), "Has cambiado tu contraseña a: '%s'", inputtext );
		            SendClientMessageEx( playerid, COLOR_GRAD1, String );
	            }
	        }
	        else SendClientMessageEx( playerid, COLOR_WHITE, "No has cambiado tu contraseña." );
	    }
	}
	case JOBFINDMENU: if(response)
	{
		if(GetPVarInt(playerid, "Packages") != 0 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Asegúrate de no estar en otra función usando checkpoints.");
	    SetPVarInt(playerid, "FindJob", 1);
		switch(listitem)
		{
		    case 0: SetPlayerCheckpoint(playerid,503.2709,-11.6231,1000.6797,2);
		    case 1: SetPlayerCheckpoint(playerid,2104.8408,-1810.0991,13.5547,2);
		    case 2: SetPlayerCheckpoint(playerid,2176.2505,-2259.4224,14.7734,2);
		    case 3: SetPlayerCheckpoint(playerid,1289.1171,-1271.7650,13.5422,2);
		    case 4: SetPlayerCheckpoint(playerid,1752.7062,-1894.1708,13.5574,2);
		    case 5: SetPlayerCheckpoint(playerid,-382.7300,-1426.3325,26.2570,2);
		    case 6: SetPlayerCheckpoint(playerid,2226.1716,-1718.1792,13.5165,2);
		    case 7: SetPlayerCheckpoint(playerid,-132.4102,-1176.0121,3.1017,2);
		    case 8: SetPlayerCheckpoint(playerid,-77.1577,-1136.5863,1.0781,2);
		    case 9: SetPlayerCheckpoint(playerid,2808.2024,-1176.8274,25.3720,2);
		    case 10: SetPlayerCheckpoint(playerid,2941.2668,-1480.7842,10.9819,2);
        }
		SendClientMessageEx( playerid, COLOR_WHITE, "Se ha marcado un checkpoint en el mapa. (COLOR ROJO)");
	}
	case DIALOG_BSEX_SHOP: if(response)
	{
	    new  businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
	    if(businessVariables[businessID][bStock] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No hay stock de productos en este momento.");
		switch(listitem)
	    {
			case 0:
			{
				Bought(playerid, 10);
            	businessVariables[businessID][bVault] += 10;
				GivePlayerValidWeapon(playerid, 10, 99999);
			}
			case 1:
			{
				Bought(playerid, 8);
            	businessVariables[businessID][bVault] += 8;
			    GivePlayerValidWeapon(playerid, 11, 99999);
			}
			case 2:
			{
				Bought(playerid, 12);
            	businessVariables[businessID][bVault] += 12;
			    GivePlayerValidWeapon(playerid, 12, 99999);
			}
			case 3:
			{
				Bought(playerid, 8);
            	businessVariables[businessID][bVault] += 8;
			    GivePlayerValidWeapon(playerid, 13, 99999);
			}
	    }
	    businessVariables[businessID][bStock]--;
     	SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
    	SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	}
	case DIALOG_BFOOD: if(response)
	{
	    new  businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
	    if(businessVariables[businessID][bStock] <= 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No hay stock de productos en este momento.");
		switch(listitem)
	    {
	        case 0:
	        {
	            if(GetPlayerCash(playerid) < 20) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero.");
	            if(Info[playerid][pHambreNN] <= 20) return SendClientMessage(playerid, COLOR_GRAD2, "No tienes hambre.");
	            Info[playerid][pHambreNN] -= 20;
	        	if(Info[playerid][pHambreNN] <= 0) Info[playerid][pHambreNN] = 0;
	        	SetProgressBarValue(BarraNec[playerid][2], Info[playerid][pHambreNN]);
	   			UpdateProgressBar(BarraNec[playerid][2],playerid);
            	businessVariables[businessID][bVault] += 20;
            	businessVariables[businessID][bStock] -= 4;
				GivePlayerCash(playerid, -20);
				ApplyAnimation(playerid,"FOOD","EAT_Pizza",4.0,0,0,0,0,0);
				KillTimer(TimerMuriendoHambre[playerid]);
	        }
	        case 1:
	        {
	            if(GetPlayerCash(playerid) < 18) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero.");
	            if(Info[playerid][pHambreNN] <= 20) return SendClientMessage(playerid, COLOR_GRAD2, "No tienes hambre.");
	            Info[playerid][pHambreNN] -= 18;
	        	if(Info[playerid][pHambreNN] <= 0) Info[playerid][pHambreNN] = 0;
	        	SetProgressBarValue(BarraNec[playerid][2], Info[playerid][pHambreNN]);
    			UpdateProgressBar(BarraNec[playerid][2],playerid);
            	businessVariables[businessID][bVault] += 18;
            	businessVariables[businessID][bStock] -= 4;
				GivePlayerCash(playerid, -18);
				ApplyAnimation(playerid,"FOOD","EAT_Chicken",4.0,0,0,0,0,0);
				KillTimer(TimerMuriendoHambre[playerid]);
	        }
	        case 2:
	        {
	            if(GetPlayerCash(playerid) < 15) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero.");
	            if(Info[playerid][pHambreNN] <= 20) return SendClientMessage(playerid, COLOR_GRAD2, "No tienes hambre.");
	            Info[playerid][pHambreNN] -= 15;
	        	if(Info[playerid][pHambreNN] <= 0) Info[playerid][pHambreNN] = 0;
	        	SetProgressBarValue(BarraNec[playerid][2], Info[playerid][pHambreNN]);
    			UpdateProgressBar(BarraNec[playerid][2],playerid);
            	businessVariables[businessID][bVault] += 15;
            	businessVariables[businessID][bStock] -= 2;
				GivePlayerCash(playerid, -15);
				ApplyAnimation(playerid,"FOOD","EAT_Burger",4.0,0,0,0,0,0);
				KillTimer(TimerMuriendoHambre[playerid]);
	        }
	        case 3:
	        {
	            if(GetPlayerCash(playerid) < 12) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero.");
	            if(Info[playerid][pHambreNN] <= 20) return SendClientMessage(playerid, COLOR_GRAD2, "No tienes hambre.");
	            Info[playerid][pHambreNN] -= 12;
	        	if(Info[playerid][pHambreNN] <= 0) Info[playerid][pHambreNN] = 0;
	        	SetProgressBarValue(BarraNec[playerid][2], Info[playerid][pHambreNN]);
    			UpdateProgressBar(BarraNec[playerid][2],playerid);
            	businessVariables[businessID][bVault] += 12;
            	businessVariables[businessID][bStock] -= 2;
				GivePlayerCash(playerid, -12);
				ApplyAnimation(playerid,"FOOD","EAT_Burger",4.0,0,0,0,0,0);
				KillTimer(TimerMuriendoHambre[playerid]);
	        }
	        case 4:
	        {
	            if(GetPlayerCash(playerid) < 8) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero.");
	            if(Info[playerid][pHambreNN] <= 20) return SendClientMessage(playerid, COLOR_GRAD2, "No tienes hambre.");
	            Info[playerid][pHambreNN] -= 8;
	        	if(Info[playerid][pHambreNN] <= 0) Info[playerid][pHambreNN] = 0;
	        	SetProgressBarValue(BarraNec[playerid][2], Info[playerid][pHambreNN]);
    			UpdateProgressBar(BarraNec[playerid][2],playerid);
            	businessVariables[businessID][bVault] += 8;
            	businessVariables[businessID][bStock]--;
				GivePlayerCash(playerid, -8);
				ApplyAnimation(playerid,"FOOD","EAT_Burger",4.0,0,0,0,0,0);
				KillTimer(TimerMuriendoHambre[playerid]);
	        }
	        case 5:
	        {
	            if(GetPlayerCash(playerid) < 5) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero.");
	            if(Info[playerid][pHambreNN] <= 20) return SendClientMessage(playerid, COLOR_GRAD2, "No tienes hambre.");
	            Info[playerid][pHambreNN] -= 5;
	        	if(Info[playerid][pHambreNN] <= 0) Info[playerid][pHambreNN] = 0;
	        	SetProgressBarValue(BarraNec[playerid][2], Info[playerid][pHambreNN]);
    			UpdateProgressBar(BarraNec[playerid][2],playerid);
            	businessVariables[businessID][bVault] += 5;
            	businessVariables[businessID][bStock]--;
				GivePlayerCash(playerid, -5);
				ApplyAnimation(playerid,"FOOD","EAT_Burger",4.0,0,0,0,0,0);
				KillTimer(TimerMuriendoHambre[playerid]);
	        }
	        case 6:
	        {
	            if(GetPlayerCash(playerid) < 350) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero.");
	            if(Info[playerid][pHambreNN] <= 20) return SendClientMessage(playerid, COLOR_GRAD2, "No tienes hambre.");
	            Info[playerid][pHambreNN] -= 100;
	        	if(Info[playerid][pHambreNN] <= 0) Info[playerid][pHambreNN] = 0;
	        	SetProgressBarValue(BarraNec[playerid][2], Info[playerid][pHambreNN]);
    			UpdateProgressBar(BarraNec[playerid][2],playerid);
            	businessVariables[businessID][bVault] += 350;
            	businessVariables[businessID][bStock]--;
				GivePlayerCash(playerid, -350);
				ApplyAnimation(playerid,"FOOD","EAT_Burger",4.0,0,0,0,0,0);
				KillTimer(TimerMuriendoHambre[playerid]);
	        }
	    }
     	SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
    	SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
	}
	case DIALOG_ELECTRONICA:
	{
	    if(!response) return 1;
	    new  businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
		if(businessVariables[businessID][bStock] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No hay stock de productos en este momento.");
		switch(listitem)
		{
		    case 0:
		    {
		        if(!CheckMoney(playerid, 200)) return SendClientMessage(playerid, COLOR_WHITE, "No tienes el dinero para comprarlo!");
		        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		        new randphone = 100000 + random(899999);
				Info[playerid][pPnumber] = randphone;
				format(szMessage, sizeof(szMessage), "Has comprado un nuevo teléfono. Tú número es: %d",Info[playerid][pPnumber]);
  				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				businessVariables[businessID][bStock]--;
				SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
  				if(Info[playerid][pVIP] == 0)
				{
  					businessVariables[businessID][bVault] += 200;
  					SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
					return Bought(playerid, 200);
				}
				else
				{
  					Bought(playerid, 100);
  					businessVariables[businessID][bVault] += 100;
  					SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
  					return SendClientMessageEx(playerid, COLOR_GRAD1, "VIP: Descuento por ser VIP! El precio normal es 200, a ti te costó 100.");
				}
			}
			case 1:
   			{
          		if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "No puedes comprar esto las 2 primeras horas de juego");
          		if(CheckMoney(playerid,160))
          		{
              		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
           			GivePlayerValidWeapon(playerid, 43, 99999);
		            SendClientMessageEx(playerid, COLOR_WHITE, "Has comprado una cámara de fotos.");
           			businessVariables[businessID][bStock]--;
           			SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
		            if(Info[playerid][pVIP] == 0)
					{
		    			businessVariables[businessID][bVault] += 160;
		    			SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
		   				return Bought(playerid, 160);
					}
					else
					{
		    			businessVariables[businessID][bVault] += 80;
		    			SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
		   				Bought(playerid, 80);
		   				SendClientMessageEx(playerid, COLOR_GRAD1, "VIP: Descuento por ser VIP! El precio normal es 160, a ti te costó 80.");
					}
      				return 1;
				}
     		}
     		case 2:
			{
				if(!CheckMoney(playerid,350)) return SendClientMessage(playerid, COLOR_WHITE, "No tienes el dinero para comprarlo!");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				Info[playerid][pRadio] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un radio portátil /pr [Hablar] - /frecuencia - /togpr [Prender/Apagar]");
  				businessVariables[businessID][bStock]--;
				SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
				if(Info[playerid][pVIP] == 0)
				{
 					businessVariables[businessID][bVault] += 350;
 					SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
					return Bought(playerid, 350);
				}
				else
				{
 					businessVariables[businessID][bVault] += 180;
 					SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
					Bought(playerid, 180);
					SendClientMessageEx(playerid, COLOR_GRAD1, "VIP: Descuento por ser VIP! El precio normal es 350, a ti te costó 180.");
				}
			}
			case 3:
    		{
    		    if(!CheckMoney(playerid, 750)) return SendClientMessage(playerid, COLOR_WHITE, "No tienes el dinero para comprarlo!");
    		    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				Tax += 750;
				SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un "COL_BLUE"Estéreo"COL_WHITE" de piso ("COL_GENERAL"/estereo /estereoc /estereoq"COL_WHITE")");
				Info[playerid][pBoombox] = 1;
				Bought(playerid, 750);
				businessVariables[businessID][bVault] += 1200;
			}
		}
	}
		case STOREMENU:
		{
			if(response == 1)
			{
	  			new  businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
	  			if(businessVariables[businessID][bStock] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No hay stock de productos en este momento.");
				switch(listitem)
			    {
		         	case 0:
			        {
			            if(CheckMoney(playerid,20))
			            {
			                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			                    Info[playerid][pPhoneBook] = 1;
				            	SendClientMessageEx(playerid, COLOR_WHITE, "Ahora puedes usar /numero [ID]");
	                            businessVariables[businessID][bStock]--;
	                            SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
	                            Info[playerid][pNumeroLibreta1] = 0;
	                            Info[playerid][pNumeroLibreta2] = 0;
	                            Info[playerid][pNumeroLibreta3] = 0;
	                            Info[playerid][pNumeroLibreta4] = 0;
	                            Info[playerid][pNumeroLibreta5] = 0;
	                            Info[playerid][pNumeroLibreta6] = 0;
	                            Info[playerid][pNumeroLibreta7] = 0;
	                            Info[playerid][pNumeroLibreta8] = 0;
	                            Info[playerid][pNumeroLibreta9] = 0;
	                            Info[playerid][pNumeroLibreta10] = 0;
				            	if(Info[playerid][pVIP] == 0)
								{
								    businessVariables[businessID][bVault] += 20;
								    SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
							    	return Bought(playerid, 20);
								}
								else
								{
								    businessVariables[businessID][bVault] += 5;
								    SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
							    	Bought(playerid, 5);
							    	SendClientMessageEx(playerid, COLOR_GRAD1, "VIP: Descuento por ser VIP! El precio normal es 20, a ti te costó 5.");
								}
								return 1;
						}
			        }
		         	case 1:
			        {
			            if(CheckMoney(playerid,10))
			            {
				            ShowPlayerDialog(playerid, LOTTO_BUY, DIALOG_STYLE_INPUT, "Lotería Nacional","Inserta un número entre 1 y 250. Mucha Suerte!","Comprar","Cancelar");
							return 1;
						}
			        }
		         	case 2:
			        {
			            if(CheckMoney(playerid,40))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            Info[playerid][pCigarettes] = 20;
				            SendClientMessageEx(playerid, COLOR_WHITE, "Has una cajetilla de 20 cigarros, utilza \"/cfumar\"");
	                        businessVariables[businessID][bStock]--;
	                        SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
							if(Info[playerid][pVIP] == 0)
							{
							    businessVariables[businessID][bVault] += 40;
							    SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
							   	return Bought(playerid, 40);
							}
							else
							{
							    businessVariables[businessID][bVault] += 20;
							    SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
							   	Bought(playerid, 20);
							   	SendClientMessageEx(playerid, COLOR_GRAD1, "VIP: Descuento por ser VIP! El precio normal es 40, a ti te costó 20.");
							}
				            return 1;
						}
			        }
		         	case 3:
			        {
						if(CheckMoney(playerid,20))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				            Info[playerid][pLighter] = 1;
				            SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un encendedor.");
				            businessVariables[businessID][bStock]--;
				            SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
				            if(Info[playerid][pVIP] == 0)
							{
							    businessVariables[businessID][bVault] += 20;
							    SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
							   	return Bought(playerid, 20);
							}
							else
							{
							    businessVariables[businessID][bVault] += 3;
							    SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
							   	Bought(playerid, 3);
							   	SendClientMessageEx(playerid, COLOR_GRAD1, "VIP: Descuento por ser VIP! El precio normal es 20, a ti te costó 3.");
							}
				            return 1;
						}
			        }
					case 4:
			        {
			     		if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "No puedes comprar esto las 2 primeras horas de juego");
						if(CheckMoney(playerid,7))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							SendClientMessageEx(playerid, COLOR_WHITE, "Has comprado unas flores");
							GivePlayerValidWeapon(playerid, 14, 99999);
	                        businessVariables[businessID][bStock]--;
	                        SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
							if(Info[playerid][pVIP] == 0)
							{
							    businessVariables[businessID][bVault] += 7;
							    SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
							   	return Bought(playerid, 7);
							}
							else
							{
							    businessVariables[businessID][bVault] += 1;
							    SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
							   	Bought(playerid, 1);
							   	SendClientMessageEx(playerid, COLOR_GRAD1, "VIP: Descuento por ser VIP! El precio normal es 7, a ti te costó 1.");
							}
				            return 1;
						}
					}
				}
			}
		}
	case TRAFICDRUGS:
	{
	    if(GetPVarInt(playerid, "ChoosingDrugs") == 0) return SendClientMessageEx(playerid, COLOR_GREY, " No estás traficando drogas!");
	    if(response)
 	    {
			new mypoint = -1;
			for (new i=0; i<MAX_POINTS; i++)
			{
				if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Lab Drug", true) == 0)
				{
					mypoint = i;
				}
			}
			if (mypoint == -1) return SendClientMessageEx(playerid, COLOR_GREY, "* No estás en el punto especificado!");
			if(Info[playerid][pCrates])
			{
				SendClientMessageEx(playerid, COLOR_GREY, "* No se puede sostener más paquetes de drogas!");
				DeletePVar(playerid, "ChoosingDrugs");
				return 1;
			}
			if(GetPlayerCash(playerid) > 0)
			{
				SendClientMessageEx(playerid, COLOR_GENERAL,"* Recogiste unos de paquetes de hierba.");
				Info[playerid][pCrates] = 1;
				SetPVarInt(playerid, "CrateDeliver", 1);
				DeletePVar(playerid, "ChoosingDrugs");
				SetPVarInt(playerid, "tpDrugRunTimer", 45);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
				SendClientMessageEx(playerid, COLOR_WHITE,"Ahora déjalo en en lugar indicado para tu paga. (Vé al checkpoint)");
				SetPlayerCheckpoint(playerid, 1265.0209,286.1703,19.5547, 2);
				SetPlayerAttachedObject(playerid,9, 1210, 6,0.3,0.1,0,0,-90,0);
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY,"* No puedes traficar paquetes si no tienes dinero en mano!");
				DeletePVar(playerid, "ChoosingDrugs");
				return 1;
			}
		}
		else
		{
			new mypoint = -1;
			for (new i=0; i<MAX_POINTS; i++)
			{
				if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Lab Drug", true) == 0)
				{
					mypoint = i;
				}
			}
			if (mypoint == -1) return SendClientMessageEx(playerid, COLOR_GREY, "* No estás en el punto especificado!");
			if(Info[playerid][pCrates])
			{
				SendClientMessageEx(playerid, COLOR_GREY, "* No se puede sostener más paquetes de drogas!");
				DeletePVar(playerid, "ChoosingDrugs");
				return 1;
			}
			if(GetPlayerCash(playerid) > 0)
			{
				SendClientMessageEx(playerid, COLOR_GENERAL,"* Recogiste unos de paquetes de crack.");
				Info[playerid][pCrates] = 1;
				SetPVarInt(playerid, "CrateDeliver", 2);
				DeletePVar(playerid, "ChoosingDrugs");
				SetPVarInt(playerid, "tpDrugRunTimer", 45);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
				SetPlayerCheckpoint(playerid, 309.4637,43.6719,2.8072, 2);
				SetPlayerAttachedObject(playerid,9, 1210, 6,0.3,0.1,0,0,-90,0);
				SendClientMessageEx(playerid, COLOR_WHITE,"Ahora déjalo en en lugar indicado para tu paga. (Vé al checkpoint)");
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY,"* No puedes traficar paquetes si no tienes dinero en mano!");
				DeletePVar(playerid, "ChoosingDrugs");
				return 1;
			}
		}
	}
	case TRACKCAR:
	{
	    if(!response) return 1;
	    new Float: carPos[3], zone[MAX_ZONE_NAME];
		switch(listitem)
		{
		    case 0:
		    {
		        if(GetPVarInt(playerid, "Packages") != 0 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] != 0) return SendClientMessage(playerid, COLOR_WHITE, "Primero ve al checkpoint que se te asigno primero, debes de estar en una llamada o algo.");
		        if(GetPVarInt(playerid, "PVarTrackCarSlot0") == 3501) return SendClientMessage(playerid, COLOR_WHITE, "No se puede rastrear un vehículo que no existe.");
		        if(GetPVarInt(playerid, "PVarTrackCarSlot0") == 3500) return SendClientMessage(playerid, COLOR_WHITE, "No se puede rastrear un vehículo confiscado. Si desea recuperarlo, tiene que pagar la multa.");
                GetVehiclePos(GetPVarInt(playerid, "PVarTrackCarSlot0"), carPos[0], carPos[1], carPos[2]);
                GetCar3DZone(GetPVarInt(playerid, "PVarTrackCarSlot0"), zone, sizeof(zone));
			}
			case 1:
			{
			    if(GetPVarInt(playerid, "Packages") != 0 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] != 0) return SendClientMessage(playerid, COLOR_WHITE, "Primero ve al checkpoint que se te asigno primero, debes de estar en una llamada o algo.");
		        if(GetPVarInt(playerid, "PVarTrackCarSlot1") == 3501) return SendClientMessage(playerid, COLOR_WHITE, "No se puede rastrear un vehículo que no existe.");
		        if(GetPVarInt(playerid, "PVarTrackCarSlot1") == 3500) return SendClientMessage(playerid, COLOR_WHITE, "No se puede rastrear un vehículo confiscado. Si desea recuperarlo, tiene que pagar la multa.");
                GetVehiclePos(GetPVarInt(playerid, "PVarTrackCarSlot1"), carPos[0], carPos[1], carPos[2]);
                GetCar3DZone(GetPVarInt(playerid, "PVarTrackCarSlot1"), zone, sizeof(zone));
			}
			case 2:
			{
			    if(GetPVarInt(playerid, "Packages") != 0 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] != 0) return SendClientMessage(playerid, COLOR_WHITE, "Primero ve al checkpoint que se te asigno primero, debes de estar en una llamada o algo.");
		        if(GetPVarInt(playerid, "PVarTrackCarSlot2") == 3501) return SendClientMessage(playerid, COLOR_WHITE, "No se puede rastrear un vehículo que no existe.");
		        if(GetPVarInt(playerid, "PVarTrackCarSlot2") == 3500) return SendClientMessage(playerid, COLOR_WHITE, "No se puede rastrear un vehículo confiscado. Si desea recuperarlo, tiene que pagar la multa.");
                GetVehiclePos(GetPVarInt(playerid, "PVarTrackCarSlot2"), carPos[0], carPos[1], carPos[2]);
                GetCar3DZone(GetPVarInt(playerid, "PVarTrackCarSlot2"), zone, sizeof(zone));
			}
			case 3:
			{
			    if(GetPVarInt(playerid, "Packages") != 0 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] != 0) return SendClientMessage(playerid, COLOR_WHITE, "Primero ve al checkpoint que se te asigno primero, debes de estar en una llamada o algo.");
		        if(GetPVarInt(playerid, "PVarTrackCarSlot3") == 3501) return SendClientMessage(playerid, COLOR_WHITE, "No se puede rastrear un vehículo que no existe.");
		        if(GetPVarInt(playerid, "PVarTrackCarSlot3") == 3500) return SendClientMessage(playerid, COLOR_WHITE, "No se puede rastrear un vehículo confiscado. Si desea recuperarlo, tiene que pagar la multa.");
                GetVehiclePos(GetPVarInt(playerid, "PVarTrackCarSlot3"), carPos[0], carPos[1], carPos[2]);
                GetCar3DZone(GetPVarInt(playerid, "PVarTrackCarSlot3"), zone, sizeof(zone));
			}
			case 4:
			{
			    if(GetPVarInt(playerid, "Packages") != 0 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] != 0) return SendClientMessage(playerid, COLOR_WHITE, "Primero ve al checkpoint que se te asigno primero, debes de estar en una llamada o algo.");
		        if(GetPVarInt(playerid, "PVarTrackCarSlot4") == 3501) return SendClientMessage(playerid, COLOR_WHITE, "No se puede rastrear un vehículo que no existe.");
		        if(GetPVarInt(playerid, "PVarTrackCarSlot4") == 3500) return SendClientMessage(playerid, COLOR_WHITE, "No se puede rastrear un vehículo confiscado. Si desea recuperarlo, tiene que pagar la multa.");
                GetVehiclePos(GetPVarInt(playerid, "PVarTrackCarSlot4"), carPos[0], carPos[1], carPos[2]);
                GetCar3DZone(GetPVarInt(playerid, "PVarTrackCarSlot4"), zone, sizeof(zone));
			}
		}
		SetPVarInt(playerid, "TrackCar", 1);
  		format(szMessage, sizeof(szMessage), "Tu vehículo fue localizado en %s. (Vé al checkpoint)", zone);
		SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
		SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
		PlayerPlaySound(playerid, 1138, 0,0,0);
		return 1;
	}
	case PB_MENU:
	{
		if(response == 1)
		{
		    switch(listitem)
		    {
		        // Elegir Arena
		        case 0: PaintballArenaSelection(playerid);
		        // Comprar Paintball Fichas
		        case 1: PaintballTokenBuyMenu(playerid);
		        case 2:
		        {
		            if(Info[playerid][pAdmin] >= 4)
		            {
		            	//PaintballAdminMenu(playerid);
					}
					else
					{
					    PaintballMainMenu(playerid);
					    SendClientMessageEx(playerid, COLOR_GRAD1, "No tienes acceso al panel.");
					    return 1;
					}
		        }
		    }
		}
	}
	case PB_FICHAS:
	{
	    if(response == 1)
	    {
	        if(isnull(inputtext)) return PaintballTokenBuyMenu(playerid);
	        if(strval(inputtext) <= 0) return PaintballTokenBuyMenu(playerid);
	        if(strval(inputtext) > 1000)
	        {
	            PaintballTokenBuyMenu(playerid);
	            SendClientMessageEx(playerid, COLOR_WHITE, "No puedes comprar 1000 fichas en una compra.");
	            return 1;
	        }
	        if(GetPlayerCash(playerid) < 20*strval(inputtext))
	        {
				PaintballTokenBuyMenu(playerid);
	        	format(szMessage,sizeof(szMessage), "No puedes pagar %d fichas por $%d.",strval(inputtext),strval(inputtext)*5000);
	        	SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	        	return 1;
			}
	        GivePlayerCash(playerid, -20*strval(inputtext));
			Info[playerid][pPaintTokens] += strval(inputtext);
			format(szMessage,sizeof(szMessage), "Compraste %d fichas por $%d.",strval(inputtext),strval(inputtext)*20);
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	    }
	    else PaintballMainMenu(playerid);
	}
	case PBARENASCORES:
	{
	    if(response == 1) return PaintballScoreboard(playerid);
	}
	case PB_SARENA:
	{
	    if(response == 1)
	    {
	        switch(listitem)
	        {
       	    	case 0: JoinPaintballArena(playerid, 1);//Join DM
       	    	case 1: JoinPaintballArena(playerid, 5);//Join DM2
       	    	case 2: JoinPaintballArena(playerid, 2);// Join Choose Team
       	    	case 3: JoinPaintballArena(playerid, 4); // SendClientMessageEx Coming soon
       	    }
       	}
	    else PaintballMainMenu(playerid);
	}
	case PB_CHOOSE:
	{
	    if(response == 1)
	    {
	        switch(listitem)
	        {
	        	case 0: // Red
 				{
 				    if(Info[playerid][pPaintTeam] == 1)
 				    {
 				        SendClientMessageEx(playerid, COLOR_WHITE, "Ya eres del equipo rojo!");
 				        PaintballSwitchTeam(playerid);
 				        return 1;
 				    }
 				    if(PlayersRed == 12)
 				    {
						SendClientMessageEx(playerid, COLOR_WHITE, "Equipo rojo está full, porfavor elige otro equipo.");
 				        PaintballSwitchTeam(playerid);
 				        return 1;
 				    }
 				    if(PlayersRed > PlayersBlue)
 				    {
 				        SendClientMessageEx(playerid, COLOR_WHITE, "No puedes unirte a equipos ahora, si llegas a entrar estarían disparejos.");
 				        return 1;
 				    }
 				    PlayersBlue--;
 				    PlayersRed++;
 				    Info[playerid][pPaintTeam] = 1;
 				    SetHP(playerid, 0);
	        	}
	        	case 1: // Blue
	        	{
	        	    if(Info[playerid][pPaintTeam] == 2)
 				    {
 				        SendClientMessageEx(playerid, COLOR_WHITE, "Ya eres del equipo azul!");
 				        PaintballSwitchTeam(playerid);
 				        return 1;
 				    }
 				    if(PlayersBlue == 12)
 				    {
						SendClientMessageEx(playerid, COLOR_WHITE, "Equipo azul está full, porfavor elige otro equipo.");
 				        PaintballSwitchTeam(playerid);
 				        return 1;
 				    }
 				    if(PlayersBlue > PlayersRed)
 				    {
 				        SendClientMessageEx(playerid, COLOR_WHITE, "No puedes unirte a equipos ahora, si llegas a entrar estarían disparejos.");
 				        return 1;
 				    }
 				    PlayersRed--;
 				    PlayersBlue++;
 				    Info[playerid][pPaintTeam] = 2;
 				    SetHP(playerid, 0);
	        	}
			}
	    }
	}
	case PBJOINTEAM:
	{
   		if(response == 1)
    	{
        	switch(listitem)
        	{
        		case 0: // Red
				{
				    if(PlayersRed == 12)
				    {
						SendClientMessageEx(playerid, COLOR_WHITE, "El equipo rojo está FULL, por favor elige otro equipo.");
				        ShowPlayerDialog(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"Paintball Arena - Elige un Equipo:","{FF0000}Equipo Rojo\n{0000FF}Equipo Azul","Entrar","Salir");
				        return 1;
				    }
				    if(PlayersRed > PlayersBlue)
				    {
				        SendClientMessageEx(playerid, COLOR_WHITE, "Los equipos estarían disparejos, por favor elige otro equipo.");
				        ShowPlayerDialog(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"Paintball Arena - Elige un Equipo:","{FF0000}Equipo Rojo\n{0000FF}Equipo Azul","Entrar","Salir");
				        return 1;
				    }
				    Info[playerid][pPaintTeam] = 1;
				    TotalTDM++;
					JoinPaintballArena(playerid, 3);
        		}
        		case 1: // Blue
        		{
				    if(PlayersBlue == 12)
				    {
						SendClientMessageEx(playerid, COLOR_WHITE, "El equipo azul está FULL, por favor elige otro equipo.");
				        ShowPlayerDialog(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"Paintball Arena - Elige un Equipo:","{FF0000}Equipo Rojo\n{0000FF}Equipo Azul","Entrar","Salir");
				        return 1;
				    }
				    if(PlayersBlue > PlayersRed)
				    {
				        SendClientMessageEx(playerid, COLOR_WHITE, "Los equipos estarían disparejos, por favor elige otro equipo.");
				        ShowPlayerDialog(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"Paintball Arena - Elige un Equipo:","{FF0000}Equipo Rojo\n{0000FF}Equipo Azul","Entrar","Salir");
				        return 1;
				    }
				    Info[playerid][pPaintTeam] = 2;
				    TotalTDM++;
					JoinPaintballArena(playerid, 3);
	        	}
			}
	    }
	    else
	    {
	        PaintballArenaSelection(playerid);
	    }
	}
	case PB_ARMAS:
	{
		if(GetPVarInt(playerid, "ArenaMode") == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Lo sentimos, no estás dentro de la arena.");
	    if(Info[playerid][pPaintTokens] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Lo sentimos, no tienes suficientes fichas para canjear.");
		if(response)
		{
			if(listitem == 0) //
			{
				GivePlayerWeapon(playerid, 22, 60000);
				Info[playerid][pPaintTokens] -= 1;
			}
			if(listitem == 1) //deagle
			{
				GivePlayerWeapon(playerid, 24, 60000);
				Info[playerid][pPaintTokens] -= 1;
			}
			if(listitem == 2) //MP5
			{
				GivePlayerWeapon(playerid, 29, 60000);
				Info[playerid][pPaintTokens] -= 1;
			}
			if(listitem == 3) //AK-47
			{
				GivePlayerWeapon(playerid, 30, 60000);
				Info[playerid][pPaintTokens] -= 1;
			}
			if(listitem == 4) //M4
			{
			    if(Info[playerid][pPaintTokens] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas 2 fichas para esta arma.");
				GivePlayerWeapon(playerid, 31, 60000);
				return Info[playerid][pPaintTokens] -= 1;
			}
			if(listitem == 5) //shotgun
			{
				GivePlayerWeapon(playerid, 25, 60000);
				Info[playerid][pPaintTokens] -= 1;
			}
			if(listitem == 6) //spaz
			{
			    if(Info[playerid][pPaintTokens] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas 2 fichas para esta arma.");
				GivePlayerWeapon(playerid, 27, 60000);
				return Info[playerid][pPaintTokens] -= 2;
			}
			if(listitem == 7) //armor
			{
				new Float:health;
				GetPlayerHealth(playerid, health);
				if (health < 50)
				{
				 	return SendClientMessageEx(playerid,COLOR_WHITE,"No puedes comprar chaleco con menos de 35 de vida!");
				}
				GiveArmorToPlayer(playerid, 100);
				return Info[playerid][pPaintTokens] -= 1;
			}
		}
	}
	case DIALOG_CDSTEREOMENU:
	{
		if(response)
		{
		    	new  businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
            	if(CheckMoney(playerid, 750))
			            {
			                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							Tax += 750;
							SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un "COL_BLUE"Estéreo"COL_WHITE" de piso ("COL_GENERAL"/estereo /estereoc /estereoq"COL_WHITE")");
							Info[playerid][pBoombox] = 1;
							Bought(playerid, 750);
							businessVariables[businessID][bVault] += 1200;
					    SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
					}
		    	}
		}
	case EQUIPO_DOC:
	{
	    if(response == 1)
	    {
	        switch (listitem)
	        {
	            case 0:
				{
			                SetHP(playerid, 100);
							SetPlayerSkin(playerid, 70);
							Medics += 1;
							format(szMessage, sizeof(szMessage), "* %s se pone su bata blanca y se desinfecta sus manos.", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				case 1:
				{
			                SetHP(playerid, 100);
							SetPlayerSkin(playerid, 274);
							Medics += 1;
							format(szMessage, sizeof(szMessage), "* %s se viste y guarda su radio.", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				case 2:
				{
			                SetHP(playerid, 100);
							SetPlayerSkin(playerid, 275);
							Medics += 1;
							format(szMessage, sizeof(szMessage), "* %s se viste y guarda su radio.", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				case 3:
				{
			                SetHP(playerid, 100);
							SetPlayerSkin(playerid, 276);
							Medics += 1;
							format(szMessage, sizeof(szMessage), "* %s se viste y guarda su radio.", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				case 4:
				{
							if(OnDuty[playerid] == 1) {	SendClientMessageEx(playerid, COLOR_WHITE, "Estás en labor! Termina tu turno!"); return 1;    }
							SetPlayerSkin(playerid, Info[playerid][pChar]);
							Medics -= 1;
							format(szMessage, sizeof(szMessage), "* %s se viste con ropa normal", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
			}
		}
	}
	case LOTTO_BUY:
	{
		if(response == 1)
		{
		    new number = strval(inputtext);
		    if(number >= 0 && number <= 100)
		    {
		        if(CheckMoney(playerid, 10))
		        {
					Info[playerid][pLottoNr] = number;
					SendClientMessageEx(playerid, COLOR_WHITE, "Lotería comprada!");
					Bought(playerid, 10);
	    			Jackpot += 50;
	    		}
			}
			else SendClientMessage(playerid,COLOR_GREY,"* El número mínimo es 0 y el máximo es 100, inténtalo otra vez.");
		}
	}
	case FSTYLE_DIALOG:
	{
    	if(response == 1)
    	{
        	switch(listitem)
        	{
            	case 0:
            	{
		    	    if(CheckMoney(playerid, 1500))
		    	    {
						Bought(playerid, 1500);
						Info[playerid][pFStyle] = 7;
						SetPlayerFightingStyle (playerid, Info[playerid][pFStyle]);
                        ShowInfoForPlayer(playerid, "~w~ Felicidades! Has aprendido ~y~Knee Head", 3000);
						ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
					}
				}
				case 1:
	            {
			        if(CheckMoney(playerid, 1000))
			        {
						Bought(playerid, 1000);
						Info[playerid][pFStyle] = 6;
						SetPlayerFightingStyle (playerid, Info[playerid][pFStyle]);
						ShowInfoForPlayer(playerid, "~w~ Felicidades! Has aprendido ~y~Kung Fu", 3000);
						ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
					}
				}
				case 2:
	            {
			        if(CheckMoney(playerid, 800))
			        {
						Bought(playerid, 800);
						Info[playerid][pFStyle] = 5;
						SetPlayerFightingStyle (playerid, Info[playerid][pFStyle]);
						ShowInfoForPlayer(playerid, "~w~ Felicidades! Has aprendido a ~y~Boxear", 3000);
						ApplyAnimation(playerid,"benchpress", "gym_bp_celebrate",4.0,1,1,1,1,500);
					}
				}
			}
		}
	}
	case UMENU_REPARACION:
	{
	    if(!response) return 1;
        new Float:cx, Float:cy, Float:cz;
       	GetVehiclePos(idcar, cx, cy, cz);
       	PlayerPlaySound(playerid, 1133, cx, cy, cz);
		switch(listitem)
		{
		    case 0:
		    {
		        if(!CheckMoney(playerid,5000)) return SendClientMessage(playerid, COLOR_WHITE, "No tienes el dinero para comprarlo!");
		        szMessage = "* Mecanico arregla el motor del vehiculo.";
  				ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	  			SetVehicleHealth(idcar, 1000.0);
                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                Bought(playerid, 5000);
	  			return 1;
			}
			case 1:
			{
			    if(!CheckMoney(playerid,8000)) return SendClientMessage(playerid, COLOR_WHITE, "No tienes el dinero para comprarlo!");
			    szMessage = "* Mecanico coloca carrocería nueva al vehiculo.";
   				ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RepairVehicle(idcar);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				Bought(playerid, 8000);
				return 1;
			}
			case 2: ShowPlayerDialog(playerid, UMENU_REPARACION2, DIALOG_STYLE_LIST, "Selecciona el tipo de seguro:", "Seguro de Alarma\t($800)\nSeguro Industrial\t($2000)", "Comprar", "Cancelar");
			case 3:
   			{
   				if(!CheckMoney(playerid,80)) return SendClientMessage(playerid, COLOR_WHITE, "No tienes el dinero para comprarlo!");
 				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
   				Info[playerid][pSpraycan] += 3;
   				SendClientMessageEx(playerid, COLOR_WHITE, "Compraste 3 Potes de Spray. Puedes usar /paintcoche - /colorcoche dentro de tu coche para pintarlo.");
				if(Info[playerid][pVIP] == 0) return Bought(playerid, 80);
				else
				{
  					Bought(playerid, 50);
  					return SendClientMessageEx(playerid, COLOR_GRAD1, "VIP: Descuento por ser VIP! El precio normal es 80, a ti te costó 50.");
				}
			}
			case 4:
			{
			    if(!CheckMoney(playerid, 1800)) return SendClientMessage(playerid, COLOR_WHITE, "No tienes el dinero para comprarlo! ($1800)");
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessageEx(playerid, COLOR_WHITE, "Insalaste un equipo de sonido en el vehiculo, usa '/estereoveh' para usarlo.");
			    if(Info[playerid][pVIP] == 0) return Bought(playerid, 1800);
				else
				{
  					Bought(playerid, 1200);
  					return SendClientMessageEx(playerid, COLOR_GRAD1, "VIP: Descuento por ser VIP! El precio normal es 1800, a ti te costó 1200.");
				}
			}
		}
	}
	case UMENU_REPARACION2:
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            new pnamep[MAX_PLAYER_NAME], pvid = GetPlayerVehicleID(playerid);
	            format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
				if(!CheckMoney(playerid,800)) return SendClientMessage(playerid, COLOR_GRAD2, "No tienes suficiente dinero!");
				if(strcmp(PlayerVehicleInfo[pvid][pvOwner], pnamep) == 1) return SendClientMessage(playerid, COLOR_GRAD2, "Este vehículo no es tuyo!");
				if(PlayerVehicleInfo[pvid][pvLock] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: Esto ya está instalado en este vehiculo."), SetPVarInt(playerid, "lockmenu", 0);
		    	SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un seguro de alarma!");
	    		SendClientMessageEx(playerid, COLOR_GRAD1, "{37B9F5}<!>{E3E4ED} Ahora puedes usar /seguro para asegurar tu auto.");
	    		PlayerVehicleInfo[pvid][pvLock] = 1;
	    		if(Info[playerid][pVIP] == 0) return Bought(playerid, 800);
	    		else
	    		{
	    	    	Bought(playerid, 500);
		   			SendClientMessageEx(playerid, COLOR_GRAD1, "VIP: Descuento VIP! El precio normal es 800, a ti te costó 500.");
				}
			}
			case 1:
	        {
	            new pnamep[MAX_PLAYER_NAME], pvid = GetPlayerVehicleID(playerid);
	            format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
				if(!CheckMoney(playerid,2000)) return SendClientMessage(playerid, COLOR_GRAD2, "No tienes suficiente dinero!");
				if(strcmp(PlayerVehicleInfo[pvid][pvOwner], pnamep) == 1) return SendClientMessage(playerid, COLOR_GRAD2, "Este vehículo no es tuyo!");
				if(PlayerVehicleInfo[pvid][pvLock] == 3) return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: Esto ya está instalado en este vehiculo."), SetPVarInt(playerid, "lockmenu", 0);
		    	SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un seguro de alarma!");
	    		SendClientMessageEx(playerid, COLOR_GRAD1, "{37B9F5}<!>{E3E4ED} Ahora puedes usar /seguro para asegurar tu auto.");
	    		PlayerVehicleInfo[pvid][pvLock] = 3;
	    		if(Info[playerid][pVIP] == 0) return Bought(playerid, 2000);
	    		else
	    		{
	    	    	Bought(playerid, 1200);
		   			SendClientMessageEx(playerid, COLOR_GRAD1, "VIP: Descuento VIP! El precio normal es 2000, a ti te costó 1200.");
				}
			}
		}
	}
	case MMENU_REPARACION:
	{
		if(response == 1)
	    {
	        new Float:cx, Float:cy, Float:cz;
         	GetVehiclePos(idcar, cx, cy, cz);
         	PlayerPlaySound(playerid, 1133, cx, cy, cz);
	        switch(listitem)
	        {
	            case 0:
				{
					format(szMessage, sizeof(szMessage), "* %s arregla el motor del vehículo.", GetPlayerNameEx(playerid));
      				ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		  			SetVehicleHealth(idcar, 1000.0);
					return 1;
				}
				case 1:
				{
					format(szMessage, sizeof(szMessage), "* %s coloca carrocería nueva al vehiculo.", GetPlayerNameEx(playerid));
      				ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		  			RepairVehicle(idcar);
					return 1;
				}
			}
		}
	}
	case MECANICO_MSEG:
	{
	    if(!response)return 1;
	    new pvid;
	    for(new i = 0 ; i < MAX_PLAYERVEHICLES ; i++)
     	{
     		if(PlayerVehicleInfo[i][pvId] == GetPlayerVehicleID(playerid)) pvid = i;
			break;
		}
		switch(listitem)
		{
		    case 0:
			{
				if(PlayerVehicleInfo[pvid][pvLock] == 1) return SendClientMessage(playerid, COLOR_GRAD2, "Este vehiculo ya tiene instalado un seguro del mismo tipo.");
				PlayerVehicleInfo[pvid][pvLock] = 1;
				format(szMessage, sizeof(szMessage), "* %s coloca un seguro de alarma al vehiculo.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			case 1:
			{
			    if(PlayerVehicleInfo[pvid][pvLock] == 3) return SendClientMessage(playerid, COLOR_GRAD2, "Este vehiculo ya tiene instalado un seguro del mismo tipo.");
				PlayerVehicleInfo[pvid][pvLock] = 3;
				format(szMessage, sizeof(szMessage), "* %s coloca un seguro industrial al vehiculo.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
	}
	case MECANICO_MENU:
		{
			if(response == 1)
		    {
				new pvid;
		        for(new i = 0 ; i < MAX_PLAYERVEHICLES ; i++)
		        {
		            if(PlayerVehicleInfo[i][pvId] == GetPlayerVehicleID(playerid)) pvid = i;
		            break;
				}
		        switch(listitem)
                {
					case 0:// Reparar
					{
					        if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el taller de mecanica!");
		    				if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo!");
							ShowPlayerDialog(playerid, MMENU_REPARACION, DIALOG_STYLE_LIST, "Reparar", "Cambiar Motor\nCambiar Motor + Chasis", "Ok", "Atrás");
							return 1;
					}
					case 1: // Gasolina
					{
					    if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el taller!");
					    if(IsPlayerInAnyVehicle(playerid))
					    {
							new string[64];
							format(string, sizeof(string), "* %s llena el tanque del vehículo.", GetPlayerNameEx(playerid));
			      			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					  		VehicleFuel[idcar] = 300;
					  		return 1;
						}
						else return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo!");
					}
					case 2: // Tunnig
					{
		                if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el taller!");
		    			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo!");
						ModCar(playerid);
						return 1;
					}
					case 3: //seguro
					{
					    if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el taller!");
		    			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo!");
						ShowPlayerDialog(playerid, MECANICO_MSEG, DIALOG_STYLE_LIST, "Selecciona el tipo de Seguro:", "Seguro de Alarma\nSeguro Industrial", ">>", "<<");
		    			return 1;
					}
					case 4: //eq sound
					{
					    if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el taller!");
		    			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo!");
                        PlayerVehicleInfo[pvid][pvEqSound] = 1;
                        format(szMessage, sizeof(szMessage), "* %s instala un equipo de sonido en el vehiculo.", GetPlayerNameEx(playerid));
      					ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    			return 1;
					}
				}
			}
		}
    case MMENUTUNING_G:{
		if(response == 1){
	        switch(listitem){
	            case 0: ShowPlayerDialog(playerid, TUNING_WAA, DIALOG_STYLE_LIST, "Piezas W.A.A ", "Chasis X-Flow\nChasis Alien", "Aceptar", "Atrás");
	            case 1: ShowPlayerDialog(playerid, TUNING_MENU_RUEDAS, DIALOG_STYLE_LIST, "Llantas", "OffRoad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAcces", "Tunear", "<<");
			}
		}
	}
	case TUNING_WAA:
	{
		if(response == 1)
    	{
    	    switch(listitem)
    	    {
    	        // XFLOW TUNING Important Note: Using an invalid componentid crashes the game.
    	        case 0:
    	        {
    	            SendClientMessageEx(playerid, COLOR_WHITE, "CASE0");
					switch(GetVehicleModel(idcar))
			        {
			            case 560:
			            {
	                        AddVehicleComponent(idcar, 1030);
	                        AddVehicleComponent(idcar, 1033);
	                        AddVehicleComponent(idcar, 1140);
	                        AddVehicleComponent(idcar, 1170);
	                        AddVehicleComponent(idcar, 1029);
	                        AddVehicleComponent(idcar, 1139);
	                        SendClientMessageEx(playerid, COLOR_WHITE, "¡Carrocería Xflow instalada!");
			            }
			            case 562:
			            {
	                        AddVehicleComponent(idcar, 1039);
	                        AddVehicleComponent(idcar, 1035);
	                        AddVehicleComponent(idcar, 1148);
	                        AddVehicleComponent(idcar, 1172);
	                        AddVehicleComponent(idcar, 1037);
	                        AddVehicleComponent(idcar, 1146);
	                        SendClientMessageEx(playerid, COLOR_WHITE, "¡Carrocería Xflow instalada!");
			            }
			            case 565:
			            {
	                        AddVehicleComponent(idcar, 1048);
	                        AddVehicleComponent(idcar, 1053);
	                        AddVehicleComponent(idcar, 1050);
	                        AddVehicleComponent(idcar, 1151);
	                        AddVehicleComponent(idcar, 1152);
	                        AddVehicleComponent(idcar, 1045);
	                        SendClientMessageEx(playerid, COLOR_WHITE, "¡Carrocería Xflow instalada!");
			            }
		            	case 559:
		            	{
                        	AddVehicleComponent(idcar,1070);
                        	AddVehicleComponent(idcar,1068);
                        	AddVehicleComponent(idcar,1158);
                        	AddVehicleComponent(idcar,1161);
                        	AddVehicleComponent(idcar,1173);
                        	AddVehicleComponent(idcar,1066);
	                        SendClientMessageEx(playerid, COLOR_WHITE, "¡Carrocería Xflow instalada!");
		            	}
		            	case 561:
		            	{
                        	AddVehicleComponent(idcar,1057);
                        	AddVehicleComponent(idcar,1061);
                        	AddVehicleComponent(idcar,1060);
                        	AddVehicleComponent(idcar,1156);
                        	AddVehicleComponent(idcar,1157);
                    	    AddVehicleComponent(idcar,1059);
	                        SendClientMessageEx(playerid, COLOR_WHITE, "¡Carrocería Xflow instalada!");
		            	}
		            	case 558:
		           	 	{
                    	    AddVehicleComponent(idcar, 1093);
                    	    AddVehicleComponent(idcar,1091);
                	        AddVehicleComponent(idcar,1163);
            	            AddVehicleComponent(idcar, 1167);
            	            AddVehicleComponent(idcar, 1165);
            	            AddVehicleComponent(idcar, 1089);
	                        SendClientMessageEx(playerid, COLOR_WHITE, "¡Carrocería Xflow instalada!");
		    	        }
		    	        default: SendClientMessageEx(playerid, COLOR_WHITE, "Este coche no permite este tipo de tunning.");
		    	    }
		    	    if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1)
					{
						UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
					}
            	}
            	// ALIEN TUNING Important Note: Using an invalid componentid crashes the game.
				case 1:
            	{
                	SendClientMessageEx(playerid, COLOR_WHITE, "CASE0");
					switch(GetVehicleModel(idcar))
		        	{
		        	    case 560:
		        	    {
                	        AddVehicleComponent(idcar, 1026);
                	        AddVehicleComponent(idcar, 1032);
                	        AddVehicleComponent(idcar, 1138);
                	        AddVehicleComponent(idcar, 1141);
                	        AddVehicleComponent(idcar,1169);
                	        AddVehicleComponent(idcar, 1028);
        	                SendClientMessageEx(playerid, COLOR_WHITE, "¡Carrocería Alien instalada!");
		    	        }
		    	        case 562:
		    	        {
        	                AddVehicleComponent(idcar,1036);
        	                AddVehicleComponent(idcar,1038);
        	                AddVehicleComponent(idcar,1149);
        	                AddVehicleComponent(idcar,1171);
        	                AddVehicleComponent(idcar,1034);
        	                AddVehicleComponent(idcar,1147);
        	                SendClientMessageEx(playerid, COLOR_WHITE, "¡Carrocería Alien instalada!");
			            }
			            case 565:
			            {
        	                AddVehicleComponent(idcar, 1047);
        	                AddVehicleComponent(idcar, 1054);
        	                AddVehicleComponent(idcar, 1049);
        	                AddVehicleComponent(idcar, 1150);
        	                AddVehicleComponent(idcar, 1153);
        	                AddVehicleComponent(idcar, 1046);
        	                SendClientMessageEx(playerid, COLOR_WHITE, "¡Carrocería Alien instalada!");
			            }
			            case 559:
			            {
        	                AddVehicleComponent(idcar, 1069);
        	                AddVehicleComponent(idcar, 1067);
        	                AddVehicleComponent(idcar, 1162);
        	                AddVehicleComponent(idcar, 1159);
        	                AddVehicleComponent(idcar, 1160);
        	                AddVehicleComponent(idcar, 1065);
        	                SendClientMessageEx(playerid, COLOR_WHITE, "¡Carrocería Alien instalada!");
			            }
			            case 561:
			            {
	                        AddVehicleComponent(idcar, 1056);
	                        AddVehicleComponent(idcar, 1055);
	                        AddVehicleComponent(idcar, 1058);
	                        AddVehicleComponent(idcar, 1154);
	                        AddVehicleComponent(idcar, 1153);
	                        AddVehicleComponent(idcar, 1064);
        	                SendClientMessageEx(playerid, COLOR_WHITE, "¡Carrocería Alien instalada!");
			            }
			            case 558:
			            {
	                        AddVehicleComponent(idcar,1094);
	                        AddVehicleComponent(idcar,1088);
	                        AddVehicleComponent(idcar, 1164);
	                        AddVehicleComponent(idcar,1168);
	                        AddVehicleComponent(idcar,1166);
	                        AddVehicleComponent(idcar,1092);
	                        SendClientMessageEx(playerid, COLOR_WHITE, "¡Carrocería ALIEN Instalada!");
			            }
		    	        default: SendClientMessageEx(playerid, COLOR_WHITE, "Este coche no permite este tipo de tunning.");
			        }
		    	    if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1)
					{
						UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
					}
	            }
	        }
		}
	}
	case TUNING_MENU_RUEDAS:
	{
		if(response == 1)
	    {
	        new Float:cx, Float:cy, Float:cz;
         	GetVehiclePos(idcar, cx, cy, cz);
         	PlayerPlaySound(playerid, 1133, cx, cy, cz);
	        switch(listitem)
	        {
	            case 0: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas OffRoad instaladas."); AddVehicleComponent(idcar, 1025); return 1; }
	            case 1: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Shadow instaladas."); AddVehicleComponent(idcar, 1073);  return 1; }
	            case 2: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Mega instaladas."); AddVehicleComponent(idcar, 1074); return 1; }
	            case 3: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Rimshine instaladas. "); AddVehicleComponent(idcar, 1075);  return 1; }
	            case 4: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Wires instaladas."); AddVehicleComponent(idcar, 1076);  return 1; }
	            case 5: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Classic instaladas."); AddVehicleComponent(idcar, 1077);  return 1; }
	            case 6: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Twist instaladas."); AddVehicleComponent(idcar, 1078);  return 1; }
	            case 7: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Cutter instaladas."); AddVehicleComponent(idcar, 1079);  return 1; }
	            case 8: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Switch instaladas."); AddVehicleComponent(idcar, 1080);  return 1; }
	            case 9: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Grove instaladas."); AddVehicleComponent(idcar, 1081);  return 1; }
	            case 10: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Import instaladas."); AddVehicleComponent(idcar, 1082);  return 1; }
	            case 11: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Dollar instaladas."); AddVehicleComponent(idcar, 1083);  return 1; }
    	        case 12: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Trance instaladas."); AddVehicleComponent(idcar, 1084);  return 1; }
	            case 13: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Atomic instaladas."); AddVehicleComponent(idcar, 1085);  return 1; }
	            case 14: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Atomic instaladas."); AddVehicleComponent(idcar, 1096);  return 1; }
	            case 15: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Atomic instaladas."); AddVehicleComponent(idcar, 1097);  return 1; }
	            case 16: { SendClientMessageEx(playerid, COLOR_WHITE, "* Llantas Atomic instaladas."); AddVehicleComponent(idcar, 1098);  return 1; }
			}
		    if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1)
			{
				UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
			}
		}
	}
	case REQF_ACCEPT:
	{
    	if(response == 1)
    	{
    	    format(szMessage, sizeof(szMessage), "¡Felicidades! Ahora trabajas en %s, aceptaste el contrato!",ReqF_Name[playerid]);
    	    SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
    	    Info[playerid][pMember]= ReqF_Faction[playerid];
    	    Info[playerid][pRank] = 1;
    	    Info[playerid][pDivision] = 1;
    	    format(szMessage, sizeof(szMessage), "* %s acepta un contrato", GetPlayerNameEx(playerid));
  			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    	    ReqF_Name[playerid] = "No-Faction"; ReqF_Faction[playerid] = 0; Facturing[playerid] = 0;
    	}
    	else
		{
    	    SendClientMessageEx(playerid, COLOR_WHITE, "Rechazaste el contrato.");
    	    format(szMessage, sizeof(szMessage), "* %s rechaza un contrato", GetPlayerNameEx(playerid));
  			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			ReqF_Name[playerid] = "No-Faction"; ReqF_Faction[playerid] = 0; Facturing[playerid] = 0;
		}
	}
	case ENTER_LSTV:
	{
    	if(response == 1)
    	{
        	switch(listitem)
        	{
        	    case 0:
        	    {
        	        SetPosEx(playerid, -2719.7854,519.2936,48.3752,0,0,0);//-1965.2617,779.8456,107.1754
        	        GameTextForPlayer(playerid, "~g~~h~CNN", 5000, 1);
        	    }
        	    case 1:
        	    {
        	        SetPosEx(playerid, 243.2710,302.7583,999.1343+1,0,0,0);
        	        GameTextForPlayer(playerid, "~g~~h~CNN", 5000, 1);
        	    }
    	    }
	    }
	}
    case REBUG:
    {
        if(response == 1)
        {
			SendClientMessageEx(playerid, COLOR_WHITE, "Gracias. El bug será arreglado lo más antes posible.");
			format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s reportó un bug: %s", GetPlayerNameEx(playerid), inputtext);
			ABroadCast(COLOR_GENERAL,szMessage,4);
			Log("logs/reportbug.log", szMessage);
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "No dudes en reportar un bug si lo encuentras");
		}
	}
 case REG_AGE:
	{
        if(response)
        {
	         if(strval(inputtext) < 18 || strval(inputtext) > 99) return ShowPlayerDialog(playerid, REG_AGE, DIALOG_STYLE_INPUT,""COL_GENERAL"New Paradise - "COL_WHITE"1/4", "ATENCIÓN!\n\n"COL_WHITE"* La edad mínima es 18\n * La edad máxima es 99",">","");
	         {
	         	Info[playerid][pAge] = strval(inputtext);
 				format(szDialog, sizeof(szDialog), ""COL_WHITE"* Edad: %d\n\nBien, ahora necesitamos saber que sexo es tu personaje.", strval(inputtext));
				ShowPlayerDialog(playerid, REG_SEX, DIALOG_STYLE_MSGBOX,""COL_GENERAL"New Paradise Roleplay - "COL_WHITE"2/4", szDialog,"Hombre","Mujer");
	         }
	    }
	}
	case REG_SEX:
	{
		if(response == 1)
		{
			Info[playerid][pSex] = 1;
	        Info[playerid][pChar] = 299;
			format(szDialog, sizeof(szDialog), ""COL_WHITE"* Edad: %d.\n* Sexo: Masculino.\n\nLo último, como toda persona, todos tienen un lugar de nacimiento pero está vez tendrás que elegir un acento para tu personaje.\nEjm:\n\nNorteamericano.\nColombiano.", Info[playerid][pAge]);
	        ShowPlayerDialog(playerid, D_REGACENT, DIALOG_STYLE_INPUT, ""COL_GENERAL"New Paradise Roleplay - "COL_WHITE"3/4",szDialog, "Ok", "");
	    }
		else
		{
			Info[playerid][pSex] = 2;
			Info[playerid][pChar] = 93;
			format(szDialog, sizeof(szDialog), ""COL_WHITE"* Edad: %d.\n* Sexo: Femenino.\n\nLo último, como toda persona, todos tienen un lugar de nacimiento pero está vez tendrás que elegir un acento para tu personaje.\nEjm:\n\nNorteamericano.\nColombiano.", Info[playerid][pAge]);
	        ShowPlayerDialog(playerid, D_REGACENT, DIALOG_STYLE_INPUT, ""COL_GENERAL"New Paradise Roleplay - "COL_WHITE"3/4",szDialog, "Ok", "");
		}
	}
	case D_REGACENT:
	{
	    if(response)
	    {
	        if(isnumeric(inputtext))
	        {
	            format(szDialog, sizeof(szDialog), ""COL_WHITE"No se puede ingresar números.\nDebes usar menos de 14 letras.\nEjemplo:\n\n* Colombiano\n* Chino\n* Argentino\n* Peruano\n* Ingresa el que quieras...");
				return ShowPlayerDialog(playerid, D_REGACENT, DIALOG_STYLE_INPUT, ""COL_GENERAL"New Paradise Roleplay - "COL_WHITE"3/4",szDialog, "Ok", "");
	        }
	        if(isnull(inputtext))
	        {
	            format(szDialog, sizeof(szDialog), ""COL_WHITE"No has ingresado nada.\nDebes usar menos de 14 letras.\nEjemplo:\n\n* Colombiano\n* Chino\n* Argentino\n* Peruano\n* Ingresa el que quieras...");
				return ShowPlayerDialog(playerid, D_REGACENT, DIALOG_STYLE_INPUT, ""COL_GENERAL"New Paradise Roleplay - "COL_WHITE"3/4",szDialog, "Ok", "");
	        }
        	if(strlen(inputtext) >= 15)
			{
			    format(szDialog, sizeof(szDialog), ""COL_WHITE"El acento que elegiste usa demasiados carácteres.\nDebes usar menos de 15 letras.\nEjemplo:\n\n* Colombiano\n* Chino\n* Argentino\n* Peruano\n* Ingresa el que quieras...");
                return ShowPlayerDialog(playerid, D_REGACENT, DIALOG_STYLE_INPUT, ""COL_GENERAL"New Paradise Roleplay - "COL_WHITE"3/4",szDialog, "Ok", "");
			}
			strmid(Info[playerid][pAcento], inputtext, 0, strlen(inputtext), 40);
	        new atext[7];
			switch(Info[playerid][pSex])
			{
				case 1: atext = "Hombre";
				case 2: atext = "Mujer";
			}
			format(szDialog, sizeof(szDialog), ""COL_WHITE"Muy bien eso es todo pero antes debes confirmar tus datos.\n\n * Nombre: %s.\n * Edad: %d.\n * Sexo: %s.\n * Acento: %s.\n\nSi quieras corregir tus datos selecciona cancelar.", GetPlayerNameEx(playerid),Info[playerid][pAge],atext,Info[playerid][pAcento]);
			ShowPlayerDialog(playerid, D_REGCON, DIALOG_STYLE_MSGBOX,""COL_GENERAL"New Paradise Roleplay - "COL_WHITE"4/4", szDialog,"Confirmar","Cancelar");
	    }
	}
    case D_REGCON:
	{
	    if(response)
	    {
			new rt[] = "{FFFFFF}Gracias por confirmar los datos de tu personaje.\n\n{FFFFFF}Ahora tendras que pasar por nuestro "COL_GENERAL"test de roleplay,\n{FFFFFF}es necesario para mantener el orden dentro de nuestro servidor.\n\n{FFFFFF}En caso de que lo completes correctamente seras registrado completamente.\n{FFFFFF}Te deseamos mucha suerte.\n\n{FFFFFF}¿Preparado para comenzar?";
	        ShowPlayerDialog(playerid,DIALOG_REG_TUT,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Test de RolePlay", rt,"Comenzar","");
	    }
	    else
	    {
      	 	format(szDialog, sizeof(szDialog), ""COL_WHITE"Hola de nuevo %s, antes de empezar tienes que ingresar la edad\nde tu personaje.\n\nMínimo 18 y Máximo 99", GetPlayerNameEx(playerid));
			ShowPlayerDialog(playerid, REG_AGE, DIALOG_STYLE_INPUT,""COL_GENERAL"New Paradise - "COL_WHITE"1/4", szDialog,">","");
	    }
	}
	case DIALOG_REG_TUT:
	{
	    if(response == 1)
	    {
            Test(playerid);
		}
	}
	case DIALOG_REG_FIN1:
	{
	    if(response == 1)
	    {
	        ShowPlayerDialog(playerid, TEST_0, DIALOG_STYLE_LIST, ""COL_GENERAL"¿Que significa MetaGaming?","Correr y saltar al mismo tiempo\nInsultar a un usuario\nMatar sin razon\nConfundir canales (OOC - IC)\nRobar un vehiculo sin rol\nEstacionarse mal.", "Seleccionar", "");
		}
	}
	case DIALOG_REG_FIN2:
	{
	    if(response == 1)
	    {
	        ClearChatbox(playerid);
	        TutStep[playerid] = 1;
			TutTime[playerid] = 13;
			Tutorial_Inside(playerid);

		}
	}
	case RENT_BIKE:
	{
	    if(response == 1)
	    {
	        new lights,alarm,doors,bonnet,boot,objective;
	    	new newcar = GetPlayerVehicleID(playerid);
			if(GetPlayerCash(playerid) < 200)
			{
			  	SendClientMessageEx(playerid, COLOR_WHITE, "No tienes suficiente dinero.");
				RemovePlayerFromVehicle(playerid);
 				SetVehicleToRespawn(newcar);
		    	new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
	    		TogglePlayerControllable(playerid,1);
	    	}
	    	else
	    	{
	    	    new precio;
			    TogglePlayerControllable(playerid, 1);
                SetVehicleParamsEx(newcar,1,lights,alarm,doors,bonnet,boot,objective);
       			switch(GetVehicleModel(newcar))
				{
				    case 509: precio = 200;
				    case 473, 453: precio = 500;
				}
	    		Bought(playerid, precio);
	    		RentTime[playerid] = 900;
	    		IsaRent[playerid] = 1; HireKey[playerid] = newcar;
	    	}
		}
		else
		{
			RemovePlayerFromVehicle(playerid);
		    new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly, slz+1.2);
	    	TogglePlayerControllable(playerid,1);
	    }
	}
	case DIALOG_ESTEREOV:
	{
	    if(!response) return 1;
	    new iVeh = GetPlayerVehicleID(playerid);
	    switch(listitem)
	    {
	        case 0:
	        {
       			EstereoON[iVeh] = false;
				cmd_me(playerid, "apaga el estereo del vehiculo.");
				foreach(Player, i)
				{
 					if(IsPlayerInDynamicArea(i, EstereoArea[iVeh])) StopStream(i);
				}
				EstereoArea[iVeh] = 0;	EstereoVPos[iVeh][0] = 0;	EstereoVPos[iVeh][1] = 0;	EstereoVPos[iVeh][2] = 0;
				strmid(EstereoURL[iVeh], "Nada", 0, strlen("Nada"));
			}
			case 1: ShowPlayerDialog(playerid, DIALOG_ESTEREOV_URL, DIALOG_STYLE_INPUT, "Estereo del Vehiculo", "{FFFFFF}Ingresa la URL de la canción que quieres escuchar.\n\n{DF013A}TIP: {FFFFFF}Recuerda que debe terminar en .mp3", "Aceptar", "Cancelar");
		}
	}
	case DIALOG_ESTEREOV_URL:
	{
	    new iVeh = GetPlayerVehicleID(playerid);
	    if(!response) return 1;
		if(isnull(inputtext)) return 1;
		if(!strlen(inputtext)) return 1;
		foreach(Player, i)
		{
		    if(IsPlayerInDynamicArea(i, EstereoArea[iVeh]))
			{
				PlayStream(i, inputtext, EstereoVPos[iVeh][0], EstereoVPos[iVeh][1], EstereoVPos[iVeh][2], 30.0, 1);
 			}
  		}
 		strmid(EstereoURL[iVeh], inputtext, 0, strlen(inputtext));
	}
    case IPAD:
    {
	    if(response)
	    {
	    	new Float:X, Float:Y, Float:Z, Float:Distance = 1.0;
	        GetPlayerPos(playerid, X, Y, Z);
	    	if(listitem == 0)//acalodeje
	    	{
	    	    StopAudioStreamForPlayer(playerid);
	    	    PlayAudioStreamForPlayer(playerid, "http://knight.wavestreamer.com:4347/live", X, Y, Z, Distance, 0);
				SendClientMessageEx(playerid, COLOR_WHITE, "Escuchando actualmente: "COL_GENERAL"Radio 24/7");
			}
	    	if(listitem == 1)
	    	{
	    	    StopAudioStreamForPlayer(playerid);
	    	    PlayAudioStreamForPlayer(playerid, "http://s1.wikimuzik.com/music/W/Wiz%20Khalifa/[one]/Black%20And%20Yellow%20[WikiSeda].mp3", X, Y, Z, Distance, 0);
				SendClientMessageEx(playerid, COLOR_WHITE, "Escuchando actualmente: "COL_GENERAL"Black And Yellow "COL_BLUE"1"COL_WHITE"");
			}
	    	if(listitem == 2)
	    	{
	    	    StopAudioStreamForPlayer(playerid);
	    	    PlayAudioStreamForPlayer(playerid, "http://www.wearecode.com/wp-content/uploads/2011/08/Midnight-City1.mp3", X, Y, Z, Distance, 0);
				SendClientMessageEx(playerid, COLOR_WHITE, "Escuchando actualmente: "COL_GENERAL"Midnight City "COL_BLUE"2"COL_WHITE"");
			}
	    	if(listitem == 3)
	    	{
	    		StopAudioStreamForPlayer(playerid);
	    	    PlayAudioStreamForPlayer(playerid, "http://www.millburylittleleague.org/All-Star/Smash%20Mouth%20-%20All%20Star.mp3", X, Y, Z, Distance, 0);
				SendClientMessageEx(playerid, COLOR_WHITE, "Escuchando actualmente: "COL_GENERAL"All Star Smash Mouth "COL_BLUE"3"COL_WHITE"");
			}
	    	if(listitem == 4)
	    	{
	    	    StopAudioStreamForPlayer(playerid);
	    	    PlayAudioStreamForPlayer(playerid, "http://www.djcelso.com.br/wp-content/uploads/2012/11/Showtek-Justin-Prime-Cannonball-Site-edit.mp3", X, Y, Z, Distance, 0);
				SendClientMessageEx(playerid, COLOR_WHITE, "Escuchando actualmente: "COL_GENERAL"Showtek Justin Prime Cannoball "COL_BLUE"4"COL_WHITE"");
			}
	    	if(listitem == 5)
	    	{
	    	    StopAudioStreamForPlayer(playerid);
	    	    PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/100949615/eve%20w%20gwen%20stefani%20-%20scorpion%20-%20let%20me%20blow%20your%20mind.mp3", X, Y, Z, Distance, 0);
				SendClientMessageEx(playerid, COLOR_WHITE, "Escuchando actualmente: "COL_GENERAL"Eve gwen: Scorpion let me blow your mind "COL_BLUE"5"COL_WHITE"");
			}
	    	if(listitem == 6)
	    	{
	    	    StopAudioStreamForPlayer(playerid);
	    	    PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/s/95zai6kygp58bw0/survival.mp3", X, Y, Z, Distance, 0);
				SendClientMessageEx(playerid, COLOR_WHITE, "Escuchando actualmente: "COL_GENERAL"GTA V: Survival "COL_BLUE"6"COL_WHITE"");
			}
	    	if(listitem == 7)
	    	{
	    	    StopAudioStreamForPlayer(playerid);
	    	    PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/s/hlgkora62wpwhhv/hood.mp3", X, Y, Z, Distance, 0);
				SendClientMessageEx(playerid, COLOR_WHITE, "Escuchando actualmente: "COL_GENERAL"GTA V: Hood "COL_BLUE"7"COL_WHITE"");
			}
	    	if(listitem == 8)
	    	{
	    		StopAudioStreamForPlayer(playerid);
	    	    PlayAudioStreamForPlayer(playerid, "http://a.tumblr.com/tumblr_kzljfm4Ozx1qavc47o1.mp3", X, Y, Z, Distance, 0);
				SendClientMessageEx(playerid, COLOR_WHITE, "Escuchando actualmente: "COL_GENERAL"Musica inicio "COL_BLUE"8"COL_WHITE"");
			}
			if(listitem == 9)
	    	{
	    	    StopAudioStreamForPlayer(playerid);
				SendClientMessageEx(playerid, COLOR_WHITE, "Apagaste el "COL_BLUE"Estéreo"COL_WHITE" del vehículo");
				Ipadon[playerid] = 0;
			}
		}
		else
		{
		    format(szMessage, sizeof(szMessage), "* %s apaga el estéreo del vehículo", GetPlayerNameEx(playerid));
        	ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	case DIALOG_SHOPFISH: if(response)
	{
		new  businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
		if(businessVariables[businessID][bStock] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No hay stock de productos en este momento.");
    	switch(listitem)
    	{
	    	case 0:
	    	{
	    	    if(Carnada[playerid] > 20) return SendClientMessageEx(playerid, COLOR_GREY, "Ya has comprado 20 cebos de pesca, gastalas.");
	    	    if(CheckMoney(playerid,15))
	    	    {
	    	        GivePlayerCash(playerid, -15);
	    	        SendClientMessageEx(playerid, COLOR_WHITE, "Compraste una lata de cebos. (20)");
	    	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    	        Carnada[playerid] += 20;
	    	        businessVariables[businessID][bVault] += 15;
	    	        businessVariables[businessID][bStock]--;
	    	    }
	    	}
	    	case 1:
	    	{
	    	    if(Lineas[playerid] > 20 ) return SendClientMessageEx(playerid, COLOR_GREY, "Ya has comprado 20 hilos de nailon para pescar, gastalas.");
	    	    if(CheckMoney(playerid,30))
	    	    {
	    	        GivePlayerCash(playerid, -30);
	    	        SendClientMessageEx(playerid, COLOR_WHITE, "Compraste 10 hilos de nailon para la caña de pesca.");
	    	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    	        Lineas[playerid] += 10;
	    	        businessVariables[businessID][bVault] += 30;
	    	        businessVariables[businessID][bStock]--;
	    	    }
	    	}
	    }
	    SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
	    SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
	}
	case DIALOG_AMMU: if(response)
	{
        if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes restricción de armas las 2 primeras horas de juego");
        if(Info[playerid][pGunLic] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Vendedor dice: Es imposible venderte armas, no tienes licencia para portarlas");
        new  businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
        if(businessVariables[businessID][bStock] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No hay stock de productos en este momento.");
		switch(listitem)
		{
		    case    0:
		    {
                DetectarModeloArma(playerid);
			}
			case    1:
		    {
	    	    if(CheckMoney(playerid,50))
	    	    {
	    	        Bought(playerid, 50);
	    	        businessVariables[businessID][bVault] += 50;
            		GivePlayerValidWeapon(playerid, 1, 99999);
            		businessVariables[businessID][bStock]--;
            	}
		    }
		    case    2:
		    {
	    	    if(CheckMoney(playerid,110))
	    	    {
	    	        Bought(playerid, 110);
	    	        businessVariables[businessID][bVault] += 110;
            		GivePlayerValidWeapon(playerid, 5, 99999);
            		businessVariables[businessID][bStock]--;
            	}
		    }
		    case    3:
		    {
	    	    if(CheckMoney(playerid,3000))
	    	    {
	    	        Bought(playerid, 3000);
	    	        businessVariables[businessID][bVault] += 3000;
            		GivePlayerValidWeapon(playerid, 22, 68);
            		businessVariables[businessID][bStock]--;
            	}
		    }
		    case    4:
		    {
	    	    if(CheckMoney(playerid,6000))
	    	    {
	    	        Bought(playerid, 6000);
	    	        businessVariables[businessID][bVault] += 6000;
            		GivePlayerValidWeapon(playerid, 24, 42);
            		businessVariables[businessID][bStock]--;
            	}
		    }

		}
	    SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
	    SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
    }
	case BALAS1: if(response)
	{
        new balas = strval(inputtext);
 		if (isnumeric(inputtext))
   		{
   		    ComprarBalasArma(playerid, balas);
   		}
	}
    case MERCADONEGRO:
		{
		    if(response)
		    {
		        if(listitem == 0)
		    	{
		    	    if(CheckMoney(playerid,15))
		    	    if(Info[playerid][pWRestricted] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* Tienes restricción de armas las 2 primeras horas de juego");
		    	    {
		    	        Bought(playerid, 15);
		    	        SendClientMessageEx(playerid, COLOR_WHITE, "Compraste un puño americano.");
                		GivePlayerValidWeapon(playerid, 1, 99999);
                	}
		    	}
		    	if(listitem == 1)
		    	{
          			 if(CheckMoney(playerid, 50)){
					        if(Info[playerid][pLevel] <= 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* Debes ser mayor a nivel 1.");
							Bought(playerid, 50);
							SendClientMessageEx(playerid, COLOR_WHITE, "Máscara comprada, utiliza '/mascara'.");
							Info[playerid][pMask] = 1;
							return 1;
					}
		    	}
				if(listitem == 2)
		    	{
          			 if(CheckMoney(playerid, 50)){
					        if(Info[playerid][pLevel] <= 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* Debes ser mayor a nivel 1.");
							Bought(playerid, 50);
							SendClientMessageEx(playerid, COLOR_WHITE, "Palanca comprada, utiliza '/forzarpuerta' en el banco.");
							Info[playerid][pMask] = 1;
							return 1;
					}
		    	}
		    	if(listitem == 3)
		    	{
		    	    if(CheckMoney(playerid, 70)){
							Ganzuas[playerid] = 1;
							Bought(playerid, 70);
							SendClientMessageEx(playerid, COLOR_WHITE, "Ganzuas compradas, utiliza /puente.");
							return 1;
		     		}
		    	}
		    	if(listitem == 4)
		    	{
		    	    if(CheckMoney(playerid, 120)){
					        SendClientMessageEx(playerid, COLOR_WHITE, "Compraste una kit de secuestro, utiliza /atar - /vendar.");
							Rope[playerid] = 1;
							Bought(playerid, 120);
							return 1;
                	}
		    	}
		    	if(listitem == 5)
		    	{
                	DetectarModeloArma2(playerid);
				}
		    }
		}
	case BALAS2: if(response)
	{
        new balas = strval(inputtext);
 		if (isnumeric(inputtext))
   		{
   		    ComprarBalasArma2(playerid, balas);
   		}
	}
	case DRINKLISTDIALOG:
	{
    	if(response)
    	{
			switch(listitem)
			{
		    	case 0:
		    	{
		    	    SetPVarString(playerid, "DrinkName", "Cerveza");
		    	    SetPVarInt(playerid, "DrinkPrice", 60);
		    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_BEER);
		    	}
		    	case 1:
		    	{
		    	    SetPVarString(playerid, "DrinkName", "Vodka");
		    	    SetPVarInt(playerid, "DrinkPrice", 100);
		    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_WINE);
		    	}
		    	case 2:
		    	{
		    	    SetPVarString(playerid, "DrinkName", "Whiskey");
		    	    SetPVarInt(playerid, "DrinkPrice", 100);
		    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_WINE);
		    	}
		    	case 3:
		    	{
		    	    SetPVarString(playerid, "DrinkName", "Agua");
		    	    SetPVarInt(playerid, "DrinkPrice", 20);
		    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_SPRUNK);
		    	}
		    	case 4:
		    	{
		    	    SetPVarString(playerid, "DrinkName", "Gaseosa");
		    	    SetPVarInt(playerid, "DrinkPrice", 20);
		    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_SPRUNK);
		    	}
			}
			if(GetPlayerCash(playerid) >= GetPVarInt(playerid, "DrinkPrice"))
			{
			    new drinkname[32];
				GetPVarString(playerid, "DrinkName", drinkname, sizeof(drinkname));
			    new drinkprice = GetPVarInt(playerid, "DrinkPrice");
				new dspecialaction = GetPVarInt(playerid, "DrinkSpecialAction");
			    format(szMessage, sizeof(szMessage), "Has pedido al bartender una bebida (%s) por $%d.  ¿Quieres dejarle una propina?", drinkname, drinkprice);
			    ShowPlayerDialog(playerid, DRINKDIALOG, DIALOG_STYLE_MSGBOX, "Comprar Bebida", szMessage, "Si", "No");
			    format(szMessage, sizeof(szMessage), "* %s le da a %s una %s.", GetPlayerNameEx(DrinkOffer[playerid]), GetPlayerNameEx(playerid), drinkname);
				ProxDetector(15.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(szMessage, sizeof(szMessage), "* Le diste a %s una %s. Ganaste $%d.", GetPlayerNameEx(playerid), drinkname, drinkprice );
				SendClientMessageEx(DrinkOffer[playerid], COLOR_GENERAL, szMessage);
				GivePlayerCash(DrinkOffer[playerid], drinkprice);
				GivePlayerCash(playerid, -drinkprice);
				SetPlayerSpecialAction(playerid, dspecialaction);
				SetPVarInt(playerid, "DrinkCooledDown", 1);

			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes dinero para comprar está bebida!");
	    }
	    else DrinkOffer[playerid] = INVALID_PLAYER_ID;
	}
 	case DRINKDIALOG:
	{
	    if(response)
	    {
			ShowPlayerDialog(playerid, TIPDIALOG, DIALOG_STYLE_INPUT, "Propina", "¿Cuánto le gustaría dejar de propina al bartender por su servicio?", "OK", "Cancelar");
		}
		else
		{
		    DrinkOffer[playerid] = INVALID_PLAYER_ID;
		}
	}
	case TIPDIALOG:
	{
	    if(response)
	    {
			if(GetPlayerCash(playerid) >= strval(inputtext))
			{
			    if(strval(inputtext) < 0 || strval(inputtext) > 10000)
			    {
			    	return ShowPlayerDialog(playerid, TIPDIALOG, DIALOG_STYLE_INPUT, "Propina", "ERROR Sólo de: 0 - $10,000\n¿Cuánto le gustaría dejar de propina al bartender por su servicio?", "OK", "Cancel");
			    }
			    format(szMessage, sizeof(szMessage), "** %s le dá a %s algo de propina por el servicio.", GetPlayerNameEx(playerid), GetPlayerNameEx(DrinkOffer[playerid]));
				ProxDetector(15.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(szMessage, sizeof(szMessage), "* %s te a dado $%d de propina por tu servicio.", GetPlayerNameEx(playerid), strval(inputtext));
				SendClientMessageEx(DrinkOffer[playerid], COLOR_GENERAL, szMessage);
				GivePlayerCash(DrinkOffer[playerid], strval(inputtext));
				GivePlayerCash(playerid, -strval(inputtext));
				DrinkOffer[playerid] = INVALID_PLAYER_ID;
			}
		}
		else
		{
		    DrinkOffer[playerid] = INVALID_PLAYER_ID;
		}
	}
    case BEBIDAS:
	{
    	if(response)
    	{
			switch(listitem)
			{
		    	case 0:
		    	{
		    	    SetPVarString(playerid, "DrinkName", "Cerveza");
		    	    SetPVarInt(playerid, "DrinkPrice", 60);
		    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_BEER);
		    	}
		    	case 1:
		    	{
		    	    SetPVarString(playerid, "DrinkName", "Vodka");
		    	    SetPVarInt(playerid, "DrinkPrice", 100);
		    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_WINE);
		    	}
		    	case 2:
		    	{
		    	    SetPVarString(playerid, "DrinkName", "Whiskey");
		    	    SetPVarInt(playerid, "DrinkPrice", 100);
		    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_WINE);
		    	}
		    	case 3:
		    	{
		    	    SetPVarString(playerid, "DrinkName", "Agua");
		    	    SetPVarInt(playerid, "DrinkPrice", 20);
		    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_SPRUNK);
		    	}
		    	case 4:
		    	{
		    	    SetPVarString(playerid, "DrinkName", "Gaseosa");
		    	    SetPVarInt(playerid, "DrinkPrice", 20);
		    	    SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_SPRUNK);
		    	}
			}
			if(GetPlayerCash(playerid) >= GetPVarInt(playerid, "DrinkPrice"))
			{
			    new drinkname[32];
				GetPVarString(playerid, "DrinkName", drinkname, sizeof(drinkname));
			    new drinkprice = GetPVarInt(playerid, "DrinkPrice");
				new dspecialaction = GetPVarInt(playerid, "DrinkSpecialAction");
			    format(szMessage, sizeof(szMessage), "Has pedido al bartender una bebida (%s) por $%d.", drinkname, drinkprice);
			    SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
			    format(szMessage, sizeof(szMessage), "El bartender le entrega a %s una %s.", GetPlayerNameEx(playerid), drinkname);
				ProxDetector(15.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GivePlayerCash(playerid, -drinkprice);
				SetPlayerSpecialAction(playerid, dspecialaction);
				SetPVarInt(playerid, "DrinkCooledDown", 1);

			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes dinero para comprar está bebida!");
	    }
	    else DrinkOffer[playerid] = INVALID_PLAYER_ID;
	}
	case DLOGIN:
	{
    	if(response)
    	{
			new clave = strval(inputtext);
			if(clave == Info[playerid][pKey])
			{
				InsideMainMenu[playerid] = false;
				INI_ParseFile(UserPath(playerid), "LoadUser_data", .bExtra = true, .extra = playerid);
				//KillTimer(LoginTimer[playerid]);
				OnPlayerLoginEx(playerid);
			}
			else
			{
			    new cam = Random(1,4);
				SetPlayerJoinCamera(playerid, cam);
				format(szDialog, sizeof(szDialog), ""COL_WHITE"Ha ocurrido un error!\nHas ingresado una contraseña incorrecta.\nVuelve a ingresar tu contraseña correcta.\n\n"COL_GENERAL"Contraseña:", GetPlayerNameEx(playerid));
				ShowPlayerDialog(playerid,DLOGIN,DIALOG_STYLE_PASSWORD ,""COL_GENERAL"NP:RP - "COL_WHITE"ERROR",szDialog,"Entrar","Salir");
				SetPlayerVirtualWorld(playerid, 20);
            	return 1;
			}
    	}
	}
	case DREGISTER:
	{
    	if(response)
    	{
        	if(strlen(inputtext) > 12)
        	{
   	    		new cam = Random(1,8);
				SetPlayerJoinCamera(playerid, cam);
				format(szDialog, sizeof(szDialog), ""COL_WHITE"Ha ocurrido un error.\nDebes ingresar una contraseña no mayor de 15 carácteres.\nVuelve a intentarlo.\n\n"COL_GENERAL"Contraseña:");
				ShowPlayerDialog(playerid,DREGISTER,DIALOG_STYLE_INPUT ,""COL_GENERAL"NP:RP - "COL_WHITE"ERROR",szDialog,"Registrar","Salir");
            	return 1;
        	}
        	if(isnull(inputtext))
        	{
        	    new cam = Random(1,8);
				SetPlayerJoinCamera(playerid, cam);
				format(szDialog, sizeof(szDialog), ""COL_WHITE"Ha ocurrido un error.\nDebes ingresar una contraseña con más de 1 carácter, no has ingresado nada.\nVuelve a intentarlo.\n\n"COL_GENERAL"Contraseña:");
				ShowPlayerDialog(playerid,DREGISTER,DIALOG_STYLE_PASSWORD,""COL_GENERAL"NP:RP - "COL_WHITE"ERROR",szDialog,"Registrar","Salir");
            	return 1;
        	}
        	InsideMainMenu[playerid] = false;
			OnPlayerRegister(playerid,strval(inputtext));
			//KillTimer(LoginTimer[playerid]);
        	return 1;
     		}
		}
	case D_ATM_PIN:
	{
	    if(response)
	    {
	        if(strlen(inputtext)> 4) return ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Error", "* El PIN(clave) de tu cuenta bancaria consiste sólo en 4 dígitos.\n\nGracias, que tengas buen día e inténtalo de nuevo.","Salir","");
	        if(!isnumeric(inputtext)) return ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Error", "* El PIN(clave) de tu cuenta bancaria consiste sólo en números.\n\nGracias, que tengas buen día e inténtalo de nuevo.","Salir","");
	        if(Info[playerid][pPinBank] == strval(inputtext))
	        {
	    		ShowPlayerDialog(playerid, D_ATM_MENU, DIALOG_STYLE_LIST,""COL_GENERAL"ATM - "COL_WHITE"Selecciona","* Retirar dinero.\n* Depositar dinero.\n* Cambiar PIN.\n* Estado de cuenta.\n* Transferir dinero.","Cambiar","Salir");// MENU
			}
			else return ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Error", "* El PIN(clave) que ingresaste no conincide con la cuenta.\n\nGracias, que tengas buen día e inténtalo de nuevo.","Ok","");
		}
	    else return ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Gracias", "Gracias por usar este ATM, recuerda que puedes usarlo cuando quieras.\n\nGracias, que tengas buen día.","Salir","");
	}
	case D_ATM_MENU:
	{
	    if(response)
	    {
  			switch(listitem)
  			{
				case 0:	ShowPlayerDialog(playerid, D_ATM_RET, DIALOG_STYLE_INPUT,""COL_GENERAL"ATM - "COL_WHITE"Retiro","Ingresa la cantidad que deseas retirar\n\nMáximo: $100000\nMínimo: $20","Retirar","Atrás");  // Retirar Dinero
				case 1: ShowPlayerDialog(playerid, D_ATM_DEP, DIALOG_STYLE_INPUT,""COL_GENERAL"ATM - "COL_WHITE"Depósito","Ingresa la cantidad que deseas depositar\n\nMáximo: $100000\nMínimo: $20","Depositar","Atrás");// Depositar Dinero
				case 2: ShowPlayerDialog(playerid, D_ATM_CAMPIN, DIALOG_STYLE_INPUT,""COL_GENERAL"ATM - "COL_WHITE"Cambiar PIN","Ingresa tu nuevo PIN(clave).","Cambiar","Atrás");// Cambiar PIN
				case 3:
				{
				    format(szDialog, sizeof(szDialog), "Nombre del titular: %s.\n\nNúmero de cuenta: %d.\n\nSaldo disponible: %d.", GetPlayerNameEx(playerid),Info[playerid][pNrCuenta],Info[playerid][pMoneyBank]);
					ShowPlayerDialog(playerid, D_ATM_ESTADO, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Tu cuenta",szDialog,"Atrás","Salir");// ESTADO de CUENTA
				}
				case 4: ShowPlayerDialog(playerid, D_ATM_TRANS, DIALOG_STYLE_INPUT,""COL_GENERAL"ATM - "COL_WHITE"Transferencia","Ingresa la cantidad que deseas transferir\n\nMáximo: $1000000\nMínimo: $10","Continuar","Atrás");  // Transferir Dinero
			}
	    }
	    else return ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Gracias", "Gracias por usar este ATM, recuerda que puedes usarlo cuando quieras.\n\nGracias, que tengas buen día.","Salir","");
	}
	case D_ATM_RET:
	{
	    if(response)
	    {
	        new money = strval(inputtext);
	        if (isnumeric(inputtext))
	        {
	            new id = GetPVarInt(playerid,"atmID");
	            if(atmVariables[id][atmMoney] < money) return SendClientMessage(playerid, COLOR_GREY, "* Lo sentimos en este momento no hay dinero en este cajero, inténtalo más tarde.");
	            if(money < 20) return SendClientMessageEx(playerid, COLOR_GREY, "* Lo mínimo que puedes retirar son $20.");
                if(money > 100000) return SendClientMessageEx(playerid, COLOR_GREY, "* Lo maximo que puedes retirar son $100000.");
				if(Info[playerid][pMoneyBank] < money)
				{
			    	format(szDialog, sizeof(szDialog), "Hubo un error con la cantidad ingresada.\nPuedes tomar en cuenta lo siguiente:\n\n* No tienes saldo suficiente en tu cuenta.\n* Hay un error en el sistema e inténtalo más tarde.\n\nRetira tu tarjeta.");
					return ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Error", szDialog,"Ok","");
				}
				Earn(playerid, money-5);
				Info[playerid][pMoneyBank] -= money;
				atmVariables[id][atmMoney] -= money-5;
				format(szMessage, sizeof(szMessage), "* Retiraste: $%d ($5 comisión) - Saldo Disponible: $%d",money,Info[playerid][pMoneyBank]);
				SendClientMessageEx(playerid, -1, szMessage);
				atmSave();
			}
			else return ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Error", "* Sólo puede usarse números en este espacio.\n\nGracias, que tengas buen día e inténtalo de nuevo.","Salir","");
		}
	}
	case D_ATM_DEP:
	{
	    if(response)
	    {
	        new money = strval(inputtext);
	        if (isnumeric(inputtext))
	        {
	            if(money < 20) return SendClientMessageEx(playerid, COLOR_GREY, "* Lo mínimo que puedes depositar son $20.");
	            if(money > 100000) return SendClientMessageEx(playerid, COLOR_GREY, "* Lo mínimo que puedes depositar son $100000.");
	        	if(money > GetPlayerCash(playerid))
				{
			    	format(szDialog, sizeof(szDialog), "Hubo un error con la cantidad ingresada.\nPuedes tomar en cuenta lo siguiente:\n\n* No tienes el dinero suficiente.\n* Hay un error en el sistema e inténtalo más tarde.\n\nRetira tu tarjeta.");
					return ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Error", szDialog,"Ok","");
				}
				new id = GetPVarInt(playerid,"atmID");
				Bought(playerid,money);
				Info[playerid][pMoneyBank] += money;
				atmVariables[id][atmMoney] += money;
				format(szMessage, sizeof(szMessage), "* Depositaste: $%d - Saldo Disponible: $%d",money,Info[playerid][pMoneyBank]);
				SendClientMessageEx(playerid, -1, szMessage);
				atmSave();
			}
			else return ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Error", "* Sólo puede usarse números en este espacio.\n\nGracias, que tengas buen día e inténtalo de nuevo.","Salir","");
		}
	}
	case D_ATM_CAMPIN:
	{
	    if(response)
	    {
			if(!isnumeric(inputtext)) return ShowPlayerDialog(playerid, D_ATM_CAMPIN, DIALOG_STYLE_INPUT,""COL_GENERAL"ATM - "COL_WHITE"Cambiar PIN", "* El PIN(clave) de tu cuenta bancaria consiste sólo en números.\n\nIngresa tu nuevo PIN(clave).","Continuar","Salir");
			if(strlen(inputtext) == 4)
			{
			    Info[playerid][pPinBank] = strval(inputtext);
				format(szDialog, sizeof(szDialog), "Nombre del titular: %s.\n\nNúmero de cuenta: %d.\n\nSaldo disponible: $%d.\n\nNuevo PIN: %d.", GetPlayerNameEx(playerid),Info[playerid][pNrCuenta],Info[playerid][pMoneyBank],Info[playerid][pPinBank]);
				ShowPlayerDialog(playerid, D_ATM_ESTADO, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Cambio éxitoso",szDialog,"Atrás","Salir");// ESTADO de CUENTA
			}
			else return ShowPlayerDialog(playerid, D_ATM_CAMPIN, DIALOG_STYLE_INPUT,""COL_GENERAL"ATM - "COL_WHITE"Cambiar PIN", "* El PIN(clave) de tu cuenta bancaria consiste sólo en 4 dígitos.\n\nIngresa tu nuevo PIN(clave).","Continuar","Salir");
	    }
	}
	case D_ATM_ESTADO:
	{
	    if(response) ShowPlayerDialog(playerid, D_ATM_MENU, DIALOG_STYLE_LIST,""COL_GENERAL"ATM - "COL_WHITE"Selecciona","* Retirar dinero.\n* Depositar dinero.\n* Cambiar PIN.\n* Estado de cuenta.\n* Transferir dinero.","Ok","Salir");// MENU
		else return ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Gracias", "Gracias por usar este ATM, recuerda que puedes usarlo cuando quieras.\n\nGracias, que tengas buen día.","Salir","");
	}
	case D_ATM_TRANS:
	{
	    if(response)
	    {
	        new money = strval(inputtext);
	        if (isnumeric(inputtext))
	        {
      			if(money < 10) return SendClientMessageEx(playerid, COLOR_GREY, "* Lo mínimo que puedes transferir son $10.");
	        	if(money > 1000000) return SendClientMessageEx(playerid, COLOR_GREY, "* Lo mínimo que puedes transferir son $1000000.");
	        	if(Info[playerid][pMoneyBank] > money)
	        	{
	            	TransferMoney[playerid] = money;
	            	ShowPlayerDialog(playerid, D_ATM_TRANS1, DIALOG_STYLE_INPUT,""COL_GENERAL"ATM - "COL_WHITE"Transferencia","Ingresa el número de cuenta para la transferencia.\n\nSon exactamente 8 dígitos.","Continuar","Atrás");  // Transferir Dinero
	        	}
	        	else
	        	{
			    	format(szDialog, sizeof(szDialog), "Hubo un error con la cantidad ingresada.\nPuedes tomar en cuenta lo siguiente:\n\n* No tienes el dinero suficiente en tu cuenta.\n* Hay un error en el sistema e inténtalo más tarde.\n\nRetira tu tarjeta.");
					return ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Error", szDialog,"Ok","");
	        	}
	        }
	        else return ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Error", "* Sólo puede usarse números en este espacio.\n\nGracias, que tengas buen día e inténtalo de nuevo.","Salir","");
	    }
	    else return ShowPlayerDialog(playerid, D_ATM_MENU, DIALOG_STYLE_LIST,""COL_GENERAL"ATM - "COL_WHITE"Selecciona","* Retirar dinero.\n* Depositar dinero.\n* Cambiar PIN.\n* Estado de cuenta.\n* Transferir dinero.","Cambiar","Salir");// MENU
	}
	case D_ATM_TRANS1:
	{
	    if(response){
	        new nroaccount = strval(inputtext);
	        if (isnumeric(inputtext)){
	            if(strlen(inputtext) == 8){
	                TransferNroAcc[playerid] = nroaccount;
					foreach(Player, i){
					    if(nroaccount == Info[i][pNrCuenta]){
					        TransferTo[playerid] = i;
					        format(szDialog, sizeof(szDialog), "Nombre del titular: %s.\n\nNúmero de cuenta: %d.\n\nCantidad a depositar: $%d.", GetPlayerNameEx(i),Info[i][pNrCuenta],TransferMoney[playerid]);
					        return ShowPlayerDialog(playerid, D_ATM_TRANS2, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Transferencia", szDialog,"Confirmar","Cancelar");
					    }
					}
					return SendClientMessage(playerid, COLOR_GREY, "* Ese número de cuenta aún no está disponible o no existe.");
	            } else return ShowPlayerDialog(playerid, D_ATM_TRANS1, DIALOG_STYLE_INPUT,""COL_GENERAL"ATM - "COL_WHITE"Transferencia", "* El número de cuenta bancaria consiste sólo en 8 dígitos.\n\nVuelve a Ingresar el número de cuenta.","Continuar","Salir");
	        } else return ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Error", "* Sólo puede usarse números en este espacio.\n\nGracias, que tengas buen día e inténtalo de nuevo.","Salir","");
	    }
	    else
	    {
	        TransferNroAcc[playerid] = -1;
	        TransferTo[playerid] = -1;
	        return TransferMoney[playerid] = -1;
	    }
	}
	case D_ATM_TRANS2:
	{
	    if(response)
		{
		    Info[TransferTo[playerid]][pMoneyBank] += TransferMoney[playerid];
            Info[playerid][pMoneyBank] -= TransferMoney[playerid];
			format(szMessage, sizeof(szMessage), "* Transferiste a %s - $%d - Saldo Disponible: $%d",GetPlayerNameEx(TransferTo[playerid]),TransferMoney[playerid],Info[playerid][pMoneyBank]);
			SendClientMessageEx(playerid, -1, szMessage);
			format(szMessage, sizeof(szMessage), "* Transferencia de %s: $%d - Saldo Disponible: $%d",GetPlayerNameEx(playerid),TransferMoney[playerid],Info[TransferTo[playerid]][pMoneyBank]);
            SendClientMessageEx(TransferTo[playerid], -1, szMessage);
 			format(szMessage, sizeof szMessage, "[NP:RP] %s ha transferido $%d a %s.", GetPlayerNameEx(playerid), TransferMoney[playerid], GetPlayerNameEx(TransferTo[playerid]));
        	Log("logs/transferencias.log", szMessage);
       		format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s ha transferido $%d a %s.", GetPlayerNameEx(playerid), TransferMoney[playerid], GetPlayerNameEx(TransferTo[playerid]));
			ABroadCast(COLOR_ORANGE, szMessage, 2);
			TransferNroAcc[playerid] = -1; TransferTo[playerid] = -1; TransferMoney[playerid] = -1;
		}
		else
		{

			ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Gracias", "Gracias por usar este ATM, recuerda que puedes usarlo cuando quieras.\n\nGracias, que tengas buen día.","Salir","");
            TransferNroAcc[playerid] = -1;
	        TransferTo[playerid] = -1;
	        return TransferMoney[playerid] = -1;
		}
	}
	case	DIALOG_ATMB: if(response)
	{
	    new id = GetPVarInt(playerid,"atmID");
    	switch(listitem)
    	{
        	case    0:
			{
			    format(szDialog, sizeof(szDialog), "Ingresa la cantidad que deseas retirar\n\nFondos disponibles: %d.",atmVariables[id][atmMoney]);
				ShowPlayerDialog(playerid, DIALOG_ATMBR, DIALOG_STYLE_INPUT,""COL_GENERAL"ATM - "COL_WHITE"Retiro",szDialog,"Retirar","Atrás");  // Retirar Dinero
			}
			case 	1:
			{
			    format(szDialog, sizeof(szDialog), "Ingresa la cantidad que deseas depositar\n\nFondos disponibles: %d.",Info[playerid][pMoneyBankT]);
			    ShowPlayerDialog(playerid, DIALOG_ATMBD, DIALOG_STYLE_INPUT,""COL_GENERAL"ATM - "COL_WHITE"Depósito",szDialog,"Depositar","Atrás");  // Depositar Dinero
			}
			case    2:
			{
            	format(szDialog, sizeof(szDialog), "ATM Nro: %d.\n\nFondo disponible: %d.",id,atmVariables[id][atmMoney]);
            	ShowPlayerDialog(playerid, DIALOG_ATMBE, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Estado",szDialog,"Atrás","Salir");
			}
		}
	}
	case    DIALOG_ATMBR:
	{
    	if(response)
    	{
 			new money = strval(inputtext);
	    	if (isnumeric(inputtext))
	    	{
	    		new id = GetPVarInt(playerid,"atmID");
	       		if(atmVariables[id][atmMoney] < money) return SendClientMessageEx(playerid, COLOR_GREY, "* No hay dinero en este ATM, inténtalo más tarde.");
	       		atmVariables[id][atmMoney] -= money;
	       		Info[playerid][pMoneyBankT] += money;
				format(szMessage, sizeof(szMessage), "* Retiraste: $%d. - Dinero de ATM: $%d",money,atmVariables[id][atmMoney]);
				SendClientMessageEx(playerid, -1, szMessage);
				SendClientMessageEx(playerid, -1, "* Transporta con seguridad el dinero al banco.");
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_RETURNBANK;
				SetPlayerCheckpoint(playerid, 1435.5162,-969.2625,983.5383, 3.0);
				atmSave();
	    	}
        	else return SendClientMessageEx(playerid, COLOR_GREY, "* Ingresa sólo números.");
    	}
	}
	case    DIALOG_ATMBD:
	{
    	if(response)
    	{
 			new money = strval(inputtext);
	    	if (isnumeric(inputtext))
	    	{
	    		new id = GetPVarInt(playerid,"atmID");
	       		if(GetPlayerCash(playerid) < money) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes el dinero suficiente para depositar este monto, inténtalo más tarde.");
	       		atmVariables[id][atmMoney] += money;
	       		Info[playerid][pMoneyBankT] -= money;
				format(szMessage, sizeof(szMessage), "* Depositaste: $%d. - Dinero de ATM: $%d",money,atmVariables[id][atmMoney]);
				SendClientMessageEx(playerid, -1, szMessage);
            	atmSave();
	    	}
        	else return SendClientMessageEx(playerid, COLOR_GREY, "* Ingresa sólo números.");
    	}
	}
	case    DIALOG_ATMBE: if(response) ShowPlayerDialog(playerid, DIALOG_ATMB, DIALOG_STYLE_LIST,""COL_GENERAL"ATM - "COL_WHITE"Estado", "* Retirar fondos\n* Depositar fondos\n* Estado","Ok","Salir");
    case HOUSE_OPTIONS:
    {
        if(!response) return 1;
        switch(listitem)
        {
            case 0:
            {
                if(HouseInfo[Info[playerid][pPhousekey]][hRentable] == 1) szDialog = "Habilitada";
                else szDialog = "Deshabilitada";
                format(szMessage, sizeof(szMessage), "{DF013A}» {FFFFFF}Renta [%s]\n{DF013A}» {FFFFFF}Precio de Renta", szDialog);
                ShowPlayerDialog(playerid, HOUSE_RENTA, DIALOG_STYLE_LIST, "{DF013A}Selecciona:", szMessage, "Seleccionar", "Atras");
            }
            case 1:
            {
                if(HouseInfo[Info[playerid][pPhousekey]][hLock] == 1)
				{
				    HouseInfo[Info[playerid][pPhousekey]][hLock] = 0;
					szDialog = "Abierta";
				}
				else
				{
				    HouseInfo[Info[playerid][pPhousekey]][hLock] = 1;
			 		szDialog = "Cerrada";
				}
                format(szMessage, sizeof(szMessage), "{DF013A}» {FFFFFF}Renta\n{DF013A}» {FFFFFF}Casa [%s]\n{DF013A}» {FFFFFF}Dinero\n{DF013A}» {FFFFFF}Items\n{DF013A}» {FFFFFF}Armas",szDialog);
				ShowPlayerDialog(playerid,HOUSE_OPTIONS,DIALOG_STYLE_LIST,"{DF013A}Selecciona:",szMessage, "Seleccionar", "Atras");
            }
            case 2:
            {
                format(szMessage, sizeof(szMessage), "{FFFFFF}Balance total de dinero en la casa: {DF013A}$%d", HouseInfo[Info[playerid][pPhousekey]][hSafeMoney]);
                ShowPlayerDialog(playerid, HOUSE_DINERO, DIALOG_STYLE_MSGBOX, "{DF013A}Dinero:", szMessage, "Retirar $", "Depositar $");
			}
			case 3:
			{
   				format(szDialog, sizeof(szDialog), "{DF013A}» {FFFFFF}Materiales {DF013A}(%d)\n{DF013A}» {FFFFFF}Hierba {DF013A}(%d gr)\n{DF013A}» {FFFFFF}Crack {DF013A}(%d gr)", HouseInfo[Info[playerid][pPhousekey]][hMaterials],HouseInfo[Info[playerid][pPhousekey]][hPot],HouseInfo[Info[playerid][pPhousekey]][hCrack]);
				ShowPlayerDialog(playerid,HOUSE_ITEM,DIALOG_STYLE_LIST,"{DF013A}Items:",szDialog,"Ingresar","Atrás");
			}
			case 4:
			{
			    new s1[25], s2[25], s3[25], s4[25], s5[25];
			    if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][0] == 0) s1 = "Vacio";
			    else format(s1, sizeof(s1), "%s", WeaponNames[HouseInfo[Info[playerid][pPhousekey]][hWeapons][0]]);
			    if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][1] == 0) s2 = "Vacio";
			    else format(s2, sizeof(s2), "%s", WeaponNames[HouseInfo[Info[playerid][pPhousekey]][hWeapons][1]]);
			    if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][2] == 0) s3 = "Vacio";
			    else format(s3, sizeof(s3), "%s", WeaponNames[HouseInfo[Info[playerid][pPhousekey]][hWeapons][2]]);
			    if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][3] == 0) s4 = "Vacio";
			    else format(s4, sizeof(s4), "%s", WeaponNames[HouseInfo[Info[playerid][pPhousekey]][hWeapons][3]]);
			    if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][4] == 0) s5 = "Vacio";
			    else format(s5, sizeof(s5), "%s", WeaponNames[HouseInfo[Info[playerid][pPhousekey]][hWeapons][4]]);
			    format(szMessage, sizeof(szMessage), "\t\t{DF013A}» {FFFFFF}SLOT 1: {DF013A}[%s]\n\t\t{DF013A}» {FFFFFF}SLOT 2: {DF013A}[%s]\n\t\t{DF013A}» {FFFFFF}SLOT 3: {DF013A}[%s]\n\t\t{DF013A}» {FFFFFF}SLOT 4: {DF013A}[%s]\n\t\t{DF013A}» {FFFFFF}SLOT 5: {DF013A}[%s]",s1,s2,s3,s4,s5);
			    ShowPlayerDialog(playerid, HOUSE_WEAPONS, DIALOG_STYLE_MSGBOX, "{DF013A}Armas:", szMessage, "Guardar", "Sacar");
			}
			case 5: ShowPlayerDialog(playerid,DIALOG_MENU_FURNITURE,DIALOG_STYLE_LIST,"{DF013A}Muebles:","{DF013A}» {FFFFFF}Seleccionar Muebles\n{DF013A}» {FFFFFF}Colocar/Editar Muebles\n{DF013A}» {FFFFFF}Vender Muebles","Ingresar","Atrás");
		}
    }
    case HOUSE_RENTA:
    {
		if(!response)
		{
		    if(HouseInfo[Info[playerid][pPhousekey]][hLock] == 1) szDialog = "Cerrada";
			else szDialog = "Abierta";
	        format(szMessage, sizeof(szMessage), "{DF013A}» {FFFFFF}Renta\n{DF013A}» {FFFFFF}Casa [%s]\n{DF013A}» {FFFFFF}Dinero\n{DF013A}» {FFFFFF}Items\n{DF013A}» {FFFFFF}Armas\n{DF013A}» {FFFFFF}Muebles",szDialog);
			ShowPlayerDialog(playerid,HOUSE_OPTIONS,DIALOG_STYLE_LIST,"{DF013A}Selecciona:",szMessage, "Seleccionar", "Atras");
			return 1;
		}
		switch(listitem)
		{
		    case 0:
		    {
		        if(HouseInfo[Info[playerid][pPhousekey]][hRentable] == 1)
				{
				    HouseInfo[Info[playerid][pPhousekey]][hRentable] = 0;
					szDialog = "Deshabilitada";
				}
                else
				{
				    HouseInfo[Info[playerid][pPhousekey]][hRentable] = 1;
					szDialog = "Habilitada";
				}
                format(szMessage, sizeof(szMessage), "{DF013A}» {FFFFFF}Renta [%s]\n{DF013A}» {FFFFFF}Precio de Renta", szDialog);
                ShowPlayerDialog(playerid, HOUSE_RENTA, DIALOG_STYLE_LIST, "{DF013A}Selecciona:", szMessage, "Seleccionar", "Atras");
			}
			case 1: ShowPlayerDialog(playerid, HOUSE_RENTA2, DIALOG_STYLE_INPUT, "{DF013A}Renta:", "{DF013A}* {FFFFFF}Ingresa el precio de renta.", "Aceptar", "Cancelar");
		}
	}
	case HOUSE_RENTA2:
	{
	    if(!response) return 1;
	    if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
	    new value = strval(inputtext);
        if(!(1 <= value <= 10000)) return SendClientMessageEx(playerid, COLOR_WHITE, "Renta minima es $1, maxima es $10,000.");
        HouseInfo[Info[playerid][pPhousekey]][hRentFee] = value;
        format(szMessage, sizeof(szMessage), "Estableciste el precio de renta de tu casa a $%i.", HouseInfo[Info[playerid][pPhousekey]][hRentFee]);
		SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
		if(HouseInfo[Info[playerid][pPhousekey]][hRentable]) format(szMessage, sizeof(szMessage), ""COL_HOUSET"Dueño:\n"COL_WHITE"%s\n"COL_HOUSET"Renta: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d\nUsa /rentar para rentar aquí",HouseInfo[Info[playerid][pPhousekey]][hOwner],
		HouseInfo[Info[playerid][pPhousekey]][hRentFee],HouseInfo[Info[playerid][pPhousekey]][hLevel],Info[playerid][pPhousekey],HouseInfo[Info[playerid][pPhousekey]][hDireccion],Info[playerid][pPhousekey]+178);
		else format(szMessage, sizeof(szMessage), ""COL_HOUSET"Dueño\n"COL_WHITE"%s\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d",HouseInfo[Info[playerid][pPhousekey]][hOwner],HouseInfo[Info[playerid][pPhousekey]][hLevel],Info[playerid][pPhousekey],HouseInfo[Info[playerid][pPhousekey]][hDireccion],Info[playerid][pPhousekey]+178);
		UpdateDynamic3DTextLabelText(HouseInfo[Info[playerid][pPhousekey]][hTextID], -1, szMessage);
		if(HouseInfo[Info[playerid][pPhousekey]][hLock] == 1) szDialog = "Cerrada";
		else szDialog = "Abierta";
  		format(szMessage, sizeof(szMessage), "{DF013A}» {FFFFFF}Renta\n{DF013A}» {FFFFFF}Casa [%s]\n{DF013A}» {FFFFFF}Dinero\n{DF013A}» {FFFFFF}Items\n{DF013A}» {FFFFFF}Armas\n{DF013A}» {FFFFFF}Muebles",szDialog);
		ShowPlayerDialog(playerid,HOUSE_OPTIONS,DIALOG_STYLE_LIST,"{DF013A}Selecciona:",szMessage, "Seleccionar", "Atras");
	}
	case HOUSE_DINERO:
	{
	    if(response) ShowPlayerDialog(playerid, HOUSE_DINERO2, DIALOG_STYLE_INPUT, "{DF013A}Retirar $:", "{DF013A}* {FFFFFF}Ingresa la cantidad de dinero que quieres retirar.", "Aceptar", "Cancelar");
		else ShowPlayerDialog(playerid, HOUSE_DINERO3, DIALOG_STYLE_INPUT, "{DF013A}Depositar $:", "{DF013A}* {FFFFFF}Ingresa la cantidad de dinero que quieres depositar.", "Aceptar", "Cancelar");
	}
	case HOUSE_DINERO2:
	{
	    if(!response) return 1;
	    if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
	    new amount = strval(inputtext);
	    if(amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes retirar menos de un dolar.");
		if(HouseInfo[Info[playerid][pPhousekey]][hSafeMoney] < amount) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero en tu baúl para retirar.");
		HouseInfo[Info[playerid][pPhousekey]][hSafeMoney] -= amount;
		GivePlayerCash(playerid, amount);
		format(szMessage, sizeof(szMessage), "Retiraste $%d de tu casa.", amount);
		SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
		SaveVarHouses(1,Info[playerid][pPhousekey], "SafeMoney",HouseInfo[Info[playerid][pPhousekey]][hSafeMoney]);
	}
	case HOUSE_DINERO3:
	{
	    if(!response) return 1;
	    if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
	    new amount = strval(inputtext);
	    if(amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes depositar menos de un dolar.");
	    if(GetPlayerCash(playerid) < amount) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero para depositar.");
	    HouseInfo[Info[playerid][pPhousekey]][hSafeMoney] += amount;
	    GivePlayerCash(playerid, -amount);
		format(szMessage, sizeof(szMessage), "Depositaste $%d en tu casa.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
		SaveVarHouses(1,Info[playerid][pPhousekey], "SafeMoney",HouseInfo[Info[playerid][pPhousekey]][hSafeMoney]);
	}
	case HOUSE_WEAPONS:
	{
	    if(response)
	    {
	        new weaponid = GetPlayerWeapon(playerid);
	        GetWeaponNameEx(weaponid, szDialog, sizeof(szDialog));
	        for(new slot ; slot < 5 ; slot++)
	        {
	            if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][slot] == 0)
	            {
	                HouseInfo[Info[playerid][pPhousekey]][hWeapons][slot] = weaponid;
	                format(szMessage, sizeof(szMessage), "guarda su %s en la casa.", WeaponNames[weaponid]);
	                cmd_me(playerid, szMessage);
	                RemovePlayerWeapon(playerid, weaponid);
				}
			}
		}
		else
		{
		    new s1[25], s2[25], s3[25], s4[25], s5[25], s11, s22, s33, s44, s55;
		    if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][0] == 0) s1 = "Vacio";
		    else format(s1, sizeof(s1), "%s", WeaponNames[HouseInfo[Info[playerid][pPhousekey]][hWeapons][0]]);
		    if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][1] == 0) s2 = "Vacio";
		    else format(s2, sizeof(s2), "%s", WeaponNames[HouseInfo[Info[playerid][pPhousekey]][hWeapons][1]]);
		    if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][2] == 0) s3 = "Vacio";
		    else format(s3, sizeof(s3), "%s", WeaponNames[HouseInfo[Info[playerid][pPhousekey]][hWeapons][2]]);
		    if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][3] == 0) s4 = "Vacio";
		    else format(s4, sizeof(s4), "%s", WeaponNames[HouseInfo[Info[playerid][pPhousekey]][hWeapons][3]]);
		    if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][4] == 0) s5 = "Vacio";
		    else format(s5, sizeof(s5), "%s", WeaponNames[HouseInfo[Info[playerid][pPhousekey]][hWeapons][4]]);
		    if(HouseInfo[Info[playerid][pPhousekey]][hMunicion][0] != 0) s11 = HouseInfo[Info[playerid][pPhousekey]][hMunicion][0];
		    if(HouseInfo[Info[playerid][pPhousekey]][hMunicion][1] != 0) s22 = HouseInfo[Info[playerid][pPhousekey]][hMunicion][1];
		    if(HouseInfo[Info[playerid][pPhousekey]][hMunicion][2] != 0) s33 = HouseInfo[Info[playerid][pPhousekey]][hMunicion][2];
		    if(HouseInfo[Info[playerid][pPhousekey]][hMunicion][3] != 0) s44 = HouseInfo[Info[playerid][pPhousekey]][hMunicion][3];
		    if(HouseInfo[Info[playerid][pPhousekey]][hMunicion][4] != 0) s55 = HouseInfo[Info[playerid][pPhousekey]][hMunicion][4];
		    format(szMessage, sizeof(szMessage), "{DF013A}» {FFFFFF}SLOT 1: {DF013A}[%s | %d balas]\n{DF013A}» {FFFFFF}SLOT 2: {DF013A}[%s | %d balas]\n{DF013A}» {FFFFFF}SLOT 3: {DF013A}[%s | %d balas]\n{DF013A}» {FFFFFF}SLOT 4: {DF013A}[%s | %d balas]\n{DF013A}» {FFFFFF}SLOT 5: {DF013A}[%s | %d balas]",s1,s2,s3,s4,s5,s11,s22,s33,s44,s55);
		    ShowPlayerDialog(playerid, HOUSE_WEAPONS2, DIALOG_STYLE_LIST, "{DF013A}Sacar Arma:", szMessage, "Seleccionar", "Cancelar");
		}
	}
	case HOUSE_WEAPONS2:
	{
	    if(!response) return 1;
	    if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
		{
			format(szMessage, sizeof(szMessage), "Debes de esperar %d segundos después de haber retirado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
			return SendClientMessageEx(playerid,COLOR_GREY,szMessage);
		}
		if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][listitem] == 0) return 1;
		GivePlayerValidWeapon(playerid, HouseInfo[Info[playerid][pPhousekey]][hWeapons][listitem], HouseInfo[Info[playerid][pPhousekey]][hMunicion][listitem]);
		format(szMessage, sizeof(szMessage), "saca una %s que tenía guardada en su casa.", WeaponNames[HouseInfo[Info[playerid][pPhousekey]][hWeapons][listitem]]);
		cmd_me(playerid, szMessage);
		SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		HouseInfo[Info[playerid][pPhousekey]][hWeapons][listitem] = 0;
		HouseInfo[Info[playerid][pPhousekey]][hMunicion][listitem] = 0;
	}
    case DIALOG_MENU_FURNITURE:
    {
        if(!response) return ShowPlayerDialog(playerid,HOUSE_OPTIONS,DIALOG_STYLE_LIST,""COL_GENERAL"Selecciona:",""COL_GENERAL"»"COL_WHITE" Dinero\n"COL_GENERAL"»"COL_WHITE" Items\n"COL_GENERAL"»"COL_WHITE" Muebles","Seleccionar","Atrás");
        switch(listitem)
        {
            case 0:
            {
				SelectObject(playerid);
				SendClientMessage(playerid, -1,"Ahora puedes seleccionar el objeto con el cursor.");
				SendClientMessageEx(playerid, COLOR_GENERAL, "TIP: "COL_WHITE"Si no puedes seleccionar el objeto, selecciónalo desde el menú de tu casa. (Ver Objetos)");
            }
            case 1:
            {
				new hID = getPlayerHouseID(playerid), string[128],bigstring[2048];
				for(new i = 0; i < MAX_FURNITURE; i++)
				{
					if(HouseInfo[hID][FModel][i] == INVALID_FURNITURE_ID) { format(string, 64, "%d. Vacío", i+1); }
					else
					{
						if(HouseInfo[hID][FPosX][i] != 0.0) format(string, 64, "%d. ID: %d (en la casa)", i+1, HouseInfo[hID][FModel][i]); // Edit
						else format(string, 64, "%d. ID: %d (guardado)", i+1, HouseInfo[hID][FModel][i]); // Place
					}
					format(bigstring, sizeof(bigstring), "%s%s\n", bigstring, string);
				}
				ShowPlayerDialog(playerid, DIALOG_EDIT_FURNITURE, DIALOG_STYLE_LIST, ""COL_GENERAL"Selecciona (Poner o Editar)", bigstring, "Editar/Poner", "Cancelar");
			}
			case 2:
			{
				new bigstring[2048];
				new string[64];
				new hID = getPlayerHouseID(playerid);
				for(new i = 0; i < MAX_FURNITURE; i++)
				{
					if(HouseInfo[hID][FModel][i] == INVALID_FURNITURE_ID){format(string, 64, ""COL_GENERAL"%d. "COL_WHITE"Vacío", i+1);}
					else{format(string, 64, ""COL_GENERAL"%d. "COL_WHITE"ID: %d", i+1,HouseInfo[hID][FModel][i]);}
					format(bigstring, sizeof(bigstring), "%s%s\n", bigstring, string);
				}
				ShowPlayerDialog(playerid, DIALOG_SELL_FURNITURE, DIALOG_STYLE_LIST, "{33AA33}Selecciona un objeto para venderlo.", bigstring, "Vender", "Cancelar");
				return 1;
			}
		}
	}
	case DIALOG_EDIT_FURNITURE:
	{
		if(!response) return 1;
		new i = listitem;
		new hID = getPlayerHouseID(playerid);
		if(HouseInfo[hID][FModel][i] == INVALID_FURNITURE_ID) return SendClientMessageEx(playerid, COLOR_GREY, "* Objeto seleccionado inválido.");
		if(HouseInfo[hID][FPosX][i] != 0.0)
		{
			if(!IsValidDynamicObject(HouseInfo[hID][FurnitureObj][i])) return SendClientMessageEx(playerid, COLOR_GREY, "* Objeto seleccionado inválido.");
			EditDynamicObject(playerid, HouseInfo[hID][FurnitureObj][i]);
		}
		else
		{
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			GetXYInFrontOfPlayer(playerid, X, Y, 2.0);
			HouseInfo[hID][FPosX][i] = X; HouseInfo[hID][FPosY][i] = Y; HouseInfo[hID][FPosZ][i] = Z;
			HouseInfo[hID][FRotX][i] = 0; HouseInfo[hID][FRotY][i] = 0; HouseInfo[hID][FRotZ][i] = 0;
			HouseInfo[hID][FurnitureObj][i] = CreateDynamicObject(HouseInfo[hID][FModel][i], HouseInfo[hID][FPosX][i], HouseInfo[hID][FPosY][i], HouseInfo[hID][FPosZ][i], HouseInfo[hID][FRotX][i], HouseInfo[hID][FRotY][i], HouseInfo[hID][FRotZ][i], hID+6000, HouseInfo[hID][hHInteriorWorld], -1, 50.0);
			SaveFurniturePosition(hID, i);
		}
		return 1;
	}
	case DIALOG_BUY_FURNITURE:
	{
        new house = Info[playerid][pPhousekey];
		if(house == INVALID_HOUSE_ID) return SendClientMessageEx(playerid, COLOR_GREY, "* No eres dueño de una casa.");
		if(!response) return 1;
		switch(listitem)
		{
		    case 0: ShowModelSelectionMenu	(playerid, DormitorioFur, 	"Dormitorio", 		0x000000FF, COLOR_GREY, 0xFFF6BDFF);
		    case 1: ShowModelSelectionMenu	(playerid, ComedorFur, 		"Comedor", 			0x000000FF, COLOR_GREY, 0xFFF6BDFF);
            case 2: ShowModelSelectionMenu	(playerid, BanoFur, 		"Tocador", 			0x000000FF, COLOR_GREY, 0xFFF6BDFF);
            case 3: ShowModelSelectionMenu	(playerid, LobbyFur, 		"Lobby", 			0x000000FF, COLOR_GREY, 0xFFF6BDFF);
            case 4: ShowModelSelectionMenu	(playerid, CocinaFur, 		"Cocina", 			0x000000FF, COLOR_GREY, 0xFFF6BDFF);
            case 5: ShowModelSelectionMenu	(playerid, ElectroFur, 		"Electro", 			0x000000FF, COLOR_GREY, 0xFFF6BDFF);
			case 6: ShowModelSelectionMenu	(playerid, ParedesFur, 		"Paredes", 			0x000000FF, COLOR_GREY, 0xFFF6BDFF);
			case 7: ShowModelSelectionMenu	(playerid, OtrosFur,        "Otros",            0x000000FF, COLOR_GREY, 0xFFF6BDFF);
			default: SendClientMessageEx	(playerid, COLOR_GREY, 		"* En proceso.");
		}
		return 1;
	}
	case DIALOG_FURNITURE_BOUGHT: if(response) return ShowFurnitureMenu(playerid);

	case DIALOG_EDITOBJECT:
	{
		if(!response) return DeletePVar(playerid,"ObjetcIDFur");
		new hID = getPlayerHouseID(playerid);
		new i = GetPVarInt(playerid,"ObjetcIDFur");
		switch(listitem)
		{
		    case 0:
			{
				EditDynamicObject(playerid, HouseInfo[hID][FurnitureObj][i]);
				DeletePVar(playerid,"ObjetcIDFur");
			}
			case 1:
		    {
				HouseInfo[hID][FPosX][i] = 0.0; HouseInfo[hID][FPosY][i] = 0.0; HouseInfo[hID][FPosZ][i] = 0.0;
				HouseInfo[hID][FRotX][i] = 0.0; HouseInfo[hID][FRotY][i] = 0.0; HouseInfo[hID][FRotZ][i] = 0.0;
				SaveFurniturePosition(hID, i);
				if(IsValidDynamicObject(HouseInfo[hID][FurnitureObj][i])) DestroyDynamicObject(HouseInfo[hID][FurnitureObj][i]);
				DeletePVar(playerid,"ObjetcIDFur");
				SendClientMessageEx(playerid, -1, "Se ha guardado correctamente tu objeto.");
		    }
		    case 2:
		    {
		        new price = GetPricebyObject(HouseInfo[hID][FModel][i]);
				new money = price / 2, fname[42]; //cambiar
				GivePlayerCash(playerid, money);
				format(szMessage, 128, "{FFFFFF}Vendiste objeto id"COL_GENERAL"\"%d\"{FFFFFF} por "COL_GENERAL"%d$.", HouseInfo[hID][FModel][i], money);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				HouseInfo[hID][FModel][i] = INVALID_FURNITURE_ID;
				HouseInfo[hID][FPosX][i] = 0; HouseInfo[hID][FPosY][i] = 0; HouseInfo[hID][FPosZ][i] = 0;
				HouseInfo[hID][FRotX][i] = 0; HouseInfo[hID][FRotY][i] = 0; HouseInfo[hID][FRotZ][i] = 0;
				if(IsValidDynamicObject(HouseInfo[hID][FurnitureObj][i])) DestroyDynamicObject(HouseInfo[hID][FurnitureObj][i]);
				HouseInfo[hID][FurnitureObj][i] = 0;
				HouseInfo[hID][FCount] -= 1;
				format(fname, 128, HOUSE_FILE, hID);
				new key[24];
			    new INI:File = INI_Open(fname);
			    INI_SetTag(File,"HouseData");
				INI_WriteInt(File,"FCount", HouseInfo[hID][FCount]);
				format(key, 24, "FModel%d", i); INI_WriteInt(File, key, INVALID_FURNITURE_ID);
				INI_Close(File);
		        SaveFurniturePosition(hID, i);
		        DeletePVar(playerid,"ObjetcIDFur");
		    }
		}
	}
	case DIALOG_FURNITURE_KEEPSELL:
	{
		if(!response) return ShowPlayerDialog(playerid,HOUSE_OPTIONS,DIALOG_STYLE_LIST,""COL_GENERAL"Selecciona:",""COL_GENERAL"»"COL_WHITE" Dinero\n"COL_GENERAL"»"COL_WHITE" Items\n"COL_GENERAL"»"COL_WHITE" Muebles","Seleccionar","Atrás");
		new bigstring[2048];
		new string[64];
		new hID = getPlayerHouseID(playerid);
		for(new i = 0; i < MAX_FURNITURE; i++)
		{
			if(HouseInfo[hID][FModel][i] == INVALID_FURNITURE_ID){format(string, 64, ""COL_GENERAL"%d. "COL_WHITE"Vacío", i+1);}
			else{format(string, 64, ""COL_GENERAL"%d. "COL_WHITE"ID: %d", i+1,HouseInfo[hID][FModel][i]);}
			format(bigstring, sizeof(bigstring), "%s%s\n", bigstring, string);
		}
		ShowPlayerDialog(playerid, DIALOG_SELL_FURNITURE, DIALOG_STYLE_LIST, ""COL_GENERAL"Selecciona un objeto para venderlo.", bigstring, "Vender", "Cancelar");
		return 1;
	}
	case DIALOG_SELL_FURNITURE:
	{
		if(!response) return 1;
		new i = listitem;
		new fname[128];
		new hID = getPlayerHouseID(playerid);
		if(HouseInfo[hID][FModel][i] == INVALID_FURNITURE_ID) return SendClientMessageEx(playerid, COLOR_GREY, "* Objeto seleccionado inválido.");
        new price = GetPricebyObject(HouseInfo[hID][FModel][i]);
		new money = price / 2; //cambiar
		GivePlayerCash(playerid, money);
		format(fname, 128, "{FFFFFF}Vendiste objeto id"COL_GENERAL"\"%d\"{FFFFFF} por "COL_GENERAL"%d$.", HouseInfo[hID][FModel][i], money);
		SendClientMessageEx(playerid, COLOR_WHITE, fname);
		HouseInfo[hID][FModel][i] = INVALID_FURNITURE_ID;
		HouseInfo[hID][FPosX][i] = 0; HouseInfo[hID][FPosY][i] = 0; HouseInfo[hID][FPosZ][i] = 0;
		HouseInfo[hID][FRotX][i] = 0; HouseInfo[hID][FRotY][i] = 0; HouseInfo[hID][FRotZ][i] = 0;
		if(IsValidDynamicObject(HouseInfo[hID][FurnitureObj][i])) DestroyDynamicObject(HouseInfo[hID][FurnitureObj][i]);
		HouseInfo[hID][FurnitureObj][i] = 0;
		HouseInfo[hID][FCount] -= 1;
		format(fname, 128, HOUSE_FILE, hID);
		new key[24];
	    new INI:File = INI_Open(fname);
	    INI_SetTag(File,"HouseData");
		INI_WriteInt(File,"FCount", HouseInfo[hID][FCount]);
		format(key, 24, "FModel%d", i); INI_WriteInt(File, key, INVALID_FURNITURE_ID);
		INI_Close(File);
        SaveFurniturePosition(hID, i);
        ShowPlayerDialog(playerid, DIALOG_FURNITURE_KEEPSELL, DIALOG_STYLE_MSGBOX, "Vender objetos", "Deseas seguir vendiendo tus objetos?", "Seguir", "Cancelar");
		return 1;
	}
    case	HOUSE_ITEM:
    {
        if(response)
        {
            new tittlestr[64];
        	switch(listitem)
        	{
        	    case 0:
        	    {
        	        format(tittlestr, sizeof(tittlestr), ""COL_WHITE"Materiales "COL_GENERAL"(%d)",HouseInfo[Info[playerid][pPhousekey]][hMaterials]);
        	        ShowPlayerDialog(playerid,HOUSE_ITEM_MAT,DIALOG_STYLE_LIST,tittlestr,""COL_GENERAL"» "COL_WHITE"Depositar\n"COL_GENERAL"» "COL_WHITE"Retirar",">","Atrás");
        	    }
        	    case 1:
        	    {
        	        format(tittlestr, sizeof(tittlestr), ""COL_WHITE"Hierba "COL_GENERAL"(%d)",HouseInfo[Info[playerid][pPhousekey]][hPot]);
                    ShowPlayerDialog(playerid,HOUSE_ITEM_POT,DIALOG_STYLE_LIST,tittlestr,""COL_GENERAL"» "COL_WHITE"Depositar\n"COL_GENERAL"» "COL_WHITE"Retirar",">","Atrás");
				}
        	    case 2:
        	    {
        	        format(tittlestr, sizeof(tittlestr), ""COL_WHITE"Crack "COL_GENERAL"(%d)",HouseInfo[Info[playerid][pPhousekey]][hCrack]);
                    ShowPlayerDialog(playerid,HOUSE_ITEM_CRACK,DIALOG_STYLE_LIST,tittlestr,""COL_GENERAL"» "COL_WHITE"Depositar\n"COL_GENERAL"» "COL_WHITE"Retirar",">","Atrás");
				}
        	}
        }
		else ShowPlayerDialog(playerid,HOUSE_OPTIONS,DIALOG_STYLE_LIST,""COL_GENERAL"Selecciona:",""COL_GENERAL"»"COL_WHITE" Dinero\n"COL_GENERAL"»"COL_WHITE" Items\n"COL_GENERAL"»"COL_WHITE" Muebles","Seleccionar","Atrás");
    }
    case    HOUSE_ITEM_MAT:
    {
        if(response)
        {
        	switch(listitem)
        	{
				case 0: ShowPlayerDialog(playerid,HOUSE_ITEM_MAT_D,DIALOG_STYLE_INPUT,""COL_GENERAL"Depositar Materiales:","Ingresa el monto de materiales que depositarás en el baúl de tu casa.","Ingresar","Atrás");
				case 1: ShowPlayerDialog(playerid,HOUSE_ITEM_MAT_R,DIALOG_STYLE_INPUT,""COL_GENERAL"Retirar Materiales:","Ingresa el monto de materiales que retirarás del baúl de tu casa.","Ingresar","Atrás");
        	}
        }
        else
		{
			new weaponsinlocker;
			for(new s = 0; s < 5; s++){if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][s] != 0){weaponsinlocker++;}}
			format(szDialog, sizeof(szDialog), ""COL_GENERAL"» "COL_WHITE"Materiales "COL_GENERAL"(%d)\n"COL_GENERAL"» "COL_WHITE"Hierba "COL_GENERAL"(%d)\n"COL_GENERAL"» "COL_WHITE"Crack "COL_GENERAL"(%d)\n"COL_GENERAL"» "COL_WHITE"Armas "COL_GENERAL"(%d/5)", HouseInfo[Info[playerid][pPhousekey]][hMaterials],HouseInfo[Info[playerid][pPhousekey]][hPot],HouseInfo[Info[playerid][pPhousekey]][hCrack],weaponsinlocker);
            ShowPlayerDialog(playerid,HOUSE_ITEM,DIALOG_STYLE_LIST,""COL_GENERAL"Selecciona Item:",szDialog,"Ingresar","Atrás");
        }
    }
    case    HOUSE_ITEM_POT:
    {
        if(response)
        {
        	switch(listitem)
        	{
				case 0: ShowPlayerDialog(playerid,HOUSE_ITEM_POT_D,DIALOG_STYLE_INPUT,""COL_GENERAL"Depositar Hierba:","Ingresa el monto de hierba que depositarás en el baúl de tu casa.","Ingresar","Atrás");
				case 1: ShowPlayerDialog(playerid,HOUSE_ITEM_POT_R,DIALOG_STYLE_INPUT,""COL_GENERAL"Retirar Hierba:","Ingresa el monto de hierba que retirarás del baúl de tu casa.","Ingresar","Atrás");
        	}
        }
        else
		{
			new weaponsinlocker;
			for(new s = 0; s < 5; s++){if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][s] != 0){weaponsinlocker++;}}
			format(szDialog, sizeof(szDialog), ""COL_GENERAL"» "COL_WHITE"Materiales "COL_GENERAL"(%d)\n"COL_GENERAL"» "COL_WHITE"Hierba "COL_GENERAL"(%d)\n"COL_GENERAL"» "COL_WHITE"Crack "COL_GENERAL"(%d)\n"COL_GENERAL"» "COL_WHITE"Armas "COL_GENERAL"(%d/5)", HouseInfo[Info[playerid][pPhousekey]][hMaterials],HouseInfo[Info[playerid][pPhousekey]][hPot],HouseInfo[Info[playerid][pPhousekey]][hCrack],weaponsinlocker);
            ShowPlayerDialog(playerid,HOUSE_ITEM,DIALOG_STYLE_LIST,""COL_GENERAL"Selecciona Item:",szDialog,"Ingresar","Atrás");
        }
    }
    case    HOUSE_ITEM_CRACK:
    {
        if(response)
        {
        	switch(listitem)
        	{
				case 0: ShowPlayerDialog(playerid,HOUSE_ITEM_CRACK_D,DIALOG_STYLE_INPUT,""COL_GENERAL"Depositar Crack:","Ingresa el monto de crack que depositarás en el baúl de tu casa.","Ingresar","Atrás");
				case 1: ShowPlayerDialog(playerid,HOUSE_ITEM_CRACK_R,DIALOG_STYLE_INPUT,""COL_GENERAL"Retirar Crack:","Ingresa el monto de crack que retirarás del baúl de tu casa.","Ingresar","Atrás");
        	}
        }
        else
		{
			new weaponsinlocker;
			for(new s = 0; s < 5; s++){if(HouseInfo[Info[playerid][pPhousekey]][hWeapons][s] != 0){weaponsinlocker++;}}
			format(szDialog, sizeof(szDialog), ""COL_GENERAL"» "COL_WHITE"Materiales "COL_GENERAL"(%d)\n"COL_GENERAL"» "COL_WHITE"Hierba "COL_GENERAL"(%d)\n"COL_GENERAL"» "COL_WHITE"Crack "COL_GENERAL"(%d)\n"COL_GENERAL"» "COL_WHITE"Armas "COL_GENERAL"(%d/5)", HouseInfo[Info[playerid][pPhousekey]][hMaterials],HouseInfo[Info[playerid][pPhousekey]][hPot],HouseInfo[Info[playerid][pPhousekey]][hCrack],weaponsinlocker);
            ShowPlayerDialog(playerid,HOUSE_ITEM,DIALOG_STYLE_LIST,""COL_GENERAL"Selecciona Item:",szDialog,"Ingresar","Atrás");
        }
    }
    case    HOUSE_ITEM_MAT_D:
    {
        if(response)
        {
            new amount = strval(inputtext);
			if(amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes depositar menos de un material.");
            if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
			if( Info[playerid][pMats] >= amount )
			{
				HouseInfo[Info[playerid][pPhousekey]][hMaterials] += amount;
				Info[playerid][pMats] -= amount;
				format(szMessage, sizeof(szMessage), "Depositaste %d materiales en tu casa.", amount);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				SaveVarHouses(1,Info[playerid][pPhousekey], "Materials",HouseInfo[Info[playerid][pPhousekey]][hMaterials]);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficientes materiales para depositar.");
		}
    }
    case    HOUSE_ITEM_MAT_R:
    {
        if(response)
        {
            new amount = strval(inputtext);
			if(amount < 1) SendClientMessageEx(playerid, COLOR_GREY, "* No puedes retirar menos de un material.");
            if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
			if(HouseInfo[Info[playerid][pPhousekey]][hMaterials] >= amount)
			{
				HouseInfo[Info[playerid][pPhousekey]][hMaterials]-=amount;
				Info[playerid][pMats] += amount;
				format(szMessage, sizeof(szMessage), "Retiraste %d materiales de tu casa.", amount);
				SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
				SaveVarHouses(1,Info[playerid][pPhousekey], "Materials",HouseInfo[Info[playerid][pPhousekey]][hMaterials]);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficientes materiales para retirar.");
		}
    }
    case    HOUSE_ITEM_POT_D:
    {
        if(response)
        {
            new amount = strval(inputtext);
			if(amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes depositar esta cantidad.");
            if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
			if(Info[playerid][pPot] >= amount)
			{
			    if(HouseInfo[Info[playerid][pPhousekey]][hPot] > 20000) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya tienes más de 20000 de hierba en tu casa, no puedes dejar más.");
				HouseInfo[Info[playerid][pPhousekey]][hPot]+=amount;
				Info[playerid][pPot] -= amount;
				format(szMessage, sizeof(szMessage), "Depositaste %d de hierba en tu casa.", amount);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				SaveVarHouses(1,Info[playerid][pPhousekey], "Pot",HouseInfo[Info[playerid][pPhousekey]][hPot]);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente hierba para depositar.");
		}
    }
    case    HOUSE_ITEM_POT_R:
    {
        if(response)
        {
            new amount = strval(inputtext);
			if(amount < 1) SendClientMessageEx(playerid, COLOR_GREY, "* No puedes retirar esta cantidad.");
            if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
			if(HouseInfo[Info[playerid][pPhousekey]][hPot] >= amount)
			{
			    if(Info[playerid][pPot] > 49) return SendClientMessageEx(playerid, COLOR_GREY,"* Ya tienes 50 de hierba no puedes llevar más.");
				HouseInfo[Info[playerid][pPhousekey]][hPot]-=amount;
				Info[playerid][pPot] += amount;
				format(szMessage, sizeof(szMessage), "Retiraste %d de hierba de tu casa.", amount);
				SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
				SaveVarHouses(1,Info[playerid][pPhousekey], "Pot",HouseInfo[Info[playerid][pPhousekey]][hPot]);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente hierba para retirar.");
		}
    }
    case	HOUSE_ITEM_CRACK_D:
    {
        if(response)
        {
            new amount = strval(inputtext);
			if(amount < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes depositar esta cantidad.");
            if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
			if( Info[playerid][pCrack] >= amount )
			{
			    if(HouseInfo[Info[playerid][pPhousekey]][hCrack] > 19999) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya tienes más de 30000 de crack en tu casa, no puedes dejar más.");
				HouseInfo[Info[playerid][pPhousekey]][hCrack]+=amount;
				Info[playerid][pCrack] -= amount;
				format(szMessage, sizeof(szMessage), "Depositaste %d de crack en tu casa.", amount);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				SaveVarHouses(1,Info[playerid][pPhousekey], "Crack",HouseInfo[Info[playerid][pPhousekey]][hCrack]);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente crack para depositar.");
		}
    }
    case    HOUSE_ITEM_CRACK_R:
    {
        if(response)
        {
            new amount = strval(inputtext);
			if(amount < 1) SendClientMessageEx(playerid, COLOR_GREY, "* No puedes retirar esta cantidad.");
            if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo números porfavor, vuelve a intentarlo.");
			if(HouseInfo[Info[playerid][pPhousekey]][hCrack] >= amount)
			{
			    if(Info[playerid][pCrack] > 25) return SendClientMessageEx(playerid, COLOR_GREY,"* Ya tienes 25 de crack no puedes llevar más.");
				HouseInfo[Info[playerid][pPhousekey]][hCrack]-=amount;
				Info[playerid][pCrack] += amount;
				format(szMessage, sizeof(szMessage), "Retiraste %d de crack de tu casa.", amount);
				SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
				SaveVarHouses(1,Info[playerid][pPhousekey], "Crack",HouseInfo[Info[playerid][pPhousekey]][hCrack]);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente crack para retirar.");
		}
	}
	case    CAMBIARACENTO:
	{
	    if(response)
	    {
	        if(isnull(inputtext))
	        {
	            format(szDialog, sizeof(szDialog), ""COL_WHITE"Debes usar menos de 14 letras.\nEjemplo:\n\n* Colombiano\n* Chino\n* Argentino\n* Africano\n* Ingresa el que quieras...");
				return ShowPlayerDialog(playerid, CAMBIARACENTO, DIALOG_STYLE_INPUT, ""COL_GENERAL"Cambiar Acento",szDialog, "Ok", "Atrás");
	        }
        	if(strlen(inputtext) >= 15)
			{
			    format(szDialog, sizeof(szDialog), ""COL_WHITE"El acento que elegiste usa demasiados carácteres.\nDebes usar menos de 15 letras.\nEjemplo:\n\n* Colombiano\n* Chino\n* Argentino\n* Peruano\n* Ingresa el que quieras...");
                return ShowPlayerDialog(playerid, CAMBIARACENTO, DIALOG_STYLE_INPUT, ""COL_GENERAL"Cambiar Acento",szDialog, "Ok", "Atrás");
			}
	        if(isnumeric(inputtext))
	        {
	            format(szDialog, sizeof(szDialog), ""COL_WHITE"No se puede ingresar números.\nDebes usar menos de 14 letras.\nEjemplo:\n\n* Colombiano\n* Chino\n* Argentino\n* Peruano\n* Ingresa el que quieras...");
				return ShowPlayerDialog(playerid, CAMBIARACENTO, DIALOG_STYLE_INPUT, ""COL_GENERAL"Cambiar Acento",szDialog, "Ok", "Atrás");
	        }
			strmid(Info[playerid][pAcento], inputtext, 0, strlen(inputtext), 40);
		    format(szMessage, sizeof(szMessage), "[ACENTO] %s - Acento %s.", GetPlayerNameEx(playerid),inputtext);
		    Log("logs/especial.log", szMessage);
			format(szMessage, sizeof(szMessage), "Cambiaste tu acento. (Nuevo Acento: %s)",inputtext);
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
		}
	}
	case    D_PINVIPCREATE:
	{
		if(response)
		{
		    if(Info[playerid][pCoinsPIN] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya tienes asignado un PIN VIP.");
			if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* El PIN VIP sólo deben ser números.");
	    	if(strlen(inputtext) == 4)
	    	{
	    	    Info[playerid][pCoinsPIN] = strval(inputtext);
	    	    format(szMessage, sizeof(szMessage), "Has creado correctamente tu PIN VIP (%d). Ya puedes usar funciones VIP (/vips)", Info[playerid][pCoinsPIN]);
	    	    SendClientMessageEx(playerid, COLOR_WHITE,szMessage);
	    	}
	    	else return SendClientMessageEx(playerid, COLOR_GREY, "* El PIN VIP sólo debe tener 4 dígitos.");
	    }
	    else ShowPlayerDialog(playerid,D_PINVIP,DIALOG_STYLE_LIST,""COL_GENERAL"Selecciona","Crear PIN VIP\nCambiar PIN VIP","Seleccionar","Salir");
	}
	case    D_PINVIPCHANGE:
	{
		if(response)
		{
		    if( Info[playerid][pCoinsPIN] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Not ienes asignado un PIN VIP.");
	        if( !isnumeric(inputtext) ) return SendClientMessageEx(playerid, COLOR_GREY, "* El PIN VIP sólo deben ser números.");
	        if( Info[playerid][pCoinsPIN] == strval(inputtext) )
	        {
	            ShowPlayerDialog(playerid,D_PINVIPCHANGE2,DIALOG_STYLE_INPUT ,""COL_GENERAL"Cambiar PIN VIP - 2/2",""COL_WHITE"Ingresa tu nuevo PIN VIP para completar el cambio.\n\nNuevo PIN VIP:","Cambiar","Atrás");
	        }
	        else return SendClientMessageEx(playerid, COLOR_GREY, "* Ingresa correctamente el PIN de 4 dígitos.");
	    }
	    else ShowPlayerDialog(playerid,D_PINVIP,DIALOG_STYLE_LIST,""COL_GENERAL"Selecciona","Crear PIN VIP\nCambiar PIN VIP","Seleccionar","Salir");
	}
	case    D_PINVIPCHANGE2:
	{
		if(response)
		{
			if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* El PIN VIP sólo deben ser números.");
	    	if(strlen(inputtext) == 4)
	    	{
	    	    Info[playerid][pCoinsPIN] = strval(inputtext);
	    	    format(szMessage, sizeof(szMessage), "Has cambiado correctamente tu PIN VIP (%d).", Info[playerid][pCoinsPIN]);
	    	    SendClientMessageEx(playerid, COLOR_WHITE,szMessage);
	    	}
	    	else return SendClientMessageEx(playerid, COLOR_GREY, "* El PIN VIP sólo puede tener 4 dígitos.");
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "* No se ha cambiado tu PIN VIP.");
	}
    case    D_PINVIP: if(response)
	{
		switch(listitem)
		{
			case 0: return ShowPlayerDialog(playerid,D_PINVIPCREATE,DIALOG_STYLE_INPUT ,""COL_GENERAL"Crear PIN VIP",	""COL_WHITE"Ingresa 4 dígitos de preferencia alguna combinación que recuerdes facilmente.\n\nNuevo PIN VIP:","Continuar","Atrás");
			case 1: return ShowPlayerDialog(playerid,D_PINVIPCHANGE,DIALOG_STYLE_INPUT ,""COL_GENERAL"Cambiar PIN VIP - 1/2",	""COL_WHITE"Ingresa el actual PIN para cambiarlo.\n\nPIN:","Continuar","Atrás");
		}
	}
	case    D_VIPACC: if(response)
 {
	    if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* El PIN VIP sólo deben ser números.");
	    if( Info[playerid][pCoinsPIN] == strval(inputtext) )
	    {
			new szDialogTittle[128];
		    format(szDialogTittle, sizeof(szDialogTittle), "Coins VIP: %d",Info[playerid][pCoinsVip]);
		    ShowPlayerDialog(playerid,D_COINSVIP,DIALOG_STYLE_LIST,szDialogTittle,"Auto Personalizado (550)\nRegenerar Salud (10)\nRegenerar Armadura (10)\nToy Chaleco Antibalas (4)\nLaser Toy (2)\nDoble Exp (5)\nNeon Toy (5)\nTodo a 1 Coin\nCambiar Acento (2)\nCambiar Skin (FREE)\nComprar Lotería ($10)","Seleccionar","Salir");
	    }
	    else return SendClientMessageEx(playerid, COLOR_GREY, "* El PIN VIP ingresado es incorrecto.");
	}
	case    D_CODEVIP: if(response)
	{
	    if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* El código sólo consiste en números.");
	    if(strlen(inputtext) == 6)
	    {
	        new idx = -1, CodeInput = strval(inputtext);
        	for(new ex = 0; ex < sizeof(varCodesVIP); ex++)
			{
	            if(varCodesVIP[ex][CodeNro] == CodeInput)
	            {
	                idx = ex;
	                //printf("%d",ex);
	            }
	        }
			if(idx == -1) return SendClientMessageEx(playerid, COLOR_GREY, "* El código que ingresaste no es válido.");
            format(szMessage, sizeof(szMessage), "Canjeaste el código (%d - %d) - Se te asignó: %d coins.",idx,varCodesVIP[idx][CodeNro],varCodesVIP[idx][CodeCoins]);
			SendClientMessageEx(playerid, COLOR_GREY, szMessage);
		    format(szMessage, sizeof(szMessage), "[CODIGO VIP]: %s - Código %d - Coins %d", GetPlayerNameEx(playerid),varCodesVIP[idx][CodeNro],varCodesVIP[idx][CodeCoins]);
		    Log("logs/coins.log", szMessage);
		    Info[playerid][pCoinsVip] += varCodesVIP[idx][CodeCoins];
			varCodesVIP[idx][CodeNro] = 0;
	        varCodesVIP[idx][CodeCoins] = 0;
			saveCodes();
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "* Ingresaste un código incorrecto (Sólo 6 dígitos).");
	}
		case	D_COINSVIP: if(response)
		{
			switch(listitem)
			{
			    case    0:
			    {
			        if(Info[playerid][pCoinsVip] < 550) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficientes coins para comprar esta función.");
		            ShowPlayerDialog(playerid,D_CVCARMODEL,DIALOG_STYLE_INPUT ,""COL_GENERAL"Vehículo Personalizado","Ingresa la ID del vehículo que quieres comprar\n\nNo se permite:\n\n    Dumper\n    Vehiculos Publicos (LSPD, SAEM, SAMD)\n\nSeran borrados y puedes ser sancionado.","Aceptar","Atrás");
			    }
	            case    1:
			    {
	                if(Info[playerid][pCoinsVip] < 10) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficientes coins para comprar esta función.");
					new Float:health;
					GetPlayerHealth(playerid, health);
					new hpint = floatround(health,floatround_round );
		    		if(hpint >= 100) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya tienes la vida llena.");
			    	SetHP(playerid, 100);
					SendClientMessageEx(playerid, COLOR_GRAD1, "VIP: Regeneraste tu salud, ahora tienes 100% de vida.");
			    }
			    case    2:
			    {
					if(Info[playerid][pCoinsVip] < 10) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficientes coins para comprar esta función.");
					new Float:armour;
					GetPlayerArmour(playerid, armour);
					if(armour >= 100) return SendClientMessageEx(playerid, COLOR_GREY, "Ya tienes la armadura llena.");
					GiveArmorToPlayer(playerid, 100);
				}
			    case    3:
			    {
		            format(szDialog, sizeof(szDialog),""COL_WHITE"NOTA:\n\nRecuerda que este objeto se asignará en el slot 5 de tu inventario de toys.\nSi estás seguro dale en COMPRAR.");
					ShowPlayerDialog(playerid,D_CVVEST,DIALOG_STYLE_MSGBOX ,""COL_GENERAL"Chaleco Antibalas VIP",szDialog,"Comprar","Salir");
			    }
			    case    4:
			    {
			        if(Info[playerid][pCoinsVip] < 2) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficientes coins para comprar esta función.");
		            ShowPlayerDialog(playerid,D_CVLASER,DIALOG_STYLE_LIST,""COL_GENERAL"Color de Laser",""COL_RED"Rojo\n"COL_BLUE"Azul\n"COL_GREEN"Verde\n"COL_GENERAL"Naranja\n"COL_YELLOW"Amarillo\n"COL_PINK"Rosado","Seleccionar","Atrás");
				}
			    case    5: return ShowPlayerDialog(playerid,D_CVDOBLEEXP,DIALOG_STYLE_MSGBOX,""COL_GENERAL"6 Horas de Doble Exp",""COL_WHITE"NOTA:\n\nEsta función te permitirá ganar el doble de experiencia cada payday o en cualquier job.\n\nPrecio: 5 Coins","Seleccionar","Atrás");
				case    6: return ShowPlayerDialog(playerid,D_CVNEON,DIALOG_STYLE_LIST,""COL_GENERAL"Color de Neon",""COL_RED"Rojo\n"COL_BLUE"Azul\n"COL_GREEN"Verde\n"COL_WHITE"Blanco\n"COL_YELLOW"Amarillo\n"COL_PINK"Rosado","Seleccionar","Atrás");
				case    7: return ShowPlayerDialog(playerid,D_CVOTHERS,DIALOG_STYLE_LIST,""COL_GENERAL"Todo a 1 Coin","Toy Navaja\nToy Bat\nToy Desert E\nToy Escopeta\nToy MP5\nToy AK-47\nToy M4\nToy Sniper\nToy Mochila Rockstar\nToy Bigotes Falsos\nToy Estrella Sheriff","Seleccionar","Atrás");
				case    8:
				{
		            format(szDialog, sizeof(szDialog),""COL_WHITE"En esta opción cambiarás tu acento por 2 coins.\n\n* Acento actual: %s",Info[playerid][pAcento]);
					ShowPlayerDialog(playerid,D_CVACENTO,DIALOG_STYLE_MSGBOX ,""COL_GENERAL"Cambiar Acento",szDialog,"Seguir","Salir");
				}
				case    9: return ShowModelSelectionMenu(playerid, skinlist, "Cambia tu skin", 0x000000FF, COLOR_GREY, 0xFFF6BDFF);
				case    10: return ShowPlayerDialog(playerid, LOTTO_BUY, DIALOG_STYLE_INPUT, ""COL_GENERAL"Lotería Nacional",""COL_WHITE"Inserta un número entre 1 y 100. Mucha Suerte!","Comprar","Cancelar");
			}
		}
		case    D_CVACENTO:
		{
		    if(response)
		    {
		        if(Info[playerid][pCoinsVip] < 2) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficientes coins para comprar esta función.");
		        if(isnull(inputtext))
		        {
		            format(szDialog, sizeof(szDialog), ""COL_WHITE"Debes usar menos de 14 letras.\nEjemplo:\n\n* Colombiano\n* Chino\n* Argentino\n* Africano\n* Ingresa el que quieras...");
					return ShowPlayerDialog(playerid, D_CVACENTO, DIALOG_STYLE_INPUT, ""COL_GENERAL"Cambiar Acento",szDialog, "Ok", "Atrás");
		        }
	        	if(strlen(inputtext) >= 15)
				{
				    format(szDialog, sizeof(szDialog), ""COL_WHITE"El acento que elegiste usa demasiados carácteres.\nDebes usar menos de 15 letras.\nEjemplo:\n\n* Colombiano\n* Chino\n* Argentino\n* Peruano\n* Ingresa el que quieras...");
	                return ShowPlayerDialog(playerid, D_CVACENTO, DIALOG_STYLE_INPUT, ""COL_GENERAL"Cambiar Acento",szDialog, "Ok", "Atrás");
				}
		        if(isnumeric(inputtext))
		        {
		            format(szDialog, sizeof(szDialog), ""COL_WHITE"No se puede ingresar números.\nDebes usar menos de 14 letras.\nEjemplo:\n\n* Colombiano\n* Chino\n* Argentino\n* Peruano\n* Ingresa el que quieras...");
					return ShowPlayerDialog(playerid, D_CVACENTO, DIALOG_STYLE_INPUT, ""COL_GENERAL"Cambiar Acento",szDialog, "Ok", "Atrás");
		        }
				strmid(Info[playerid][pAcento], inputtext, 0, strlen(inputtext), 40);
				Info[playerid][pCoinsVip] -= 2;
			    format(szMessage, sizeof(szMessage), "[ACENTO] %s - Acento %s - Factura por 2 coins.", GetPlayerNameEx(playerid),inputtext);
			    Log("logs/coins.log", szMessage);
				format(szMessage, sizeof(szMessage), "Cambiaste tu acento por 2 coins. (Nuevo Acento: %s)",inputtext);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			}
		}
		case    D_CVOTHERCONFIRM:
		{
		    if(response)
		    {
				new modelid = GetPVarInt(playerid,"OtherObject"), slot = slotselection[playerid];
				new name[24];
  				format(name, sizeof(name), "ERROR (NO COMPRAR)");
				for(new i;i<sizeof(HoldingObjectsAll);i++)
		    	{
					if(HoldingObjectsAll[i][holdingmodelid] == modelid)
		        	{
	   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				PlayerToyInfo[playerid][slot][ptModelID] = modelid;
				PlayerToyInfo[playerid][slot][ptBone] = 6;
				PlayerToyInfo[playerid][slot][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slot][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slot][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slot][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slot][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slot][ptRotZ] = 0.0;
	        	PlayerToyInfo[playerid][slot][ftscaleX] = 1.0;
	        	PlayerToyInfo[playerid][slot][ftscaleY] = 1.0;
	        	PlayerToyInfo[playerid][slot][ftscaleZ] = 1.0;
				format(szMessage, sizeof(szMessage), "Compraste un %s en el slot %d, usa /toys para verlo.", name, slot);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				DeletePVar(playerid,"OtherObject");
				Info[playerid][pCoinsVip] -= 1;
			    format(szMessage, sizeof(szMessage), "[OBJECT] %s - Objeto %s - Factura por 1 coin.", GetPlayerNameEx(playerid),name);
			    Log("logs/coins.log", szMessage);
				return 1;
			}
			else return DeletePVar(playerid,"OtherObject");
		}
		case    D_CVOTHERSSLOT:
		{
		    if(response)
		    {
		    	if(listitem >= 8 && Info[playerid][pVIP] != 2) return SendClientMessageEx(playerid, COLOR_GREY, "* Debes ser un nivel mayor de VIP para usar este slot.");
		    	if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya tienes algo en esa ranura, eliminala con /toys");
				slotselection[playerid] = listitem;
				new name[24];
		    	format(name, sizeof(name), "ERROR (NO COMPRAR)");
				for(new i;i<sizeof(HoldingObjectsAll);i++)
		    	{
					if(HoldingObjectsAll[i][holdingmodelid] == GetPVarInt(playerid,"OtherObject"))
		        	{
	   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				format(szDialog, sizeof(szDialog), ""COL_WHITE"Objeto: %s\nSlot: %d\n\n¿Correcto?",name,slotselection);
		        ShowPlayerDialog(playerid,D_CVOTHERCONFIRM,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Confirmación",szDialog,"Confirmar","Salir");
			}
		    else
			{
			    DeletePVar(playerid,"OtherObject");
				return ShowPlayerDialog(playerid,D_CVOTHERS,DIALOG_STYLE_LIST,""COL_GENERAL"Todo a 1 Coin","Navaja\nBat\nDesert E\nEscopeta\nMP5\nAK-47\nM4\nSniper\nMochila Rockstar\nBigotes Falsos\nEstrella Sheriff","Seleccionar","Atrás");
			}
		}
		case    D_CVOTHERS:
		{
		    if(response)
		    {
			    if(Info[playerid][pCoinsVip] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficientes coins para comprar esta función.");
				switch(listitem)
			    {
		     		case    0: SetPVarInt(playerid,"OtherObject", 335);
			        case    1: SetPVarInt(playerid,"OtherObject", 336);
			        case    2: SetPVarInt(playerid,"OtherObject", 348);
			        case    3: SetPVarInt(playerid,"OtherObject", 349);
			        case    4: SetPVarInt(playerid,"OtherObject", 353);
			        case    5: SetPVarInt(playerid,"OtherObject", 355);
			        case    6: SetPVarInt(playerid,"OtherObject", 356);
			        case    7: SetPVarInt(playerid,"OtherObject", 358);
			        case    8: SetPVarInt(playerid,"OtherObject", 371);
			        case    9: SetPVarInt(playerid,"OtherObject", 19351);
			        case 	10: SetPVarInt(playerid,"OtherObject", 19347);
				}
			    new stringg[512];
				for(new x;x<MAX_PLAYERTOYS;x++)
				{
					new name[24] = "Nada";
					for(new i;i<sizeof(HoldingObjectsAll);i++)
					{
						if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID]){format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);}
					}
					format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
				}
				ShowPlayerDialog(playerid, D_CVOTHERSSLOT, DIALOG_STYLE_LIST, ""COL_GENERAL"Selecciona un Slot", stringg, "Seleccionar", "Atrás");
			}
		    else
			{
				new szDialogTittle[128];
			    format(szDialogTittle, sizeof(szDialogTittle), "Coins VIP: %d",Info[playerid][pCoinsVip]);
			    ShowPlayerDialog(playerid,D_COINSVIP,DIALOG_STYLE_LIST,szDialogTittle,"Auto Personalizado (550)\nRegenerar Salud (10)\nRegenerar Armadura (10)\nToy Chaleco Antibalas (4)\nLaser Toy (2)\nDoble Exp (5)\nNeon Toy (5)\nTodo a 1 Coin\nCambiar Acento (2)\nCambiar Skin (FREE)\nComprar Lotería ($10)","Seleccionar","Salir");
			}
		}
		case    D_CVNEONCONFIRM:
		{
		    if(response)
		    {
				new modelid = GetPVarInt(playerid,"NeonColor"), slot = slotselection[playerid];
				new name[24];
		    	format(name, sizeof(name), "ERROR (NO COMPRAR)");
				for(new i;i<sizeof(HoldingObjectsAll);i++)
		    	{
					if(HoldingObjectsAll[i][holdingmodelid] == modelid)
		        	{
	   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				PlayerToyInfo[playerid][slot][ptModelID] = modelid;
				PlayerToyInfo[playerid][slot][ptBone] = 6;
				PlayerToyInfo[playerid][slot][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slot][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slot][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slot][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slot][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slot][ptRotZ] = 0.0;
	        	PlayerToyInfo[playerid][slot][ftscaleX] = 1.5;
	        	PlayerToyInfo[playerid][slot][ftscaleY] = 1.5;
	        	PlayerToyInfo[playerid][slot][ftscaleZ] = 1.5;
				format(szMessage, sizeof(szMessage), "Compraste un %s en el slot %d, usa /toys para verlo.", name, slot);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				DeletePVar(playerid,"NeonColor");
				Info[playerid][pCoinsVip] -= 5;
			    format(szMessage, sizeof(szMessage), "[NEON] %s - Objeto: %s Factura por 5 coins.", GetPlayerNameEx(playerid),name);
			    Log("logs/coins.log", szMessage);
				return 1;
			}
			else return DeletePVar(playerid,"NeonColor");
		}
		case    D_CVNEONSLOT:
		{
		    if(response)
		    {
		    	if(listitem >= 8 && Info[playerid][pVIP] != 2) return SendClientMessageEx(playerid, COLOR_GREY, "* Debes ser un nivel mayor de VIP para usar este slot.");
		    	if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya tienes algo en esa ranura, eliminala con /toys");
				slotselection[playerid] = listitem;
				new name[24];
		    	format(name, sizeof(name), "ERROR (NO COMPRAR)");
				for(new i;i<sizeof(HoldingObjectsAll);i++)
		    	{
					if(HoldingObjectsAll[i][holdingmodelid] == GetPVarInt(playerid,"NeonColor"))
		        	{
	   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				format(szDialog, sizeof(szDialog), ""COL_WHITE"Objeto: %s\nSlot: %d\n\n¿Correcto?",name,slotselection);
		        ShowPlayerDialog(playerid,D_CVNEONCONFIRM,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Confirmación",szDialog,"Confirmar","Salir");
			}
		    else
			{
			    DeletePVar(playerid,"NeonColor");
				return ShowPlayerDialog(playerid,D_CVNEON,DIALOG_STYLE_LIST,""COL_GENERAL"Color de Neon",""COL_RED"Rojo\n"COL_BLUE"Azul\n"COL_GREEN"Verde\n"COL_WHITE"Blanco\n"COL_YELLOW"Amarillo\n"COL_PINK"Rosado","Seleccionar","Atrás");
			}
		}
		case    D_CVNEON:
		{
		    if(response)
		    {
		        if(Info[playerid][pCoinsVip] < 5) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficientes coins para comprar esta función.");
		        switch(listitem)
		        {
		            case    0: SetPVarInt(playerid,"NeonColor", 18647); // Rojo
		            case    1: SetPVarInt(playerid,"NeonColor", 18648); // Azul
		            case    2: SetPVarInt(playerid,"NeonColor", 18649); // Verde
		            case    3: SetPVarInt(playerid,"NeonColor", 18652); // Blanco
		            case    4: SetPVarInt(playerid,"NeonColor", 18650); // Amarillo
		            case    5: SetPVarInt(playerid,"NeonColor", 18651); // Rosado
		        }
			    new stringg[512];
				for(new x;x<MAX_PLAYERTOYS;x++)
				{
					new name[24] = "Nada";
					for(new i;i<sizeof(HoldingObjectsAll);i++)
					{
						if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
						{
							format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						}
					}
					format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
				}
				ShowPlayerDialog(playerid, D_CVNEONSLOT, DIALOG_STYLE_LIST, ""COL_GENERAL"Selecciona un Slot", stringg, "Seleccionar", "Atrás");
		    }
		    else
			{
				new szDialogTittle[128];
			    format(szDialogTittle, sizeof(szDialogTittle), "Coins VIP: %d",Info[playerid][pCoinsVip]);
			    ShowPlayerDialog(playerid,D_COINSVIP,DIALOG_STYLE_LIST,szDialogTittle,"Auto Personalizado (550)\nRegenerar Salud (10)\nRegenerar Armadura (10)\nToy Chaleco Antibalas (4)\nLaser Toy (2)\nDoble Exp (5)\nNeon Toy (5)\nTodo a 1 Coin\nCambiar Acento (2)\nCambiar Skin (FREE)\nComprar Lotería ($10)","Seleccionar","Salir");
			}
		}
		case    D_CVDOBLEEXP:
		{
		    if(response)
		    {
		        if(Info[playerid][pCoinsVip] < 5) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficientes coins para comprar esta función.");
	            Info[playerid][pDobleExp] += 6;
	            Info[playerid][pCoinsVip] -= 5;
				SendClientMessageEx(playerid,COLOR_WHITE, "Se activó 6 horas de doble EXP, aprovéchalo!");
				format(szMessage, sizeof(szMessage), "[DOBLE-EXP] %s - Factura por 5 coins.", GetPlayerNameEx(playerid));
				Log("logs/coins.log", szMessage);
			}
		    else
			{
				new szDialogTittle[128];
			    format(szDialogTittle, sizeof(szDialogTittle), "Coins VIP: %d",Info[playerid][pCoinsVip]);
			    ShowPlayerDialog(playerid,D_COINSVIP,DIALOG_STYLE_LIST,szDialogTittle,"Auto Personalizado (550)\nRegenerar Salud (10)\nRegenerar Armadura (10)\nToy Chaleco Antibalas (4)\nLaser Toy (2)\nDoble Exp (5)\nNeon Toy (5)\nTodo a 1 Coin\nCambiar Acento (2)\nCambiar Skin (FREE)\nComprar Lotería ($10)","Seleccionar","Salir");
			}
		}
		case D_CVCARMODEL:
		{
			if(response)
			{
			    if(Info[playerid][pCoinsVip] < 550) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficientes coins para comprar esta función.");
				if(!isnumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "* ID del vehiculo debe ser sólo números.");
		    	new modelid = strval(inputtext);
				if(modelid < 400 || modelid > 611) return SendClientMessageEx(playerid, COLOR_GREY, "* ID del vehiculo debe ser del 400 al 611.");
				carsforplayer = VehicleCount(playerid);
				new playervehicleid = GetPlayerFreeVehicleId();
				if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "* Lo sentimos no puedes tener más coches.");
				if(carsforplayer == 5) return SendClientMessageEx(playerid,COLOR_GREY,"* Sólo puede tener 5 coches spawneados.");
				new car = CreatePlayerVehicle(playerid, playervehicleid, modelid, 816.1836, -1392.9404, 13.1918, 90.0000, -1, -1, 0);
				SetVehicleVirtualWorld(car, 0);
				if(car == INVALID_PLAYER_VEHICLE_ID){ SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Algo salió mal y el coche no se creó."); }
				else
				{
				    Info[playerid][pCoinsVip] -= 550;
		            format(szMessage, sizeof(szMessage), "Felicitaciones tienes un coche nuevo (%s) estacionado afuera.",GetVehicleName(car));
				    SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				    format(szMessage, sizeof(szMessage), "[STAFF] %s creó un coche [Modelo: %d] - Factura por 550 coins.", GetPlayerNameEx(playerid), modelid);
					Log("logs/coins.log", szMessage);
					ABroadCast(COLOR_ORANGE, szMessage, 2 );
				}
				return 1;
			}
			else
			{
				new szDialogTittle[128];
			    format(szDialogTittle, sizeof(szDialogTittle), "Coins VIP: %d",Info[playerid][pCoinsVip]);
			    ShowPlayerDialog(playerid,D_COINSVIP,DIALOG_STYLE_LIST,szDialogTittle,"Auto Personalizado (550)\nRegenerar Salud (10)\nRegenerar Armadura (10)\nToy Chaleco Antibalas (4)\nLaser Toy (2)\nDoble Exp (5)\nNeon Toy (5)\nTodo a 1 Coin\nCambiar Acento (2)\nCambiar Skin (FREE)\nComprar Lotería ($10)","Seleccionar","Salir");
			}
		}
		case    D_CVLASERCONFIRM:
		{
		    if(response)
		    {
				new modelid = GetPVarInt(playerid,"LaserColor"), slot = slotselection[playerid];
				new name[24];
		    	format(name, sizeof(name), "ERROR (NO COMPRAR)");
				for(new i;i<sizeof(HoldingObjectsAll);i++)
		    	{
					if(HoldingObjectsAll[i][holdingmodelid] == modelid)
		        	{
	   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				PlayerToyInfo[playerid][slot][ptModelID] = modelid;
				PlayerToyInfo[playerid][slot][ptBone] = 6;
				PlayerToyInfo[playerid][slot][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slot][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slot][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slot][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slot][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slot][ptRotZ] = 0.0;
	        	PlayerToyInfo[playerid][slot][ftscaleX] = 1.0;
       		 	PlayerToyInfo[playerid][slot][ftscaleY] = 1.0;
   		     	PlayerToyInfo[playerid][slot][ftscaleZ] = 1.0;
				format(szMessage, sizeof(szMessage), "Compraste un %s en el slot %d, usa /toys para verlo.", name, slot);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				DeletePVar(playerid,"LaserColor");
				Info[playerid][pCoinsVip] -= 2;
			    format(szMessage, sizeof(szMessage), "[LASER] %s - Objeto %s - Factura por 2 coins.", GetPlayerNameEx(playerid),name);
			    Log("logs/coins.log", szMessage);
				return 1;
			}
			else return DeletePVar(playerid,"LaserColor");
		}
		case    D_CVLASERSLOT:
		{
		    if(response)
		    {
		    	if(listitem >= 8 && Info[playerid][pVIP] != 2) return SendClientMessageEx(playerid, COLOR_GREY, "* Debes ser un nivel mayor de VIP para usar este slot.");
		    	if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya tienes algo en esa ranura, eliminala con /toys");
				slotselection[playerid] = listitem;
				new name[24];
		    	format(name, sizeof(name), "ERROR (NO COMPRAR)");
				for(new i;i<sizeof(HoldingObjectsAll);i++)
		    	{
					if(HoldingObjectsAll[i][holdingmodelid] == GetPVarInt(playerid,"LaserColor"))
		        	{
	   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				format(szDialog, sizeof(szDialog), ""COL_WHITE"Objeto: %s\nSlot: %d\n\n¿Correcto?",name,slotselection);
		        ShowPlayerDialog(playerid,D_CVLASERCONFIRM,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Confirmación",szDialog,"Confirmar","Salir");
			}
		    else
			{
			    DeletePVar(playerid,"LaserColor");
				return ShowPlayerDialog(playerid,D_CVLASER,DIALOG_STYLE_LIST,""COL_GENERAL"Color de Laser",""COL_RED"Rojo\n"COL_BLUE"Azul\n"COL_GREEN"Verde\n"COL_GENERAL"Naranja\n"COL_YELLOW"Amarillo\n"COL_PINK"Rosado","Seleccionar","Atrás");
			}
		}
		case    D_CVLASER:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case    0: SetPVarInt(playerid,"LaserColor", 18643); // Rojo
		            case    1: SetPVarInt(playerid,"LaserColor", 19080); // Azul
		            case    2: SetPVarInt(playerid,"LaserColor", 19083); // Verde
		            case    3: SetPVarInt(playerid,"LaserColor", 19082); // Naranja
		            case    4: SetPVarInt(playerid,"LaserColor", 19084); // Amarillo
		            case    5: SetPVarInt(playerid,"LaserColor", 19081); // Rosado
		        }
			    new stringg[512];
				for(new x;x<MAX_PLAYERTOYS;x++)
				{
					new name[24] = "Nada";
					for(new i;i<sizeof(HoldingObjectsAll);i++)
					{
						if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID]){format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);}
					}
					format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
				}
				ShowPlayerDialog(playerid, D_CVLASERSLOT, DIALOG_STYLE_LIST, ""COL_GENERAL"Selecciona un Slot", stringg, "Seleccionar", "Atrás");
		    }
		    else
		    {
				new szDialogTittle[128];
	    		format(szDialogTittle, sizeof(szDialogTittle), "Coins VIP: %d",Info[playerid][pCoinsVip]);
	    		ShowPlayerDialog(playerid,D_COINSVIP,DIALOG_STYLE_LIST,szDialogTittle,"Auto Personalizado (550)\nRegenerar Salud (10)\nRegenerar Armadura (10)\nToy Chaleco Antibalas (4)\nLaser Toy (2)\nDoble Exp (5)\nNeon Toy (5)\nTodo a 1 Coin\nCambiar Acento (2)\nCambiar Skin (FREE)\nComprar Lotería ($10)","Seleccionar","Salir");
			}
		}
		case    D_CVVEST:
		{
		    if(response)
		    {
		        if(Info[playerid][pCoinsVip] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficientes coins para comprar esta función.");
				PlayerToyInfo[playerid][5][ptModelID] = 19515;
				PlayerToyInfo[playerid][5][ptBone] = 1;
				PlayerToyInfo[playerid][5][ptPosX] = 0.07998;
				PlayerToyInfo[playerid][5][ptPosY] = 0.03999;
				PlayerToyInfo[playerid][5][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][5][ptRotX] = 0.0;
				PlayerToyInfo[playerid][5][ptRotY] = 0.0;
				PlayerToyInfo[playerid][5][ptRotZ] = 0.0;
	        	PlayerToyInfo[playerid][5][ftscaleX] = 1.0;
	        	PlayerToyInfo[playerid][5][ftscaleY] = 1.0;
	        	PlayerToyInfo[playerid][5][ftscaleZ] = 1.0;
				SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "Felicitaciones tienes un chaleco antibalas VIP en tu inventario de toys (Slot 5).");
		        Info[playerid][pCoinsVip] -= 4;
			    format(szMessage, sizeof(szMessage), "[CHALECO] %s - Factura por 4 coins.", GetPlayerNameEx(playerid));
			    Log("logs/coins.log", szMessage);
			}
			else
			{
				new szDialogTittle[128];
				format(szDialogTittle, sizeof(szDialogTittle), "Coins VIP: %d",Info[playerid][pCoinsVip]);
	    		ShowPlayerDialog(playerid,D_COINSVIP,DIALOG_STYLE_LIST,szDialogTittle,"Auto Personalizado (550)\nRegenerar Salud (10)\nRegenerar Armadura (10)\nToy Chaleco Antibalas (4)\nLaser Toy (2)\nDoble Exp (5)\nNeon Toy (5)\nTodo a 1 Coin\nCambiar Acento (2)\nCambiar Skin (FREE)\nComprar Lotería ($10)","Seleccionar","Salir");
			}
		}
		case	D_CVVIP: if(response)
		{
			switch(listitem)
			{
	            case 0:
				{
					new bronze[][] = {
					""COL_WHITE"Producto: VIP Bronze.\n",
					"Precio: 100.\n",
					"Funciones:\n\n",
					" Podrás tener hasta 3 vehículos.\n\n",
					" 200 Coins gratis para usarlos como quieras.\n\n",
					" $10000 de regalo para usarlos como quieras.\n\n",
					" Acceso al chat OOC sólo para VIPs.\n\n",
					" 1.5x más de materiales por compra de paquetes.\n\n",
					" Podrás tener 2 trabajos.\n\n",
					" Más slots en tu inventario de toys.\n\n",
					" Descuentos en los 24/7.\n\n",
					" Acceso a Eventos VIP.\n\n",
					" Descuentos en coches en venta.\n\n",
					" Y mucho más que estamos trabajando..."};
				    new dialogs[512];
					format(dialogs,sizeof(dialogs),"%s%s%s%s%s%s%s%s%s%s%s%s%s%s",bronze[0],bronze[1],bronze[2],bronze[3],bronze[4],bronze[5],bronze[6],bronze[7],bronze[8],bronze[9],bronze[10],bronze[11],bronze[12],bronze[13]);
					ShowPlayerDialog(playerid,D_CVVIP2,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Información",dialogs,">","");
	                SetPVarInt(playerid,"TypeVIP", 1);
	                SetPVarInt(playerid,"PriceVIP", 100);
				}
	            case 1:
				{
					new silver[][] = {
					""COL_WHITE"Producto: VIP Silver.\n",
					"Precio: 200.\n",
					"Funciones:\n\n",
					" Podrás tener hasta 5 vehículos.\n\n",
					" 300 Coins gratis para usarlos como quieras.\n\n",
					" $15000 de regalo para usarlos como quieras.\n\n",
					" Acceso al chat OOC sólo para VIPs.\n\n",
					" 2x más de materiales por compra de paquetes.\n\n",
					" Podrás tener 2 trabajos.\n\n",
					" Más slots en tu inventario de toys.\n\n",
					" Descuentos en los 24/7.\n\n",
					" Acceso a Eventos VIP.\n\n",
					" Descuentos en coches en venta.\n\n",
					" Y mucho más que estamos trabajando..."};
				    new dialogs[512];
					format(dialogs,sizeof(dialogs),"%s%s%s%s%s%s%s%s%s%s%s%s%s%s",silver[0],silver[1],silver[2],silver[3],silver[4],silver[5],silver[6],silver[7],silver[8],silver[9],silver[10],silver[11],silver[12],silver[13]);
					ShowPlayerDialog(playerid,D_CVVIP2,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Información",dialogs,">","");
	                SetPVarInt(playerid,"TypeVIP", 2);
	                SetPVarInt(playerid,"PriceVIP", 200);
				}
				case 2:
				{
					new goldf[][] = {
					""COL_WHITE"Producto: VIP Gold.\n",
					"Precio: 40.\n",
					"Funciones:\n\n",
					" Podrás tener hasta 8 vehículos.\n\n",
					" 400 Coins gratis para usarlos como quieras.\n\n",
					" $20000 de regalo para usarlos como quieras.\n\n",
					" Acceso al chat OOC sólo para VIPs.\n\n",
					" 2.5x más de materiales por compra de paquetes.\n\n",
					" Podrás tener 2 trabajos.\n\n",
					" Más slots en tu inventario de toys.\n\n",
					" Descuentos en los 24/7.\n\n",
					" Acceso a Eventos VIP.\n\n",
					" Descuentos en coches en venta.\n\n",
					" Nivel 5 en la habilidad de vendedor de armas.\n\n",
					" Un menú exclusivo para personas VIP Gold.\n\n",
					" Podrás usar UZI o la Tec9.\n\n",
					" Acceso al comando /spawncasa.\n\n",
					" Tus reportes serán prioritarios.\n\n",
					" Acceso a toys gold."};
				    new dialogs[578];
					format(dialogs,sizeof(dialogs),"%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",goldf[0],goldf[1],goldf[2],goldf[3],goldf[4],goldf[5],goldf[6],goldf[7],goldf[8],goldf[9],goldf[10],goldf[11],goldf[12],goldf[13],goldf[14],goldf[15],goldf[16],goldf[17],goldf[18]);
					ShowPlayerDialog(playerid,D_CVVIP2,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Información",dialogs,">","");
	                SetPVarInt(playerid,"TypeVIP", 3);
	                SetPVarInt(playerid,"PriceVIP", 300);
				}
			}
		}
		case    D_CVVIP2: if(response)
		{
			new Features2[][] =
			{
				""COL_GENERAL"Terminos y Condiciones\n\n",
				""COL_GENERAL"1."COL_WHITE" El paquete no es transferible.\n\n",
				""COL_GENERAL"2."COL_WHITE" Ser VIP no disminuye las reglas o los castigos.\n\n",
				""COL_GENERAL"3."COL_WHITE" Abuso de características VIP resulta a la pérdida temporal o total sin derecho a reembolso.\n\n",
				""COL_GENERAL"4."COL_WHITE" Cualquier tipo de problema contacte a un administrador en el foro.\n\n",
				""COL_GENERAL"5."COL_WHITE" Los objetos VIP deben ser usados correctamente.\n\n",
				""COL_GENERAL"6."COL_WHITE" Al adquirir el paquete VIP tu cuenta es propia y nadie más puede usarla.\n\n",
				"¿Estás de acuerdo?"
			};
			new dialogs[532];
			format(dialogs,sizeof(dialogs),"%s%s%s%s%s%s%s%s",Features2[0],Features2[1],Features2[2],Features2[3],Features2[4],Features2[5],Features2[6],Features2[7]);
			ShowPlayerDialog(playerid,D_CVVIPTERMS,DIALOG_STYLE_MSGBOX,""COL_GENERAL"Información",dialogs,"Si","No");
		}
		case    D_CVVIPTERMS:
		{
		    if(response)
			{
		        if(Info[playerid][pVIP] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Para volver adquirir otro paquete VIP, debe vencer el actual.");
				new viptext[8];
		    	switch(GetPVarInt(playerid,"TypeVIP")){
		    	    case 1:
					{
					    if(Info[playerid][pCoinsVip] < 200)
						{
				            DeletePVar(playerid,"TypeVIP");
				            DeletePVar(playerid,"PriceVIP");
							return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficientes coins para comprar esta función.");
						}
						Info[playerid][pCoinsVip] += 200;
						GivePlayerCash(playerid, 10000);
						viptext = "Bronze";
					}
					case 2:
					{
					    if(Info[playerid][pCoinsVip] < 300){
				            DeletePVar(playerid,"TypeVIP");
				            DeletePVar(playerid,"PriceVIP");
							return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficientes coins para comprar esta función.");
						}
						Info[playerid][pCoinsVip] += 300;
						GivePlayerCash(playerid, 15000);
						viptext = "Silver";
					}
					case 3:
					{
					    if(Info[playerid][pCoinsVip] < 450)
						{
				            DeletePVar(playerid,"TypeVIP");
				            DeletePVar(playerid,"PriceVIP");
							return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficientes coins para comprar esta función.");
						}
						Info[playerid][pCoinsVip] += 400;
						GivePlayerCash(playerid, 20000);
						viptext = "Gold";
					}
		    	}
				new year, month,day;
				getdate(year, month, day);
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				if(month == 12){Info[playerid][pVIPDateM] = 1;}
				else{Info[playerid][pVIPDateM] = month + 1;}
				Info[playerid][pVIPDateD] = day;
				Info[playerid][pVIP] = GetPVarInt(playerid,"TypeVIP");
				Info[playerid][pCoinsVip] -= GetPVarInt(playerid,"PriceVIP");
				format(szDialog,sizeof(szDialog),""COL_WHITE"Gracias por la compra!\n\nPrecio:%d\nFecha de compra: %d/%d/%d\n\nTipo de VIP: "COL_GENERAL"%s",GetPVarInt(playerid,"PriceVIP"),day,month,year,viptext);
	            ShowPlayerDialog(playerid,INVALID_DIALOG,DIALOG_STYLE_MSGBOX,"Toma ScreenShot:",szDialog,"Listo","");
	            DeletePVar(playerid,"TypeVIP");
	            DeletePVar(playerid,"PriceVIP");
			    format(szMessage, sizeof(szMessage),"[VIP] %s - Tipo %s (%d/%d/%d)", GetPlayerNameEx(playerid),viptext,day,month,year);
			    Log("logs/coins.log", szMessage);
			}
		    else
		    {
				ShowPlayerDialog(playerid,D_CVVIP,DIALOG_STYLE_LIST,""COL_GENERAL"Paquetes VIP",""COL_WHITE"VIP Bronze (200C)\nVIP Silver (300C)\nVIP Gold (450C)","Seleccionar","Cancelar");
		    }
		}
		case DIALOG_MYBUSINESS: if(response)
		{
		    new x = getPlayerBusinessID(playerid),szDialogTittle[128];
		    switch(listitem)
		    {
				case 0:
				{
			    	format(szDialogTittle, sizeof(szDialogTittle), "Disponible: $%d", businessVariables[x][bVault]);
				    ShowPlayerDialog(playerid, DIALOG_MYBUSINESS_RET,DIALOG_STYLE_INPUT,szDialogTittle,"Ingresa la cantidad que deseas retirar","Retirar","Atrás");
				}
				case 1:
				{
			    	format(szDialogTittle, sizeof(szDialogTittle), "Disponible: $%d", businessVariables[x][bVault]);
				    ShowPlayerDialog(playerid, DIALOG_MYBUSINESS_DEP,DIALOG_STYLE_INPUT,szDialogTittle,"Ingresa la cantidad que deseas depositar","Depositar","Atrás");
				}
				case 2:
				{
			    	format(szDialogTittle, sizeof(szDialogTittle), ""COL_WHITE"Stock de productos disponibles: %d.", businessVariables[x][bStock]);
				    ShowPlayerDialog(playerid, DIALOG_MYBUSINESS_STO,DIALOG_STYLE_MSGBOX,"Stock",szDialogTittle,"Atrás","Salir");
				}
		    }
		}
		case DIALOG_MYBUSINESS_RET:
		{
		    new id = getPlayerBusinessID(playerid), money = strval(inputtext);
			if(response)
			{
			    if(isnull(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* No has ingresado nada.");
		        if (isnumeric(inputtext))
		        {
		            if(businessVariables[id][bVault] < money) return SendClientMessage(playerid, COLOR_GREY, "* No hay la cantidad de dinero que ingresaste.");
					Earn(playerid, money);
					businessVariables[id][bVault] -= money;
					format(szMessage, sizeof(szMessage), "* Retiraste: $%d - Dinero disponible: $%d",money,businessVariables[id][bVault]);
					SendClientMessageEx(playerid, -1, szMessage);
					SaveVarBusiness(1,id, "Vault",businessVariables[id][bVault]);
					SaveVarPlayer(1,playerid, "Money", GetPVarInt(playerid, "Cash") );
				}
				else return SendClientMessageEx(playerid, -1, "* Sólo puedes ingresar números.");
			}
			else
			{
			    new szDialogTittle[128];
			    format(szDialogTittle, sizeof(szDialogTittle), "Tu negocio - $%d", businessVariables[id][bVault]);
			    ShowPlayerDialog(playerid, DIALOG_MYBUSINESS,DIALOG_STYLE_LIST,szDialogTittle,"* Retirar Dinero\n* Depositar Dinero\n* Stock\n* Pedir productos", "Seleccionar", "Salir");
			}
		}
		case DIALOG_MYBUSINESS_DEP:
		{
		    new id = getPlayerBusinessID(playerid), money = strval(inputtext);
			if(response)
			{
			    if(isnull(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* No has ingresado nada.");
		        if(isnumeric(inputtext))
		        {
		            if(money > GetPlayerCash(playerid)) return SendClientMessage(playerid, COLOR_GREY, "* No tienes la cantidad de dinero que ingresaste.");
					Bought(playerid, money);
					businessVariables[id][bVault] += money;
					format(szMessage, sizeof(szMessage), "* Depositaste: $%d - Dinero disponible: $%d",money,businessVariables[id][bVault]);
					SendClientMessageEx(playerid, -1, szMessage);
					SaveVarBusiness(1,id, "Vault",businessVariables[id][bVault]);
					SaveVarPlayer(1,playerid, "Money", GetPVarInt(playerid, "Cash") );
				}
				else return SendClientMessageEx(playerid, -1, "* Sólo puedes ingresar números.");
			}
			else
			{
			    new szDialogTittle[128];
			    format(szDialogTittle, sizeof(szDialogTittle), "Tu negocio - $%d", businessVariables[id][bVault]);
			    ShowPlayerDialog(playerid, DIALOG_MYBUSINESS,DIALOG_STYLE_LIST,szDialogTittle,"* Retirar Dinero\n* Depositar Dinero\n* Stock\n* Pedir productos", "Seleccionar", "Salir");
			}
		}
		case DIALOG_MYBUSINESS_STO:
		{
		    new id = getPlayerBusinessID(playerid);
			if(response)
			{
			    new szDialogTittle[128];
			    format(szDialogTittle, sizeof(szDialogTittle), "Tu negocio - $%d", businessVariables[id][bVault]);
			    ShowPlayerDialog(playerid, DIALOG_MYBUSINESS,DIALOG_STYLE_LIST,szDialogTittle,"* Retirar Dinero\n* Depositar Dinero\n* Stock\n* Pedir productos", "Seleccionar", "Salir");
			}
			else { return 1; }
		}
		case DIALOG_MYBUSINESS_PSTO:
		{
			if(response)
			{
			    new stocke = strval(inputtext);
			    if(isnull(inputtext)) return SendClientMessage(playerid, COLOR_GREY, "* No has ingresado nada.");
			    if(strlen(inputtext) > 1001) return SendClientMessage(playerid, COLOR_GREY, "* No puedes comprar mas de 1.000 productos.");
		    	if(isnumeric(inputtext))
		    	{
		    		new szDialogTittle[84],IGV = 18,value = 4,total;
			    	total = (stocke * value) + 18;
			    	SetPVarInt(playerid,"BusinessStock",total);
			    	SetPVarInt(playerid,"Stock",stocke);
			    	format(szDialogTittle, sizeof(szDialogTittle), "Pedido de productos:\n\nCosto: %d\nImpuesto: %d\n\nTOTAL: %d.",stocke*value,IGV,total);
			    	ShowPlayerDialog(playerid, DIALOG_MYBUSINESS_PSTO2,DIALOG_STYLE_MSGBOX,"Factura:",szDialogTittle, "Pagar", "Salir");
				}
				else SendClientMessageEx(playerid, COLOR_GREY,"* Sólo puedes ingresar números.");
			}
			else { return 1; }
		}
		case DIALOG_MYBUSINESS_PSTO2:
		{
			if(response)
			{
			    new newtotal = GetPVarInt(playerid,"BusinessStock"), newstock = GetPVarInt(playerid,"Stock");
			    if(newtotal > GetPlayerCash(playerid)) return SendClientMessageEx(playerid, COLOR_GREY,"* No tienes el dinero que necesitas en tu mano, sácalo de la caja fuerte de tu negocio o del banco.");
	            Bought(playerid,newtotal);
	            Tax += newtotal;
				format(szMessage, sizeof(szMessage), "* Hiciste la compra de stock para tu negocio de %d por $%d",newstock,newtotal);
				SendClientMessageEx(playerid, -1, szMessage);
				new id = getPlayerBusinessID(playerid);
				businessVariables[id][bStock] += newstock;
				SaveVarBusiness(1,id, "Stock",businessVariables[id][bStock]);
				return 1;
			}
			else { return 1; }
		}
	    case HELP_MENU: if(response)
		{
			switch(listitem)
			{
				case 0:
				{
	                new cmd1[1500];
	                strcat(cmd1, "{23A9D6}[ADMINISTRACIÓN]{FFFFFF} Para reportar infracciones de otros usuarios utiliza el comando {23A9D6}'/reportar'{FFFFFF}.\n");
	                strcat(cmd1, "{23A9D6}[ADMINISTRACIÓN]{FFFFFF} Puedes usar {23A9D6}'/duda'{FFFFFF} en caso de que tengas alguna pregunta sobre el juego.\n");
	                strcat(cmd1, "{23A9D6}[MENSAJE]{FFFFFF} Por favor, utilizar los comandos administrativos correctamente, de lo contrario, puedes ser castigado.\n\n");
	                strcat(cmd1, "{23A9D6}[CUENTA]{FFFFFF} En caso de que quieras cambiar la clave de tu cuenta debes utilizar {23A9D6}'/cambiarclave'{FFFFFF}, coloca una que recuerdes.\n");
	                strcat(cmd1, "{23A9D6}[CUENTA]{FFFFFF} Para ver las estadisticas de tu cuenta usa el comando {23A9D6}'/cuenta'{FFFFFF}.\n");
	                strcat(cmd1, "{23A9D6}[CUENTA]{FFFFFF} Si tienes lo necesario para subir de nivel y quieres hacerlo utiliza el comando {23A9D6}/subirnivel{FFFFFF}.\n\n");
					strcat(cmd1, "{23A9D6}[SERVIDOR]{FFFFFF} /actualizaciones - /creditos - /reportarbug - /admins - /guardarcuenta\n\n");
					strcat(cmd1, "{23A9D6}[PREMIUM]{FFFFFF} /vips - /codigovip\n\n");
					strcat(cmd1, "{23A9D6}[TRABAJOS]{FFFFFF} /trabajos - /unirse - /renunciar - /cobrar\n\n");
					strcat(cmd1, "{23A9D6}[EVENTOS]{FFFFFF} /salirevento - /unirseevento\n\n");
	                strcat(cmd1, "{23A9D6}[OTROS]{FFFFFF} /pagar - /hora - /payday - /id - /cfumar - /dfumar - /licencias - /habilidad - /entrar - /salir - /desbug\n");
	                strcat(cmd1, "{23A9D6}[OTROS]{FFFFFF} /tognews - /tirar - /recoger - /saludar - /aceptar - /cancelar - /primerapersona - /apelear - /nokear - /dni\n");
	                strcat(cmd1, "{23A9D6}[OTROS]{FFFFFF} /moneda - /dar - /contrato - /mostrar - /dni - /inventario - /mascara - /peaje - /atar - /vendar - /bmbuy\n");
	                strcat(cmd1, "{23A9D6}[OTROS]{FFFFFF} /puente - /pagarm - /servicios - /oldcar - /licencia - /eliminarcheckpoint - /puntos - /fianza - /serverstats\n");
	                strcat(cmd1, "{23A9D6}[OTROS]{FFFFFF} /revisar - /calcular - /qfa - /minombre - /ad - /anuncio\n");
	                ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- General", cmd1, "Aceptar", "");
				}
				case 1:
				{
	                new cmd4[500];
	                if(Info[playerid][pMember] != 0)
					{
					    strcat(cmd4, "{23A9D6}[FACCIONES] {FFFFFF}/togfac - /radio - /abrirpuerta - /cpuerta - /miembros - /salirfaccion - /mihq - /capturar\n\n");
						if(IsAPolice(playerid))
		    			{
		    				strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/tlc - /sapddiv - /su - /sospechosos - /bk - /bkc - /multar - /m - /quitar - /miranda - /removergps - /seguridadpeajes - /radargun - /vcoche\n");
		    				strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/embargar - /enganchar - /desenganchar - /dejarmulta - /remolcar - /limpiarcamion - /verllaves - /ta - /vmaletero - /tgunmaletero - /bar1 - /bar2 - /bar3\n");
		    				strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/cono - /bengala - /qb - /spikes - /pspikes - /qspikes - /ram - /esposar - /ant - /qcables - /qesposas - /detener - /sapd - /destruirplanta - /placaex\n");
		    				strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/arrestar - /limpiar - /placa - /buscados - /luces - /intermitentes");
	                		ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Departamento de Policía", cmd4, "Aceptar", "");
						}
	                	else if(Team_SAMD(playerid))
		    			{
							strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/tlc - /duty - /equipo - /m - /removergps - /sacarsangre - /pcinfo - /irpt - /subirpt - /dejarpt - /curar - /placaex - /placa");
		    				ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Médicos", cmd4, "Aceptar", "");
						}
	                	else if(Team_Mecanicos(playerid))
		    			{
							strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/ctaller - /menu - /venderspray - /remolcar - /nos - /hyd - /mduty - /recargar - /reparar");
		    				ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Mecanicos", cmd4, "Aceptar", "");
						}
	                	else if(Hitman(playerid))
	      				{
							strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/acontrato - /hrangos - /darhit - /borrarhit - /amascara - /equipo - /hits - /cambiarnombre - /buscar");
		    				ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Hitman", cmd4, "Aceptar", "");
						}
	                	else if(Team_NG(playerid))
		    			{
							strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/saemdiv - /misil - /su - /sospechosos - /bk - /bkc - /multar - /m - /quitar - /miranda - /seguridadpeajes - /verllaves - /vcoche - /saem - /limpiarcamion\n");
							strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/dejarmulta - /ta - /vmaletero  - /tgunmaletero - /bar1 - /bar2 - /bar3 - /cono - /bengala - /qb - /spikes - /pspikes - /qspikes - /ram - /ant - /esposar\n");
	     					strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/qcables - /qesposas - /detener - /destruirplanta - /placaex - /arrestar - /limpiar - /placa - /buscados\n\n");
	                    	strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}Div Médicos: /dejarpt - /subirpt - /bk - /bkc - /curar");
							ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Ejercito Militar", cmd4, "Aceptar", "");
						}
	                	else if(Team_LSTV(playerid))
		    			{
							strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/duty - /equipo - /activarlinea - /entrevista - /nr\n");
							strcat(cmd4, "{23A9D6}[LIDER] {FFFFFF}/scnn - /dcnn");
							ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Cable News Network", cmd4, "Aceptar", "");
						}
	                	else if(Gobierno(playerid))
		    			{
							strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/duty - /gob - /gobdiv - /equipo\n");
							strcat(cmd4, "{23A9D6}[LIDER] {FFFFFF}/sfondos - /dfondos - /impuesto\n\n");
							strcat(cmd4, "{23A9D6}[MENSAJE] {FFFFFF}En caso de que usted deseé cambiar los impuestos debe rolear correctamente y");
							strcat(cmd4, "{23A9D6} {FFFFFF}comunicarlo a un administrador.");
							ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Gobierno", cmd4, "Aceptar", "");
						}
	                	else if(Team_FBI(playerid))
		    			{
							strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/fbidiv - /su - /sospechosos - /bk - /bkc - /multar - /m - /quitar - /miranda - /seguridadpeajes - /verllaves - /dejarmulta - /limpiarcamion - /vcoche\n");
							strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/ta - /vmaletero - /tgunmaletero - /bar1 - /bar2 - /bar3 - /cono - /bengala - /qb - /spikes - /pspikes - /qspikes - /ram - /ant - /esposar - /fbi\n");
							strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/qcables - /qesposas - /detener - /destruirplanta - /placaex - /arrestar - /limpiar - /placa - /buscados - /luces - /intermitentes\n\n");
	                        strcat(cmd4, "{23A9D6}[DIVISION 4] {FFFFFF}/encontrar - /encontrarveh");
							ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Federal Bureau of Investigation", cmd4, "Aceptar", "");
						}
	                	else if(Rusos(playerid))
		    			{
							strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/equipo - /robar\n\n");
							strcat(cmd4, "{23A9D6}[MENSAJE] {FFFFFF}Tienen permitido realizar robos al banco, consultarlo con el staff.");
							ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Mafia Rusa", cmd4, "Aceptar", "");
						}
	                	else if(Italianos(playerid))
		    			{
							strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/equipo - /robar\n\n");
							strcat(cmd4, "{23A9D6}[MENSAJE] {FFFFFF}Tienen permitido realizar robos al banco, consultarlo con el staff.");
							ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Mafia Italiana", cmd4, "Aceptar", "");
						}
						else if(Team_Grove(playerid))
		    			{
							strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/equipo - /robar - /graffiti\n\n");
							strcat(cmd4, "{23A9D6}[MENSAJE] {FFFFFF}Tienen permitido realizar robos al banco, consultarlo con el staff.");
							ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Grove Street", cmd4, "Aceptar", "");
						}
						else if(Team_Ballas(playerid))
		    			{
							strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/equipo - /robar - /graffiti\n\n");
							strcat(cmd4, "{23A9D6}[MENSAJE] {FFFFFF}Tienen permitido realizar robos al banco, consultarlo con el staff.");
							ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Ballas", cmd4, "Aceptar", "");
						}
						else if(Team_Vagos(playerid))
		    			{
							strcat(cmd4, "{23A9D6}[GENERAL] {FFFFFF}/equipo - /robar - /graffiti\n\n");
							strcat(cmd4, "{23A9D6}[MENSAJE] {FFFFFF}Tienen permitido realizar robos al banco, consultarlo con el staff.");
							ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Los Santos Vagos", cmd4, "Aceptar", "");
						}
					}
					else SendClientMessageEx(playerid, COLOR_WHITE, "Atención: Usted no forma parte de ninguna organización/facción.");
				}
				case 2:
				{
	                new cmd2[400];
	                if(Info[playerid][pLeader] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Atención: Usted no es líder de una facción!.");
	                strcat(cmd2, "{23A9D6}[LÍDER] {FFFFFF}Los líderes tienen la dura tarea de {23A9D6}'/contratar' {FFFFFF}y {23A9D6}'/despedir'{FFFFFF} a miembros de su facción.\n\n");
	               	strcat(cmd2, "{23A9D6}[LÍDER] {FFFFFF}Una vez que has contratado a los miembros de tu facción puedes asignarle rangos con '/darrango'.\n\n");
	                strcat(cmd2, "{23A9D6}[LÍDER] {FFFFFF}También puedes despedir a miembros que no esten conectados con el comando '/despediroff'.\n\n");
	   				strcat(cmd2, "{23A9D6}[MENSAJE] {FFFFFF}El uso del rango para beneficio propio o de terceros será severamente sancionada.");
	               	ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Líder", cmd2, "Aceptar", "");
				}
				case 3:
				{
	                new cmd9[500];
			    	switch(Info[playerid][pJob])
	            	{
		        		case 1:
						{
	                		strcat(cmd9, "{23A9D6}[PIZZERO]{FFFFFF} Como un buen pizzero debes entregar los pedidos a tiempo, usa {23A9D6}'/tomarpizza'{FFFFFF}. Utiliza /vestidor para cambiarte de ropa.");
	                		ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Pizzero", cmd9, "Aceptar", "");
						}
						case 2:
						{
	                		strcat(cmd9, "{23A9D6}[CAMIONERO]{FFFFFF} Tu trabajo se basa en entregar productos a negocios, usa {23A9D6}'/cargarcamion'{FFFFFF}.\nPuedes robar otros camiones con {23A9D6}'/robarcamion'.");
	                		ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Camionero", cmd9, "Aceptar", "");
						}
		        		case 3:
						{
	                		strcat(cmd9, "{23A9D6}[TAXISTA]{FFFFFF} Antes de empezar a trabajar debes elegir una tarifa, usa {23A9D6}'/tarifa'{FFFFFF}.\n");
	                		strcat(cmd9, "{23A9D6}[TAXISTA]{FFFFFF} Como todo taxista debes aceptar las llamadas y llevar a tus pasajeros a destino, usa {23A9D6}'/aceptar taxi'{FFFFFF}.");
	                		ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Taxista", cmd9, "Aceptar", "");
						}
						case 4:
						{
	                		strcat(cmd9, "{23A9D6}[COSECHADOR]{FFFFFF} Tienes todo un campo para cosechar, para empezar usa {23A9D6}'/cosechar'{FFFFFF} y {23A9D6}'/dcosechar'{FFFFFF} para finalizar.\n");
	                		strcat(cmd9, "{23A9D6}[COSECHADOR]{FFFFFF} Una vez que has juntado suficiente cosecha puedes venderla, usa {23A9D6}'/vendercosecha'{FFFFFF}.");
	                		ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Cosechador", cmd9, "Aceptar", "");
						}
						case 5:
						{
	                		strcat(cmd9, "{23A9D6}[BODYGUARD]{FFFFFF} Tu trabajo se basa en la venta de chalecos, usa {23A9D6}'/proteccion'{FFFFFF}.");
	                		ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Bodyguard", cmd9, "Aceptar", "");
						}
						case 6:
						{
	                		strcat(cmd9, "{23A9D6}[LEÑADOR]{FFFFFF} Tu trabajo como leñador es talar arboles, usa {23A9D6}'/talar'{FFFFFF}.\n");
	                		strcat(cmd9, "{23A9D6}[LEÑADOR]{FFFFFF} Para dejar de talar arboles usa {23A9D6}'/dtalar'{FFFFFF}.");
	                		ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Leñador", cmd9, "Aceptar", "");
						}
						case 7:
						{
	                		strcat(cmd9, "{23A9D6}[OBRERO]{FFFFFF} Tu trabajo como obrero es picar escombros, usa {23A9D6}'/picar'{FFFFFF}.\n");
	                		strcat(cmd9, "{23A9D6}[OBRERO]{FFFFFF} Para dejar de picar escombros usa {23A9D6}'/dpicar'{FFFFFF}.");
	                		ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Obrero", cmd9, "Aceptar", "");
						}
						case 8:
						{
							strcat(cmd9, "{23A9D6}[BASURERO]{FFFFFF} Tu trabajo como basurero es mantener limpia la ciudad, subete a un camión y busca un compañero.\n");
							strcat(cmd9, "{23A9D6}[BASURERO]{FFFFFF} Para dejar de recolectar basura usa {23A9D6}'/dbasurero'{FFFFFF}.");
							strcat(cmd9, "{23A9D6}[BASURERO]{FFFFFF} Para utilizar el vestidor usa {23A9D6}'/vestidor'{FFFFFF} en el mismo punto de /unirse.");
							ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Basurero", cmd9, "Aceptar", "");
						}
						default: SendClientMessageEx(playerid, COLOR_WHITE, "* No tienes un trabajo!");
					}
					switch(Info[playerid][pJob2])
	            	{
		        		case 1:
						{
	                		strcat(cmd9, "{23A9D6}[PIZZERO]{FFFFFF} Como un buen pizzero debes entregar los pedidos a tiempo, usa {23A9D6}'/tomarpizza'{FFFFFF}. Utiliza /vestidor para cambiarte de ropa.");
	                		ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Pizzero", cmd9, "Aceptar", "");
						}
						case 2:
						{
	                		strcat(cmd9, "{23A9D6}[CAMIONERO]{FFFFFF} Tu trabajo se basa en entregar productos a negocios, usa {23A9D6}'/cargarcamion'{FFFFFF}.\nPuedes robar otros camiones con {23A9D6}'/robarcamion'.");
	                		ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Camionero", cmd9, "Aceptar", "");
						}
		        		case 3:
						{
	                		strcat(cmd9, "{23A9D6}[TAXISTA]{FFFFFF} Antes de empezar a trabajar debes elegir una tarifa, usa {23A9D6}'/tarifa'{FFFFFF}.\n");
	                		strcat(cmd9, "{23A9D6}[TAXISTA]{FFFFFF} Como todo taxista debes aceptar las llamadas y llevar a tus pasajeros a destino, usa {23A9D6}'/aceptar taxi'{FFFFFF}.");
	                		ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Taxista", cmd9, "Aceptar", "");
						}
						case 4:
						{
	                		strcat(cmd9, "{23A9D6}[COSECHADOR]{FFFFFF} Tienes todo un campo para cosechar, para empezar usa {23A9D6}'/cosechar'{FFFFFF} y {23A9D6}'/dcosechar'{FFFFFF} para finalizar.\n");
	                		strcat(cmd9, "{23A9D6}[COSECHADOR]{FFFFFF} Una vez que has juntado suficiente cosecha puedes venderla, usa {23A9D6}'/vendercosecha'{FFFFFF}.");
	                		ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Cosechador", cmd9, "Aceptar", "");
						}
						case 5:
						{
	                		strcat(cmd9, "{23A9D6}[BODYGUARD]{FFFFFF} Tu trabajo se basa en la venta de chalecos, usa {23A9D6}'/proteccion'{FFFFFF}.");
	                		ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Bodyguard", cmd9, "Aceptar", "");
						}
						case 6:
						{
	                		strcat(cmd9, "{23A9D6}[LEÑADOR]{FFFFFF} Tu trabajo como leñador es talar arboles, usa {23A9D6}'/talar'{FFFFFF}.\n");
	                		strcat(cmd9, "{23A9D6}[LEÑADOR]{FFFFFF} Para dejar de talar arboles usa {23A9D6}'/dtalar'{FFFFFF}.");
	                		ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Leñador", cmd9, "Aceptar", "");
						}
						case 7:
						{
	                		strcat(cmd9, "{23A9D6}[OBRERO]{FFFFFF} Tu trabajo como obrero es picar escombros, usa {23A9D6}'/picar'{FFFFFF}.\n");
	                		strcat(cmd9, "{23A9D6}[OBRERO]{FFFFFF} Para dejar de picar escombros usa {23A9D6}'/dpicar'{FFFFFF}.");
	                		ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Obrero", cmd9, "Aceptar", "");
						}
						case 8:
						{
							strcat(cmd9, "{23A9D6}[BASURERO]{FFFFFF} Tu trabajo como basurero es mantener limpia la ciudad, subete a un camión y busca un compañero.\n");
							strcat(cmd9, "{23A9D6}[BASURERO]{FFFFFF} Para dejar de recolectar basura usa {23A9D6}'/dbasurero'{FFFFFF}.");
							strcat(cmd9, "{23A9D6}[BASURERO]{FFFFFF} Para utilizar el vestidor usa {23A9D6}'/vestidor'{FFFFFF} en el mismo punto de /unirse.");
							ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Basurero", cmd9, "Aceptar", "");
						}
						default: SendClientMessageEx(playerid, COLOR_WHITE, "* No tienes un trabajo!");
					}
				}
				case 4:
				{
	                new cmd10[200];
	                strcat(cmd10, "{23A9D6}[IC]{FFFFFF} /me - /ame - /do - /so - /s - /g - /d - /r\n");
	                strcat(cmd10, "{23A9D6}[OOC]{FFFFFF} /b - /w - /f");
	                ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Chat", cmd10, "Aceptar", "");
				}
				case 5:
				{
				    new cmd5[500];
	                strcat(cmd5, "{23A9D6}[ANIMACIONES]{FFFFFF} /rendirse - /dj - /asiento - /jiggy - /ped - /gesto - /paja - /taichi - /acciones - /carga - /llorar - /masturb - /bofetada - /facepalm - /bebido\n");
	                strcat(cmd5, "{23A9D6}[ANIMACIONES]{FFFFFF} /bomba - /reir - /brazos - /agacharse - /vomitar - /comiendo - /trato - /crack - /fumando - /sentarse - /gro - /hablando - /fucku - /gangsta - /chupete\n");
	                strcat(cmd5, "{23A9D6}[ANIMACIONES]{FFFFFF} /spray - /medico - /golpeado - /saltovital - /tortazo - /cansado - /rodar - /cacheando - /bate - /boxing - /animar - /dedo - /caminar - /azote - /trafico\n");
	                strcat(cmd5, "{23A9D6}[ANIMACIONES]{FFFFFF} /apuntar - /apollarse - /beso - /billar - /correr - /rascarse - /strip - /coche - /tumbarse - /mecanico - /no - /si - /cmovil - /saludo - /basket\n");
	                strcat(cmd5, "{23A9D6}[ANIMACIONES]{FFFFFF} /rifle - /muerto - /esposado - /consola - /movil - /herido - /lanzar - /bailar - /barandilla - /caer - /gritando - /bailoteo\n\n");
	                strcat(cmd5, "{23A9D6}[ANIMACIONES]{FFFFFF} Para detener las animaciones usa '/stopanim'");
	                ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Animaciones", cmd5, "Aceptar", "");
		    	}
		    	case 6:
	            {
	                new cmd4[1000];
	                strcat(cmd4, "{23A9D6}[COMPRA]{FFFFFF} En caso de que deseé comprar un negocio debe usar el comando {23A9D6}'/comprarnegocio'{FFFFFF}.\n");
	                strcat(cmd4, "{23A9D6}[ABRIR]{FFFFFF} Ahora estas listo para poner tu negocio a disposición de los usuarios, ábrelo con {23A9D6}'/abrir'{FFFFFF}.\n");
	                strcat(cmd4, "{23A9D6}[CONFIG]{FFFFFF} Una vez que tu negocio está abierto debes colocar la cajafuerte en algún lado, usa {23A9D6}'/ncaja'{FFFFFF} (dentro del negocio).\n");
	                strcat(cmd4, "{23A9D6}[MENU]{FFFFFF} Cuando pusiste la cajafuerte y te han comprado puedes juntar tus ganancias ó comprar mas productos con {23A9D6}'/negociomenu'{FFFFFF}.\n");
	                strcat(cmd4, "{23A9D6}[CERRAR]{FFFFFF} Si decides que es tiempo de cerrar o piensas hacer alguna 'transacción' dentro de él, usa {23A9D6}'/cerrar'{FFFFFF}.\n");
	                strcat(cmd4, "{23A9D6}[VENDER]{FFFFFF} Si decides que es tiempo de vender tu negocio puedes usar el comando {23A9D6}'/vendernegocio'{FFFFFF}.");
	                ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Negocios", cmd4, "Aceptar", "");
				}
				case 7:
				{
	                new cmd5[1000];
	                strcat(cmd5, "{23A9D6}[COMPRA]{FFFFFF} En caso de que deseé comprar una casa debe usar el comando {23A9D6}'/comprarcasa'{FFFFFF}.\n");
	                strcat(cmd5, "{23A9D6}[MENU]{FFFFFF} Para guardar objetos, dinero y manejar los muebles de tu casa, utiliza el comando {23A9D6}'/casamenu' y '/ropero'{FFFFFF}.\n");
	                strcat(cmd5, "{23A9D6}[MENU]{FFFFFF} Al igual que para las rentas, para cerrar tu casa y manejar tus armas usa {23A9D6}'/casamenu'{FFFFFF}.\n");
	                strcat(cmd5, "{23A9D6}[VENDER]{FFFFFF} Si decides que es tiempo de vender tu casa puedes usar el comando {23A9D6}'/vendercasa'{FFFFFF} o {23A9D6}'/vendermicasa'{FFFFFF}.\n\n");
	                strcat(cmd5, "{23A9D6}[OTROS]{FFFFFF} /rentar - /desrentar - /timbre.");
	                ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Casas", cmd5, "Aceptar", "");
				}
				case 8:
				{
	                new cmd7[1000];
	                strcat(cmd7, "{23A9D6}[COMPRA]{FFFFFF} Para comprar un vehiculo, dirígete a alguno de los {23A9D6}concesionarios {FFFFFF}(Marcados con un Auto en el minimapa).\n");
	                strcat(cmd7, "{23A9D6}[VENTA]{FFFFFF} Puedes dejar tu vehiculo en un lugar, y esperar que alguien lo compre con el comando {23A9D6}'/enventa' , '/qenventa' o 'vendermicoche'.\n");
	                strcat(cmd7, "{23A9D6}[PINTURA]{FFFFFF} Comandos {23A9D6}'/colorcoche' y '/paintcoche'{FFFFFF}.\n");
	                strcat(cmd7, "{23A9D6}[GASOLINA]{FFFFFF} En cualquier gasolinera usa el comando {23A9D6}'/llenar' {FFFFFF}para llenar el tanque de tu vehiculo.\n");
	                strcat(cmd7, "{23A9D6}[MALETERO]{FFFFFF} Para guardar armas en el maletero del vehiculo, usa los comandos {23A9D6}'/gmaletero' y '/smaletero'{FFFFFF}.\n");
	                strcat(cmd7, "{23A9D6}[OTROS]{FFFFFF} /gps - /ven - /v - /seguro - /autotaller - /cinturon - /vercinturon - /unmodcoche - /eject - /limiteveh - /estereoveh - /borrarcoche\n\n");
	                strcat(cmd7, "{23A9D6}[MARCHA]{FFFFFF} Presiona {23A9D6}'N'{FFFFFF} del teclado para encender o apagar el vehículo.");
	                ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Coche", cmd7, "Aceptar", "");
				}
				case 9:
				{
	                new cmd8[500];
	                strcat(cmd8, "{23A9D6}[CAJERO]{FFFFFF} Los cajeros se usan para depositar, retirar y transferir dinero, usa {23A9D6}'/cajero'{FFFFFF} cerca de uno.\n");
	                strcat(cmd8, "{23A9D6}[TARJETA]{FFFFFF} Para utilizar un cajero necesitas una tarjeta, las tarjetas se consiguen en el banco de Los Santos.\n");
	                strcat(cmd8, "{23A9D6}[GENERAL]{FFFFFF} Puedes cambiar tu PIN y para transferencias usa el número de cuenta.");
	                ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Banco", cmd8, "Aceptar", "");
				}
				case 	10:
				{
	                new cmd11[200];
	                strcat(cmd11, "{23A9D6}[GENERAL]{FFFFFF} /creararma - /dararma - /misarmas - /materiales - /vendermateriales");
	                ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Armas", cmd11, "Aceptar", "");
				}
				case 11:
				{
					new cmd11[200];
					strcat(cmd11, "{23A9D6}[GENERAL]{FFFFFF} /plantar - /semillas - /comprarcrack - /vendercrack - /venderhierba - /paquete - /revisarplanta - /sacarplanta - /usarhierba - /usarcrack - /tirarpaquetes");
					ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Drogas", cmd11, "Aceptar", "");
				}
				case 12:
				{
				    new cmd12[200];
				    strcat(cmd12, "{23A9D6}[GENERAL]{FFFFFF} /ctoys - /ptoys - /qtoys - /toy - /toys");
				    ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Toys", cmd12, "Aceptar", "");
				}
				case 13:
				{
	                new cmd16[100];
	                strcat(cmd16, "{23A9D6}[GENERAL]{FFFFFF} /llamar - /sms - /altavoz - /togphone - /numero - /numeropriv - /contestar - /colgar");
	                ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Teléfono", cmd16, "Aceptar", "");
				}
				case 14:
				{
	                new cmd16[100];
	                strcat(cmd16, "{23A9D6}[GENERAL]{FFFFFF} /comprar - /dormir - /orinar");
	                ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Necesidades", cmd16, "Aceptar", "");
				}
				case 15:
				{
	                new cmd14[100];
	                strcat(cmd14, "{23A9D6}[GENERAL]{FFFFFF} /liberarpez - /venderpez - /pescar - /peces");
	                ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Pesca", cmd14, "Aceptar", "");
				}
				case 16:
				{
	                new cmd17[100];
	                strcat(cmd17, "{23A9D6}[GENERAL]{FFFFFF} /estereo - /estereoc - /estereoq");
	                ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Estéreo", cmd17, "Aceptar", "");
				}
	            case 17:
				{
	                new cmd17[100];
	                strcat(cmd17, "{23A9D6}[GENERAL]{FFFFFF} /togpr - /pr - /frecuencia");
	                ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Radio", cmd17, "Aceptar", "");
				}
				case 18:
				{
	                new cmd17[100];
	                strcat(cmd17, "{23A9D6}[GENERAL]{FFFFFF} /arena - /scores - /salirarena - /cequipo - /armas");
	                ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- PaintBall", cmd17, "Aceptar", "");
				}
				case 19:
				{
	                new cmd13[200];
	                strcat(cmd13, "{23A9D6}[GENERAL]{FFFFFF} /testigo - /proponer - /divorcio - Consulta con un administrador.");
	                ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- Matrimonio", cmd13, "Aceptar", "");
				}
				case 20:
				{
	                if(Info[playerid][pVIP] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "* No eres Jugador VIP!");
					{
	                	new cmd15[500];
	                	strcat(cmd15, "{23A9D6}[GENERAL]{FFFFFF} /menuvip - /togvip - /automensaje - /vips - /vip - /spawncasa - /pinvip");
	                	strcat(cmd15, "{23A9D6}[MENSAJE]{FFFFFF} Para más información consulte con un administrador.");
	                	ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, "{23A9D6}Ayuda {FFFFFF}- VIP", cmd15, "Aceptar", "");
					}
				}
			}
		}
	}
	return 1;
}

function BroadCast(color, string[])
{
foreach(Player, i)
{
	if(Info[i][pLevel] >= 1)
	{
	    SendClientMessageEx(i, color, string);
	}
}
return 1;
}

function SendVIPMessage(color, string[])
{
	foreach(Player, i)
	{
		if((Info[i][pVIP] >= 1 || Info[i][pAdmin] >= 2) && Info[i][pVIPCHAT] >= 1)
		{
			SendClientMessageEx(i, color, string);
		}
	}
}

stock ShopTechBroadCast(color,string[])
{
foreach(Player, i)
{
	if (Info[i][pShopTech] == 1 || Info[i][pAdmin] >= 5)
	{
		SendClientMessageEx(i, color, string);
	}
}
return 1;
}
// Mostrar Información.
stock ShowInfoForPlayer(playerid, text[], time)
{
	//KillTimer(InfoTimer[playerid]);
	TextDrawHideForPlayer(playerid, InfoText[playerid]);
	InfoTextShowing[playerid] = 1;
	TextDrawSetString(InfoText[playerid], text);
	TextDrawShowForPlayer(playerid, InfoText[playerid]);
	InfoTimer[playerid] = SetTimerEx("HideInfoForPlayer", time, false, "i", playerid);
	return 1;
}

// Esconder Información.
function HideInfoForPlayer(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;
	TextDrawHideForPlayer(playerid, InfoText[playerid]);
	InfoTextShowing[playerid] = 0;
	return 1;
}

stock ABroadCast(color,string[],level)
{
foreach(Player, i)
{
	if (Info[i][pAdmin] >= level && AdminChat[i] == 0)
	{
		SendClientMessageEx(i, color, string);
	}
}
return 1;
}

stock CBroadCast(color,string[],level)
{
foreach(Player, i)
{
	if (Info[i][pHelper] >= level)
	{
		SendClientMessageEx(i, color, string);
		//printf("%s", string);
	}
}
return 1;
}

function SendDutyAdvisorMessage(color, string[])
{
foreach(Player, i)
{
	if(Info[i][pHelper] >= 1 && GetPVarInt(i, "AdvisorDuty") == 1)
	{
		SendClientMessageEx(i, color, string);
	}
}
}

function SendAdvisorMessage(color, string[])
{
foreach(Player, i)
{
		if((Info[i][pHelper] >= 1) && advisorchat[i])
		{
			SendClientMessageEx(i, color, string);
		}
		else
		{
		    if(Info[i][pAdmin] >= 1 && advisorchat[i])
		    {
		        SendClientMessageEx(i, color, string);
		    }
		}
}
}

function OOCOff(color, string[])
{
foreach(Player, i)
{
	if(!gOoc[i])
	{
		SendClientMessageEx(i, color, string);
	}
}
}

function OOCNews(color,string[])
{
foreach(Player, i)
{
	if(!gNews[i])
	{
		SendClientMessageEx(i, color, string);
	}
}
}

function SendSplitMessage(playerid, color,final[])
{
    new buffer[EX_SPLITLENGTH+10];
    new len = strlen(final);
    if(len>EX_SPLITLENGTH)
    {
        new times = (len/EX_SPLITLENGTH);
        for(new i = 0; i < times+1; i++)
        {
            strdel(buffer, 0, EX_SPLITLENGTH+5);
            if(len-(i*EX_SPLITLENGTH)>EX_SPLITLENGTH)
            {
                strmid(buffer, final, EX_SPLITLENGTH*i, EX_SPLITLENGTH*(i+1));
                if(!i)
                	format(buffer, sizeof(buffer), "%s ...", buffer);
				else
				    format(buffer, sizeof(buffer), "... %s ...", buffer);
            }
            else
            {
                strmid(buffer, final, EX_SPLITLENGTH*i, len);
				format(buffer, sizeof(buffer), "... %s", buffer);
            }
            SendClientMessageEx(playerid, color, buffer);
        }
    }
    else
    {
        SendClientMessageEx(playerid, color, final);
    }
}

function SendRadioMessage(member, color, string[])
{
foreach(Player, i)
{
	if(Info[i][pMember] == member)
	{
		if(RadioOn[i])
        {
			SendClientMessageEx(i, color, string);
		}
	}
}
}

function SendFamilyMessage(family, color, string[])
{
foreach(Player, i)
{
	if(Info[i][pMember] == family || Info[i][pLeader] == family)
	{
		if(!gFam[i])
		{
			SendClientMessageEx(i, color, string);
		}
	}
}
}

stock SendAdminMessage(color, string[])
{
foreach(Player, i)
{
	if(IsPlayerConnectedEx(i))
	{
	    if(Info[i][pAdmin] >= 1 && AdminChat[i] == 0)
	    {
			SendClientMessageEx(i, color, string);
		}
	}
}
}

stock SendAD(from, advert[], number)
{
new bool:breakingloop = false, newid = -1;

for(new i=0;i<MAX_AD;i++)
{
	if(!breakingloop)
	{
		if(ADInfo[i][aActive] == 0)
		{
			breakingloop = true;
			newid = i;
		}
	}
}
if(newid != -1)
{
    strmid(ADInfo[newid][aAdvert], advert, 0, strlen(advert), 128);
    strmid(ADInfo[newid][aResume], advert, 0, strlen(advert), 15);
    ADInfo[newid][aOther] = from;
    ADInfo[newid][aActive] = 1;
    ADInfo[newid][aNumber] = number;
    //ADInfo[newid][aTimer] = SetTimerEx("ADTimer", 60000, 0, "d", newid);
    Info[from][pAdverID] = newid;
    new PlayerName[MAX_PLAYER_NAME];
 	GetPlayerName(from, PlayerName, sizeof(PlayerName));
 	strmid(ADInfo[newid][aContact], PlayerName, 0, strlen(PlayerName), MAX_PLAYER_NAME);
}
else
{
	SendClientMessageEx(from, COLOR_WHITE,"Tienes que esperar, el espacio de anuncios está lleno.");
}
return 1;
}

stock ClearAd(id)
{
strmid(ADInfo[id][aAdvert], "Nada", 0, 4, 4);
strmid(ADInfo[id][aResume], "Nada", 0, 4, 4);
Info[ADInfo[id][aOther]][pAdverID] = -1;
ADInfo[id][aOther] = 0;
ADInfo[id][aActive] = 0;
ADInfo[id][aNumber] = 0;
}
stock businessTypeMessages(const businessid, const playerid)
{
	switch(businessVariables[businessid][bType])
	{
		case 1:        	SendClientMessageEx(playerid, COLOR_WHITE, "¡Bienvenido!, para comprar comida presiona la tecla "COL_GENERAL"ALT.");
		case 2: 		SendClientMessageEx(playerid, COLOR_WHITE, "¡Bienvenido!, para comprar ropa o toys debes usar el comando '/cropa' y '/ctoys'");
		default: 		SendClientMessageEx(playerid, COLOR_WHITE, "¡Bienvenido!, para comprar aquí presiona la tecla "COL_GENERAL"ALT.");
	}
	return 1;
}
getPlayerBusinessID(const playerid)
{
	new x;
    while(x < MAX_BUSINESS)
	{
		if(strlen(businessVariables[x][bOwner]) >= 1)
		{
	        if(!strcmp(businessVariables[x][bOwner], Info[playerid][pNormalName], true)){return x;}
		}
		x++;
	}
    return 0;
}
//cambios
CMD:limiteveh(playerid, params[])
{
	new string[128], speed;
	if(sscanf(params, "i", speed)) return SendClientMessage(playerid, COLOR_GREY, "USO: /limiteveh [Max KMH ó 0 para apagar]");
	if(speed < 0) return SendClientMessage(playerid, -1, "No puede usar numeros negativos!!");
	if(GetVehicleSpeed(GetPlayerVehicleID(playerid)) > speed) return SendClientMessage(playerid, -1, "No puedes establecer velocidades inferiores a la actual!!");
	Speedlimit[playerid] = speed;
	if(!strcmp(params, "0", true)) format(string, sizeof(string), " Has apagado el limitador de velocidad.", speed);
    else format(string, sizeof(string), " Has ajustado el limitador de velocidad a %d MPH, cualquier vehiculo que conduscas no pasara ese limite.", speed);
    SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}

CMD:aduty(playerid, params[]) return cmd_adminduty(playerid, params);


// Trabajo Obrero
CMD:picar(playerid, params[])
{
    if(Info[playerid][pJob] == 7 || Info[playerid][pJob2] == 7)
    {
        if(GetPVarInt(playerid,"Miner") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya has comenzado a picar escombros, continua o usa '/dpicar'.");
        if(IsPlayerAttachedObjectSlotUsed(playerid,1)) RemovePlayerAttachedObject(playerid,1);
		ClearAnimations(playerid);
        SetPVarInt(playerid,"Miner", 1);
		SendClientMessageEx(playerid, COLOR_GREY, " Posiciónate sobre los pickups para comenzar a picar.");
	    SetPlayerAttachedObject(playerid,9, 18634, 14, 0.333391, 0.000000, 0.042249, 358.219909, 268.014739, 170.032974, 2.003867, 1.764811, 1.579773);
        picando[playerid] = 1;
	}
    else SendClientMessageEx(playerid, COLOR_GREY, "* No eres Obrero!");
	return 1;
}
CMD:dpicar(playerid, params[])
{
    if(Info[playerid][pJob] == 7 || Info[playerid][pJob2] == 7)
    {
        new string[128];
        if(GetPVarInt(playerid,"Miner") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No estas picando escombros. Usa '/picar' para comenzar.");
        SetPVarInt(playerid,"Miner", 0);
        picando[playerid] = 0;
		format(string, sizeof(string), "Recibiste $%d por entregar %d escombros.", escombrost[playerid]*1.5, escombrost[playerid]);
        SendClientMessageEx(playerid, COLOR_GREY, string);
        GivePlayerCash(playerid, escombrost[playerid] * 3);
        escombrost[playerid] = 0;
        RemovePlayerAttachedObject(playerid, 9);
	}
    else SendClientMessageEx(playerid, COLOR_GREY, "* No eres Obrero!");
	return 1;
}
// Trabajo Leñador
CMD:talar(playerid, params[])
{
    if(Info[playerid][pJob] == 6 || Info[playerid][pJob2] == 6)
    {
        if(GetPVarInt(playerid,"Lena") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya has comenzado a talar, continua o usa '/dtalar'.");
        ropalenador[playerid] = GetPlayerSkin(playerid);
        SetPlayerSkin(playerid, 16);
		Info[playerid][pChar] = 16;
        SetPVarInt(playerid,"Lena", 1);
		SendClientMessageEx(playerid, COLOR_GREY, " Posiciónate sobre los pickups para comenzar a talar.");
	    SetPlayerAttachedObject(playerid,9,341,6,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
	    talar[playerid] = 1;
	}
    else SendClientMessageEx(playerid, COLOR_GREY, "* No eres Leñador!");
	return 1;
}
CMD:dtalar(playerid, params[])
{
    if(Info[playerid][pJob] == 6 || Info[playerid][pJob2] == 6)
    {
        new string[128];
        if(GetPVarInt(playerid,"Lena") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No estas talando. Usa '/talar' para comenzar.");
	    SetPlayerSkin(playerid, ropalenador[playerid]);
        Info[playerid][pChar] = ropalenador[playerid];
        SetPVarInt(playerid,"Lena", 0);
        talar[playerid] = 0;
        format(string, sizeof(string), " Recibiste $%d por entregar %d troncos.", lena2[playerid]*1.3, lena2[playerid]);
        SendClientMessageEx(playerid, COLOR_GREY, string);
        GivePlayerCash(playerid, lena2[playerid] * 2);
        lena2[playerid] = 0;
        RemovePlayerAttachedObject(playerid, 9);
	}
    else SendClientMessageEx(playerid, COLOR_GREY, "* No eres Leñador!");
	return 1;
}
// ================================================================================================================================//

zcmd(rendirse, playerid, params[])
{
    if(PlayerDrunk[playerid] > 9) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando ahora.");
    if(GetPVarInt(playerid, "IsFrozen") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hacer esto porque estás congelado.");
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPVarInt(playerid, "Injured") == 0)
	{
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
  		return 1;
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando ahora.");
}

zcmd(dj, playerid, params[]){
    new anim;
    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hacer esto ahora!");
    if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_GREY,"USA: /dj [1-4]");
    switch(anim){
		case 1: LoopingAnim(playerid,"SCRATCHING","scdldlp",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"SCRATCHING","scdlulp",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"SCRATCHING","scdrdlp",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"SCRATCHING","scdrulp",4.0,1,0,0,0,0);
	 	default: return SendClientMessageEx(playerid,COLOR_GREY,"USA: /dj [1-4]");
	}
	return 1;
}

zcmd(asiento, playerid, params[]){
    new anim;
	if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hacer esto ahora!");
    if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_GREY,"USA: /asiento [1-7]");
	if(anim < 1 || anim > 7) return SendClientMessageEx(playerid,COLOR_GREY,"USA: /asiento [1-7]");
	switch(anim)
		{
			case 1:
			{
			JugadorSentado[playerid] = 1; LoopingAnim(playerid,"Attractors","Stepsit_in",4.0,0,0,0,1,0);
			}// Not looping
			case 2:
			{
			JugadorSentado[playerid] = 1; LoopingAnim(playerid,"CRIB","PED_Console_Loop",4.0,1,0,0,0,0);
			}
			case 3:
			{
			JugadorSentado[playerid] = 1; LoopingAnim(playerid,"INT_HOUSE","LOU_In",4.0,0,0,0,1,0);
			} // Not looping
			case 4:
			{
			JugadorSentado[playerid] = 1; LoopingAnim(playerid,"MISC","SEAT_LR",4.0,1,0,0,0,0);
			}
			case 5:
			{
			JugadorSentado[playerid] = 1; LoopingAnim(playerid,"MISC","Seat_talk_01",4.0,1,0,0,0,0);
			}
			case 6:
			{
			JugadorSentado[playerid] = 1; LoopingAnim(playerid,"MISC","Seat_talk_02",4.0,1,0,0,0,0);
			}
			case 7:
			{
			JugadorSentado[playerid] = 1; LoopingAnim(playerid,"ped","SEAT_down",4.0,0,0,0,1,0);
			} // Not looping
		}
	return 1;
}


zcmd(jiggy, playerid, params[])
{
    new anim;
    if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_GREY,"USA: /jiggy [1-10]");
    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hacer esto ahora !");
	switch(anim){
		case 1: LoopingAnim(playerid,"DANCING","DAN_Down_A",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"DANCING","DAN_Left_A",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"DANCING","DAN_Loop_A",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"DANCING","DAN_Right_A",4.0,1,0,0,0,0);
		case 5: LoopingAnim(playerid,"DANCING","DAN_Up_A",4.0,1,0,0,0,0);
		case 6: LoopingAnim(playerid,"DANCING","dnce_M_a",4.0,1,0,0,0,0);
		case 7: LoopingAnim(playerid,"DANCING","dnce_M_b",4.0,1,0,0,0,0);
		case 8: LoopingAnim(playerid,"DANCING","dnce_M_c",4.0,1,0,0,0,0);
		case 9: LoopingAnim(playerid,"DANCING","dnce_M_c",4.0,1,0,0,0,0);
		case 10: LoopingAnim(playerid,"DANCING","dnce_M_d",4.0,1,0,0,0,0);
		default: return SendClientMessageEx(playerid,COLOR_GREY,"USA: /jiggy [1-10]");
	}
	return 1;
}
zcmd(ped, playerid, params[]){
    new anim;
    if(sscanf(params, "d", anim)) return SendClientMessageEx(playerid,COLOR_GREY,"USA: /ped [1-26]");
    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hacer esto ahora !");
	switch(anim){
		case 1: LoopingAnim(playerid,"PED","JOG_femaleA",4.0,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"PED","JOG_maleA",4.0,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1);
		case 4: LoopingAnim(playerid,"PED","run_fat",4.0,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"PED","run_fatold",4.0,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"PED","run_old",4.0,1,1,1,1,1);
		case 7: LoopingAnim(playerid,"PED","Run_Wuzi",4.0,1,1,1,1,1);
		case 8: LoopingAnim(playerid,"PED","swat_run",4.0,1,1,1,1,1);
		case 9: LoopingAnim(playerid,"PED","WALK_fat",4.0,1,1,1,1,1);
		case 10: LoopingAnim(playerid,"PED","WALK_fatold",4.0,1,1,1,1,1);
		case 11: LoopingAnim(playerid,"PED","WALK_gang1",4.0,1,1,1,1,1);
		case 12: LoopingAnim(playerid,"PED","WALK_gang2",4.0,1,1,1,1,1);
		case 13: LoopingAnim(playerid,"PED","WALK_old",4.0,1,1,1,1,1);
		case 14: LoopingAnim(playerid,"PED","WALK_shuffle",4.0,1,1,1,1,1);
		case 15: LoopingAnim(playerid,"PED","woman_run",4.0,1,1,1,1,1);
		case 16: LoopingAnim(playerid,"PED","WOMAN_runbusy",4.0,1,1,1,1,1);
		case 17: LoopingAnim(playerid,"PED","WOMAN_runfatold",4.0,1,1,1,1,1);
		case 18: LoopingAnim(playerid,"PED","woman_runpanic",4.0,1,1,1,1,1);
		case 19: LoopingAnim(playerid,"PED","WOMAN_runsexy",4.0,1,1,1,1,1);
		case 20: LoopingAnim(playerid,"PED","WOMAN_walkbusy",4.0,1,1,1,1,1);
		case 21: LoopingAnim(playerid,"PED","WOMAN_walkfatold",4.0,1,1,1,1,1);
		case 22: LoopingAnim(playerid,"PED","WOMAN_walknorm",4.0,1,1,1,1,1);
		case 23: LoopingAnim(playerid,"PED","WOMAN_walkold",4.0,1,1,1,1,1);
		case 24: LoopingAnim(playerid,"PED","WOMAN_walkpro",4.0,1,1,1,1,1);
		case 25: LoopingAnim(playerid,"PED","WOMAN_walksexy",4.0,1,1,1,1,1);
		case 26: LoopingAnim(playerid,"PED","WOMAN_walkshop",4.0,1,1,1,1,1);
		default: return SendClientMessageEx(playerid,COLOR_GREY,"USA: /ped [1-26]");
	}
	return 1;
}

zcmd(gesto, playerid, params[]){
    new gesto;
    if(sscanf(params, "d", gesto)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /gesto [1-15]");
    if(Info[playerid][pEstado] != 0 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hacer esto ahora !");
	switch(gesto){
		case 1: OnePlayAnim(playerid,"GHANDS","gsign1",4.0,0,0,0,0,0);
		case 2: OnePlayAnim(playerid,"GHANDS","gsign1LH",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"GHANDS","gsign2",4.0,0,0,0,0,0);
		case 4: OnePlayAnim(playerid,"GHANDS","gsign2LH",4.0,0,0,0,0,0);
		case 5: OnePlayAnim(playerid,"GHANDS","gsign3",4.0,0,0,0,0,0);
		case 6: OnePlayAnim(playerid,"GHANDS","gsign3LH",4.0,0,0,0,0,0);
		case 7: OnePlayAnim(playerid,"GHANDS","gsign4",4.0,0,0,0,0,0);
		case 8: OnePlayAnim(playerid,"GHANDS","gsign4LH",4.0,0,0,0,0,0);
		case 9: OnePlayAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0);
		case 10: OnePlayAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0);
		case 11: OnePlayAnim(playerid,"GHANDS","gsign5LH",4.0,0,0,0,0,0);
		case 12: OnePlayAnim(playerid,"GANGS","Invite_No",4.0,0,0,0,0,0);
		case 13: OnePlayAnim(playerid,"GANGS","Invite_Yes",4.0,0,0,0,0,0);
		case 14: OnePlayAnim(playerid,"GANGS","prtial_gngtlkD",4.0,0,0,0,0,0);
		case 15: OnePlayAnim(playerid,"GANGS","smkcig_prtl",4.0,0,0,0,0,0);
		default: return SendClientMessageEx(playerid,COLOR_GREY,"USA: /gesto [1-15]");
	}
	return 1;
}

zcmd(paja, playerid, params[])
{
    if(GetPVarInt(playerid, "IsFrozen") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hacer esto porque estás congelado.");
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPVarInt(playerid, "Injured") == 0)
	{
	    ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0,1,0,0,1,0);
  		return 1;
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando ahora.");
}

zcmd(taichi, playerid, params[]) { LoopingAnim(playerid,"PARK","Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0); return 1; }

CMD:acciones(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GRAD1, "________________________________________________________________________________________________________________________");
	SendClientMessage(playerid,COLOR_GENERAL,"Lista de animaciones disponibles:");
	SendClientMessage(playerid,COLOR_WHITE,"/rendirse - /bebido - /movil - /cmovil - /bomba - /apuntar - /reir - /tumbarse - /agacharse - /vomitar - /comiendo - /herido");
	SendClientMessage(playerid,COLOR_WHITE,"/saludo - /trato - /crack - /fumando - /sentarse - /gro - /fucku - /hablando - /taichi - /caer - /muerto - /brazos - /gangsta");
	SendClientMessage(playerid,COLOR_WHITE,"/spray - /medico - /golpeado - /cansado - /saltovital - /tortazo - /rodar - /cacheado - /bate - /boxing - /gritando - /facepalm");
	SendClientMessage(playerid,COLOR_WHITE,"/animar - /esposado - /pis - /lanzar - /basket - /caminar - /rascarse - /apoyarse - /correr - /strip - /bailar - /trafico");
	SendClientMessage(playerid,COLOR_WHITE,"/rifle - /mecanico - /carga - /bailoteo - /consola - /picado - /barandilla - /llorar - /bofetada - /billar - /beso - /dedo");
	SendClientMessage(playerid,COLOR_WHITE,"/azote - /masturb - /chupete - /si - /no - /ped - /gesto - /asiento - /taichi");
	SendClientMessage(playerid,COLOR_WHITE,"* Animaciones de uso en vehículo: /coche");
	SendClientMessage(playerid, COLOR_GRAD1, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	return 1;
}

CMD:carga(playerid, params[])
{
	LoopingAnim(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1);
    return 1;
}

CMD:llorar(playerid, params[])
{
	LoopingAnim(playerid,"GRAVEYARD","mrnF_loop",4.1,1,1,1,1,1);
    return 1;
}

CMD:masturb(playerid, params[])
{
	LoopingAnim(playerid,"PAULNMAC","wank_loop",4.1,1,1,1,1,1);
    return 1;
}

CMD:bofetada(playerid, params[])
{
	LoopingAnim(playerid,"MISC","bitchslap",4.1,1,0,0,1,1);
    return 1;
}

CMD:facepalm(playerid, params[])
{
	LoopingAnim(playerid,"MISC","plyr_shkhead",4.1,0,0,0,0,0);
    return 1;
}

CMD:barandilla(playerid, params[])
{
	LoopingAnim(playerid,"BD_FIRE","BD_Panic_Loop",4.1,1,1,1,1,1);
    return 1;
}


CMD:rifle(playerid, params[])
{
	LoopingAnim(playerid,"BUDDY","buddy_reload",4.1,0,1,1,1,1);
    return 1;
}

CMD:movil(playerid, params[])
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
    return 1;
}

CMD:cmovil(playerid, params[])
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
    return 1;
}

CMD:bebido(playerid, params[])
{
	LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
    return 1;
}

CMD:bomba(playerid, params[])
{
	LoopingAnim(playerid,"BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,1);
    return 1;
}

CMD:reir(playerid, params[])
{
	LoopingAnim(playerid,"RAPPING","Laugh_01",4.0,1,1,1,1,1);
    return 1;
}

CMD:brazos(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /brazos [1-6]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"CASINO","cards_in",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"COP_AMBIENT","Coplook_shake",4.1,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"COP_AMBIENT","Coplook_think",4.1,0,1,1,1,1);
		case 4: LoopingAnim(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,1,1,1,1);
		case 5: LoopingAnim(playerid,"DEALER","DEALER_IDLE",4.1,0,1,1,1,1);
		case 6: LoopingAnim(playerid,"GRAVEYARD","prst_loopa",4.1,0,1,1,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /brazos [1-6]");
	}
    return 1;
}

CMD:agacharse(playerid, params[])
{
	LoopingAnim(playerid,"ped","cower",4.0,0,1,1,1,1);
    return 1;
}

CMD:vomitar(playerid, params[])
{
	LoopingAnim(playerid,"FOOD","EAT_Vomit_P",4.0,0,1,1,1,1);
    return 1;
}

CMD:comiendo(playerid, params[])
{
	LoopingAnim(playerid,"FOOD","EAT_Burger",4.0,0,1,1,1,1);
    return 1;
}

CMD:trato(playerid, params[])
{
	LoopingAnim(playerid,"DEALER","DEALER_DEAL",4.0,0,1,1,1,1);
    return 1;
}

CMD:crack(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /crack [1-8]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"CRACK","crckdeth1",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"CRACK","crckdeth2",4.1,1,0,0,1,1);
		case 3: LoopingAnim(playerid,"CRACK","crckdeth3",4.1,0,1,1,1,1);
		case 4: LoopingAnim(playerid,"CRACK","crckdeth4",4.1,0,1,1,1,1);
		case 5: LoopingAnim(playerid,"CRACK","crckidle1",4.1,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"CRACK","crckidle2",4.1,1,0,0,1,1);
		case 7: LoopingAnim(playerid,"CRACK","crckidle3",4.1,0,1,1,1,1);
		case 8: LoopingAnim(playerid,"CRACK","crckidle4",4.1,1,0,0,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /crack [1-8]");
	}
    return 1;
}

CMD:fumando(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /fumando [1-5]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 1, 1, 1);
		case 2: LoopingAnim(playerid,"SMOKING","M_smkstnd_loop", 4.0, 1, 0, 1, 1, 1);
		case 3: LoopingAnim(playerid,"SMOKING","M_smk_out", 4.0, 0, 0, 1, 1, 1);
		case 4: LoopingAnim(playerid,"SMOKING","M_smk_in",4.0,0,1,1,1,1);
		case 5: LoopingAnim(playerid,"GANGS","smkcig_prtl",4.1,1,1,1,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /fumando [1-5]");
	}
    return 1;
}

CMD:sentarse(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /sentarse [1-9]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"Attractors","Stepsit_in",4.1,0,0,0,1,1);
		case 2: LoopingAnim(playerid,"Attractors","Stepsit_out",4.1,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"FOOD","FF_Sit_Eat3",4.1,0,0,0,1,1);
		case 4: LoopingAnim(playerid,"FOOD","FF_Sit_In",4.1,0,0,0,1,1);
		case 5: LoopingAnim(playerid,"FOOD","FF_Sit_In_L",4.1,0,0,0,1,1);
		case 6: LoopingAnim(playerid,"FOOD","FF_Sit_In_R",4.1,0,0,0,1,1);
		case 7: LoopingAnim(playerid,"PED","SEAT_down",4.1,0,0,0,1,1);
		case 8: LoopingAnim(playerid,"INT_HOUSE","LOU_In",4.1,0,0,0,1,1);
		case 9: LoopingAnim(playerid,"MISC","SEAT_LR",4.1,0,1,1,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /sentarse [1-9]");
	}
    return 1;
}

CMD:gro(playerid, params[])
{
	LoopingAnim(playerid,"BEACH","ParkSit_M_loop",4.0,1,0,1,1,1);
    return 1;
}

CMD:hablando(playerid, params[])
{
	LoopingAnim(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1);
    return 1;
}

CMD:fucku(playerid, params[])
{
	LoopingAnim(playerid,"PED","fucku",4.0,0,0,0,1,1);
    return 1;
}

CMD:caer(playerid, params[])
{
	LoopingAnim(playerid,"PED","KO_skid_front",4.1,0,1,1,1,1);
    return 1;
}

CMD:muerto(playerid, params[])
{
	LoopingAnim(playerid,"PED","FLOOR_hit_f",4.0,0,1,1,1,1);
    return 1;
}

CMD:herido(playerid, params[])
{
	LoopingAnim(playerid,"SWEET","Sweet_injuredloop",4.0,1,0,1,1,1);
    return 1;
}

CMD:saludo(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /saludo [1-7]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"GANGS","prtial_hndshk_biz_01",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"GANGS","hndshkcb",4.1,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"GANGS","hndshkea",4.1,0,1,1,1,1);
		case 4: LoopingAnim(playerid,"GANGS","hndshkfa",4.1,0,1,1,1,1);
		case 5: LoopingAnim(playerid,"GANGS","hndshkba",4.1,0,1,1,1,1);
		case 6: LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 1, 1);
		case 7: LoopingAnim(playerid,"PED","endchat_03",4.1,0,1,1,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /saludo [1-7]");
	}
    return 1;
}

CMD:gangsta(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /gangsta [1-16]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"GHANDS","gsign2",4.1,0,1,1,1,1);
		case 4: LoopingAnim(playerid,"GHANDS","gsign2LH",4.1,0,1,1,1,1);
		case 5: LoopingAnim(playerid,"GHANDS","gsign3",4.1,0,1,1,1,1);
		case 6: LoopingAnim(playerid,"GHANDS","gsign3LH",4.1,0,1,1,1,1);
		case 7: LoopingAnim(playerid,"GHANDS","gsign4",4.1,0,1,1,1,1);
		case 8: LoopingAnim(playerid,"GHANDS","gsign4LH",4.1,0,1,1,1,1);
		case 9: LoopingAnim(playerid,"GHANDS","gsign5",4.1,0,1,1,1,1);
		case 10: LoopingAnim(playerid,"GHANDS","gsign5LH",4.1,0,1,1,1,1);
		case 11: LoopingAnim(playerid,"benchpress","gym_bp_celebrate",4.1,0,1,1,1,1);
		case 12: LoopingAnim(playerid,"LOWRIDER","prtial_gngtlkG",4.1,0,1,1,1,1);
		case 13: LoopingAnim(playerid,"RIOT","RIOT_ANGRY",4.1,0,1,1,1,1);
		case 14: LoopingAnim(playerid,"RIOT","RIOT_challenge",4.1,0,1,1,1,1);
		case 15: LoopingAnim(playerid,"RAPPING","RAP_B_Loop",4.1,1,1,1,1,1);
		case 16: LoopingAnim(playerid,"SCRATCHING","scdrulp",4.1,1,0,0,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /gangsta [1-16]");
	}
    return 1;
}

CMD:chupete(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /chupete [1-12]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,1,1,1,1);
		case 4: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1,0,1,1,1,1);
		case 5: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_W",4.1,0,1,1,1,1);
		case 7: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_P",4.1,0,1,1,1,1);
		case 8: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_P",4.1,1,1,1,1,1);
		case 9: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_P",4.1,0,1,1,1,1);
		case 10: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_W",4.1,0,1,1,1,1);
		case 11: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_W",4.1,1,1,1,1,1);
		case 12: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.1,0,1,1,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /chupete [1-12]");
	}
    return 1;
}

CMD:spray(playerid, params[])
{
	LoopingAnim(playerid,"SPRAYCAN","spraycan_full",4.0,1,1,1,1,1);
    return 1;
}

CMD:medico(playerid, params[])
{
	LoopingAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
    return 1;
}

CMD:golpeado(playerid, params[])
{
	LoopingAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,1);
    return 1;
}

CMD:saltovital(playerid, params[])
{
	LoopingAnim(playerid,"PED","EV_dive",4.0,0,1,1,1,1);
    return 1;
}

CMD:cansado(playerid, params[])
{
	LoopingAnim(playerid,"PED","IDLE_tired",4.0,1,0,1,1,1);
    return 1;
}

CMD:tortazo(playerid, params[])
{
	LoopingAnim(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
    return 1;
}

CMD:rodar(playerid, params[])
{
	LoopingAnim(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,1);
    return 1;
}

CMD:cacheado(playerid, params[])
{
	LoopingAnim(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,1);
    return 1;
}

CMD:bate(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /bate [1-2]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"CRACK","Bbalbat_Idle_01",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"CRACK","Bbalbat_Idle_02",4.1,0,1,1,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /bate [1-2]");
	}
    return 1;
}

CMD:boxing(playerid, params[])
{
	LoopingAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,1);
    return 1;
}

CMD:animar(playerid, params[])
{
	LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,1);
    return 1;
}

CMD:dedo(playerid, params[])
{
	LoopingAnim(playerid,"RIOT","RIOT_FUKU",4.0,0,0,0,0,0);
    return 1;
}

CMD:gritando(playerid, params[])
{
	LoopingAnim(playerid,"RIOT","RIOT_shout",4.0,1,1,1,1,1);
    return 1;
}

CMD:esposado(playerid, params[])
{
	LoopingAnim(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
    return 1;
}

CMD:lanzar(playerid, params[])
{
	LoopingAnim(playerid,"GRENADE","WEAPON_throwu",4.0,0,1,1,1,0);
    return 1;
}

CMD:basket(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /basket [1-7]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"BSKTBALL","BBALL_run",4.1,1,1,0,1,1);
		case 2: LoopingAnim(playerid,"BSKTBALL","BBALL_idleloop",4.1,1,1,1,1,1);
		case 3: OnePlayAnim(playerid,"BSKTBALL","BBALL_Jump_Shot",4.1,0,0,0,0,0);
		case 4: LoopingAnim(playerid,"BSKTBALL","BBALL_def_loop",4.1,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"BSKTBALL","BBALL_Dnk",4.1,0,1,1,1,1);
		case 6: LoopingAnim(playerid,"BSKTBALL","BBALL_idle",4.1,1,1,1,1,1);
		case 7: LoopingAnim(playerid,"BSKTBALL","BBALL_idle2",4.1,1,1,1,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /basket [1-7]");
	}
    return 1;
}

CMD:caminar(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /caminar [1-11]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
		case 4: LoopingAnim(playerid,"FAT","FatWalk",4.1,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
		case 7: LoopingAnim(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
		case 8: LoopingAnim(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		case 9: LoopingAnim(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
		case 10: LoopingAnim(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
		case 11: LoopingAnim(playerid,"POOL","POOL_Walk",4.1,1,1,1,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /caminar [1-11]");
	}
    return 1;
}

CMD:azote(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /azote [1-6]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"SNM","SPANKINGP",4.1,1,0,0,1,1);
		case 2: LoopingAnim(playerid,"SNM","SPANKEDW",4.1,1,0,0,1,1);
		case 3: LoopingAnim(playerid,"SNM","SPANKING_ENDP",4.1,0,0,0,1,1);
		case 4: LoopingAnim(playerid,"SNM","SPANKEDP",4.1,1,0,0,1,1);
		case 5: LoopingAnim(playerid,"SNM","SPANKINGW",4.1,1,0,0,1,1);
		case 6: LoopingAnim(playerid,"SNM","SPANKING_ENDW",4.1,0,0,0,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /azote [1-6]");
	}
    return 1;
}

CMD:trafico(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /trafico [1-4]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"POLICE","CopTraf_Away",4.1,1,0,0,1,1);
		case 2: LoopingAnim(playerid,"POLICE","CopTraf_Come",4.1,1,0,0,1,1);
		case 3: LoopingAnim(playerid,"POLICE","CopTraf_Left",4.1,1,0,0,1,1);
		case 4: LoopingAnim(playerid,"POLICE","CopTraf_Stop",4.1,1,0,0,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /trafico [1-4]");
	}
    return 1;
}

CMD:apuntar(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /apuntar [1-3]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"SHOP","ROB_Loop_Threat",4.1,1,0,0,1,1);
		case 2: LoopingAnim(playerid,"ped", "ARRESTgun", 4.0,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"SHOP","SHP_Gun_Aim",4.1,1,0,0,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /apuntar [1-3]");
	}
    return 1;
}

CMD:apoyarse(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /apoyarse [1-2]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"GANGS","leanIDLE",4.0,1,0,1,1,1);
        case 2: LoopingAnim(playerid,"MISC","Plyrlean_loop",4.0,1,1,1,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /apoyarse [1-2]");
	}
    return 1;
}

CMD:beso(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /beso [1-2]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"KISSING","Grlfrd_Kiss_03",4.1,0,0,0,1,1);
        case 2: LoopingAnim(playerid,"KISSING","Playa_Kiss_03",4.1,0,0,0,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /beso [1-2]");
	}
    return 1;
}

CMD:billar(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /billar [1-3]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"POOL","POOL_Idle_Stance",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"POOL","POOL_Med_Start",4.1,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"POOL","POOL_Med_Shot",4.1,0,1,1,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /billar [1-3]");
	}
    return 1;
}

CMD:correr(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /correr [1-6]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"PED","run_civi",4.1,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"PED","run_gang1",4.1,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"PED","run_old",4.1,1,1,1,1,1);
		case 4: LoopingAnim(playerid,"PED","run_fat",4.1,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"PED","woman_run",4.1,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"PED","WOMAN_runsexy",4.1,1,1,1,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /correr [1-6]");
	}
    return 1;
}

CMD:stopanim(playerid, params[])
{
	ClearAnimations(playerid, 1);
	if(GetPVarInt(playerid, "Injured") == 1) return 1;
	OnePlayAnim(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:rascarse(playerid, params[])
{
	LoopingAnim(playerid,"MISC","Scratchballs_01",4.1,1,1,1,1,1);
    return 1;
}

CMD:strip(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /strip [1-7]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1 );
		case 2: LoopingAnim(playerid,"STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1 );
		case 3: LoopingAnim(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1 );
		case 4: LoopingAnim(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1 );
		case 5: LoopingAnim(playerid,"STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1 );
		case 6: LoopingAnim(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1 );
		case 7: LoopingAnim(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1 );
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /strip [1-7]");
	}
    return 1;
}

CMD:tumbarse(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /tumbarse [1-5]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"BEACH","bather",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"BEACH","Lay_Bac_Loop",4.1,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"BEACH","BD_Fire3",4.1,0,1,1,1,1);
		case 4: LoopingAnim(playerid,"BEACH","ParkSit_W_loop",4.1,0,1,1,1,1);
	    case 5: LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.1,0,1,1,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /tumbarse [1-5]");
	}
    return 1;
}

CMD:coche(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /coche [1-7]");
	switch(animacion)
	{
		case 1: OnePlayAnim(playerid,"CAR","Sit_relaxed",4.1,0,0,0,1,0);
		case 2: OnePlayAnim(playerid,"LOWRIDER","lrgirl_hair",4.1,0,0,0,1,0);
		case 3: OnePlayAnim(playerid,"GHETTO_DB","GDB_Car2_PLY",4.1,1,0,0,1,0);
		case 4: LoopingAnim(playerid,"GHETTO_DB","GDB_Car_RYD",4.1,0,0,0,1,0);
	    case 5: OnePlayAnim(playerid,"LOWRIDER","lrgirl_l0_loop",4.1,0,1,1,1,1);
	    case 6: OnePlayAnim(playerid,"LOWRIDER","lrgirl_l0_to_l1",4.1,0,0,0,1,1);
	    case 7: OnePlayAnim(playerid,"LOWRIDER","lrgirl_l2_loop",4.1,1,0,0,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /coche [1-7]");
	}
    return 1;
}

CMD:mecanico(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /mecanico [1-2]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"CAR","Fixn_Car_Loop",4.1,1,0,0,1,1);
	    case 2: LoopingAnim(playerid,"CAR","Fixn_Car_Out",4.1,0,0,0,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /mecanico [1-2]");
	}
    return 1;
}

CMD:bailoteo(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /bailoteo [1-10]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"DANCING","DAN_Down_A",4.1,1,0,0,1,1);
        case 2: LoopingAnim(playerid,"DANCING","DAN_Left_A",4.1,1,0,0,1,1);
		case 3: LoopingAnim(playerid,"DANCING","DAN_Loop_A",4.1,1,0,0,1,1);
		case 4: LoopingAnim(playerid,"DANCING","DAN_Right_A",4.1,1,0,0,1,1);
		case 5: LoopingAnim(playerid,"DANCING","DAN_Up_A",4.1,1,0,0,1,1);
		case 6: LoopingAnim(playerid,"DANCING","dnce_M_a",4.1,1,0,0,1,1);
		case 7: LoopingAnim(playerid,"DANCING","dnce_M_b",4.1,1,0,0,1,1);
		case 8: LoopingAnim(playerid,"DANCING","dnce_M_c",4.1,1,0,0,1,1);
		case 9: LoopingAnim(playerid,"DANCING","dnce_M_d",4.1,1,0,0,1,1);
		case 10: LoopingAnim(playerid,"DANCING","dnce_M_e",4.1,1,0,0,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /bailoteo [1-10]");
	}
    return 1;
}

CMD:consola(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /consola [1-3]");
	switch(animacion)
	{
		case 1: LoopingAnim(playerid,"CRIB","PED_Console_Loop",4.1,1,1,1,1,1);
        case 2: LoopingAnim(playerid,"CRIB","PED_Console_Loose",4.1,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"CRIB","PED_Console_Win",4.1,0,1,1,1,1);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /consola [1-3]");
	}
    return 1;
}

CMD:bailar(playerid, params[])
{
	new animacion;
	if(sscanf(params, "d", animacion)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /bailar [1-4]");
	switch(animacion)
	{
		case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
        case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		default: SendClientMessage(playerid, COLOR_WHITE, "USO: /bailar [1-4]");
	}
    return 1;
}

/* FIN ANIMACIONES */

	CMD:si(playerid,params[])
	{
		ApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0); // si
	}

	CMD:no(playerid,params[])
	{
		ApplyAnimation(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0); // no
	}

CMD:robobanco(playerid, params[])
{
	new string[128];
    if(Info[playerid][pAdmin] >= 5)
    {
     	if(RobarBanco == 0)
     	{
           	RobarBanco = 1;
			format(string, sizeof( string ), "[Global] {FFFFFF}%s ha habilitado el sistema de robo al banco.", GetPlayerNameEx(playerid));
			BroadCast(COLOR_BLUED, string);
		}
		else
		{
		    RobarBanco = 0;
	   		format(string, sizeof(string), "[Global] {FFFFFF}%s ha deshabilitado el sistema de robo al banco.", GetPlayerNameEx(playerid));
			BroadCast(COLOR_BLUED, string);
		}
	}
	return 1;
}
CMD:forzarpuerta(playerid, params[])
{
	new string[128];
	if(IsACop(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"¡No puedes hacer esto!");
    if(RobarBanco == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: El sistema esta actualmente bloqueado!");
	if(Info[playerid][pMaskuse] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No te has puesto una mascara!");
	if(Info[playerid][pPalanca] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas una palanca para hacer esto!");
	if(ForzarTimer[playerid] > 0)
	{
	    format(string, sizeof(string), "Debes esperar %d segundos para volver a forzar una puerta.", ForzarTimer[playerid]);
	    SendClientMessageEx(playerid, COLOR_GREY, string);
    	return 1;
    }
    if(PlayerToPoint(4, playerid,1438.0670, -992.9431, 995.1141))
	{
        format(string, sizeof(string), "[Administracion]{FFFFFF} %s esta robando el banco, observar rol.", GetPlayerNameEx(playerid));
        SendAdminMessage(COLOR_BLUED, string);
        format(string, sizeof(string), "%s toma su palanca y comienza a forzar la puerta.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	 	TogglePlayerControllable(playerid, 0);
		SetPVarInt(playerid, "IsFrozen", 1);
 		ForzandoPuerta[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
 		SetProgressBarValue(ForzandoPuerta[playerid], 100.0);
		ShowProgressBarForPlayer(playerid, ForzandoPuerta[playerid]);
		SetTimerEx("ForzarPuerta", 1500, 0, "dd", playerid);
    }
    if(PlayerToPoint(4, playerid,1438.1071, -1002.6318, 995.1141))
	{
		SendFamilyMessage(5, COLOR_GREEN, "CNN: Tenemos una noticia de ultimo momento, el BANCO DE SAN ANDREAS esta siendo robado.");
     	format(string, sizeof(string), "%s toma su palanca y comienza a forzar la puerta.", GetPlayerNameEx(playerid));
	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        SendClientMessageEx(playerid, COLOR_TWRED, "ATENCION: {FFFFFF}Un empleado del banco ha sonado las alarmas, la policia esta en camino!");
    	format(string, sizeof(string), "*Central: Estan intentando robar el BANCO CENTRAL, sospechoso identificado como: %s (Info en GPS).", GetPlayerNameEx(playerid));
	    SendRadioMessage(1, 0x8D8DFFFF, string);
        TogglePlayerControllable(playerid, 0);
    	SetPVarInt(playerid, "IsFrozen", 1);
        ForzandoPuerta[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
    	SetProgressBarValue(ForzandoPuerta[playerid], 100.0);
    	ShowProgressBarForPlayer(playerid, ForzandoPuerta[playerid]);
    	SetTimerEx("ForzarPuerta", 1500, 0, "dd", playerid);
     }
	return 1;
}
function ForzarPuerta(playerid)
{
    new string[128];
 	ForzandoPuertaTiempo[playerid]--;
	SetProgressBarValue(ForzandoPuerta[playerid], GetProgressBarValue(ForzandoPuerta[playerid])-20.0);
	UpdateProgressBar(ForzandoPuerta[playerid], playerid);
	if(GetProgressBarValue(ForzandoPuerta[playerid]) > 10) SetTimerEx("ForzarPuerta", 1500, 0, "d", playerid);

	if(GetProgressBarValue(ForzandoPuerta[playerid]) == 50.0)
	{
 		SetProgressBarColor(ForzandoPuerta[playerid], COLOR_GRAD1);
   		UpdateProgressBar(ForzandoPuerta[playerid], playerid);
	}
	else if(GetProgressBarValue(ForzandoPuerta[playerid]) == 20.0)
	{
 		SetProgressBarColor(ForzandoPuerta[playerid], COLOR_RED);
		UpdateProgressBar(ForzandoPuerta[playerid], playerid);
	}
	else if(GetProgressBarValue(ForzandoPuerta[playerid]) <= 10.0)
	{
		DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
  		DestroyProgressBar(ForzandoPuerta[playerid]);
    	ForzandoPuerta[playerid] = INVALID_BAR_ID;
        format(string, sizeof(string), "* %s logra abrir la puerta a la fuerza", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        if(PlayerToPoint(2, playerid,1438.0670, -992.9431, 995.1141))
        {
		    MoveDynamicObject(puertasbanco1[0],1436.7870, -993.0631, 995.1141, 4.0);
      	    SetTimer("CerrarP1Banco1", 300000, 0);
      	    ForzarTimer[playerid] = 12;
      	    SendClientMessageEx(playerid, COLOR_WHITE, "** Esta puerta se cerrara automaticamente en 5 minutos, es mejor que te apures.");
      	}
        else if(PlayerToPoint(2, playerid,1438.1071, -1002.6318, 995.1141))
        {
		    MoveDynamicObject(puertasbanco1[1],1436.8470, -1002.6318, 995.1141, 4.0);
      	    SetTimer("CerrarP2Banco1", 300000, 0);
      	    ForzarTimer[playerid] = 12;
      	    SendClientMessageEx(playerid, COLOR_WHITE, "** Esta puerta se cerrara automaticamente en 5 minutos, es mejor que te apures.");
      	}
 	}
	return 1;
}
CMD:robarbanco(playerid, params[])
{
    new string[128];
    if(RobarBanco == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: El sistema esta actualmente bloqueado!");
    if(IsACop(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"¡No puedes hacer esto!");
    if(Robo[playerid] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes robar ahora!");
    if(PlayerToPoint(3, playerid,1435.5162,-969.2625,983.5383))
	{
	    if(Info[playerid][pMaskuse] == 1)
    	{
                format(string, sizeof(string), "* %s comienza a llenar la bolsa con dinero", GetPlayerNameEx(playerid));
    			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* Estás cargando la bolsa con el dinero, por favor espera ....");
	    		TogglePlayerControllable(playerid, 0);
	    		SetPVarInt(playerid, "IsFrozen", 1);
	    		LoadRoboBanco[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
		    	SetProgressBarValue(LoadRoboBanco[playerid], 100.0);
			    ShowProgressBarForPlayer(playerid, LoadRoboBanco[playerid]);
			    SetTimerEx("RoboBanco", 2000, 0, "dd", playerid);
			    Robo[playerid] = 3600;
		    	DineroRobado[playerid] = 0;
                SetTimerEx("RestarTiempoDeRobo", 1000, 0, "d", playerid);
	    }
	    else return SendClientMessageEx(playerid, COLOR_GREY, "No te has puesto una mascara!");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "No estas en el lugar adecuado");
	return 1;
}

function RoboBanco(playerid)
{
    new string[128];
 	LoadRoboBancoTime[playerid]--;
	SetProgressBarValue(LoadRoboBanco[playerid], GetProgressBarValue(LoadRoboBanco[playerid])-5.0);
	UpdateProgressBar(LoadRoboBanco[playerid], playerid);
	if(GetProgressBarValue(LoadRoboBanco[playerid]) > 10) SetTimerEx("RoboBanco", 2000, 0, "d", playerid);

	if(GetProgressBarValue(LoadRoboBanco[playerid]) == 50.0)
	{
 		SetProgressBarColor(LoadRoboBanco[playerid], COLOR_GRAD1);
   		UpdateProgressBar(LoadRoboBanco[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadRoboBanco[playerid]) == 20.0)
	{
 		SetProgressBarColor(LoadRoboBanco[playerid], COLOR_RED);
		UpdateProgressBar(LoadRoboBanco[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadRoboBanco[playerid]) <= 10.0)
	{
		DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
  		DestroyProgressBar(LoadRoboBanco[playerid]);
    	LoadRoboBanco[playerid] = INVALID_BAR_ID;

        if(PlayerToPoint(3, playerid, 1435.5162,-969.2625,983.5383))
        {
		     new robo = Random(10000,25000);
		     format(string, sizeof(string), "Nota: {FFFFFF}Has robado $%d, escapa y evita ser herido o lo perderas.", robo);
		     SendClientMessageEx(playerid, COLOR_GREY, string);
		     GivePlayerCash(playerid, robo);
		     RobarTiempo[playerid] = 5;
		     DineroRobado[playerid] = robo;
			Info[playerid][pWantedLevel] = 3;
     		SetPlayerWantedLevel(playerid, 3);
	         SetPlayerAttachedObject( playerid, 0, 1550, 1, 0.024558, -0.279748, -0.060589, 6.105677, 137.291320, 147.132202, 1.019888, 1.000000, 1.000000 );
             SendClientMessageEx(playerid, COLOR_GREY, "ADVERTENCIA: Las camaras te han captado, con esta ropa la policia puede encontrarte por la calle!");
             SendClientMessageEx(playerid, COLOR_GREY, "ATENCION: La alarma del banco esta sonando, los cuerpos de seguridad estan en camino, ¡ten cuidado al salir!.");
		     format(string, sizeof(string), "* %s termina de llenar la bolsa de dinero y la toma rapidamente", GetPlayerNameEx(playerid));
		     ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		     RobarTiempoTimer[playerid] = SetTimerEx("RobarTiempoRescue", 5*60000, false, "d", playerid);
       	}
	}
	return 1;
}
CMD:apelear(playerid, params[])
{
    #pragma unused params
    if(PlayerToPoint(10, playerid, 767.6719,13.6320,1000.7010))
	{
        ShowPlayerDialog(playerid, FSTYLE_DIALOG, DIALOG_STYLE_LIST, "¿Que le gustaria aprender?", "Me gustaría aprender Knee Head\t 1500$\nMe gustaría aprender Kung Fu\t 1000$\nMe gustaría aprender Boxeo\t 800$", "Sí", "No");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No estas en el GYM !");
	return 1;
}

CMD:aceptar(playerid, params[])
{
    new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
    if(IsPlayerConnectedEx(playerid))
	{
        if(isnull(params))
		{
            SendClientMessageEx(playerid, COLOR_GREY, "USA: /aceptar [nombre]");
            SendClientMessageEx(playerid, COLOR_GREY, "Nombres: bebida - telefono - multa - materiales - matrimonio - coche");
            SendClientMessageEx(playerid, COLOR_GREY, "Nombres: taxi - mecanico - muerte - fix - recarga - arma");
            return 1;
        }
        else if(strcmp(params,"taxi",true) == 0)
		{
            if(TaxiOnDuty[playerid] != 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No estás en servicio para aceptar llamadas.");
            if(TaxiCallReady[playerid] >= 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya aceptaste una llamada!");
            if(TaxiCall >= 0)
			{
                if(IsPlayerConnected(TaxiCall))
				{
                    format(szMessage, sizeof(szMessage), "* Aceptaste la llamada de %s, puedes ir al marcador rojo para recogerlo.",GetPlayerNameEx(TaxiCall));
                    SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
                    format(szMessage, sizeof(szMessage), "* Taxista %s aceptó tu llamada; por favor espera en tu posición actual.",GetPlayerNameEx(playerid));
                    SendClientMessageEx(TaxiCall, COLOR_GENERAL, szMessage);
                    GameTextForPlayer(playerid, "~n~~r~Ve al CheckPoint.", 5000, 1);
                    new Float:X,Float:Y,Float:Z;
                    GetPlayerPos(TaxiCall, X, Y, Z);
                    SetPlayerCheckpoint(playerid, X, Y, Z, 5);
					TaxiCallReady[playerid] = TaxiCall;
                    TaxiCall = 999;
                }
                return 1;
            }
            else return SendClientMessageEx(playerid, COLOR_GREY, "* Nadie ha llamado a un taxista!");
        }
        if(strcmp(params,"muerte",true) == 0)
		{
   	    	if(GetPVarInt(playerid, "Injured") == 1)
			{
            	KillEMSQueue(playerid);
            	ResetPlayerWeaponsEx(playerid);
            	SetPVarInt(playerid, "Hospital", 1);
            	SendClientMessageEx(playerid, COLOR_WHITE, "Perdiste la esperanza y caiste inconsciente, se te envió de inmediato al hospital.");
            	SpawnPlayer(playerid);
        	}
        	else SendClientMessageEx(playerid, COLOR_GREY, "* No estás apunto de morir, no puedes hacer esto ahora!");
    	}
        else if(strcmp(params,"fix",true) == 0)
		{
	        if(RepairOffer[playerid] < 999){
    	        if(GetPlayerCash(playerid) > RepairPrice[playerid]){
        	        if(IsPlayerInAnyVehicle(playerid)){
            	        if(IsPlayerConnectedEx(RepairOffer[playerid])){
            	            RepairCar[playerid] = GetPlayerVehicleID(playerid);

            	            RepairVehicle(RepairCar[playerid]);
            	            SetVehicleHealth(RepairCar[playerid], 1000.0);

                            GivePlayerCash(RepairOffer[playerid], RepairPrice[playerid]);
                            GivePlayerCash(playerid, -RepairPrice[playerid]);
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(RepairOffer[playerid], ipex, sizeof(ipex));
                            format(szMessage, sizeof(szMessage), "%s(IP:%s) has repaired the vehicle from %s(IP:%s) for $%d", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(RepairOffer[playerid]), ipex, RepairPrice[playerid]);
                            Log("logs/pay.log", szMessage);
                            format(szMessage, sizeof(szMessage), "* %s repara el vehiculo de %s.", GetPlayerNameEx(RepairOffer[playerid]), GetPlayerNameEx(playerid));
                            ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            format(szMessage, sizeof(szMessage), "* Tu coche fue reparado por $%d, por el mecánico %s.",RepairPrice[playerid],GetPlayerNameEx(RepairOffer[playerid]));
                            SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);

                            format(szMessage, sizeof(szMessage), "* Reparaste el coche de %s, ganaste $%d!",GetPlayerNameEx(playerid),RepairPrice[playerid]);
                            SendClientMessageEx(RepairOffer[playerid], COLOR_GENERAL, szMessage);
                            RepairOffer[playerid] = 999;
                            RepairPrice[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    return 1;
                }
                else return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes dinero para pagar esto!");
            }
            else return SendClientMessageEx(playerid, COLOR_GREY, "* Nadie te ha ofrecido reparar tu vehiculo!");
        }
	    else if(strcmp(params, "saludo",true) == 0){
        	new Count;
	        foreach(Player, i){
               	if(GetPVarInt(i, "shrequest") == playerid){
                	new Float: ppFloats[3];
                	GetPlayerPos(i, ppFloats[0], ppFloats[1], ppFloats[2]);
                	if(!IsPlayerInRangeOfPoint(playerid, 5, ppFloats[0], ppFloats[1], ppFloats[2])){
 						Count++;
               	    	SendClientMessageEx(playerid, COLOR_WHITE, "Estás demasiado lejos. No puedes aceptar el saludo ahora.");
                	}
                	else
					{
                    	switch(GetPVarInt(i, "shstyle"))
						{
                        	case 1:
                        	{
                        	    Count++;
                        	    PlayerFacePlayer( playerid, i );
                        	    ApplyAnimation( playerid, "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000,1);
                        	    ApplyAnimation( i, "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000,1);
                        	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                        	    format(szMessage, sizeof(szMessage), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                        	    ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        	    DeletePVar(i, "shstyle");
                        	}
                       	 	case 2:
                        	{
                        	    Count++;
                        	    PlayerFacePlayer( playerid, i );
                        	    ApplyAnimation( playerid, "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000,1);
                        	    ApplyAnimation( i, "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000,1);
                        	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                        	    format(szMessage, sizeof(szMessage), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                        	    ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        	    DeletePVar(i, "shstyle");
                        	}
                        	case 3:
                        	{
                            	Count++;
                            	PlayerFacePlayer( playerid, i );
                            	ApplyAnimation( playerid, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000,1);
                            	ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000,1);
                            	SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	format(szMessage, sizeof(szMessage), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                            	ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	DeletePVar(i, "shstyle");
                        	}
                        	case 4:
                        	{
                            	Count++;
                            	PlayerFacePlayer( playerid, i );
                            	ApplyAnimation( playerid, "GANGS", "hndshkcb", 4.0, 1, 1, 1, 0, 1000,1);
                            	ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000,1);
                            	SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	format(szMessage, sizeof(szMessage), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                            	ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	DeletePVar(i, "shstyle");
                        	}
                        	case 5:
                        	{
                       	    	Count++;
                        	   	PlayerFacePlayer( playerid, i );
                        	    ApplyAnimation( playerid, "GANGS", "hndshkda", 4.0, 1, 1, 1, 0, 1000,1);
                        	    ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000,1);
                        	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                        	    format(szMessage, sizeof(szMessage), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                        	    ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        	    DeletePVar(i, "shstyle");
                        	}
                        	case 6:
                        	{
                        	    Count++;
                        	    PlayerFacePlayer( playerid, i );
                        	    ApplyAnimation( playerid, "GANGS","hndshkfa_swt", 4.0, 1, 1, 1, 0, 2600,1);
                        	    ApplyAnimation( i, "GANGS","hndshkfa_swt", 4.0, 1, 1, 1, 0, 2600,1);
                        	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                        	    format(szMessage, sizeof(szMessage), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                        	    ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        	    DeletePVar(i, "shstyle");
                        	}
                        	case 7:
                        	{
                        	    Count++;
                        	    PlayerFacePlayer( playerid, i );
                        	    ApplyAnimation( playerid, "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1250,1);
                        	    ApplyAnimation( i, "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1250,1);
                        	    SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                        	    format(szMessage, sizeof(szMessage), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                        	    ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        	    DeletePVar(i, "shstyle");
                        	}
                        	case 8:
                        	{
                            	Count++;
                            	PlayerFacePlayer( playerid, i );
                            	ApplyAnimation( playerid, "GANGS", "prtial_hndshk_biz_01", 3.7, 1, 1, 1, 0, 2200,1);
                            	ApplyAnimation( i, "GANGS", "prtial_hndshk_biz_01", 3.5, 1, 1, 1, 0, 2200,1);
                            	SetPVarInt(i, "shrequest", INVALID_PLAYER_ID);
                            	format(szMessage, sizeof(szMessage), "* %s se saluda con %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                            	ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            	DeletePVar(i, "shstyle");
                        	}
                    	}
                	}
            	}
        	}
    	    if(Count == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Nadie te ha saludado.");
	        return 1;
        }
        else if(strcmp(params,"entrevista",true) == 0)
		{
            if(LiveOffer[playerid] < 999)
			{
                if(IsPlayerConnectedEx(LiveOffer[playerid]))
				{
                    if (ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
					{
                        SendClientMessageEx(playerid, COLOR_GENERAL, "* Estarás congelado hasta que termine la entrevista.");
                        SendClientMessageEx(LiveOffer[playerid], COLOR_GENERAL, "* Estás congelado hasta que termine la entrevista. (usa /live again).");
                        //TogglePlayerControllable(playerid, 0);
                        //TogglePlayerControllable(LiveOffer[playerid], 0);
                        TalkingLive[playerid] = LiveOffer[playerid];
                        TalkingLive[LiveOffer[playerid]] = playerid;
                        LiveOffer[playerid] = 999;
                        return 1;
                    }
                    else return SendClientMessageEx(playerid, COLOR_GREY, "Estás lejos del reportero!");
                }
                return 1;
            }
            else return SendClientMessageEx(playerid, COLOR_GREY, "Nadie te ha invitado a una entrevista!");
        }
        else if(strcmp(params,"recarga",true) == 0){
	        if(RefillOffer[playerid] < 499){
    	        if(GetPlayerCash(playerid) > RefillPrice[playerid]){
        	        if(IsPlayerInAnyVehicle(playerid)){
            	        if(IsPlayerConnectedEx(RefillOffer[playerid])){
                        	new vehicleid = GetPlayerVehicleID(playerid);
                        	VehicleFuel[vehicleid] = 300;
                        	if(VehicleFuel[vehicleid] > 300) VehicleFuel[vehicleid] = 300;
                        	GivePlayerCash(RefillOffer[playerid], RefillPrice[playerid]);
                        	GivePlayerCash(playerid, -RefillPrice[playerid]);
                        	new ip[32], ipex[32];
                        	GetPlayerIp(playerid, ip, sizeof(ip));
                        	GetPlayerIp(RefillOffer[playerid], ipex, sizeof(ipex));
                        	format(szMessage, sizeof(szMessage), "%s(IP:%s) has refilled the vehicle from %s(IP:%s) for $%d", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(RefillOffer[playerid]), ipex, RefillPrice[playerid]);
                        	Log("logs/pay.log", szMessage);

                        	format(szMessage, sizeof(szMessage), "* %s llenó el tanque del vehículo de %s.", GetPlayerNameEx(RefillOffer[playerid]), GetPlayerNameEx(playerid));
                        	ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

                        	format(szMessage, sizeof(szMessage), "* Tu vehiculo fue llenado por $%d por el mecánico %s.",RefillPrice[playerid],GetPlayerNameEx(RefillOffer[playerid]));
                        	SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);

                        	format(szMessage, sizeof(szMessage), "* Llenaste el tanque del vehículo de %s por $%d!", GetPlayerNameEx(playerid),RefillPrice[playerid]);
                        	SendClientMessageEx(RefillOffer[playerid], COLOR_GENERAL, szMessage);
                            RefillOffer[playerid] = 499;
                            RefillPrice[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    return 1;
                }
                else return SendClientMessageEx(playerid, COLOR_GREY, "   No puedes pagar !");
            }
            else return SendClientMessageEx(playerid, COLOR_GREY, "   Nadie te ha ofrecido llenar el tanque de tu coche!");
		}
    	else if(strcmp(params,"medico",true) == 0) {
        	if(Info[playerid][pMember] == 4 || Info[playerid][pLeader] == 4){
            	if(MedicCallTime[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "   Ya aceptaste una llamada!");
            	if(GetPVarInt(playerid, "Packages") >= 1 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1){
                	SendClientMessageEx(playerid, COLOR_WHITE, "Asegurate de que no hay ningún checkpoint activado en este momento.");
                	return 1;
            	}
            	if(MedicCall < 999){
                	if(IsPlayerConnectedEx(MedicCall))
					{
                    	format(szMessage, sizeof(szMessage), "* Aceptaste una llamada de %s",GetPlayerNameEx(MedicCall));
                    	SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
                    	SendClientMessageEx(playerid, COLOR_GENERAL, "* Después de 45 segundos en checkpoint desaparecerá.");
                    	format(szMessage, sizeof(szMessage), "* Médico %s aceptó tu llamada espera en tu actual posición.",GetPlayerNameEx(playerid));
                    	SendClientMessageEx(MedicCall, COLOR_GENERAL, szMessage);
                    	new Float:X,Float:Y,Float:Z;
                    	GetPlayerPos(MedicCall, X, Y, Z);
                    	SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                    	new zone[MAX_ZONE_NAME];
                    	GetPlayer3DZone(MedicCall, zone, sizeof(zone));
                    	format(szMessage, sizeof(szMessage), "{37B9F5}<!>{E3E4ED} %s fue localizado en %s", GetPlayerNameEx(MedicCall), zone);
                    	SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
                    	MedicCallTime[playerid] = 1;
                    	MedicAccepted[playerid] = MedicCall;
                    	MedicCall = 999;
                    	return 1;
                	}
                	return 1;
            	}
            	else return SendClientMessageEx(playerid, COLOR_GREY, "   Nadie a llamado un médico!");
        	}
        	else return SendClientMessageEx(playerid, COLOR_GREY, "   No eres un médico!");
    	}
        if(strcmp(params,"casa",true) == 0){
            if(HouseOffer[playerid] < 999){
                if(IsPlayerConnectedEx(HouseOffer[playerid])){
                    if(Info[HouseOffer[playerid]][pPhousekey] == INVALID_HOUSE_ID){
                        SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador no tiene ninguna casa.");
                        return 1;
                    }
                    if(GetPlayerCash(playerid) > HousePrice[playerid])
					{
                        new house;
                        if(House[playerid] == 1) house = Info[HouseOffer[playerid]][pPhousekey];
                        else return SendClientMessageEx(playerid, COLOR_RED, "Error: Casa no especificada.");
                        ClearHouse(house);
                        HouseInfo[house][hLock] = 1;
                        format( HouseInfo[house][hOwner], 128, "Nobody" );
                        sendername = GetPlayerNameEx(HouseOffer[playerid]);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        format(szMessage, sizeof(szMessage), "~w~Felicitaciones~n~ Has vendido tu propiedad por ~n~~g~$%d", HousePrice[playerid]);
                        GameTextForPlayer(HouseOffer[playerid], szMessage, 4000, 3);
                        if(House[playerid] == 1) Info[HouseOffer[playerid]][pPhousekey] = INVALID_HOUSE_ID;
                        saveHouse(house);
                        OnPlayerUpdate(HouseOffer[playerid]);
                        DestroyDynamicPickup(HouseInfo[house][hPickupID]);
                        HouseInfo[house][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
                        GivePlayerCash(HouseOffer[playerid],HousePrice[playerid]);
                        Info[playerid][pPhousekey] = house;
                        HouseInfo[house][hOwned] = 1;
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        strmid(HouseInfo[house][hOwner], sendername, 0, strlen(sendername), 255);
                        GivePlayerCash(playerid,-HousePrice[playerid]);
                        SendClientMessageEx(playerid, COLOR_WHITE, "Felicitaciones por tu nueva compra!");
                        SendClientMessageEx(playerid, COLOR_WHITE, "Usa /ayuda casa para ver los comandos disponibles.");
                        saveHouse(house);
                        OnPlayerUpdate(playerid);
                        new gt[24];
						if(HouseInfo[house][gT] == 1) gt = "Pequeño";
						else if(HouseInfo[house][gT] == 2) gt = "Mediano";
						else if(HouseInfo[house][gT] == 3) gt = "Grande";
                        DestroyDynamicPickup(HouseInfo[house][hPickupID]);
                        HouseInfo[house][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
                        format(szMessage, sizeof(szMessage), ""COL_HOUSET"Dueño\n"COL_WHITE"%s\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d",HouseInfo[house][hOwner],HouseInfo[house][hLevel],house,HouseInfo[house][hDireccion],house+178);
                        UpdateDynamic3DTextLabelText(HouseInfo[house][hTextID], -1, szMessage);
                        DestroyDynamicPickup(HouseInfo[house][gPickupID]);
                        HouseInfo[house][gPickupID] = CreateDynamicPickup(1239, 23, HouseInfo[house][gX], HouseInfo[house][gY], HouseInfo[house][gZ]);
                        format(szMessage, sizeof(szMessage), ""COL_HOUSET"Garage\nDueño: "COL_WHITE"%s\nTamaño: "COL_WHITE"%s", HouseInfo[house][hOwner],gt);
                        UpdateDynamic3DTextLabelText(HouseInfo[house][gTextID], -1, szMessage);
                        new ip[32], ipex[32];
                        GetPlayerIp(HouseOffer[playerid],ip,sizeof(ip));
                        GetPlayerIp(playerid,ipex,sizeof(ipex));
                        format(szMessage,sizeof(szMessage),"%s (IP: %s) has sold their house (ID %d) to %s (IP: %s) for $%d.",GetPlayerNameEx(HouseOffer[playerid]),ip,house,GetPlayerNameEx(playerid),ipex,HousePrice[playerid]);
                        Log("logs/house.log", szMessage);

                        HouseOffer[playerid] = 999;
                        HousePrice[playerid] = 0;
                        House[playerid] = 0;
                    }
                    else{
                        SendClientMessageEx(playerid, COLOR_GREY, "No puedes pagar esta casa!");
                        HouseOffer[playerid] = 999;
                        HousePrice[playerid] = 0;
                        House[playerid] = 0;
                        return 1;
                    }
                }
                return 1;
            }
            else return SendClientMessageEx(playerid, COLOR_GREY, "   Nadie te a ofrecido una casa!");
        }
        else if(strcmp(params,"mecanico",true) == 0){
            if(Team_Mecanicos(playerid)){
			if(MechanicCallTime[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "   Ya aceptaste una llamada");
            if(GetPVarInt(playerid, "Packages") >= 1 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Por favor primero termina de llegar al otro checkpoint (Estás en una llamada o algo que activó un marcador rojo.");
            if(MechanicCall < 999)
			{
                if(IsPlayerConnectedEx(MechanicCall))
				{
                    if(playerid == MechanicCall) return 1;
                    format(szMessage, sizeof(szMessage), "* Aceptaste la llamada de %s, tienes 60 segundos para ir allá.",GetPlayerNameEx(MechanicCall));
                    SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
                    SendClientMessageEx(playerid, COLOR_GENERAL, "* Después de 60 Segundos el marcador rojo desaparecerá.");
                    format(szMessage, sizeof(szMessage), "* Mecánico %s aceptó tu llamada por favor, espera en tu posición actual.",GetPlayerNameEx(playerid));
                    SendClientMessageEx(MechanicCall, COLOR_GENERAL, szMessage);
					format(szMessage, sizeof(szMessage), "** %s aceptó la llamada reciente de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(MechanicCall));
					SendFamilyMessage(6, TEAM_AZTECAS_COLOR, szMessage);
					new Float:X,Float:Y,Float:Z;
                    GetPlayerPos(MechanicCall, X, Y, Z);
                    SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                    GameTextForPlayer(playerid, "~r~Ve al Marcador rojo", 5000, 1);
	                MechanicCallTime[playerid] = 1;
                	MechanicCall = 999;
                	return 1;
            	}
            	return 1;
        	}
        	else return SendClientMessageEx(playerid, COLOR_GREY, "   Nadie a llamado un mecanico!");
        	}
    	}
        if(strcmp(params,"bebida",true) == 0){
			if((DrinkOffer[playerid] != INVALID_PLAYER_ID) && (IsPlayerConnectedEx(DrinkOffer[playerid]))){
                if (ProxDetectorS(8.0, playerid, DrinkOffer[playerid])){
                    ShowPlayerDialog(playerid, DRINKLISTDIALOG, DIALOG_STYLE_LIST, "Bebidas", "Cerveza ($60)\nVodka ($100)\nWhiskey ($100)\nAgua ($20)\nGaseosa($20)", "Comprar", "Cancelar");
                }
                else{
                    SendClientMessageEx(playerid, COLOR_GREY, " Estás lejos del bartender.");
                    DrinkOffer[playerid] = INVALID_PLAYER_ID;
                    return 1;
                }
            	return 1;
            }
            else return SendClientMessageEx(playerid, COLOR_GREY, " Nadie te ha ofrecido una bebida.");
	    }
        if(strcmp(params,"telefono",true) == 0){
            if(NumBuy[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "¡Nadie te ha ofrecido un número!");
            if(NumPrice[playerid] > GetPlayerCash(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "¡No tienes suficiente dinero!");
            format(szMessage, sizeof(szMessage), "* %s compra un número de teléfono", GetPlayerNameEx(playerid));
            ProxDetector(30.0,playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
            Info[playerid][pPnumber] = NumBuy[playerid];
            Earn(NumSeller[playerid], NumPrice[playerid]);
            Bought(playerid, NumPrice[playerid]);
            NumBuy[playerid] = 0;
            NumPrice[playerid] = 0;
            NumSeller[playerid] = 0;
            Facturing[playerid] = 0;
        }
		else if(strcmp(params,"multa",true) == 0){
		    if(TicketOffer[playerid] == 999) return SendClientMessageEx(playerid, COLOR_WHITE, "¡Nadie te multado!");
		    format(szMessage, sizeof(szMessage), "* %s paga una multa", GetPlayerNameEx(playerid));
			ProxDetector(30.0,playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			format(szMessage, sizeof(szMessage), " %s pagó una multa de %d$.", GetPlayerNameEx(playerid), TicketMoney[playerid]);
			SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
			SendClientMessageEx(TicketOffer[playerid], COLOR_GENERAL, szMessage);
			Bought(playerid, TicketMoney[playerid]);
			Tax += TicketMoney[playerid];
			TicketOffer[playerid] = 999;
			TicketMoney[playerid] = 0;
			Facturing[playerid] = 0;
		}
        else if(strcmp(params,"matrimonio",true) == 0) {
            if(ProposeOffer[playerid] < 999) {
                if(IsPlayerConnectedEx(ProposeOffer[playerid])) {
                    if(ProxDetectorS(10.0, playerid, ProposeOffer[playerid])) {
                        if(MarryWitness[ProposeOffer[playerid]] == 999) return SendClientMessageEx(playerid, COLOR_GREY, "   El proponente no tiene un testigo de matrimonio!");
                        if(IsPlayerConnectedEx(MarryWitness[ProposeOffer[playerid]])) {
                            if(ProxDetectorS(12.0, ProposeOffer[playerid], MarryWitness[ProposeOffer[playerid]])) {
                                if(!IsPlayerInRangeOfPoint(playerid, 1.0, 1963.9612, -369.1851, 1093.7289))
								{
	                                format(szMessage, sizeof(szMessage), "* Aceptaste la petición de matrimonio a %s.", GetPlayerNameEx(ProposeOffer[playerid]));
    	                            SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
   	                             	format(szMessage, sizeof(szMessage), "* %s ha aceptado la solicitud de ser tu esposa", GetPlayerNameEx(playerid));
                                	SendClientMessageEx(ProposeOffer[playerid], COLOR_GENERAL, szMessage);
                                	format(szMessage, sizeof(szMessage), "Sacerdote: %s, aceptas a %s como tu marido por siempre? (Escribe 'si', que otro caracter arruinará el matrimonio.)", GetPlayerNameEx(playerid), GetPlayerNameEx(ProposeOffer[playerid]));
                                	SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
                                	MarriageCeremoney[playerid] = 1;
                                	ProposedTo[ProposeOffer[playerid]] = playerid;
                                	GotProposedBy[playerid] = ProposeOffer[playerid];
                                	MarryWitness[ProposeOffer[playerid]] = 999;
                                	ProposeOffer[playerid] = 999;
                                	return 1;
                            	}
                            	else return SendClientMessageEx(playerid, COLOR_GREY, "   No estás en la iglesia!");
                        	}
                        	else return SendClientMessageEx(playerid, COLOR_GREY, "   El testigo del matrimonio no está cerca de su proponente!");
                    	}
                    	return 1;
                	}
                	else return SendClientMessageEx(playerid, COLOR_GREY, "   El jugador que propuso no está cerca de ti!");
            	}
        	}
        	else return SendClientMessageEx(playerid, COLOR_GREY, "   Nadie te ha propuesto matrimonio!");
    	}
		if(strcmp(params,"coche",true) == 0)
		{
        	if(VehicleOffer[playerid] < 999)
			{
            	if(IsPlayerConnectedEx(VehicleOffer[playerid]))
				{
                	if(GetPlayerCash(playerid) > VehiclePrice[playerid])
					{
                    	if(IsPlayerInVehicle(VehicleOffer[playerid], PlayerVehicleInfo[VehicleId[playerid]][pvId]))
						{
                        	if(!ProxDetectorS(8.0, VehicleOffer[playerid], playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No estás cerca del que te va a vender");
                        	new playervehicleid = GetPlayerFreeVehicleId();
                        	new carsamount = VehicleCount(playerid);
							if(carsamount >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: No puedes tener más autos.");
							if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: No puedes tener más autos.");
                        	new ip[32], ipex[32];
                        	GetPlayerIp(playerid, ip, sizeof(ip));
                        	GetPlayerIp(VehicleOffer[playerid], ipex, sizeof(ipex));
                        	format(szMessage, sizeof(szMessage), "[CAR] %s (IP: %s) pagó $%d a %s por el %s (IP: %s)", GetPlayerNameEx(playerid), ip, VehiclePrice[playerid], GetPlayerNameEx(VehicleOffer[playerid]), GetVehicleName(PlayerVehicleInfo[VehicleId[playerid]][pvId]), ipex);
                        	Log("logs/pay.log", szMessage);
                        	GetPlayerName(VehicleOffer[playerid], giveplayer, sizeof(giveplayer));
                        	format(sendername, sizeof(sendername), "%s", GetPlayerNameEx(playerid));
                        	format(szMessage, sizeof(szMessage), "* Has pagado por un %s, $%d, de %s. (Usa /ayuda coche para más información)", GetVehicleName(PlayerVehicleInfo[VehicleId[playerid]][pvId]), VehiclePrice[playerid],giveplayer);
                        	SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
                        	format(szMessage, sizeof(szMessage), "* Vendiste tu %s a %s por $%d.",GetVehicleName(PlayerVehicleInfo[VehicleId[playerid]][pvId]), sendername,VehiclePrice[playerid]);
                        	SendClientMessageEx(VehicleOffer[playerid], COLOR_GENERAL, szMessage);
                        	GivePlayerCash( VehicleOffer[playerid], VehiclePrice[playerid] );
                        	GivePlayerCash(playerid, -VehiclePrice[playerid]);
                        	RemovePlayerFromVehicle(VehicleOffer[playerid]);
                        	new Float:slx, Float:sly, Float:slz;
                        	GetPlayerPos(VehicleOffer[playerid], slx, sly, slz);
                        	SetPlayerPos(VehicleOffer[playerid], slx, sly, slz+2);
                        	PlayerVehicleInfo[playervehicleid][pvOwner] = sendername;
            	            VehicleOffer[playerid] = 999;
            	            VehiclePrice[playerid] = 0;
            	            return 1;
            	        }
            	        else return SendClientMessageEx(playerid, COLOR_GREY, "   El que te va a vender no está en el coche.");
            	    }
            	    else return SendClientMessageEx(playerid, COLOR_GREY, "   No puedes pagar este coche!");
            	}
            	return 1;
        	}
        	else return SendClientMessageEx(playerid, COLOR_GREY, "   Nadie te ha ofrecido un coche!");
    	}
		else if(strcmp(params,"crack",true) == 0){
            if(CrackOffer[playerid] < 999){
                if(GetPlayerCash(playerid) > CrackPrice[playerid]){
                    if(Info[playerid][pCrack] < 60){
                        if(IsPlayerConnectedEx(CrackOffer[playerid])){
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(CrackOffer[playerid], ipex, sizeof(ipex));
                            format(szMessage, sizeof(szMessage), "[CRACK DEAL (%d GRAMS)] %s (IP:%s) has paid $%d to %s (IP:%s)", CrackGram[playerid], GetPlayerNameEx(playerid), ip, CrackPrice[playerid], GetPlayerNameEx(CrackOffer[playerid]), ipex);
                            Log("logs/pay.log", szMessage);

                            GivePlayerCash(playerid, -CrackPrice[playerid]);
                            GivePlayerCash(CrackOffer[playerid], CrackPrice[playerid]);
                            format(szMessage, sizeof(szMessage), "* Le compraste %d gramos por $%d al vendedor %s.",CrackGram[playerid],CrackPrice[playerid],GetPlayerNameEx(CrackOffer[playerid]));
                            SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
                            format(szMessage, sizeof(szMessage), "* %s ha comprado %d gramos, ganaste $%d.",GetPlayerNameEx(playerid),CrackGram[playerid],CrackPrice[playerid]);
                            SendClientMessageEx(CrackOffer[playerid], COLOR_GENERAL, szMessage);
                            Info[playerid][pCrack] += CrackGram[playerid];
                            Info[CrackOffer[playerid]][pCrack] -= CrackGram[playerid];
                            //Info[CrackOffer[playerid]][pDrugsSkill] ++;
        					if(Info[CrackOffer[playerid]][pDobleExp] == 0)
							{
          						Info[CrackOffer[playerid]][pDrugsSkill]++;
							}
							else
							{
								Info[CrackOffer[playerid]][pDrugsSkill] += 2;
								SendClientMessageEx(CrackOffer[playerid], COLOR_GRAD1, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
							}
        	                if(Info[CrackOffer[playerid]][pDrugsSkill] == 50)
        	                { SendClientMessageEx(CrackOffer[playerid], COLOR_GRAD1, "* Tu nivel de Vendedor de Drogas es de nivel 2, puedes comprar más gramos y más barato."); }
        	                else if(Info[CrackOffer[playerid]][pDrugsSkill] == 100)
        	                { SendClientMessageEx(CrackOffer[playerid], COLOR_GRAD1, "* Tu nivel de Vendedor de Drogas es de nivel 3, puedes comprar más gramos y más barato."); }
        	                else if(Info[CrackOffer[playerid]][pDrugsSkill] == 200)
        	                { SendClientMessageEx(CrackOffer[playerid], COLOR_GRAD1, "* Tu nivel de Vendedor de Drogas es de nivel 4, puedes comprar más gramos y más barato."); }
        	                else if(Info[CrackOffer[playerid]][pDrugsSkill] == 400)
        	                { SendClientMessageEx(CrackOffer[playerid], COLOR_GRAD1, "* Tu nivel de Vendedor de Drogas es de nivel 5, puedes comprar más gramos y más barato."); }
							CrackOffer[playerid] = 999;
                            CrackPrice[playerid] = 0;
                            CrackGram[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    else return SendClientMessageEx(playerid, COLOR_GREY, "   Estás muy cargado de droga!");
                }
                else return SendClientMessageEx(playerid, COLOR_GREY, "   No puedes pagar esa cantidad!");
            }
            else return SendClientMessageEx(playerid, COLOR_GREY, "   Nadie te ha ofrecido droga!");
        }
        else if(strcmp(params,"hierba",true) == 0) {
            if(PotOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > PotPrice[playerid]) {
                    if(Info[playerid][pPot] < 25) {
                        if(IsPlayerConnectedEx(PotOffer[playerid])) {
							if(Info[PotOffer[playerid]][pPot] < PotGram[playerid])
							{
						    	SendClientMessageEx(playerid,COLOR_GREY, "Ese jugador no tiene esa cantidad de hierba!");
						    	return 1;
							}
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(PotOffer[playerid], ipex, sizeof(ipex));
                            format(szMessage, sizeof(szMessage), "[HIERBA (%d GRAMS)] %s (IP:%s) has paid $%d to %s (IP:%s)", PotGram[playerid], GetPlayerNameEx(playerid), ip, PotPrice[playerid], GetPlayerNameEx(PotOffer[playerid]), ipex);
                            Log("logs/pay.log", szMessage);
        	                format(szMessage, sizeof(szMessage), "* Le Compraste %d gramos por $%d a %s.",PotGram[playerid],PotPrice[playerid],GetPlayerNameEx(PotOffer[playerid]));
        	                SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
        	                format(szMessage, sizeof(szMessage), "* %s te compro %d gramos, ganaste $%d.",GetPlayerNameEx(playerid),PotGram[playerid],PotPrice[playerid]);
        	                SendClientMessageEx(PotOffer[playerid], COLOR_GENERAL, szMessage);
        	                SetPVarInt(PotOffer[playerid], "Cash", GetPVarInt(PotOffer[playerid], "Cash")+PotPrice[playerid]);
							if(Info[PotOffer[playerid]][pDobleExp] == 0)
							{
          						Info[PotOffer[playerid]][pDrugsSkill]++;
							}
							else
							{
								Info[PotOffer[playerid]][pDrugsSkill] += 2;
								SendClientMessageEx(PotOffer[playerid], COLOR_GRAD1, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
							}
        	                GivePlayerCash(playerid, -PotPrice[playerid]);
        	                Info[playerid][pPot] += PotGram[playerid];
        	                Info[PotOffer[playerid]][pPot] -= PotGram[playerid];
        	                if(Info[PotOffer[playerid]][pDrugsSkill] == 50)
        	                { SendClientMessageEx(PotOffer[playerid], COLOR_GRAD1, "* Tu nivel de Vendedor de Drogas es de nivel 2, puedes comprar más gramos y más barato."); }
        	                else if(Info[PotOffer[playerid]][pDrugsSkill] == 100)
        	                { SendClientMessageEx(PotOffer[playerid], COLOR_GRAD1, "* Tu nivel de Vendedor de Drogas es de nivel 3, puedes comprar más gramos y más barato."); }
        	                else if(Info[PotOffer[playerid]][pDrugsSkill] == 200)
        	                { SendClientMessageEx(PotOffer[playerid], COLOR_GRAD1, "* Tu nivel de Vendedor de Drogas es de nivel 4, puedes comprar más gramos y más barato."); }
        	                else if(Info[PotOffer[playerid]][pDrugsSkill] == 400)
        	                { SendClientMessageEx(PotOffer[playerid], COLOR_GRAD1, "* Tu nivel de Vendedor de Drogas es de nivel 5, puedes comprar más gramos y más barato."); }
        	                PotOffer[playerid] = 999;
        	                PotPrice[playerid] = 0;
        	                PotGram[playerid] = 0;
        	                return 1;
        	            }
        	            return 1;
        	        }
        	        else return SendClientMessageEx(playerid, COLOR_GREY, "   Estás totalmente cargado con hierba, utilízala primero!");
        	    }
        	    else return SendClientMessageEx(playerid, COLOR_GREY, "   No puedes pagar estos gramos de hierba!");
        	}
        	else return SendClientMessageEx(playerid, COLOR_GREY, "  Nadie te ha ofrecido hierba!");
   	 	}
        else if(strcmp(params,"putodemierdatedicen",true) == 0) {
            if(GuardOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > GuardPrice[playerid]) {
                    if(IsPlayerConnectedEx(GuardOffer[playerid]))
					{
                        if(ProxDetectorS(6.0, playerid, GuardOffer[playerid])) {
                            new Float:armour;
                            GetPlayerArmour(playerid, armour);
                            if(armour >= 50) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya tienes un chaleco!");
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(GuardOffer[playerid], ipex, sizeof(ipex));
                            format(szMessage, sizeof(szMessage), "[GUARD] %s (IP:%s) has paid $%d to %s (IP:%s)", GetPlayerNameEx(playerid), ip, GuardPrice[playerid], GetPlayerNameEx(GuardOffer[playerid]), ipex);
                            Log("logs/pay.log", szMessage);
                            GiveArmorToPlayer(playerid, 50);
                            format(szMessage, sizeof(szMessage), "* Aceptaste la protección por $%d de %s.",GuardPrice[playerid],GetPlayerNameEx(GuardOffer[playerid]));
                            SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
                            format(szMessage, sizeof(szMessage), "* %s acepto tu protección, y te pagó $%d.",GetPlayerNameEx(playerid),GuardPrice[playerid]);
                            SendClientMessageEx(GuardOffer[playerid], COLOR_GENERAL, szMessage);
                            GivePlayerCash(GuardOffer[playerid], GuardPrice[playerid]);
                            GivePlayerCash(playerid, -GuardPrice[playerid]);
                            GuardOffer[playerid] = 999;
                            GuardPrice[playerid] = 0;
                            return 1;
                        }
                        else return SendClientMessageEx(playerid, COLOR_WHITE, "No estás cerca de la persona que te va a vender!");
                    }
                    return 1;
                }
                else return SendClientMessageEx(playerid, COLOR_GREY, "   No puedes pagar esta protección!");
            }
            else return SendClientMessageEx(playerid, COLOR_GREY, "   Nadie te ha ofrecido nada!");
        }
        else if(strcmp(params,"spray",true) == 0){
            if(SprayOffer[playerid] < 999){
                if(GetPlayerCash(playerid) >= SprayPrice[playerid]){
                    if(Info[playerid][pLevel] >= 1){
                        if(IsPlayerConnectedEx(SprayOffer[playerid])){
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(SprayOffer[playerid], ipex, sizeof(ipex));
                            format(szMessage, sizeof(szMessage), "[SPRAY DEAL (%d HIERBAS)] %s (IP:%s) has paid $%d to %s (IP:%s)", SprayGram[playerid], GetPlayerNameEx(playerid), ip, SprayPrice[playerid], GetPlayerNameEx(SprayOffer[playerid]), ipex);
                            Log("logs/pay.log", szMessage);

                            GivePlayerCash(playerid, -SprayPrice[playerid]);
                            GivePlayerCash(SprayOffer[playerid], SprayPrice[playerid]);
                            format(szMessage, sizeof(szMessage), "* Le compraste %d potes por $%d al vendedor %s. (Puedes usar /colorcoche y /paintcoche para pintar tu coche.",SprayGram[playerid],SprayPrice[playerid],GetPlayerNameEx(SprayOffer[playerid]));
                            SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
                            format(szMessage, sizeof(szMessage), "* %s ha comprado %d potes, ganaste $%d.",GetPlayerNameEx(playerid),SprayGram[playerid],SprayPrice[playerid]);
                            SendClientMessageEx(SprayOffer[playerid], COLOR_GENERAL, szMessage);
                            Info[playerid][pSpraycan] += SprayGram[playerid];
							SprayOffer[playerid] = 999;
                            SprayPrice[playerid] = 0;
                            SprayGram[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    else return SendClientMessageEx(playerid, COLOR_GREY, "   No puedes hacer esto!");
                }
                else return SendClientMessageEx(playerid, COLOR_GREY, "   No puedes pagar esa cantidad!");
            }
            else return SendClientMessageEx(playerid, COLOR_GREY, "   Nadie te ha ofrecido sprays!");
        }
		else if(strcmp(params, "arma", true) == 0) {

			new
				playerOffering = GetPVarInt(playerid,"gunID"),
				weaponOffering = GetPVarInt(GetPVarInt(playerid,"gunID"),"gun"),
				balasOffering = GetPVarInt(GetPVarInt(playerid,"gunID"),"bala"),
				slotOffering = GetPVarInt(GetPVarInt(playerid,"gunID"),"slot"),
				wstring[128];

	   		if(weaponOffering != 0 && slotOffering != 0) {
				if(ProxDetectorS(6.0, playerid, playerOffering) && !IsPlayerInAnyVehicle(playerid) && !IsPlayerInAnyVehicle(playerOffering)) {
					if(Info[playerOffering][pEstado]!=0) {
						return SendClientMessage(playerid, COLOR_GREY, "El jugador que quiere venderte está tazeado, esposado o congelado.");
					}
					else if(Info[playerid][pEstado]!=0) {
						return SendClientMessage(playerid, COLOR_GREY, "No puedes hacer esto mientras estas tazeado, esposado o congelado.");
					}
					else {
						RemovePlayerWeapon(playerOffering, weaponOffering);
						GivePlayerValidWeapon(playerid, weaponOffering, balasOffering);
						format(wstring, sizeof(wstring), "Aceptas el %s de %s.", WeaponNames[weaponOffering], GetPlayerNameEx(playerOffering));
						SendClientMessage(playerid, COLOR_WHITE, wstring);
						format(wstring, sizeof(wstring), "%s aceptó tu %s que le ofreciste.", GetPlayerNameEx(playerid), WeaponNames[weaponOffering]);
						SendClientMessage(playerOffering, COLOR_WHITE, wstring);
						format(wstring, sizeof(wstring), "* %s le da su %s a %s.", GetPlayerNameEx(playerOffering), WeaponNames[weaponOffering], GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, wstring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						DeletePVar(playerOffering,"gun");
						DeletePVar(playerOffering,"bala");
						DeletePVar(playerid,"gunID");
						DeletePVar(playerOffering,"slot");
						DeletePVar(playerOffering,"Dandoarma");
					}
		    	}
		    	else SendClientMessage(playerid, COLOR_GREY, "Estás muy lejos de la persona o está en un vehículo.");
		    }
	    	else SendClientMessage(playerid, COLOR_GREY, "Nadie te ha ofrecido un arma.");
		}
        else if(strcmp(params,"objeto",true) == 0)
		{
		    if(CraftOffer[playerid] < 999)
			{
				if(IsPlayerConnectedEx(CraftOffer[playerid]))
				{
				    if (ProxDetectorS(5.0, playerid, CraftOffer[playerid]))
				    {
                    	new weaponname[50];
                    	format(weaponname, 50, "%s", CraftName[playerid]);
                    	switch(CraftId[playerid])
						{
							case 1:
							{
								Info[playerid][pScrewdriver]++;
								return SendClientMessageEx(playerid, COLOR_GENERAL, "/creararma");
							}
							case 2:
							{
								Info[playerid][pSurveillance]++;
								return SendClientMessageEx(playerid, COLOR_GENERAL, "/ponercam /quitarcam /vercam");
							}
							case 3:
							{
								Info[playerid][pFirstaid]++;
								return SendClientMessageEx(playerid, COLOR_GENERAL, "/hpsave");
							}
							case 4:
							{
								return GivePlayerValidWeapon(playerid, 46, 1);
							}
						}
                    	Info[CraftOffer[playerid]][pMats] -= CraftMats[playerid];
                    	Info[CraftOffer[playerid]][pArmsSkill]++;
                    	format(szMessage, sizeof(szMessage), "Le diste a %s una %s.", GetPlayerNameEx(playerid),weaponname);
                    	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    	SendClientMessageEx(CraftOffer[playerid], COLOR_WHITE, szMessage);
                    	format(szMessage, sizeof(szMessage), "Recibiste una %s de %s.", weaponname, GetPlayerNameEx(CraftOffer[playerid]));
                    	SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
                    	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    	format(szMessage, sizeof(szMessage), "* %s crea algo de materiales, y se lo da a %s.", GetPlayerNameEx(CraftOffer[playerid]), GetPlayerNameEx(playerid));
                    	ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    	CraftOffer[playerid] = 999;
                    	CraftId[playerid] = 0;
                    	CraftMats[playerid] = 0;
				    }
               		else return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas estar cerca de la persona para aceptar el objeto!");
				}
				return 1;
			}
			return 1;
		}
        else if(strcmp(params,"testigo",true) == 0) {
            if(MarryWitnessOffer[playerid] < 999) {
                if(IsPlayerConnectedEx(MarryWitnessOffer[playerid])) {
                    if(ProxDetectorS(10.0, playerid, MarryWitnessOffer[playerid])){
                        format(szMessage, sizeof(szMessage), "* Aceptaste la solicitud de %s, para ser tu testigo de matrimonio.", GetPlayerNameEx(MarryWitnessOffer[playerid]));
                        SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
                        format(szMessage, sizeof(szMessage), "* %s aceptó tu solicitud para ser tu testigo de matrimonio.", GetPlayerNameEx(playerid));
                        SendClientMessageEx(MarryWitnessOffer[playerid], COLOR_GENERAL, szMessage);
                        MarryWitness[MarryWitnessOffer[playerid]] = playerid;
                        MarryWitnessOffer[playerid] = 999;
                        return 1;
                    }
                    else return SendClientMessageEx(playerid, COLOR_GREY, "   El jugador que te ha pedido que seas su testigo de matrimonio no está cerca de ti!");
                }
                return 1;
	        }
	        else return SendClientMessageEx(playerid, COLOR_GREY, "   Nadie te pidió ser testigo de matrimonio!");
	    }
        else if(strcmp(params,"divorcio",true) == 0){
            if(DivorceOffer[playerid] < 999){
                if(IsPlayerConnectedEx(DivorceOffer[playerid])){
                    if(ProxDetectorS(10.0, playerid, DivorceOffer[playerid])){
                        format(szMessage, sizeof(szMessage), "* Firmaste los papeles del divorcio de %s, ahora estás solo(a) de nuevo.", GetPlayerNameEx(DivorceOffer[playerid]));
                        SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
                        format(szMessage, sizeof(szMessage), "* %s firmó los papeles del divorcio, ahora estás solo(a) de nuevo.", GetPlayerNameEx(playerid));
                        SendClientMessageEx(DivorceOffer[playerid], COLOR_GENERAL, szMessage);
                        ClearMarriage(playerid);
                        ClearMarriage(DivorceOffer[playerid]);
                        Info[playerid][pPhousekey] = 999;
                        return 1;
                    }
                    else return SendClientMessageEx(playerid, COLOR_GREY, "   El jugador que te propuso el divorcio no está cerca tuyo!");
            	}
            	return 1;
        	}
        	else return SendClientMessageEx(playerid, COLOR_GREY, "Nadie te propuso el divorcio.");
    	}
		else if(strcmp(params,"materiales",true) == 0){
            if(MatsOffer[playerid] < 999){
                if(GetPlayerCash(playerid) >= MatsPrice[playerid]){
					if(IsPlayerConnectedEx(MatsOffer[playerid])){
						if(Info[MatsOffer[playerid]][pMats] < MatsAmount[playerid]) return SendClientMessageEx(playerid,COLOR_GREY, "No tiene los materiales suficientes.");

         				format(szMessage, sizeof(szMessage), "* Compraste %d materiales por $%d, de  %s.", MatsAmount[playerid], MatsPrice[playerid], GetPlayerNameEx(MatsOffer[playerid]));
            			SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
              			format(szMessage, sizeof(szMessage), "* %s has vendido %d materiales, ganaste $%d.", GetPlayerNameEx(playerid), MatsAmount[playerid], MatsPrice[playerid]);
                		SendClientMessageEx(MatsOffer[playerid], COLOR_GENERAL, szMessage);

                  		GivePlayerCash(MatsOffer[playerid], MatsPrice[playerid]);
						GivePlayerCash(playerid, -MatsPrice[playerid]);
                    	Info[playerid][pMats] += MatsAmount[playerid];
                    	Info[MatsOffer[playerid]][pMats] -= MatsAmount[playerid];
                    	
                        new ip[32], ipex[32];
                        GetPlayerIp(playerid, ip, sizeof(ip));
                        GetPlayerIp(MatsOffer[playerid], ipex, sizeof(ipex));
                        format(szMessage, sizeof(szMessage), "[MATS DEAL] %s(IP:%s) pagó %d materiales de %s(IP:%s)", GetPlayerNameEx(playerid), ip, MatsAmount[playerid], GetPlayerNameEx(MatsOffer[playerid]), ipex);
                        Log("logs/pay.log", szMessage);
                        
                        SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
                    	MatsOffer[playerid] = 999;
                    	MatsPrice[playerid] = 0;
                    	MatsAmount[playerid] = 0;
                    }
                }
                else return SendClientMessageEx(playerid, COLOR_GREY, "No tienes dinero suficiente.");
			}
        	else return SendClientMessageEx(playerid, COLOR_GREY, "Nadie te ha ofrecido materiales.");
		}
    	else { return 1; }
	}                                             //not connected
 	return 1;
}
zcmd(cfumar, playerid, params[])
{
	if(Info[playerid][pCigarettes] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, 		"No tienes cigarros!");
    else if(Info[playerid][pLighter] == 0) 	return SendClientMessageEx(playerid, COLOR_WHITE, 		"No tienes encendedor!");
    else if(IsSmoking[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, 		"Ya estas fumando! Usa: /dfumar");
    else
	{
        new randsmoke = random(6);
        if(randsmoke < 5)
 	   {
			Info[playerid][pCigarettes]--;
			IsSmoking[playerid] = 1;
    		format(szMessage, sizeof(szMessage), "* %s saca un cigarro y lo enciende.", GetPlayerNameEx(playerid));
		    ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
			SendClientMessageEx(playerid, COLOR_WHITE, "Estás Fumando. Ahora puedes utilizar /dfumar (para dejar de fumar).");
        }
        else SendClientMessageEx(playerid, COLOR_WHITE, "¡Mucho viento, no lograste encender el cigarro!");
    }
    return 1;
}
zcmd(dfumar, playerid, params[])
{
    if(IsSmoking[playerid] > 0)
	{
    	IsSmoking[playerid] = 0;
     	format(szMessage, sizeof(szMessage), "* %s tira el cigarro al suelo y lo pisa.", GetPlayerNameEx(playerid));
     	ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
      	ClearAnimations(playerid);
    }
    else SendClientMessageEx(playerid, COLOR_GREY, "¡No está fumando!");
    return 1;
}
//Toys
CMD:admincasa(playerid, params[])
{
    #pragma unused params
    if(Info[playerid][pAdmin] >= 5)
    {
    	SendClientMessageEx(playerid, COLOR_GENERAL,"Ayuda - Comandos Administrativos Casa");
		SendClientMessageEx(playerid, COLOR_WHITE, "/gotohouse - /goinhouse - /hnext - /editar - /editarh - /hname");
	}
	else NoAutorizado
	return 1;
}
CMD:adminnegocio(playerid, params[])
{
    #pragma unused params
    if(Info[playerid][pAdmin] >= 5)
    {
    	SendClientMessageEx(playerid, COLOR_GENERAL,"Ayuda - Comandos Administrativos Negocios");
		SendClientMessageEx(playerid, COLOR_WHITE, "/crearnegocio - /nprecio - /ntipo - /nstock");
	    SendClientMessageEx(playerid, COLOR_WHITE, "/avenegocio - /movernegocio - /gotonegocio");
	}
	else NoAutorizado
	return 1;
}
zcmd(toys,playerid, params[])
{
    ShowPlayerDialog( playerid, TOYS, DIALOG_STYLE_LIST, ""COL_GENERAL"Toy Menu", ""COL_GENERAL"* "COL_WHITE"Poner/Quitar un Toy\n"COL_GENERAL"* "COL_WHITE"Editar un Toy\n"COL_GENERAL"* "COL_WHITE"Eliminar un Toy","OK", "Cancelar" );
    return 1;
}
zcmd(ptoys,playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_WHITE, "* Te pusiste todos los toys.");
    for(new x;x<MAX_PLAYERTOYS;x++)
    {
	    if(PlayerToyInfo[playerid][x][ptModelID] != 0) SetPlayerAttachedObject(playerid, x, PlayerToyInfo[playerid][x][ptModelID], PlayerToyInfo[playerid][x][ptBone], PlayerToyInfo[playerid][x][ptPosX], PlayerToyInfo[playerid][x][ptPosY], PlayerToyInfo[playerid][x][ptPosZ], PlayerToyInfo[playerid][x][ptRotX], PlayerToyInfo[playerid][x][ptRotY], PlayerToyInfo[playerid][x][ptRotZ],
		PlayerToyInfo[playerid][x][ftscaleX], PlayerToyInfo[playerid][x][ftscaleY], PlayerToyInfo[playerid][x][ftscaleZ]);
    }
    return 1;
}
zcmd(qtoys,playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_WHITE, "* Te quitaste todos los toys.");
    for(new x;x<MAX_PLAYERTOYS;x++)
    {
	    RemovePlayerAttachedObject(playerid, x);
    }
    return 1;
}
//Canales
zcmd(togac, playerid, params[])
{
    if(Info[playerid][pAdmin] > 0)
	{
        if(!AdminChat[playerid])
		{
	        AdminChat[playerid] = 1;
	        SendClientMessageEx(playerid, COLOR_WHITE, "- Canal de administración desactivado");
	    }
	    else
		{
	        AdminChat[playerid] = 0;
	        SendClientMessageEx(playerid, COLOR_WHITE, "- Canal de administración activado");
	    }
    } else NoAutorizado
    return 1;
}
zcmd(togfam, playerid, params[]){
    if(!gFam[playerid]){
		gFam[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_WHITE, "Chat de Facción desactivado.");
	}
	else{
		gFam[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_WHITE, "Chat de Facción activado.");
	}
    return 1;
}
zcmd(tognews, playerid, params[]){
    if(!gNews[playerid]){
		gNews[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_WHITE, "Chat de Radio/Ads desactivado.");
	}
	else{
		gNews[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_WHITE, "Chat de Radio/Ads activado.");
	}
    return 1;
}
zcmd(togphone, playerid, params[]){
    if (!PhoneOnline[playerid]){
		PhoneOnline[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_WHITE, "Teléfono apagado.");
	}
	else{
		PhoneOnline[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_WHITE, "Teléfono encendido.");
	}
    return 1;
}

zcmd(jetpack, playerid, params[])
{
    if (Info[playerid][pAdmin] < 3) return NoAutorizado
	if(IsPlayerConnectedEx(playerid))
    {
    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
    	JetPack[playerid] = 1;
    }
	return 1;
}
zcmd(eject, playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid))
    {
        new State = GetPlayerState(playerid), giveplayerid;
        if(State!=PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_WHITE, "¡No eres conductor!");
        if(!sscanf(params, "d", giveplayerid))
        {
            if(IsPlayerConnectedEx(giveplayerid))
			{
				if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "¡No te puedes echar ati mismo!");
    			if(IsPlayerInAnyVehicle(giveplayerid))
		        {
					if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(giveplayerid))
					{
      					format(szMessage, sizeof(szMessage), "* %s agarra fuertemente a %s y lo expulsa del vehículo", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				    	ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    	    RemovePlayerFromVehicle(giveplayerid);
					} else SendClientMessageEx(playerid, COLOR_WHITE, "El jugador no está en tu vehículo");
				} else SendClientMessageEx(playerid, COLOR_WHITE, "El jugador no está en un vehículo");
			} else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "* /eject <ID>");
    } else SendClientMessageEx(playerid, COLOR_WHITE, "¡No estás en ningún vehículo!");
    return 1;
}
// Other's
CMD:removegps(playerid, params[])
{
	DisablePlayerCheckpoint(playerid);
	return 1;
}
zcmd(tlc, playerid, params[])
{
    if(Team_SAPD(playerid))
    {
        if(pdtrace != 0 || pdtrace_x != 0 || pdtrace_y != 0 || pdtrace_z != 0)
        {
            SendClientMessageEx(playerid, 0xFF8080FF, "Estableciendo contacto...");
	        SendClientMessageEx(playerid, COLOR_WHITE, "GPS: Contacto establecido, ubicación marcada en el mapa.");
			SetPlayerCheckpoint(playerid,pdtrace_x,pdtrace_y,pdtrace_z,8.0);
	    }
	    else SendClientMessageEx(playerid, COLOR_WHITE, "Error en la localizacion de la persona que llama.");
	}
	else if(Team_SAMD(playerid))
    {
        if(emdtrace != 0 || emdtrace_x != 0 || emdtrace_y != 0 || emdtrace_z != 0)
        {
	        SendClientMessageEx(playerid, COLOR_WHITE, "Ultima llamada del lugar marcados en rojo en el mapa");
	        SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /removegps para remover el checkpoint");
		    SetPlayerCheckpoint(playerid,emdtrace_x,emdtrace_y,emdtrace_z,8.0);
	    }
		else SendClientMessageEx(playerid, COLOR_WHITE, "Error al localizar!");
	}
}
zcmd(entrar, playerid, params[])
{
    //if( Info[playerid][pJailed] > 0 ) return SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No puedes usar este comando.");
    if(IsPlayerConnectedEx(playerid))
	{
	    for(new i = 0; i < sizeof(DDoorsInfo); i++)
		{
        	if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddExteriorVW])
			{
            	if(DDoorsInfo[i][ddVIP] > 0 && Info[playerid][pVIP] < DDoorsInfo[i][ddVIP])
				{
                	SendClientMessageEx(playerid, COLOR_WHITE, "No puedes entrar necesitas ser un mayor nivel de VIP.");
                	return 1;
            	}
            	if(DDoorsInfo[i][ddFamily] > 0)
				{
                	if(Info[playerid][pFMember] != DDoorsInfo[i][ddFamily]-1)
					{
                    	SendClientMessageEx(playerid, COLOR_WHITE, "No puedes entrar, sólo para miembros de la familia.");
    					return 1;
    				}
   	            }
	            if(DDoorsInfo[i][ddFaction] > 0)
				{
					if(DDoorsInfo[i][ddFaction] >= 1 && DDoorsInfo[i][ddFaction] <= 3)
					{
						if(!IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes entrar, esta puerta está restringida. (Sólo Policías)");
					}
					else if(DDoorsInfo[i][ddFaction] < 32 && Info[playerid][pMember] != DDoorsInfo[i][ddFaction])
					{
						return	SendClientMessageEx(playerid, COLOR_WHITE, "Sólo ingreso a miembros de la facción.");
					}
	            }
	            if(DDoorsInfo[i][ddAdmin] > 0 && Info[playerid][pAdmin] < DDoorsInfo[i][ddAdmin]) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes entrar, necesitas ser de más nivel administrativo.");

				if(DDoorsInfo[i][ddWanted] > 0 && Info[playerid][pWantedLevel] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta puerta esta restringida a personas con nivel de búsqueda.");
	            
				if(DDoorsInfo[i][dLocked] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta puerta está bloqueada.");
        		SetPlayerInterior(playerid,DDoorsInfo[i][ddInteriorInt]);
        		Info[playerid][pInt] = DDoorsInfo[i][ddInteriorInt];
        		Info[playerid][pVW] = DDoorsInfo[i][ddInteriorVW];
        		SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddInteriorVW]);
        		if(DDoorsInfo[i][ddCustomInterior])
				{
        		   LoadObjects(playerid);
        		}
        		if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
        	    	SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
        	    	SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorA]);
        	    	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorVW]);
        	    	LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorInt]);
        		}
        		else
				{
            		SetPlayerPos(playerid,DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
            		SetPlayerFacingAngle(playerid,DDoorsInfo[i][ddInteriorA]);
            		SetCameraBehindPlayer(playerid);
        		}
        		if(DDoorsInfo[i][dMusic] == 0) return 1;
        		else
        		{
        		    switch(DDoorsInfo[i][dMusic])
        		    {
        		        case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=56349", 1, 1, 1, 1, 0); // Reggeaton
                        case 2: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=860870", 1, 1, 1, 1, 0); // Electro
                        case 3: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377200", 1, 1, 1, 1, 0); // Techno
                        case 4: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1281016", 1, 1, 1, 1, 0); // Hip hop
                        case 5: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=616366", 1, 1, 1, 1, 0); // Variada
                    }
                }
				return 1;
    		}
	    }
		if (IsPlayerInRangeOfPoint(playerid,3,2281.1748,-1724.4528,13.2521)) //  GARAGE 1
		{

        	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
            	SetVehiclePos(GetPlayerVehicleID(playerid),  2233.9280,-1758.3882,2031.3885);
            	SetVehicleZAngle(GetPlayerVehicleID(playerid),  11.4);
            	Streamer_Update(playerid);
            }
            else{
				SetPlayerPos(playerid, 2235.1851,-1763.5916,2032.9728);
				SetPlayerFacingAngle(playerid, 14.9);
				SetCameraBehindPlayer(playerid);
				LoadObjects(playerid);
			}
			return 1;
		}
		if (IsPlayerInRangeOfPoint(playerid,3,1242.2382,-1732.4800,13.2911)) //  GARAGE 2
		{

        	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
            	SetVehiclePos(GetPlayerVehicleID(playerid),  1134.0381,-1591.4459,6602.5879);
            	SetVehicleZAngle(GetPlayerVehicleID(playerid),  176.3030);
            	Streamer_Update(playerid);
            }
            else{
				SetPlayerPos(playerid, 1134.0381,-1591.4459,6602.5879);
				SetPlayerFacingAngle(playerid, 14.9);
				SetCameraBehindPlayer(playerid);
				LoadObjects(playerid);
			}
			return 1;
		}
		if (IsPlayerInRangeOfPoint(playerid,3,853.3862,-1387.1884,13.7470)) //  GARAGE VIP
		{
		
			if(Info[playerid][pVIP] == 0) return GameTextForPlayer(playerid, "~r~No eres VIP", 2000, 4);
        	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
            	SetVehiclePos(GetPlayerVehicleID(playerid),  855.6053,-1412.6117,4202.1577);
            	SetVehicleZAngle(GetPlayerVehicleID(playerid),  NORTE);
            	Streamer_Update(playerid);
            }
            else{
				SetPlayerPos(playerid, 855.6053,-1412.6117,4202.1577);
				SetPlayerFacingAngle(playerid, NORTE);
				SetCameraBehindPlayer(playerid);
				LoadObjects(playerid);
			}
			return 1;
		}
	    for(new i = 0; i < sizeof(HouseInfo); i++)
		{
    		if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
			{
        		if(Info[playerid][pPhousekey] == i || HouseInfo[i][hLock] == 0 || Info[playerid][pRenting] == i)
				{
			        LoadObjects(playerid);
            		SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
            		Info[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
            		Info[playerid][pVW] = i+6000;
            		SetPlayerVirtualWorld(playerid, i+6000);
            		if(HouseInfo[i][hCustomInterior] == 1){
                		LoadObjects(playerid);
            		}
            		SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
            		SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorA]);
            		SetCameraBehindPlayer(playerid);
            		GameTextForPlayer(playerid, "~w~Bienvenido", 5000, 1);
					Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
        		}
        		else GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);
        		return 1;
        	}
        	else if(IsPlayerInRangeOfPoint(playerid,5,HouseInfo[i][gX], HouseInfo[i][gY], HouseInfo[i][gZ]))
        	{
        	    if(Info[playerid][pPhousekey] == i || HouseInfo[i][hLock] == 0 || Info[playerid][pRenting] == i)
        	    {
        	        if(!IsPlayerInAnyVehicle(playerid))
        	        {
                        LoadObjects(playerid);
            			Info[playerid][pVW] = i+6000;
            			SetPlayerVirtualWorld(playerid, i+6000);
						switch(HouseInfo[i][gT])
						{
							case 1: SetPlayerPos(playerid, 1331.0873,-1556.7892,10037.3408);
							case 2: SetPlayerPos(playerid, 1346.3470,-1555.5765,10037.3408);
							case 3: SetPlayerPos(playerid, 1327.4423,-1590.5065,10037.3408);
						}
					}
					else
					{
					    for(new p = 0; p < MAX_PLAYERS; p++)
	        			{
		    				new vehact = GetPlayerVehicleID(playerid);
    						if(IsPlayerInVehicle(p, vehact))
    						{
					    		LoadObjects(p);
      							SetPlayerVirtualWorld(p, i+6000);
   								Info[p][pVW] = i+6000;
   								SetVehicleVirtualWorld(vehact, i+6000);
        						switch(HouseInfo[i][gT])
								{
									case 1:
									{
										SetVehiclePos(vehact, 1331.0873,-1556.7892,10037.3408);
										SetVehicleZAngle(vehact, 357.0128);
									}
									case 2:
									{
										SetVehiclePos(vehact, 1346.3470,-1555.5765,10037.3408);
										SetVehicleZAngle(vehact, 354.9474);
									}
									case 3:
									{
										SetVehiclePos(vehact, 1327.4423,-1590.5065,10037.3408);
										SetVehicleZAngle(vehact, 354.4669);
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return 1;
}
zcmd(salir, playerid, params[])
{
    //if( Info[playerid][pJailed] > 0 ) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando ahora.");
    if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hacer esto en la arena!");
    if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hacer esto ahora.");
	for(new i = 0; i <  sizeof(DDoorsInfo); i++)
	{
    	if (IsPlayerInRangeOfPoint(playerid,3,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddInteriorVW])
		{
        	SetPlayerInterior(playerid,DDoorsInfo[i][ddExteriorInt]);
        	Info[playerid][pInt] = DDoorsInfo[i][ddExteriorInt];
        	SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddExteriorVW]);
        	Info[playerid][pVW] = DDoorsInfo[i][ddExteriorVW];
        	if(DDoorsInfo[i][ddCustomExterior])
			{
				LoadObjects(playerid);
        	}
        	if(DDoorsInfo[i][dMusic] != 0) StopAudioStreamForPlayer(playerid);
        	if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
            	SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
            	SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorA]);
            	SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorVW]);
            	LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorInt]);
        	}
        	else
			{
            	SetPlayerPos(playerid,DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
            	SetPlayerFacingAngle(playerid, DDoorsInfo[i][ddExteriorA]);
            	SetCameraBehindPlayer(playerid);
            	return 1;
        	}
    	}
	}
	if (IsPlayerInRangeOfPoint(playerid,8,2233.9280,-1758.3882,2031.3885)) //  GARAGE 1
	{
       	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
           	SetVehiclePos(GetPlayerVehicleID(playerid),  2281.1748,-1724.4528,13.2521);
           	SetVehicleZAngle(GetPlayerVehicleID(playerid),  0.00);
           	Streamer_Update(playerid);
        }
        else
		{
			SetPlayerPos(playerid, 2280.5620,-1722.8878,13.5469);
			SetPlayerFacingAngle(playerid, 0.00);
			SetCameraBehindPlayer(playerid);
		}
		return 1;
	}
	if (IsPlayerInRangeOfPoint(playerid,8,1140.7430,-1592.1893,6602.4922)) //  GARAGE 1
	{
       	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
           	SetVehiclePos(GetPlayerVehicleID(playerid),  1242.2382,-1732.4800,13.2911);
           	SetVehicleZAngle(GetPlayerVehicleID(playerid),  359.47);
           	Streamer_Update(playerid);
        }
        else{
			SetPlayerPos(playerid, 1241.9020,-1734.0985,13.5899);
			SetPlayerFacingAngle(playerid, 354.9746);
			SetCameraBehindPlayer(playerid);
		}
		return 1;
	}
	if (IsPlayerInRangeOfPoint(playerid,8,855.6053,-1412.6117,4202.1577)) //  GARAGE VIP
	{
       	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
           	SetVehiclePos(GetPlayerVehicleID(playerid),  853.3862,-1387.1884,13.7470);
           	SetVehicleZAngle(GetPlayerVehicleID(playerid),  182.4513);
           	Streamer_Update(playerid);
        }
        else{
			SetPlayerPos(playerid, 853.3862,-1387.1884,13.7470);
			SetPlayerFacingAngle(playerid, 182.4513);
			SetCameraBehindPlayer(playerid);
		}
		return 1;
	}
    for(new i = 0; i <  sizeof(HouseInfo); i++)
	{
        if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && Info[playerid][pVW] == i+6000)
		{
			SetPlayerInterior(playerid,0);
            Info[playerid][pInt] = 0;
            if(HouseInfo[i][hCustomExterior] == 1)
			{
				LoadObjects(i);
			}
            SetPlayerPos(playerid,HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
            SetPlayerFacingAngle(playerid, HouseInfo[i][hExteriorA]);
            SetCameraBehindPlayer(playerid);
            SetPlayerVirtualWorld(playerid, 0);
            Info[playerid][pVW] = 0;
            return Streamer_UpdateEx(playerid, HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
        }
        else if(IsPlayerInRangeOfPoint(playerid,400.0, 1331.0873,-1556.7892,10037.3408) && Info[playerid][pVW] == i+6000)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
 			{
				LoadObjects(playerid);
				SetPlayerVirtualWorld(playerid, 0);
				Info[playerid][pVW] = 0;
				SetPlayerPos(playerid,HouseInfo[i][gX],HouseInfo[i][gY],HouseInfo[i][gZ]);
				SetPlayerFacingAngle(playerid, HouseInfo[i][gR]);
				SetCameraBehindPlayer(playerid);
				Streamer_UpdateEx(playerid, HouseInfo[i][gX],HouseInfo[i][gY],HouseInfo[i][gZ]);
			}
			else
			{
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					for(new p = 0; p < MAX_PLAYERS; p++)
					{
						new vehact = GetPlayerVehicleID(playerid);
						if(IsPlayerInVehicle(p, vehact))
						{
							LoadObjects(p);
							SetPlayerVirtualWorld(p, 0);
							Info[p][pVW] = 0;
							SetVehicleVirtualWorld(vehact, 0);
							SetVehiclePos(vehact,HouseInfo[i][gX],HouseInfo[i][gY],HouseInfo[i][gZ]);
							SetCameraBehindPlayer(p);
							Streamer_UpdateEx(p, HouseInfo[i][gX],HouseInfo[i][gY],HouseInfo[i][gZ]);
						}
					}
				}
     		}
	    }
    }
	return 1;
}
CMD:contrato(playerid, params[])
{
	if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
	if(Info[playerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto estando en la carcel.");

	new giveplayerid, moneys, detail[32];
	if(sscanf(params, "dds[32]", giveplayerid, moneys, detail)) return SendClientMessageEx(playerid, COLOR_WHITE, "USO: /contrato [ID] [Monto] [Detalles]");

	if( moneys < 2000 || moneys > 1000000) return SendClientMessageEx(playerid, COLOR_GREY, "No se puede hacer contratos de menos de $ 2000 o más de $ 1.000.000.");
	else if((moneys < 100000 || moneys > 1000000) && IsACop(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "La cantidad de dinero mínimo para un agente es de $ 100.000.");
	if(Info[playerid][pLevel] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes ser el nivel 3 para hacer un contrato.");
	if(Info[giveplayerid][pConnectTime] < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No se puede hacer contratos a los jugadores con menos de 1 horas de juego.");
	if (IsPlayerConnectedEx(giveplayerid))
	{
		if(Hitman(giveplayerid)){SendClientMessageEx( playerid, COLOR_GREY, "No se puede poner un contrato a un Hitman." );}
		else
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(moneys >= 1000001) return SendClientMessageEx( playerid, COLOR_GREY, "El precio máximo del contrato es de $ 1.000.000!" );

				if( Info[giveplayerid][pHead] >= 1000000 ) return SendClientMessageEx( playerid, COLOR_GREY, "Ese jugador ya tiene un contrato maximo." );
				
				if(moneys + Info[giveplayerid][pHead] >= 1000001 ) return SendClientMessageEx( playerid, COLOR_GREY, "Ese jugador ya tiene un contrato maximo." );
				
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "No te puedes hacer un contrato."); return 1; }
				new playermoney = GetPlayerCash(playerid);
				if (moneys > 0 && playermoney >= moneys)
				{
					if(strlen(detail) > 32) return SendClientMessageEx(playerid, COLOR_WHITE, "Los detalles del contrato no podrá ser superior a 32 carácteres.");
					GivePlayerCash(playerid, (0 - moneys));
					Info[giveplayerid][pHead]+=moneys;
					strmid(Info[giveplayerid][pContractBy], GetPlayerNameEx(playerid), 0, strlen(GetPlayerNameEx(playerid)), MAX_PLAYER_NAME);
					strmid(Info[giveplayerid][pContractDetail], detail, 0, strlen(detail), 32);
					format(szMessage, sizeof(szMessage), "%s ha echo un contrato: Matar a %s por $%d, detalles: %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), moneys, detail);
					SendFamilyMessage(8, COLOR_GRAD1, szMessage);
					format(szMessage, sizeof(szMessage), "* Has echo un contrato: Matar a %s for $%d, detalles: %s.",GetPlayerNameEx(giveplayerid), moneys, detail);
					SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					new year, month,day;
					new hour,minuite,second;
					getdate(year, month, day);
					gettime(hour,minuite,second);
					format(szMessage, sizeof(szMessage), "<< %s hizó un contrato: Matar a %s por $%d, detalles: %s (%d-%d-%d)(%d:%d) >>",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),moneys,detail,month,day,year,hour,minuite);
					Log("logs/contracts.log", szMessage);
					format(szMessage, sizeof(szMessage), "%s hizó un contrato: Matar a %s por $%d, detalles: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), moneys, detail);
					ABroadCast(COLOR_GRAD1,szMessage,4);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
				else return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes dinero para esto.");
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado inválido.");
	return 1;
}
zcmd(acontrato, playerid, params[])
{
	if(HitOffer[playerid] < 999)
	{
		if(HitToGet[playerid] < 999)
		{
        	if(IsPlayerConnectedEx(HitToGet[playerid]))
			{
            	format(szMessage, sizeof(szMessage), "* %s aceptó el contrato para matar a %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(HitToGet[playerid]));
                SendClientMessageEx(HitOffer[playerid], COLOR_GENERAL, szMessage);
                format(szMessage, sizeof(szMessage), "* Aceptaste el contrato para matar a %s, recibirás $%d cuando completes la misión.", GetPlayerNameEx(HitToGet[playerid]), Info[HitToGet[playerid]][pHead] / 4 * 2);
                SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
                format(szMessage, sizeof(szMessage), "Se le asignó a %s el contrato de %s, por $%d.", GetPlayerNameEx(playerid), GetPlayerNameEx(HitToGet[playerid]),  Info[HitToGet[playerid]][pHead] / 4 * 2);
                SendFamilyMessage(8, COLOR_GRAD1, szMessage);
                GoChase[playerid] = HitToGet[playerid];
                GetChased[HitToGet[playerid]] = playerid;
                GotHit[HitToGet[playerid]] = 1;
                HitToGet[playerid] = 999;
                HitOffer[playerid] = 999;
                return 1;
			}
			else
			{
				HitToGet[playerid] = 999;
                HitOffer[playerid] = 999;
                return 1;
            }
        }
        else return SendClientMessageEx(playerid, COLOR_GREY, "   Nadie te ha ofrecido un contrato!");
	}
	return 1;
}
CMD:hrangos(playerid, params[])
{
    #pragma unused params
	if (!Hitman(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No eres de la agencia Hitman!");
	SendClientMessageEx(playerid, COLOR_WHITE, "|__________________ Rangos __________________|");
	foreach(Player, i)
	{
		if(Hitman(i))
		{
			if( GoChase[playerid] == 999 )
			{
				format(szMessage, sizeof(szMessage), "* Nombre: %s | Rango %d | Hits Completados: %d | Hits Fallados: %d", GetPlayerNameEx(i),Info[i][pRank], Info[i][pCHits], Info[i][pFHits]);
				SendClientMessageEx(playerid, COLOR_GREY, szMessage);
			}
			else
			{
				format(szMessage, sizeof(szMessage), "* Nombre: %s | Rango %d | Hits Completados: %d | Hits Fallados: %d | Siguiendo: %s", GetPlayerNameEx(i),Info[i][pRank], Info[i][pCHits], Info[i][pFHits], GetPlayerNameEx(GoChase[i]));
				SendClientMessageEx(playerid, COLOR_GREY, szMessage);
			}
		}
	}
	return 1;
}

CMD:darhit(playerid, params[])
{
	if(Hitman(playerid))
	{
		if(Info[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "   Sólo rangos 4 y superiores pueden asignar contactos a la gente!");
		new giveplayerid, targetid;
		if(sscanf(params, "dd", giveplayerid, targetid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /darhit [playerid] [ID de Objetivo]");
		if(IsPlayerConnectedEx(giveplayerid))
		{
			if(GoChase[giveplayerid] < 999) return SendClientMessageEx(playerid, COLOR_GREY, "   Ese hitman ya está ocupado con otro contrato!");
			if(GotHit[targetid] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "   Otro asesino ya fue asignado ese contrato!");
			if(IsPlayerConnectedEx(targetid))
			{
				if(Info[targetid][pHead] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "   Ese objetivo no tiene un contrato con la agencia!");
				format(szMessage, sizeof(szMessage), "* Ofreciste %s un contrato para matar a %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(targetid));
				SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
				format(szMessage, sizeof(szMessage), "* Hitman %s te ofreció un contrato para matar a %s (Usa /acontrato), para aceptarlo.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
				SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
				HitOffer[giveplayerid] = playerid;
				HitToGet[giveplayerid] = targetid;
				return 1;
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "  La persona contratada no está en línea, utiliza /contratos!");
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "   Ese hitman no está online");
	}
	return 1;
}
CMD:borrarhit(playerid, params[])
{
	if( Info[playerid][pAdmin] >= 4 || Hitman(playerid) && Info[playerid][pRank] >= 5)
	{
		new giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /deletehit [playerid]");
		if(!IsPlayerConnectedEx(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Jugador no está online.");
		if(Info[giveplayerid][pHead] >= 1 )
		{
			Info[giveplayerid][pHead] = 0;
			new year, month,day;
			getdate(year, month, day);
			format(szMessage, sizeof(szMessage), "<< %s has removido el contrato de %s(%d-%d-%d) >>", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), month,day,year);
			Log("logs/contracts.log", szMessage);
			format(szMessage, sizeof(szMessage), "Has removido el contrato por la cabeza de %s.", GetPlayerNameEx(giveplayerid) );
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			GoChase[giveplayerid] = 999;

			foreach(Player, i)
			{
				if( HitToGet[i] == giveplayerid )
				{
					HitToGet[i] = 999;
					HitOffer[i] = 999;
				}
			}
		}
		else SendClientMessageEx( playerid, COLOR_GREY, "* No hay un contrato activo en ese jugador!" );
	}
	else NoAutorizado
	return 1;
}

zcmd(amascara, playerid, params[]){
    if(Info[playerid][pMask] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, " Ya tienes una máscara.");
    if(Hitman(playerid)){
    	if(PlayerToPoint(5, playerid, 1107,-323,68.66)){
        	SendClientMessageEx(playerid, COLOR_GENERAL, "Cogiste una máscara, "COL_WHITE"/mascara "COL_GENERAL"para ponertela.");
        	Info[playerid][pMask] = 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, " No eres Hitman.");
	return 1;
}
zcmd(radio, playerid, params[])
{
    if(OnDuty[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, " No estás en servicio.");
    if(!RadioOn[playerid])
	{
		RadioOn[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_WHITE, "Prendiste tu radio");
	}
	else
	{
		RadioOn[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_WHITE, "Apagaste tu radio");
	}
    return 1;
}
zcmd(duty, playerid, params[])
{
	if(Team_SAMD(playerid) || Gobierno(playerid))
	{
	    if(OnDuty[playerid]== 0)
	    {
	        OnDuty[playerid] = 1;
	        SetPlayerToTeamColor(playerid);
	        SendClientMessageEx(playerid, COLOR_WHITE, "* Ahora estas en servicio.");
	    }
	    else
	    {
	        OnDuty[playerid] = 0;
	        SetPlayerToTeamColor(playerid);
	        SendClientMessageEx(playerid, COLOR_WHITE, "* Ahora ya no estas en servicio.");
	    }
	}
	else if(Team_LSTV(playerid))
	{
	    if(OnDuty[playerid]== 0)
	    {
	        OnDuty[playerid] = 1;
	        SendClientMessageEx(playerid, COLOR_WHITE, "* Ahora estas en servicio.");
	    }
	    else
	    {
	        OnDuty[playerid] = 0;
	        SendClientMessageEx(playerid, COLOR_WHITE, "* Ahora ya no estas en servicio.");
	    }
	}
	else SendClientMessageEx(playerid, -1, "[ERROR]: No tienes autorización a usar este comando.");
	return 1;
}
zcmd(frecuencia, playerid, params[])
{
	new frequency;
	if(sscanf(params, "d", frequency))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USA: /frecuencia [frecuencia]");
		SendClientMessageEx(playerid, COLOR_WHITE, "* Ajuste la frecuencia de su radio - 0 Si no quieres oir nada.");
		return 1;
	}
    if(frequency > 9999999 || frequency < -9999999) { SendClientMessageEx(playerid, COLOR_GREY, "Frecuencia no debe ser menor a -9999999 y mayor 9999999."); return 1; }
	if (Info[playerid][pRadio] == 1)
	{
		Info[playerid][pRadioFreq] = frequency;
		format(szMessage, sizeof(szMessage), "Ajustaste la frecuencia de tu radio portable a %d khz.",frequency);
		SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	}
    else SendClientMessageEx(playerid, COLOR_WHITE, "No tiene una Radio Portable.");
    return 1;
}
zcmd(pr, playerid, params[]){
	if(Info[playerid][pRadio] == 1){
        if(Info[playerid][pRadioFreq] >= 1 || Info[playerid][pRadioFreq] <= -1){
			if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /pr [chat]");
			if(GetPVarInt(playerid, "Injured") != 0||Info[playerid][pEstado] !=0) return SendClientMessageEx (playerid, COLOR_WHITE, "No puedes usar esto ahora.");
			RadioBroadCast(playerid, COLOR_GREY, params);
        }
        else SendClientMessageEx(playerid, COLOR_WHITE, "* Primero ajusta la frecuencia. /frecuencia'");
    }
    else SendClientMessageEx(playerid, COLOR_WHITE, "* Primero necesitas tener una radio portatil, comprala en el 24/7");
    return 1;
}
zcmd(togpr, playerid, params[])
{
	if(Info[playerid][pRadio] == 1)
	{
		if (gRadio[playerid] == 0)
		{
 			gRadio[playerid] = 1;
   			format(szMessage,sizeof(szMessage),"Has prendido tu radio portátil, y está sincronizada a %d khz.",Info[playerid][pRadioFreq]);
        	SendClientMessageEx(playerid,COLOR_WHITE,szMessage);
    	}
    	else
    	{
 			gRadio[playerid] = 0;
   			SendClientMessageEx(playerid,COLOR_WHITE,"Has apagado su radio portátil.");
    	}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una Radio portátil.");
	return 1;
}
zcmd(f, playerid, params[])
{
    new facstring[128];
	if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
    if(nofac != 1)
    {
        if(!isnull(params))
        {
            if(Info[playerid][pLeader] > 0 || Info[playerid][pMember] > 0)
            {
            	switch(Info[playerid][pMember])
            	{
            	    case 1:
            	    {
            	        switch(Info[playerid][pRank])
            	        {
            	            case 6: format(facstring, sizeof(facstring), "{04FFFF}** (( Comandante %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 5: format(facstring, sizeof(facstring), "** (( Teniente %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 4: format(facstring, sizeof(facstring), "** (( Sargento %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 3: format(facstring, sizeof(facstring), "** (( Detective %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 2: format(facstring, sizeof(facstring), "** (( Oficial %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 1: format(facstring, sizeof(facstring), "** (( Cadete %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	        }
            	    }
            	    case 2:
            	    {
            	        switch(Info[playerid][pRank])
            	        {
            	            case 6: format(facstring, sizeof(facstring), "{04FFFF}** (( Director %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 5: format(facstring, sizeof(facstring), "** (( Sub-Director %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 4: format(facstring, sizeof(facstring), "** (( Agente Esp. %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 3: format(facstring, sizeof(facstring), "** (( Agente Especial %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 2: format(facstring, sizeof(facstring), "** (( Agente Superior %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 1: format(facstring, sizeof(facstring), "** (( Agente %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	        }
            	    }
            	    case 3:
            	    {
            	        switch(Info[playerid][pRank])
            	        {
            	            case 6: format(facstring, sizeof(facstring), "{04FFFF}** (( Coronel %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 5: format(facstring, sizeof(facstring), "** (( Mayor %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 4: format(facstring, sizeof(facstring), "** (( Capitan %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 3: format(facstring, sizeof(facstring), "** (( Sargento %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 2: format(facstring, sizeof(facstring), "** (( Soldado %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 1: format(facstring, sizeof(facstring), "** (( Cabo %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	        }
            	    }
					case 4:
            	    {
            	        switch(Info[playerid][pRank])
            	        {
            	            case 6: format(facstring, sizeof(facstring), "{04FFFF}** (( Director %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 5: format(facstring, sizeof(facstring), "** (( Responsable Tec. %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 4: format(facstring, sizeof(facstring), "** (( Supervisor %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 3: format(facstring, sizeof(facstring), "** (( Médico %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 2: format(facstring, sizeof(facstring), "** (( Paramédico %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 1: format(facstring, sizeof(facstring), "** (( Prácticante %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	        }
            	    }
					case 5:
            	    {
            	        switch(Info[playerid][pRank])
            	        {
            	            case 6: format(facstring, sizeof(facstring), "{04FFFF}** (( Director %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 5: format(facstring, sizeof(facstring), "** (( Presentador %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 4: format(facstring, sizeof(facstring), "** (( Enviado Especial %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 3: format(facstring, sizeof(facstring), "** (( Periodista %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 2: format(facstring, sizeof(facstring), "** (( Redactor %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 1: format(facstring, sizeof(facstring), "** (( Becario %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	        }
            	    }
            	    case 6:
            	    {
            	        switch(Info[playerid][pRank])
            	        {
            	            case 6: format(facstring, sizeof(facstring), "{04FFFF}** (( Director %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 5: format(facstring, sizeof(facstring), "** (( Supervisor %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 4: format(facstring, sizeof(facstring), "** (( Ingeniero %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 3: format(facstring, sizeof(facstring), "** (( Mecánico %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 2: format(facstring, sizeof(facstring), "** (( Trucker %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 1: format(facstring, sizeof(facstring), "** (( Ayudante %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	        }
            	    }
            	    case 7:
            	    {
            	        switch(Info[playerid][pRank])
            	        {
            	            case 6: format(facstring, sizeof(facstring), "{04FFFF}** (( Presidente %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 5: format(facstring, sizeof(facstring), "** (( Vice-Presidente %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 4: format(facstring, sizeof(facstring), "** (( Ministro %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 3: format(facstring, sizeof(facstring), "** (( Alcalde %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 2: format(facstring, sizeof(facstring), "** (( Secretario %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 1: format(facstring, sizeof(facstring), "** (( Empleado Gubernamental %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	        }
            	    }
            	    case 8:
            	    {
            	        switch(Info[playerid][pRank])
            	        {
            	            case 6: format(facstring, sizeof(facstring), "{04FFFF}** (( Director %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 5: format(facstring, sizeof(facstring), "** (( Vice-Director %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 4: format(facstring, sizeof(facstring), "** (( Agente Especial %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 3: format(facstring, sizeof(facstring), "** (( Sicario %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 2: format(facstring, sizeof(facstring), "** (( Asesino %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 1: format(facstring, sizeof(facstring), "** (( Novato %s: %s ))  **", GetPlayerNameEx(playerid), params);
						}
					}
            	    case 9:
            	    {
            	        switch(Info[playerid][pRank])
            	        {
            	            case 6: format(facstring, sizeof(facstring), "{04FFFF}** (( Pakhan %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 5: format(facstring, sizeof(facstring), "** (( Brigadier %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 4: format(facstring, sizeof(facstring), "** (( Sovetnik %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 3: format(facstring, sizeof(facstring), "** (( Boevik %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 2: format(facstring, sizeof(facstring), "** (( Okhrannik %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 1: format(facstring, sizeof(facstring), "** (( Shestorka %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	        }
            	    }
            	    case 10:
            	    {
            	        switch(Info[playerid][pRank])
            	        {
            	            case 6: format(facstring, sizeof(facstring), "{04FFFF}** (( Capo di tutti capi %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 5: format(facstring, sizeof(facstring), "** (( Don %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 4: format(facstring, sizeof(facstring), "** (( Sottocapo %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 3: format(facstring, sizeof(facstring), "** (( Consigliere %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 2: format(facstring, sizeof(facstring), "** (( Soldado %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 1: format(facstring, sizeof(facstring), "** (( Asociado %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	        }
            	    }
            	    case 11:
            	    {
            	        switch(Info[playerid][pRank])
            	        {
            	            case 6: format(facstring, sizeof(facstring), "{04FFFF}** (( Real G %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 5: format(facstring, sizeof(facstring), "** (( Original Gangster %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 4: format(facstring, sizeof(facstring), "** (( Gangster %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 3: format(facstring, sizeof(facstring), "** (( Young Dealer %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 2: format(facstring, sizeof(facstring), "** (( Young Bully %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 1: format(facstring, sizeof(facstring), "** (( Outsider %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	        }
            	    }
            	    case 12:
            	    {
            	        switch(Info[playerid][pRank])
            	        {
            	            case 6: format(facstring, sizeof(facstring), "{04FFFF}** (( Rollin G %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 5: format(facstring, sizeof(facstring), "** (( Loc %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 4: format(facstring, sizeof(facstring), "** (( Original Gangster %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 3: format(facstring, sizeof(facstring), "** (( Young Gangster %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 2: format(facstring, sizeof(facstring), "** (( Little Gangster %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 1: format(facstring, sizeof(facstring), "** (( Outsider %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	        }
            	    }
            	    case 13:
            	    {
            	        switch(Info[playerid][pRank])
            	        {
            	            case 6: format(facstring, sizeof(facstring), "{04FFFF}** (( Corona Real %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 5: format(facstring, sizeof(facstring), "** (( Primera Corona %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 4: format(facstring, sizeof(facstring), "** (( Segunda Corona %s: %s )) **", GetPlayerNameEx(playerid), params);
            	            case 3: format(facstring, sizeof(facstring), "** (( Tercera Corona %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 2: format(facstring, sizeof(facstring), "** (( Latin %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	            case 1: format(facstring, sizeof(facstring), "** (( Forastero %s: %s ))  **", GetPlayerNameEx(playerid), params);
            	        }
            	    }
            	}
            	SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, facstring);
            }
            else return SendClientMessageEx(playerid, COLOR_GREY, "No estás en una facción/familia.");
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "USA: /f <Chat>");
    }
    else SendClientMessageEx(playerid, COLOR_WHITE, "El Chat de faccion esta bloqueado");
    return 1;
}
zcmd(d, playerid, params[])
{
	new rank[64], div[16];
	if(RadioOn[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Tu radio está apagada.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: (/d)epartament [radio chat]");
	switch (Info[playerid][pMember])
	{
    	case 1:
    	{
        	switch(Info[playerid][pRank])
        	{
				case 1: rank = "Cadete";
				case 2: rank = "Oficial";
				case 3: rank = "Detective";
				case 4: rank = "Sargento";
				case 5: rank = "Teniente";
				case 6: rank = "Comandante";
				default: rank = "[Error]";
			}
			switch(Info[playerid][pDivision])
			{
				case 2: div = " (DIVCRI)";
				case 3: div = " (DIVOES)";
				case 4: div = " (DIVANDRO)";
				case 5: div = " (SWAT)";
				case 6: div = " (UL)";
				default: div = "";
			}
			format(szMessage, sizeof(szMessage), "** [SAPD] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
		}
		case 2:
		{
	    	switch(Info[playerid][pRank])
	    	{
				case 1: rank = "Agente";
				case 2: rank = "Agente Superior";
				case 3: rank = "Agente Especial";
				case 4: rank = "Criminalista";
				case 5: rank = "Sub/Director";
				case 6: rank = "Director";
				default: rank = "[Error]";
			}
			switch(Info[playerid][pDivision])
			{
				case 2: div = " (OS)";
				case 3: div = " (UCO)";
				case 4: div = " (UI)";
				case 5: div = " (UAE)";
				default: div = "";
			}
        	format(szMessage, sizeof(szMessage), "** [FBI] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
		}
		case 3:
		{
			switch(Info[playerid][pRank])
			{
				case 1: rank = "Cabo";
				case 2: rank = "Soldado";
				case 3: rank = "Sargento";
				case 4: rank = "Capitán";
				case 5: rank = "Mayor";
				case 6: rank = "Coronel";
				default: rank = "[Error]";
			}
			switch(Info[playerid][pDivision])
			{
				case 2: div = " (FASA)";
				case 3: div = " (EMSA)";
				case 4: div = " (BO)";
				case 5: div = " (FMSA)";
				default: div = "";
			}
        	format(szMessage, sizeof(szMessage), "** [SAEM] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
		}
		case 4:
		{
	    	switch(Info[playerid][pRank])
	    	{
				case 1: rank = "Practicante";
				case 2: rank = "Paramédico";
				case 3: rank = "Médico";
				case 4: rank = "Supervisor";
				case 5: rank = "Técnico";
				case 6: rank = "Director";
				default: rank = "[Error]";
			}
			format(szMessage, sizeof(szMessage), "** [SAMC] %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
		}
		case 7:
		{
	    	switch(Info[playerid][pRank])
	    	{
				case 1: rank = "Staff";
				case 2: rank = "Secretario";
				case 3: rank = "Alcalde";
				case 4: rank = "Ministro de";
				case 5: rank = "Vice-Presidente";
				case 6: rank = "Presidente";
				default: rank = "[Error]";
			}
			switch(Info[playerid][pDivision])
			{
				case 2: div = " (Chofer)";
				case 3: div = " (UG)";
				case 4: div = " Defensa";
				case 5: div = " Justicia";
				case 6: div = " Economía";
				default: div = "";
			}
			format(szMessage, sizeof(szMessage), "** [GOB] %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
		}
		default: SendClientMessageEx(playerid,COLOR_GREY,"* No tienes autorización para usar este comando.");
	}
	for(new i = 1; i < 5; i++){SendRadioMessage(i, COLOR_ALLDEPT, szMessage);}
	SendRadioMessage(7, COLOR_ALLDEPT, szMessage);
	SendRadioMessage(9, COLOR_ALLDEPT, szMessage);
	format(szMessage, sizeof(szMessage), "(radio) %s",params);
	SetPlayerChatBubble(playerid,szMessage,COLOR_WHITE,15.0,5000);
	return 1;
}
zcmd(r, playerid, params[])
{
	new rank[64], div[16];
	if(RadioOn[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, " Tu radio está apagada.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: (/r)adio [radio chat]");
	switch (Info[playerid][pMember]) // employer/rank/division data is pulled from here
	{
		case 1:
		{
			switch(Info[playerid][pRank])
			{
				case 1: rank = "Cadete";
				case 2: rank = "Oficial";
				case 3: rank = "Detective";
				case 4: rank = "Sargento";
				case 5: rank = "Teniente";
				case 6: rank = "Comandante";
				default: rank = "[Error]";
			}
			switch(Info[playerid][pDivision])
			{
				case 2: div = " (DIVCRI)";
				case 3: div = " (DIVOES)";
				case 4: div = " (DIVANDRO)";
				case 5: div = " (SWAT)";
				case 6: div = " (UL)";
				default: div = "";
			}
			format(szMessage, sizeof(szMessage), "** %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			SendRadioMessage(1, TEAM_RADIO_COLOR, szMessage);
		}
		case 2:
		{
		    switch(Info[playerid][pRank])
		    {
				case 1: rank = "Agente";
				case 2: rank = "Agente Superior";
				case 3: rank = "Agente Especial";
				case 4: rank = "Agente Especializado";
				case 5: rank = "Sub/Director";
				case 6: rank = "Director";
				default: rank = "[Error]";
			}
			switch(Info[playerid][pDivision])
			{
				case 2: div = " (OS)";
				case 3: div = " (UCO)";
				case 4: div = " (UI)";
				case 5: div = " (UAE)";
				default: div = "";
			}
			format(szMessage, sizeof(szMessage), "** %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			SendRadioMessage(2, TEAM_RADIO_COLOR, szMessage);
		}
        case 3:
		{
		    switch(Info[playerid][pRank])
		    {
				case 1: rank = "Cabo";
				case 2: rank = "Soldado";
				case 3: rank = "Sargento";
				case 4: rank = "Capitán";
				case 5: rank = "Mayor";
				case 6: rank = "Coronel";
				default: rank = "[Error]";
			}
			switch(Info[playerid][pDivision])
			{
				case 2: div = " (FASA)";
				case 3: div = " (EMSA)";
				case 4: div = " (BO)";
				case 5: div = " (FMSA)";
				default: div = "";
			}
            format(szMessage, sizeof(szMessage), "** %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			SendRadioMessage(3, TEAM_RADIO_COLOR, szMessage);
		}
		case 4:
		{
		    switch(Info[playerid][pRank])
		    {
				case 1: rank = "Practicante";
				case 2: rank = "Paramédico";
				case 3: rank = "Médico";
				case 4: rank = "Supervisor";
				case 5: rank = "Técnico";
				case 6: rank = "Director";
				default: rank = "[Error]";
			}
			format(szMessage, sizeof(szMessage), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
			SendRadioMessage(4, TEAM_RADIO_COLOR, szMessage);
		}
		case 5:
		{
		    switch(Info[playerid][pRank])
		    {
				case 1: rank = "Fotógrafo";
				case 2: rank = "Redactor";
				case 3: rank = "Periodista";
				case 4: rank = "Administrador";
				case 5: rank = "Gerente";
				case 6: rank = "Director";
				default: rank = "[Error]";
			}
			format(szMessage, sizeof(szMessage), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
			SendRadioMessage(5, TEAM_RADIO_COLOR, szMessage);
		}
		case 6:
		{
		    switch(Info[playerid][pRank])
		    {
				case 1: rank = "Ayudante";
				case 2: rank = "Trucker";
				case 3: rank = "Mecánico";
				case 4: rank = "Ingeniero";
				case 5: rank = "Supervisor";
				case 6: rank = "Director";
				default: rank = "[Error]";
			}
			format(szMessage, sizeof(szMessage), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
			SendRadioMessage(6, TEAM_RADIO_COLOR, szMessage);
		}
		case 7:
		{
		    switch(Info[playerid][pRank])
		    {
				case 1: rank = "Staff";
				case 2: rank = "Secretario";
				case 3: rank = "Alcalde";
				case 4: rank = "Ministro de";
				case 5: rank = "Vice-Presidente";
				case 6: rank = "Presidente";
				default: rank = "[Error]";
			}
			switch(Info[playerid][pDivision])
			{
				case 2: div = " (Chofer)";
				case 3: div = " (UG)";
				case 4: div = " Defensa";
				case 5: div = " Justicia";
				case 6: div = " Economía";
				default: div = "";
			}
			format(szMessage, sizeof(szMessage), "** %s%s %s: %s **", rank,div, GetPlayerNameEx(playerid), params);
			SendRadioMessage(7, TEAM_RADIO_COLOR, szMessage);
		}
		case 8:
		{
			switch(Info[playerid][pRank])
			{
				case 1: rank = "Novato";
				case 2: rank = "Asesino";
				case 3: rank = "Sicario";
				case 4: rank = "Agente Especial";
				case 5: rank = "Vice Director";
				case 6: rank = "Director";
				default: rank = "[Error]";
			}
			format(szMessage, sizeof(szMessage), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
			SendRadioMessage(8, TEAM_RADIO_COLOR, szMessage);
		}
		case 9:
		{
			switch(Info[playerid][pRank])
			{
				case 1: rank = "Shestorka";
				case 2: rank = "Okhrannik";
				case 3: rank = "Boevik";
				case 4: rank = "Sovetnik";
				case 5: rank = "Brigadier";
				case 6: rank = "Pakhan";
				default: rank = "[Error]";
			}
			format(szMessage, sizeof(szMessage), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
			SendRadioMessage(9, TEAM_RADIO_COLOR, szMessage);
		}
		case 10:
		{
		    switch(Info[playerid][pRank])
			{
				case 1: rank = "Asociado";
				case 2: rank = "Soldado";
				case 3: rank = "Consigliere";
				case 4: rank = "Sottocapo";
				case 5: rank = "Don";
				case 6: rank = "Capo di tutti capi";
				default: rank = "[ERROR]";
			}
			format(szMessage, sizeof(szMessage), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
			SendRadioMessage(10, TEAM_RADIO_COLOR, szMessage);
		}
		case 11:
		{
			switch(Info[playerid][pRank])
			{
				case 1: rank = "Outsider";
				case 2: rank = "Young Bully";
				case 3: rank = "Young Dealer";
				case 4: rank = "Gangster";
				case 5: rank = "Original Gangster";
				case 6: rank = "Real G";
				default: rank = "[ERROR]";
			}
			format(szMessage, sizeof(szMessage), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
			SendRadioMessage(11, TEAM_RADIO_COLOR, szMessage);
		}
		case 12:
		{
			switch(Info[playerid][pRank])
			{
				case 1: rank = "Outsider";
				case 2: rank = "Little Gangster";
				case 3: rank = "Young Gangster";
				case 4: rank = "Original Gangster";
				case 5: rank = "Loc";
				case 6: rank = "Rollin G";
				default: rank = "[ERROR]";
			}
			format(szMessage, sizeof(szMessage), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
			SendRadioMessage(12, TEAM_RADIO_COLOR, szMessage);
		}
		case 13:
		{
			switch(Info[playerid][pRank])
			{
				case 1: rank = "Forastero";
				case 2: rank = "Latin";
				case 3: rank = "Tercera Corona";
				case 4: rank = "Segunda Corona";
				case 5: rank = "Primera Corona";
				case 6: rank = "Corona Real";
				default: rank = "[ERROR]";
			}
			format(szMessage, sizeof(szMessage), "** %s %s: %s **", rank, GetPlayerNameEx(playerid), params);
			SendRadioMessage(13, TEAM_RADIO_COLOR, szMessage);
		}
		default: return SendClientMessageEx(playerid,COLOR_WHITE,"Tu facción no tiene radio, puedes comprar una en el 24/7.");
	}
	format(szMessage, sizeof(szMessage), "(radio) %s",params);
    SetPlayerChatBubble(playerid,szMessage,COLOR_WHITE,15.0,5000);
    return 1;
}

zcmd(sapddiv, playerid, params[])
{
	if(Info[playerid][pLeader] == 1)
	{
		new giveplayerid, division;
		if(sscanf(params, "dd", giveplayerid, division))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USA: /sapddiv [playerid] [#division]");
			SendClientMessageEx(playerid, COLOR_WHITE, "Divisiones SAPD: 1 (Ninguna), 2 (DIVCRI), 3 (DIVOES), 4 (DIVANDRO), 5 (SWAT), 6 (UL)");
			return 1;
		}
		if (Info[playerid][pRank] == 6)
		{
			if(IsPlayerConnectedEx(giveplayerid))
			{
				if(Info[giveplayerid][pMember] == 1)
				{
					if(division == 3)
					{
						Info[giveplayerid][pDivision] = 3;
						format(szMessage, sizeof(szMessage), "%s te ha invitado a formar parte de la División de Operaciones Especiales [DIVOES].", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has invitado a %s para unirse a la División de Operaciones Especiales [DIVOES].", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
					else if(division == 2)
					{
						Info[giveplayerid][pDivision] = 2;
						format(szMessage, sizeof(szMessage), "%s te ha invitado a formar parte de la División de Criminalistica [DIVCRI].", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has invitado a %s para unirse a la División de Criminalistica [DIVCRI].", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
					else if(division == 4)
					{
						Info[giveplayerid][pDivision] = 4;
						format(szMessage, sizeof(szMessage), "%s te ha invitado a formar parte de la División de Anti-Drogas [DIVANDRO].", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has invitado a %s para unirse a la División de Anti-Drogas [DIVANDRO].", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
					else if(division == 5)
					{
						Info[giveplayerid][pDivision] = 5;
						format(szMessage, sizeof(szMessage), "%s te ha invitado a formar parte de la SWAT.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has invitado a %s para unirse a la SWAT.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
					else if(division == 1)
					{
						Info[giveplayerid][pDivision] = 1;
						format(szMessage, sizeof(szMessage), "%s te ha echado de la división actual", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has echado a %s de su división.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no pertenece a SAPD");
			}
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* No estás autorizado para hacer divisiones en SAPD.");
	}
	return 1;
}
zcmd(fbidiv, playerid, params[])
{
	if(Info[playerid][pLeader] == 2)
	{
		new giveplayerid, division;
		if(sscanf(params, "dd", giveplayerid, division))
		{
		SendClientMessageEx(playerid, COLOR_WHITE, "USA: /fbidiv [playerid] [#division]");
		SendClientMessageEx(playerid, COLOR_WHITE, "Divisiones FBI: 1 (Ninguna), 2 (DIVHO), 3 (UCO), 4 (UI), 5 (RR.HH)");
		return 1;
		}

		if (Info[playerid][pRank] == 6)
		{
			if(IsPlayerConnectedEx(giveplayerid))
			{
				if(Info[giveplayerid][pMember] == 2)
				{
					if(division == 3)
					{
						Info[giveplayerid][pDivision] = 3;
						format(szMessage, sizeof(szMessage), "%s te ha invitado a formar parte de la Unidad de Crimen Organizado [UCO].", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has invitado a %s para unirse a la Unidad de Crimen Organizado [UCO].", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
					else if(division == 2)
					{
						Info[giveplayerid][pDivision] = 2;
						format(szMessage, sizeof(szMessage), "%s te ha invitado a formar parte de la División de Homicidios [DIVHO].", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has invitado a %s para unirse a la División de Homicidios [DIVHO].", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
					else if(division == 4)
					{
						Info[giveplayerid][pDivision] = 4;
						format(szMessage, sizeof(szMessage), "%s te ha invitado a formar parte de la Unidad de Investigación [UI].", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has invitado a %s para unirse a la Unidad de Investigación [UI].", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
					else if(division == 5)
					{
						Info[giveplayerid][pDivision] = 5;
						format(szMessage, sizeof(szMessage), "%s te ha invitado a formar parte de la Unidad de Agentes Especiales [UAE].", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has invitado a %s para unirse a la Unidad de Agentes Especiales [UAE].", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
					else if(division == 1)
					{
						Info[giveplayerid][pDivision] = 1;
						format(szMessage, sizeof(szMessage), "%s te ha echado de la división actual", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has echado a %s de su división.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no pertenece al FBI");
			}
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* No estás autorizado para hacer divisiones en FBI.");
	}
	return 1;
}
zcmd(saemdiv, playerid, params[])
{
	if(Info[playerid][pLeader] == 3)
	{
		new giveplayerid, division;
		if(sscanf(params, "dd", giveplayerid, division))
		{
		SendClientMessageEx(playerid, COLOR_WHITE, "USA: /saemdiv [playerid] [#division]");
		SendClientMessageEx(playerid, COLOR_WHITE, "Divisiones SAEM: 1 (Ninguna), 2 (FASA), 3 (EMM), 4 (BO), 5 (FMSA)");
		return 1;
		}
		if (Info[playerid][pRank] == 6)
		{
			if(IsPlayerConnectedEx(giveplayerid))
			{
				if(Info[giveplayerid][pMember] == 3)
				{
					if(division == 3)
					{
						Info[giveplayerid][pDivision] = 3;
						format(szMessage, sizeof(szMessage), "%s te ha invitado a formar parte del Equipo Médico Militar [EMM].", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has invitado a %s para unirse al Equipo Médico Militar [EMM].", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
					else if(division == 2)
					{
						Info[giveplayerid][pDivision] = 2;
						format(szMessage, sizeof(szMessage), "%s te ha invitado a formar parte de las Fuerzas Aéreas de San Andreas [FASA].", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has invitado a %s para unirse a las Fuerzas Aéreas de San Andreas [FASA].", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
					else if(division == 4)
					{
						Info[giveplayerid][pDivision] = 4;
						format(szMessage, sizeof(szMessage), "%s te ha invitado a formar parte de los Black Ops [BO].", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has invitado a %s para unirse a los Black Ops [BO].", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
					else if(division == 5)
					{
						Info[giveplayerid][pDivision] = 5;
						format(szMessage, sizeof(szMessage), "%s te ha invitado a formar parte de la Fuerza Marítima de San Andreas [FMSA].", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has invitado a %s para unirse a la Fuerza Marítima de San Andreas [FMSA].", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
					else if(division == 1)
					{
						Info[giveplayerid][pDivision] = 1;
						format(szMessage, sizeof(szMessage), "%s te ha echado de la división actual", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has echado a %s de su división.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
				} else SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no pertenece a SAEM");
			}
		} else SendClientMessageEx(playerid, COLOR_GREY, "* No estás autorizado para hacer divisiones en SAEM.");
	}
	return 1;
}
zcmd(gobdiv, playerid, params[])
{
	if(Presidente(playerid))
	{
		new giveplayerid, division;
		if(sscanf(params, "dd", giveplayerid, division))
		{
		SendClientMessageEx(playerid, COLOR_WHITE, "USA: /gobdiv [playerid] [#division]");
		SendClientMessageEx(playerid, COLOR_WHITE, "Divisiones Staff: 1 (Ninguna), 2 (Chofer), 3 (UG)(Guardaespaldas)");
		SendClientMessageEx(playerid, COLOR_WHITE, "Divisiones Ministros: 4 (Defensa), 5 (Justicia), 6 (Economía)");
		return 1;
		}

		if (Info[playerid][pRank] == 6)
		{
			if(IsPlayerConnectedEx(giveplayerid))
			{
				if(Info[giveplayerid][pMember] == 7)
				{
					if(division == 2)
					{
						Info[giveplayerid][pDivision] = 2;
						format(szMessage, sizeof(szMessage), "%s te ha invitado a formar parte de los choféres del gobierno.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has invitado a %s para unirse a los choféres del gobierno.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
					else if(division == 3)
					{
						Info[giveplayerid][pDivision] = 3;
						format(szMessage, sizeof(szMessage), "%s te ha invitado a formar parte de la Unidad de Guardaespaldas [UG].", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has invitado a %s para unirse a la Unidad de Guardaespaldas [UG].", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
					else if(division == 4)
					{
						Info[giveplayerid][pDivision] = 4;
						format(szMessage, sizeof(szMessage), "%s te ha nombrado Ministro de Defensa.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has nombrado a %s Ministro de Defensa.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
					else if(division == 5)
					{
						Info[giveplayerid][pDivision] = 5;
						format(szMessage, sizeof(szMessage), "%s te ha nombrado Ministro de Justicia.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has nombrado a %s Ministro de Justicia.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
					else if(division == 6)
					{
						Info[giveplayerid][pDivision] = 6;
						format(szMessage, sizeof(szMessage), "%s te ha nombrado Ministro de Economía.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has nombrado a %s Ministro de Economía.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
					else if(division == 1)
					{
						Info[giveplayerid][pDivision] = 1;
						format(szMessage, sizeof(szMessage), "%s te ha echado de la división actual", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "Has echado a %s de su división.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
					}
				} else SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no pertenece al FBI");
			}
		}else SendClientMessageEx(playerid, COLOR_GREY, "* No estás autorizado para hacer divisiones en FBI.");
	}
	return 1;
}
   	zcmd(vestidor, playerid, params[])
	{
        if(Info[playerid][pJob] == 1 && PlayerToPoint(20, playerid, 2104.8408,-1810.0991,13.5547+0.6) && GetPlayerSkin(playerid) == 155)
		{
			SetPlayerSkin(playerid, ropapizzero[playerid]);
			Info[playerid][pChar] = 155;
		}
        else if(Info[playerid][pJob] == 1 && PlayerToPoint(20, playerid, 2104.8408,-1810.0991,13.5547+0.6))
		{
			ropapizzero[playerid] = GetPlayerSkin(playerid);

			SetPlayerSkin(playerid, 155);
			Info[playerid][pChar] = 155;
		}
		else if(Info[playerid][pJob] == 8 && IsPlayerInRangeOfPoint(playerid, 2.0, 2195.9170,-1973.0699,13.5589))
		{
		    if(GetPlayerSkin(playerid) != 50) SetPlayerSkin(playerid, 50);
			else SetPlayerSkin(playerid, Info[playerid][pChar]);
			cmd_me(playerid, "se cambia de ropa.");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "¡No estas en los vestidores!");
		}
		return 1;
	}

zcmd(cambiaracento, playerid, params[])
{
    if(Info[playerid][pAdmin] >= 3)
	{
        new giveplayerid;
    	if(!sscanf(params, "d", giveplayerid))
		{
    	    if(IsPlayerConnectedEx(giveplayerid))
			{
    	        if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
            	    if(giveplayerid == playerid) 		return	SendClientMessageEx(playerid, COLOR_WHITE, "¡No puedes usar esto contigo mismo!");
					format(szDialog, sizeof(szDialog),""COL_WHITE"Un administrador te ha ofrecido un cambio de acento.\n\n* Acento actual: %s",Info[giveplayerid][pAcento]);
				    ShowPlayerDialog(giveplayerid,CAMBIARACENTO,DIALOG_STYLE_MSGBOX ,""COL_GENERAL"Cambiar Acento",szDialog,"Cambiar","Salir");
            	}
				else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
    	    }
			else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "* /cambiaracento <jugador>");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "* No puedes hacer esto.");
	return 1;
}
zcmd(contratar, playerid, params[]){
    if(Info[playerid][pLeader] > 0){
        new giveplayerid;
    	if(!sscanf(params, "d", giveplayerid)){
    	    if(IsPlayerConnectedEx(giveplayerid)){
    	        if(ProxDetectorS(8.0, playerid, giveplayerid)){
            	    if(giveplayerid == playerid) 		return	SendClientMessageEx(playerid, COLOR_WHITE, "¡No puedes invitarte ati mismo!");
            	    if(Info[giveplayerid][pFMember] < 255)	return	SendClientMessageEx(playerid, COLOR_WHITE, "¡No puedes invitar a una persona que está en una banda o familia!");
            	    if(Facturing[giveplayerid] > 0)    return 	SendClientMessageEx(playerid, COLOR_WHITE, "Este jugador está en otra tarea, espera.");
            	    if(Info[giveplayerid][pMember] > 0 || Info[giveplayerid][pLeader] > 0) return 	SendClientMessageEx(playerid, COLOR_WHITE, "Este jugador ya tiene facción.");
            	    switch(Info[playerid][pLeader]){
					    case 1: 	ReqF_Name[giveplayerid] = "SA Police Departament";
					    case 2: 	ReqF_Name[giveplayerid] = "FBI";
					    case 3: 	ReqF_Name[giveplayerid] = "San Andreas Ejército Militar";
					    case 4: 	ReqF_Name[giveplayerid] = "SA Medical Department";
					    case 5:     ReqF_Name[giveplayerid] = "Cable News Network";
					    case 6: 	ReqF_Name[giveplayerid] = "Mecanicos 24/7";
					    case 7: 	ReqF_Name[giveplayerid] = "Gobierno SA";
					    case 8: 	ReqF_Name[giveplayerid] = "Hitman";
					    case 9: 	ReqF_Name[giveplayerid] = "Mafia Rusa";
					    case 10: 	ReqF_Name[giveplayerid] = "Mafia Italiana";
					    case 11: 	ReqF_Name[giveplayerid] = "Grove Street";
					    case 12: 	ReqF_Name[giveplayerid] = "Ballas";
					    case 13: 	ReqF_Name[giveplayerid] = "Los Santos Vagos";
					}
                    ReqF_Faction[giveplayerid] = Info[playerid][pLeader];
                    Facturing[giveplayerid] = 1;
					format(szDialog, sizeof(szDialog), "\t\tContrato\n\n\t%s te ofrece un contrato en %s\n\t¿Quieres aceptarlo y pertenecer a esta organización?", GetPlayerNameEx(playerid), ReqF_Name[giveplayerid]);
	        		ShowPlayerDialog(giveplayerid, REQF_ACCEPT, DIALOG_STYLE_MSGBOX, "Contrato de Trabajo", szDialog, "Aceptar", "Rechazar");
            	}else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
    	    }else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
		}else SendClientMessageEx(playerid, COLOR_WHITE, "* /contratar <jugador>");
	}else SendClientMessageEx(playerid, COLOR_WHITE, "Usted no es lider de facción.");
	return 1;
}
zcmd(despedir, playerid, params[]){
	new give;
    if(Info[playerid][pLeader] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Usted no es lider de facción.");
	if(sscanf(params, "d", give)) return SendClientMessageEx(playerid, COLOR_WHITE, "* /despedir <jugador>");
	if(!IsPlayerConnectedEx(give)) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
    if(Info[playerid][pLeader] == Info[give][pMember])
	{
		format(szMessage, sizeof(szMessage), "  El líder %s te ha echado de la facción.", GetPlayerNameEx(playerid));
		SendClientMessageEx(give, COLOR_WHITE, szMessage);
		format(szMessage, sizeof(szMessage), "  Despediste a %s", GetPlayerNameEx(give));
		SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
		Info[give][pMember] = 0;
		Info[give][pRank] = 0;
		Info[give][pDivision] = 0;
		SetPlayerSkin(give, NOOB_SKIN);
		pTazer[give] = 0;
		for(new iToyIter; iToyIter < MAX_PLAYER_ATTACHED_OBJECTS; ++iToyIter)
		{
			for(new LoopRapist; LoopRapist < sizeof(HoldingObjectsCop); ++LoopRapist)
			{
				if(HoldingObjectsCop[LoopRapist][holdingmodelid] == PlayerToyInfo[give][iToyIter][ptModelID])
				{
					PlayerToyInfo[give][iToyIter][ptModelID] = 0;
					PlayerToyInfo[give][iToyIter][ptBone] = 0;
					PlayerToyInfo[give][iToyIter][ptPosX] = 0.0;
					PlayerToyInfo[give][iToyIter][ptPosY] = 0.0;
					PlayerToyInfo[give][iToyIter][ptPosZ] = 0.0;
					PlayerToyInfo[give][iToyIter][ptPosX] = 0.0;
					PlayerToyInfo[give][iToyIter][ptPosY] = 0.0;
					PlayerToyInfo[give][iToyIter][ptPosZ] = 0.0;
					PlayerToyInfo[give][iToyIter][ftscaleX] = 0.0;
					PlayerToyInfo[give][iToyIter][ftscaleY] = 0.0;
					PlayerToyInfo[give][iToyIter][ftscaleZ] = 0.0;
				}
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "El jugador no pertenece a tu facción.");
    return 1;
}

zcmd(despediroff, playerid, params[])
{
	new jugador[MAX_PLAYER_NAME];
    if(Info[playerid][pLeader] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Usted no es lider de facción.");
	if(sscanf(params, "s[24]", jugador)) return SendClientMessageEx(playerid, COLOR_WHITE, "* /despediroff <Nombre_Apellido>");
	if(INI_Exist(jugador))
	{
		new PlayerFile[MAX_PLAYER_NAME + 32];
		format( PlayerFile , sizeof PlayerFile, USERFILE, jugador);
	    INI_ParseFile(PlayerFile, "GetFaccion", false, true, playerid, true, false );
    	if(Info[playerid][pLeader] == JugadorFac[playerid])
		{
			new INI:File = INI_Open(PlayerFile);
    		INI_SetTag(File,"data");
    		INI_WriteInt(File,"Member", 0);
    		INI_WriteInt(File,"Rank", 0);
    		INI_WriteInt(File,"Division", 0);
    		INI_Close(File);
    		JugadorFac[playerid] = 0;
			format(szMessage, sizeof(szMessage), "  Despediste a %s.", jugador);
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "El jugador no pertenece a tu facción.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Esta cuenta no existe.");
    return 1;
}

zcmd(darrango, playerid, params[])
{
    new giveplayerid, rank;
    if(!sscanf(params, "di", giveplayerid, rank))
	{
        if(rank > 6 || rank < 1) { SendClientMessageEx(playerid, COLOR_GREY, "Rangos: 1 al 6!"); return 1; }
	    if(Info[playerid][pLeader] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres líder de facción.");
	    if(IsPlayerConnectedEx(giveplayerid))
	    {
	        if(Info[giveplayerid][pLeader] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "¡No puedes asignar rango a un líder!");
      		if(Info[playerid][pLeader] == Info[giveplayerid][pMember])
        	{
        	    Info[giveplayerid][pRank] = rank;
        	    format(szMessage, sizeof(szMessage), "Líder %s te asignó rango %d", GetPlayerNameEx(playerid), Info[giveplayerid][pRank]);
				SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
                format(szMessage, sizeof(szMessage), "Asiganaste a %s rango %d", GetPlayerNameEx(giveplayerid), Info[giveplayerid][pRank]);
				SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
        	}
        	else SendClientMessageEx(playerid, COLOR_WHITE, "¡Este miembro no es de tu facción!");
	    }
	    else SendClientMessageEx(playerid, COLOR_GREY, "Jugado desconectado.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "* /darrango <jugador> <rango>");
    return 1;
}
zcmd(equipo, playerid, params[])
{
	if(Team_LSTV(playerid))
	{
	    if(PlayerToPoint(5, playerid, 1320.5592,-1033.5898,3357.7151))
	    {
	        new cnn[] = "Seguridad\nPeriodista\nRopa Normal";
	        ShowPlayerDialog(playerid,EQUIPO_CNN,DIALOG_STYLE_LIST,">> CNN <<",cnn,"Equipar","Cancelar");
	    }
	}
	if(Gobierno(playerid))
	{
	    if(PlayerToPoint(5, playerid, 352.3081,172.4763,1025.7891))
	    {
	        new gob[] = "Seguridad\nChofér\nBotiquin\nChaleco Kevlar\nRopa Normal";
	        ShowPlayerDialog(playerid,EQUIPO_GOB,DIALOG_STYLE_LIST,">> Gobierno <<",gob,"Equipar","Cancelar");
	    }
	}
    if(Hitman(playerid))
	{
		if(GetPlayerVirtualWorld(playerid) == 5000)
		{
        	new hit[] = "Cuchillo + Pistola SD\nSniper\nDisfraz\nMáscara\nKit de Secuestro\nCambiar Nombre";
        	ShowPlayerDialog(playerid,DIALOG_HITMAN,DIALOG_STYLE_LIST,"Armeria y Disfraces",hit,"Equipar","Cancelar");
		}
	}
	else if(Team_SAMD(playerid))
	{
		if(PlayerToPoint(5, playerid, 842.9451,-1223.4346,1195.2655))
		{
		    new eq[] = "Traje Doctor\nTraje Médico Blanco\nTraje Médico Azul\nTraje Médico Verde\nIndumentario Normal";
		    ShowPlayerDialog(playerid,EQUIPO_DOC,DIALOG_STYLE_LIST,">> Equipo SAMD <<",eq,"Equipar","Cancelar");
		}
	}
	else if(Rusos(playerid))
	{
		if(PlayerToPoint(5, playerid, 314.3925,-1507.0775,5.6959))
		{
		    new ruso[] = "Cuchillo + Desert Eagle ($200)\nMP5 ($350)\nKit de Secuestro\nMascara\nPalanca";
		    ShowPlayerDialog(playerid,EQUIPO_MAFIA,DIALOG_STYLE_LIST,"Armamento - Mafia Rusa",ruso,"Equipar","Cancelar");
		}
	}
	else if(Italianos(playerid))
	{
		if(PlayerToPoint(5, playerid, 2471.9392,-1676.6755,15308.5859))
		{
		    new ruso[] = "Cuchillo + Desert Eagle ($200)\nMP5 ( $350)\nKit de Secuestro\nMascara\nPalanca";
		    ShowPlayerDialog(playerid,EQUIPO_MAFIA,DIALOG_STYLE_LIST,"Armamento - Mafia Italiana",ruso,"Equipar","Cancelar");
		}
	}
	else if(Team_Grove(playerid))
	{
	    if(PlayerToPoint(5, playerid, 0.0, 0.0, 0.0))
		{
		    new ruso[] = "Bate + 9mm ($50)\nUZI ($250)\nKit de Secuestro\nMascara\nPalanca";
		    ShowPlayerDialog(playerid,EQUIPO_PANDILLA,DIALOG_STYLE_LIST,"Armamento - Grove Street",ruso,"Equipar","Cancelar");
		}
	}
	else if(Team_Ballas(playerid))
	{
	    if(PlayerToPoint(5, playerid, 0.0, 0.0, 0.0))
		{
		    new ruso[] = "Bate + 9mm ($50)\nUZI ($250)\nKit de Secuestro\nMascara\nPalanca";
		    ShowPlayerDialog(playerid,EQUIPO_PANDILLA,DIALOG_STYLE_LIST,"Armamento - Ballas",ruso,"Equipar","Cancelar");
		}
	}
	else if(Team_Vagos(playerid))
	{
	    if(PlayerToPoint(5, playerid, 0.0, 0.0, 0.0))
		{
		    new ruso[] = "Bate + 9mm ($50)\nUZI ($250)\nKit de Secuestro\nMascara\nPalanca";
		    ShowPlayerDialog(playerid,EQUIPO_PANDILLA,DIALOG_STYLE_LIST,"Armamento - Los Santos Vagos",ruso,"Equipar","Cancelar");
		}
	}
    return 1;
}

zcmd(moneda, playerid, params[])
{
    new coin = random(2)+1, coinname[10];
    if(coin == 1) 	coinname = "cara";
    else 			coinname = "cruz";
    format(szMessage, sizeof(szMessage), "*** %s lanza una moneda al aire y cae %s", GetPlayerNameEx(playerid), coinname);
    ProxDetector(10.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    return 1;
}

zcmd(ven, playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid))
    {
        if(VehicleWindows[GetPlayerVehicleID(playerid)] == 0)
        {
	       VehicleWindows[GetPlayerVehicleID(playerid)] = 1;
	       format(szMessage, sizeof(szMessage), "* %s baja la ventana.", GetPlayerNameEx(playerid));
	       ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	       return 1;
        }
        else if(VehicleWindows[GetPlayerVehicleID(playerid)] == 1)
        {
	       VehicleWindows[GetPlayerVehicleID(playerid)] = 0;
	       format(szMessage, sizeof(szMessage), "* %s sube la ventanilla.", GetPlayerNameEx(playerid));
	       ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	       return 1;
        }
    }
    else SendClientMessageEx(playerid, COLOR_GREY, "   Usted necesita estar en el vehiculo para utilizar esta funcion !");
    return 1;
}

zcmd(nokear, playerid, params[])
{
    if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando mientras estás herido.");
    if(sscanf(params, "d", params[0])) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /nokear <ID>");
    if(Info[playerid][pLevel] < 2) return SendClientMessageEx(playerid, COLOR_GREY, "* Debes ser mayor al nivel 2.");
	if(KnockedDown[playerid] == 0 || IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(params[0]))
	{
		if(ProxDetectorS(3.0, playerid, params[0]))
		{
			new rands = random(2)+1;
			format(szMessage, sizeof(szMessage), "* %s agarra una piedra.", GetPlayerNameEx(playerid));
        	ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        	ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
        	KnockedDown[playerid] = 100;
        	if(rands == 1)
			{
				ApplyAnimation(params[0], "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
				SetTimerEx("ClearKnock", 60000, false, "i", params[0]);
				SetTimerEx("ClearKnock", 60000, false, "i", playerid);
				KnockedDown[params[0]] = 1;
                format(szMessage, sizeof(szMessage), "* %s intenta noquear a %s con la piedra y lo consige.", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
				ProxDetector(3.0, playerid, szMessage, 0x00BF60FF,0x00BF60FF,0x00BF60FF,0x00BF60FF,0x00BF60FF);
				format(szMessage, sizeof(szMessage), "* %s queda inconsciente.", GetPlayerNameEx(params[0]));
        		ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
				format(szMessage, sizeof(szMessage), "* %s intenta noquear a %s con la piedra y le da muy suave.", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
				ProxDetector(3.0, playerid, szMessage, 0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF,0xB90000FF);
			}
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* El jugador está muy lejos de ti.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No puedes utilizar este comando ahora.");
	return 1;
}
//SAEM
zcmd(misil, playerid, params[])
{
    new Float:M_X, Float:M_Y, Float:M_Z, Float:radius;
    if(Team_NG(playerid))
	{
        if(Misile_Launcher < 3)
		{
	        if(PlayerToPoint(5.0,playerid,2786.8633,-2404.0068,43.8846))
			{
		        if(!sscanf(params, "fffiii",M_X,M_Y,M_Z,radius,params[1],params[2])){
		            if(Info[playerid][pRank] > 3){
		                if(radius > 100 || radius < 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Radio máximo 100");
		                if(params[1] > 13  || params[1] < 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Tipo explosión 0-13");
		                if(params[2] > 60  || params[1] < 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Tiempo máximo 60 segundos");
		            	SetTimerEx("MissileLaunchEx", params[2]*1000, false, "fffii", M_X,M_Y,M_Z,radius,params[1]);
						Misile_Launcher ++;
						SendRadioMessage(3, TEAM_RADIO_COLOR, "** AVISO DE LANZAMIENTO DE MISIL **");
                        format(szMessage, sizeof(szMessage), " %s ejecutará Lanzamiento de misil en %d segundos, destino: %0.2f - %0.2f - %0.2f, radio: %d",
                        GetPlayerNameEx(playerid),params[2],M_X,M_Y,M_Z,radius,params[1]);
                        SendRadioMessage(3, TEAM_RADIO_COLOR, szMessage);
					} else SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas ser mayor de rango 3.");
		        } else SendClientMessageEx(playerid, COLOR_WHITE, "* /misil <coordenada X> <coordenada Y> <coordenada Z> <radio> <tipo> <tiempo>");
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en ningún lanzamisiles.");
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Aún no han detonado los otros misiles.");
    } else SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
    return 1;
}
zcmd(su, playerid, params[])
{
    if(!IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres policía.");
    if(OnDuty[playerid] == 0 && IsACop(playerid)) return  SendClientMessageEx(playerid, COLOR_GREY, "¡No estas OnDuty!");
    if(!sscanf(params, "ds[64]", params[0], params[1]))
    {
        if(IsPlayerConnectedEx(params[0]))
        {
            //if (IsACop(params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes acusar a un policía.");
            if (Info[params[0]][pWantedLevel] == 6)
			{
				ClearChatbox(playerid);
				SendClientMessageEx(playerid, WANTED_COLOR, "Este jugador ha alcanzado el nivel de búsqueda máximo");
    			return SendClientMessageEx(playerid, WANTED_COLOR, "Nivel de búsqueda: 6/6");
			}
			else
			{
				if(Info[params[0]][pWantedLevel] < 1)
			    {
    				SendRadioMessage(1, TEAM_RADIO_COLOR, "** Central: se ha encontrado un nuevo sospechoso, para más información miren sus ordenadores.");
			        SendRadioMessage(2, TEAM_RADIO_COLOR, "** Central: se ha encontrado un nuevo sospechoso, para más información miren sus ordenadores.");
			    }
			    ClearChatbox(playerid);
				Info[params[0]][pWantedLevel] ++;
				format(szMessage, sizeof(szMessage), "** Acusaste a %s: %s", GetPlayerNameEx(params[0]), params[1]);
			    SendClientMessageEx(playerid, WANTED_COLOR, szMessage);
		    	format(szMessage, sizeof(szMessage), "Nivel de búsqueda: %d/6", Info[params[0]][pWantedLevel]);
			    SendClientMessageEx(playerid, WANTED_COLOR, szMessage);
			    SetPlayerWantedLevel(params[0], Info[params[0]][pWantedLevel]);
			}
        } else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
    } else SendClientMessageEx(playerid, COLOR_WHITE, "* (/su)spect <PlayerID> <crimen>");
    return 1;
}
CMD:sospechosos(playerid, params[])
{
    #pragma unused params
	if(IsACop(playerid))
	{
		new x, ccstring[128];
		SendClientMessageEx(playerid, COLOR_GREEN, "Sospechosos buscados:");
		foreach(Player, i)
		{
			if(Info[i][pWantedLevel] >= 1)
			{
				format(ccstring, sizeof(ccstring), "%s%s: %d", szMessage,GetPlayerNameEx(i),Info[i][pWantedLevel]);
				x++;
				if(x > 3)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, ccstring);
					x = 0;
					format(ccstring, sizeof(ccstring), " ");
				}
				else
				{
					format(ccstring, sizeof(ccstring), "%s, ", ccstring);
				}
			}
		}
		if(x <= 3 && x > 0)
		{
			ccstring[strlen(ccstring)-2] = '.';
			SendClientMessageEx(playerid, COLOR_WHITE, ccstring);
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres policía.");
	return 1;
}
    zcmd(bk, playerid, params[])
	{
        if(Info[playerid][pRequestingBackup] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes un pedido de ayuda.");
        if(IsACop(playerid))
		{
            new Float:px,Float:py,Float:pz,string[128]; GetPlayerPos(playerid, px, py, pz);
			if(Team_SAPD(playerid)|| Team_FBI(playerid) || Team_NG(playerid))
			{
			    Info[playerid][pRequestingBackup] = 1;
			    format(string, sizeof(string), "* A todas las unidades, %s necesita ayuda (Información marcada).", GetPlayerNameEx(playerid));
			    SendRadioMessage(1, TEAM_RADIO_COLOR, string);
				foreach(Player, i)
				{
					if(IsPlayerConnected(i))
					{
						if(Team_SAPD(i) && OnDuty[i] == 1)
						{
							SetPlayerMarkerForPlayer(i, playerid, 0x8D8DFF00);
							if(i != playerid) SetPlayerCheckpoint(i, px, py, pz, 5.0);
						}
						if(Team_FBI(i) && OnDuty[i] == 1)
						{
						    SetPlayerMarkerForPlayer(i, playerid, 0x8D8DFF00);
						    if(i != playerid) SetPlayerCheckpoint(i, px, py, pz, 5.0);
						}
						if(Team_NG(i) && OnDuty[i] == 1)
						{
						    SetPlayerMarkerForPlayer(i, playerid, 0x9ACD3200);
						    if(i != playerid) SetPlayerCheckpoint(i, px, py, pz, 5.0);
						}
					}
				}
				SendClientMessageEx(playerid, COLOR_WHITE, "Los refuerzos fueron pedidos.");
				SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /bkc, para cancelar los refuerzos.");
				SetTimerEx("BackupClear", 180000, false, "iii", playerid, 1, 1);
			}
        } else SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
        return 1;
    }
    zcmd(bkc, playerid, params[])
	{
        if(Team_SAPD(playerid) || Team_FBI(playerid) || Team_NG(playerid)) BackupClear(playerid, 1, 0);
        else SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado.");
        return 1;
	}
zcmd(multar, playerid, params[])
{
    if(!IsACop(playerid) && !Team_NG(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres policía.");
    if(OnDuty[playerid] == 0 && !Team_NG(playerid)) return  SendClientMessageEx(playerid, COLOR_GREY, "¡No estas OnDuty!");
    if(!sscanf(params, "dis[64]", params[0], params[1], params[2]))
    {
        if(params[1] < 0 || params[1] > 10000) return SendClientMessageEx(playerid, COLOR_GREY, "El máximo de multa son 10000$");
        if(IsPlayerConnectedEx(params[0]))
		{
		    if(Facturing[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Este jugador ya tiene una petición pendiente");
		    if(!ProxDetectorS(8.0,playerid,params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Muy lejos de el jugador.");
		    if(GetPlayerCash(params[0]) < params[1])
			{
				format(szMessage, sizeof(szMessage), "* El infractor no tiene %d$ para pagar la multa.", params[1]);
				return SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			}
			else
			{
			    ClearChatbox(playerid);
			    SendClientMessageEx(params[0], -1, "Estado de San Andreas");
			    format(szMessage, sizeof(szMessage), "Demandante: %s", GetPlayerNameEx(playerid));
				SendClientMessageEx(params[0], -1, szMessage);
				format(szMessage, sizeof(szMessage), "Infracción: %s", params[2]);
				SendClientMessageEx(params[0], -1, szMessage);
				format(szMessage, sizeof(szMessage), "Multa: %d$", params[1]);
				SendClientMessageEx(params[0], -1, szMessage);
				SendClientMessageEx(playerid, COLOR_WHITE, "* Espera la respuesta del sujeto");
				SendClientMessageEx(params[0], COLOR_WHITE, "Te han multado. Utilize [/aceptar multa ó /cancelar multa] para pagar la multa.");
				TicketOffer[params[0]] = playerid;
				TicketMoney[params[0]] = params[1];
				Facturing[params[0]] = 1;
			}
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
    } else SendClientMessageEx(playerid, COLOR_WHITE, "* /multar <ID> <precio> <razón>");
    return 1;
}
zcmd(m, playerid, params[])
{
    if(sscanf(params, "s[128]", params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "* /m <texto>");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo!");
	if(Team_SAMD(playerid) || IsACop(playerid) || Team_NG(playerid))
    {
		format(szMessage, sizeof(szMessage), "(Megáfono) %s: %s",GetPlayerNameEx(playerid), params[0]);
		ProxDetector(60.0, playerid, szMessage,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE,COLOR_MEGAPHONE);
    } else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes utilizar este comando.");
    return 1;
}
zcmd(dni, playerid, params[])
{
    if(Mostrando[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* No puedes mostrar esto ahora, espera unos segundos.");
    if(sscanf(params, "d", params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "* /dni <id>");
    if(!IsPlayerConnected(params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
    if(ProxDetectorS(8.0, playerid, params[0]))
    {
	    new string[90];
	    ShowDNI(playerid, params[0]);
	    format(string, sizeof(string), "* %s le muestra su DNI a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Este jugador se encuentra muy lejos.");
	return 1;
}
zcmd(encontrar, playerid, params[])
{
    if(!Team_FBI(playerid) || Info[playerid][pDivision] != 4) return SendClientMessageEx(playerid, COLOR_WHITE, "No perteneces a la Unidad de Investigación.");
    if(UsedFind[playerid] > 1) return SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "** Central: Ahora es imposible, prueba de aquí a unos segundos");
	if(!sscanf(params, "d", params[0]))
	{
	    if(IsPlayerConnectedEx(params[0]))
		{

		    new sat = random(30), luck = random(20), reuse_time = (sat+luck)*2;
		    SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "Estableciendo conexión . . .");
		    format(szMessage, sizeof(szMessage), "** Conectado con Satélite #%d Cobertura(%d)", sat,luck);
		    SendClientMessageEx(playerid, COLOR_WHITE,szMessage);
		    format(szMessage, sizeof(szMessage), "** Persona a buscar: %s", GetPlayerNameEx(params[0]));
		    SendClientMessageEx(playerid, COLOR_WHITE,szMessage);
			if(luck > 10 && Info[params[0]][pSex] == 1) 		SendClientMessageEx(playerid, COLOR_WHITE,"Sexo: Masculino");
			if(luck > 10 && Info[params[0]][pSex] == 2) 		SendClientMessageEx(playerid, COLOR_WHITE,"Sexo: Femenino");
			if(luck > 13 && IsPlayerInAnyVehicle(params[0])) 		SendClientMessageEx(playerid, COLOR_WHITE,"Estado: En Automóvil");
			if(luck > 17 && Info[params[0]][pPnumber] != 0)	format(szMessage, sizeof(szMessage), "Teléfono: %d", Info[params[0]][pPnumber]); SendClientMessageEx(playerid, COLOR_WHITE,szMessage);
			SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "_____________________________________");
   			UsedFind[playerid] = reuse_time;
			WhoFind[playerid] = params[0];
			format(szMessage, sizeof(szMessage), "La información se marcara en el mapa en: %d segundos.", sat+luck);
			SendClientMessageEx(playerid, COLOR_WHITE,szMessage);
			format(szMessage, sizeof(szMessage), "El satélite volverá a estar disponible en: %d segundos.", UsedFind[playerid]);
			SendClientMessageEx(playerid, COLOR_WHITE,szMessage);
			SetTimerEx("Detective_FindPerson", sat+luck*1000, false, "i", playerid);
		} else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
	} else SendClientMessageEx(playerid, COLOR_WHITE, "* /encontrar <jugador>");
    return 1;
}
zcmd(encontrarveh, playerid, params[])
{
    if(!Team_FBI(playerid) || Info[playerid][pDivision] != 4) return SendClientMessageEx(playerid, COLOR_WHITE, "No perteneces a la Unidad de Investigación.");
    if(UsedFind[playerid] > 1) return SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "** Central: Ahora es imposible, prueba de aquí a unos segundos");
	if(!sscanf(params, "i", params[0]))
	{
	    if(params[0] < 0 || params[0] > MAX_VEHICLES) return SendClientMessageEx(playerid, COLOR_WHITE, "Error ID.");
	    new sat = random(30), luck = random(20), reuse_time = (sat+luck)*2;
	    SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "* Estableciendo conexión . . .");
	    format(szMessage, sizeof(szMessage), "Conectado con Satélite #%d Cobertura(%d)", sat,luck);
	    SendClientMessageEx(playerid, COLOR_WHITE,szMessage);
	    format(szMessage, sizeof(szMessage), "ID Vehículo: %d",params[0]);
	    SendClientMessageEx(playerid, COLOR_WHITE,szMessage);
		if(luck > 13)
		{
			format(szMessage, sizeof(szMessage), "Modelo Vehículo: %s", GetVehicleFriendlyName(params[0]));
	    	SendClientMessageEx(playerid, COLOR_WHITE,szMessage);
		}
		SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "_____________________________________");
		UsedFind[playerid] = reuse_time;
		WhoFind[playerid] = params[0];
		format(szMessage, sizeof(szMessage), "La información se marcara en el mapa en: %d segundos.", sat+luck);
   		SendClientMessageEx(playerid, COLOR_GRAD1,szMessage);
   		format(szMessage, sizeof(szMessage), "El satélite volverá a estar disponible en: %d segundos.", UsedFind[playerid]);
   		SendClientMessageEx(playerid, COLOR_GRAD1,szMessage);
   		SetTimerEx("Detective_FindCar", sat+luck*1000, false, "i", playerid);
	} else SendClientMessageEx(playerid, COLOR_WHITE, "* /encontrar <vehículo>");
    return 1;
}
// md:admin ============================================================================================================================
zcmd(pagar, playerid, params[])
{
    new string[128];
    if(Info[playerid][pLevel] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Usted debe ser mayor al nivel 2.");
    if(Info[playerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar esto aquí.");
    if(!sscanf(params, "di", params[0], params[1])){
        if(params[1] > GetPlayerCash(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* No posees esa cantidad.");
        if(params[1] < 1 || params[1] > 100000) return SendClientMessageEx(playerid, COLOR_GREY, "* Máximo: $100.000");
		if(Info[params[0]][pSpectating] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "* El jugador está muy lejos.");
		if(IsPlayerConnectedEx(params[0])){
            if (GetPVarInt(playerid, "GiveMoneyTimer") > 0){
				format(string, sizeof(string), "Tienes que esperar %d segundos después de pagado.", GetPVarInt(playerid, "GiveMoneyTimer"));
				SendClientMessageEx(playerid,COLOR_GREY,string);
				return 1;
			}
			if(Info[playerid][pLevel] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes pagar siendo nivel 1.");
			if(ProxDetectorS(5.0, playerid, params[0]))
			{
                SetPVarInt(playerid, "GiveMoneyTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PAYTIMER);
				Bought(playerid, params[1]);
				Earn(params[0], params[1]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerPlaySound(params[0], 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "* %s saca un poco de dinero (%d$) y se lo da a %s", GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "* %s pagó %d$ a %s", GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]));
                Log("logs/pagos.log", string);
            }else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
        }else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
    }else SendClientMessageEx(playerid, COLOR_WHITE, "* /pagar <jugador> <cantidad>");
    return 1;
}
zcmd(desrentarveh, playerid, params[]){
    new idcar = GetPlayerVehicleID(playerid);
    if(IsaRent[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No has rentado ningun vehículo !");
	if(IsARentCar(idcar) && HireKey[playerid] == idcar)
	{
	    SetVehicleParamsEx(idcar,0,0,0,0,0,0,0);
		SetVehicleToRespawn(HireKey[playerid]);
		SendClientMessageEx(playerid, COLOR_WHITE, "Gracias, así ayudas a mantener en orden la ciudad.");
		IsaRent[playerid] = 0;
		RentTime[playerid] = 0; HireKey[playerid] = 9999;
	}
    return 1;
}
zcmd(subirnivel, playerid, params[])
{
    if(Info[playerid][pLevel] >= 0)
	{
		new nxtlevel = Info[playerid][pLevel]+1;
		new expamount = nxtlevel*explevel;
		if(Info[playerid][pExp] < expamount)
		{
		    new infostring[128];
			format(infostring, 128, "Necesitas %i puntos de respeto más para subir de nivel, tienes %d.",expamount,Info[playerid][pExp]);
			SendClientMessageEx(playerid, COLOR_WHITE, infostring);
			return 1;
		}
		else
		{
		    new infostring[64];
			format(infostring, sizeof(infostring), "~g~~h~Nivel %d!", nxtlevel);
			GameTextForPlayer(playerid, infostring, 5000, 1);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			Info[playerid][pLevel]++;
			Info[playerid][pExp] = Info[playerid][pExp]-expamount;
			Info[playerid][pCarLic] = 0;
			Info[playerid][pFlyLic] = 0;
			Info[playerid][pBoatLic] = 0;
			Info[playerid][pGunLic] = 0;
			HideNecesidades(playerid);
			ShowNecesidades(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "* Tus licencias han caducado.");
		}
	}
    return 1;
}
zcmd(hits, playerid, params[])
{
    if(Hitman(playerid)) SearchingHit(playerid);
	else SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
    return 1;
}
zcmd(quitar, playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No puedes usar este comando mientras estás herido.");
		return 1;
	}
    if(!IsACop(playerid) && !Team_NG(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No tienes autorización para usar este comando.");
    new item[32], string[128], giveplayerid;
    if(!sscanf(params, "ds[32]",giveplayerid,item))
    {
        if(!IsPlayerConnectedEx(giveplayerid))               return SendClientMessageEx(playerid, COLOR_WHITE, "¡Jugador no conectado!");
		if(GetPlayerSpecialAction(giveplayerid) != SPECIAL_ACTION_HANDSUP && Info[giveplayerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes revisar a una persona si no tiene las manos arriba ((/rendirse)) o si está detenida.");
		if(!ProxDetectorS(5.0, playerid, giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "¡Jugador muy lejos!");
        if(strcmp(item,"lconduccion",true) == 0)
		{
		    Info[giveplayerid][pCarLic] = 0;
		    format(string, sizeof(string), "* Oficial %s quita la licencia de conducción a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if(strcmp(item,"lvuelo",true) == 0)
		{
		    Info[giveplayerid][pFlyLic] = 0;
		    format(string, sizeof(string), "* Oficial %s quita la licencia de vuelo a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if(strcmp(item,"larma",true) == 0)
		{
		    Info[giveplayerid][pGunLic] = 0;
	        format(string, sizeof(string), "* Oficial %s quita la licencia de armas a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if(strcmp(item,"drogas",true) == 0)
		{
            Info[giveplayerid][pCrack] = 0;
            Info[giveplayerid][pPot] = 0;
		    format(string, sizeof(string), "* Oficial %s quita las drogas a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if(strcmp(item,"materiales",true) == 0)
		{
            Info[giveplayerid][pMats] = 0;
		    format(string, sizeof(string), "* Oficial %s quita los materiales a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if(strcmp(item,"telefono",true) == 0)
		{
            Info[giveplayerid][pPnumber] = 0;
		    format(string, sizeof(string), "* Oficial %s quita el teléfono %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if(strcmp(item,"pasaporte",true) == 0)
		{
            Info[giveplayerid][pPasaporte] = 0;
		    format(string, sizeof(string), "* Oficial %s quita el pasaporte a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		    ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else if(strcmp(item,"armas",true) == 0)
		{
		    ResetPlayerWeaponsEx(giveplayerid);
   			format(string, sizeof(string), "* Oficial %s le quita las armas a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
   			ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Item incorrecto.");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "* /quitar <jugador> <item>");
	    SendClientMessageEx(playerid, COLOR_WHITE, "Items: lconduccion, lvuelo, larma, drogas, materiales, telefono, armas");
	}
    return 1;
}
zcmd(getip, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	if(Info[playerid][pAdmin] < 4) return NoAutorizado
    if(!sscanf(params, "d", params[0]))
    {
        new ip[20], string[64];
        GetPlayerIp(params[0],ip,sizeof(ip));
        format(string, sizeof(string), "* La IP de %s es %s", GetPlayerNameEx(params[0]), ip);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    } else SendClientMessageEx(playerid, COLOR_WHITE, "* /getip <jugador>");
    return 1;
}
CMD:unbanip(playerid, params[])
{
	if(Info[playerid][pBanAppealer] == 1)
	{
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /unbanip [ip]");
		if(IsValidIP(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa IP no es válida!");
		new string[128], year, month,day;
		getdate(year, month, day);
		RemoveBan(params);
		format(string, 128, ""COL_BLUE"Administración >"COL_WHITE" %s desbaneó la IP %s", GetPlayerNameEx(playerid), params);
		ABroadCast(COLOR_GENERAL,string,2);
		format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s desbaneó la IP %s (%d-%d-%d)", GetPlayerNameEx(playerid), params, month, day, year);
		Log("logs/unbanip.log", string);
	}
	return 1;
}
CMD:unban(playerid, params[])
{
	if(Info[playerid][pBanAppealer] == 1)
	{
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /unban [Nombre_Apellido]");
		if(INI_Exist(params))
		{
			new PlayerFile[ 13 + MAX_PLAYER_NAME + 1], string[128]; //tmpunban[32], stringfile[32]
    		format( PlayerFile , sizeof PlayerFile, USERFILE, params);
    		new INI:File = INI_Open(PlayerFile);
    		INI_SetTag(File,"data");
    		INI_WriteInt(File,"Admin",0);
    		INI_WriteInt(File,"BanAppealer",0);
			INI_WriteInt(File,"FactionModerator",0);
			INI_WriteInt(File,"GangModerator",0);
			INI_WriteInt(File,"AdminNivel",0);
			INI_WriteInt(File,"Helper",0);
			INI_WriteInt(File,"Ban",0);
			INI_WriteInt(File,"ShopTech",0);
			INI_Close(File);
    		/*INI_String("IP", tmpunban, 32);
			RemoveBan(tmpunban);*/
			format(string, 128, ""COL_BLUE"Administración >"COL_WHITE" %s fue desbaneado por %s.", params, GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED, string, 2);
			new year, month,day;
			getdate(year, month, day);
			format(string, sizeof(string), "[LOG] %s fue desbaneado por %s. (%d-%d-%d)", params, GetPlayerNameEx(playerid),month,day,year);
			Log("logs/unban.log", string);
		}
		else SendClientMessageEx( playerid, COLOR_WHITE, "Esa cuenta no existe." );
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando");
	return 1;
}
zcmd(kickstaff, playerid, params[])
{
	if(Info[playerid][pAdmin] < 8) return NoAutorizado
	new string[128];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /kickstaff [playername]");
	if(INI_Exist(params))
	{
		new PlayerFile[MAX_PLAYER_NAME + 32]; //tmpunban[32], stringfile[32]
    	format( PlayerFile , sizeof PlayerFile, USERFILE, params);
    	new INI:File = INI_Open(PlayerFile);
		INI_SetTag(File,"data");
    	INI_WriteInt(File,"Helper",0);
    	INI_WriteInt(File,"Admin",0);
    	INI_WriteInt(File,"AdminNivel",0);
		INI_WriteInt(File,"BanAppealer",0);
		INI_WriteInt(File,"FactionModerator",0);
		INI_WriteInt(File,"GangModerator",0);
		INI_WriteInt(File,"ShopTech",0);
		INI_WriteInt(File,"AdminSafe",0);
		INI_Close(File);
       	format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s expulsó del staff a %s (CMD OFFLINE)", GetPlayerNameEx(playerid), params);
       	ABroadCast(COLOR_GENERAL,string,4);
       	Log("logs/admin.log", string);
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Está cuenta no existe.");
	return 1;
}
zcmd(oban, playerid, params[])
{
  	if(Info[playerid][pAdmin] < 3) return NoAutorizado
	new string[128], playername[MAX_PLAYER_NAME], reason[64];
	if(sscanf(params, "ss", playername, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /oban [Nombre_Apellido] [Razón]");
	if(INI_Exist(playername))
	{
		/*if( Info[MAX_PLAYERS][pBanned] == 0)
		{*/
			new PlayerFile[MAX_PLAYER_NAME + 32]; //tmpunban[32], stringfile[32]
    		format( PlayerFile , sizeof PlayerFile, USERFILE, playername);
    		new INI:File = INI_Open(PlayerFile);
    		
    		INI_SetTag(File,"data");
    		INI_WriteInt(File,"Admin",0);
    		INI_WriteInt(File,"Helper",0);
    		INI_WriteInt(File,"AdminNivel",0);
    		INI_WriteInt(File,"Ban",2);
    		INI_Close(File);
            //AddBan(Info[MAX_PLAYERS][pIP]);
			//OnPlayerOfflineSave(playername);
			new year, month,day;
			getdate(year, month, day);
			format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s fue baneado por %s, razón: %s (%d-%d-%d)", playername, GetPlayerNameEx(playerid), reason, month, day, year);
			Log("logs/offban.log", string);
			format(string, 128, ""COL_BLUE"Administración >"COL_WHITE" %s fue baneado por %s, razón: %s [CMD OFFLINE]", playername, GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED,string,2);
		/*}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Esa cuenta ya está baneada." );*/
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Esa cuenta no existe." );
	return 1;
}

CMD:cambiarclave(playerid, params[])
{
    #pragma unused params
	if(IsPlayerConnectedEx(playerid))
	{
		ShowPlayerDialog(playerid, CPASS, DIALOG_STYLE_PASSWORD, "Cambiar Clave", "Por favor pon tu contraseña nueva:", "Cambiar", "Atrás" );
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Debes de estar conectado para usar este comando.");
	return 1;
}

zcmd(cuenta, playerid, params[])
{
	if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	if(Info[playerid][pLevel] >= 1) ShowStats(playerid,playerid);
	return 1;
}

CMD:inventario(playerid, params[])
{
	new pnumber[20], cash = GetPlayerCash(playerid), account = Info[playerid][pMoneyBank], tokens = Info[playerid][pPaintTokens], pot = Info[playerid][pPot];
	new cso = Info[playerid][pCosecha], crack = Info[playerid][pCrack], crates = Info[playerid][pCrates], mats = Info[playerid][pMats];
	new title[36], line1[320];
	switch(Info[playerid][pPnumber])
	{
		case 0: pnumber = "Ninguno";
		default: format(pnumber, sizeof(pnumber), "%d", Info[playerid][pPnumber]);
	}
	format(title, sizeof(title), "{FFFFFF}INVENTARIO - {DF013A}%s", GetPlayerNameEx(playerid));
	format(line1, sizeof(line1), "{DF013A}Dinero: {FFFFFF}$%d\n{DF013A}Banco: {FFFFFF}$%d\n{DF013A}Telefono: {FFFFFF}%s\n{DF013A}Fichas Paintball: {FFFFFF}%d\n{DF013A}Hierba: {FFFFFF}%dgr.\n{DF013A}Crack: {FFFFFF}%dgr.\n{DF013A}Paquetes: {FFFFFF}%d\n{DF013A}Materiales: {FFFFFF}%d\n{DF013A}Cosecha: {FFFFFF}%dkg.",
	cash,account,pnumber,tokens,pot,crack,crates,mats,cso);
	ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX, title, line1, "OK", "");
	return 1;
}

zcmd(gob, playerid, params[])
{
    new string[128];
	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USA: /gob [texto]");
		return 1;
	}
	if(Info[playerid][pLeader] == 1 || Gobierno(playerid) || Info[playerid][pLeader] == 3 || Info[playerid][pLeader] == 2)
	{
		if(Info[playerid][pLeader] == 1)
    	{
		    format(string, sizeof(string), "[SAPD] Comandante %s: %s", GetPlayerNameEx(playerid), params[0]);
			SendClientMessageToAllEx(COLOR_GOBALL, string);
    	}
		else if(Info[playerid][pLeader] == 2)
    	{
		    format(string, sizeof(string), "[FBI] Director %s: %s", GetPlayerNameEx(playerid), params[0]);
			SendClientMessageToAllEx(COLOR_GOBALL, string);
    	}
    	else if(Info[playerid][pLeader] == 3)
        {
		    format(string, sizeof(string), "[SAEM] Coronel %s: %s", GetPlayerNameEx(playerid), params[0]);
		    SendClientMessageToAllEx(COLOR_GOBALL, string);
        }
        else if(Presidente(playerid))
        {
		    format(string, sizeof(string), "[GOBIERNO] Presidente %s: %s", GetPlayerNameEx(playerid), params[0]);
		    SendClientMessageToAllEx(COLOR_GOBALL, string);
		}
		else if(Gobierno(playerid) && Info[playerid][pRank] == 5)
		{
		    format(string, sizeof(string), "[GOBIERNO] Vice-Presidente %s: %s", GetPlayerNameEx(playerid), params[0]);
		    SendClientMessageToAllEx(COLOR_GOBALL, string);
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No tienes autorización para usar este comando.");
	return 1;
}
zcmd(impuesto, playerid, params[])
{
    if(Presidente(playerid))
    {
        if(!sscanf(params, "i", params[0]))
        {
            if(params[0] < 0 || params[0] > 1000) return SendClientMessageEx(playerid, COLOR_WHITE, "Valor entre 1 - 1000");

            new string[90];
            TaxValue = params[0];
			SaveStuff();
			format(string, sizeof(string), "* [GOBIERNO] "COL_WHITE"Nuevo pago por impuesto. (%d$)", TaxValue);
			SendClientMessageToAllEx(COLOR_GENERAL, string);
        }
        else SendClientMessageEx(playerid, COLOR_GREY, "* /impuesto <cantidad>");
    }
    else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes autorización para usar este comando.");
    return 1;
}
zcmd(altavoz, playerid, params[])
{
    if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Usted no tiene un telefono.");
    if(Mobile[playerid] == -1) return SendClientMessageEx(playerid, COLOR_GREY, "Usted no esta en una llamada telefonica.");
    if(IsPlayerConnectedEx(playerid))
    {
		if(Info[playerid][pSpeaker] == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "* Beep * El altavoz esta conectado.");
			Info[playerid][pSpeaker] = 1;
			return 1;
		}
		if(Info[playerid][pSpeaker] == 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "* Beep * El altavoz se a desconectado.");
			Info[playerid][pSpeaker] = 0;
			return 1;
		}
	}
	return 1;
}
zcmd(miranda, playerid, params[])
{
    if(IsACop(playerid))
    {
        new string[128];
        format(string, sizeof(string),"%s dice: Tienes derecho a guardar silencio, todo lo que diga puede usarse en su contra.",GetPlayerNameEx(playerid));
        ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
        format(string, sizeof(string),"%s dice: Tiene derecho a un abogado, si no puede pagar uno, se le asignará uno a costas del Estado.",GetPlayerNameEx(playerid));
        ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
        format(string, sizeof(string),"%s dice: Tiene derecho a una llamada por teléfono.",GetPlayerNameEx(playerid));
        ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
        format(string, sizeof(string),"%s dice: ¿De acuerdo señor?",GetPlayerNameEx(playerid));
        ProxDetector(30.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
    }
    return 1;
}
zcmd(robar, playerid, params[])
{
	if(GetPVarInt(playerid, "Injured") == 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando mientras estás herido.");
		return 1;
	}
    if(Info[playerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar esto aquí.");
    if(Info[playerid][pFMember] != 255 || Info[playerid][pMember] >= 9 || Info[playerid][pLeader] >= 9)
	{
	    if(Info[playerid][pRob] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "* ¡Ya robaste, espera al próximo PayDay!");
	    if(!sscanf(params, "s[32]", params[0]))
	    {
	        new string[128];
	        if(strcmp(params[0],"persona",true) == 0)
	        {
	            new victim = GetClosestPlayer(playerid);
	            if(ProxDetectorS(2.0,playerid, victim))
	            {
                    if(GetPlayerWeapon(victim) == 41)
	    			{
        				format(string, sizeof(string), "%s intenta robarle a %s sin que se de cuenta y falla", GetPlayerNameEx(playerid), GetPlayerNameEx(victim));
						ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
   						format(string, sizeof(string), "* %s le rocía la cara con un spray anti-ladrones a %s.", GetPlayerNameEx(victim), GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						Info[playerid][pRob] = 1;
						SendClientMessageEx(params[0], COLOR_YELLOW2, "-> ¡Evitaste que te robaran!");
				    }
				    new rob = random(2)+1;
				    if(rob == 1)
				    {
        				Info[params[0]][pPnumber] = 0;
				        format(string, sizeof(string), "%s intenta robarle a %s sin que se de cuenta y lo logra", GetPlayerNameEx(playerid) ,GetPlayerNameEx(params[0]));
						ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
   						format(string, sizeof(string), "* %s se acerca hacia %s y le roba su teléfono.", GetPlayerNameEx(playerid) ,GetPlayerNameEx(params[0]));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SendClientMessageEx(params[0], COLOR_YELLOW2, "-> ¡Te han robado el teléfono!");
						SendClientMessageEx(playerid, COLOR_YELLOW2, "-> ¡Has robado un teléfono! Véndelo en el mercado negro");
						Info[playerid][pRob] = 1;
						TelfRob[playerid] += 1;
					}
					else
					{
  						format(string, sizeof(string), "%s intenta robarle a %s sin que se de cuenta y falla", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
						ProxDetector(30.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
   						format(string, sizeof(string), "* %s se da cuenta y le da un golpe de puño a %s.", GetPlayerNameEx(params[0]), GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SendClientMessageEx(params[0], COLOR_GREEN, "-> Has evitado que te roben!");
						SendClientMessageEx(playerid, COLOR_YELLOW, "Te han pillado! Menudo ostión te has llevado! Corre!");
						Info[playerid][pRob] = 1;
					}
	            }
	        }
	        else if(strcmp(params[0],"24-7",true) == 0)
	        {
	            if(!IsAt247(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "¡No estás en el 24/7!");
	            else
	            {
	            	new robmoney = random(2000);
		            Earn(playerid, robmoney);
					ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 0, 4000); // Rob
					Info[playerid][pRob] = 1;
					format(string, sizeof(string), "* %s amenaza con un arma al vendedor", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					switch(GetPlayerVirtualWorld(playerid))
					{
					    case 30001: SendRadioMessage(1, 0x8D8DFFFF, "* Central: La tienda 24-7 de UNITY esta siendo robada.");
						case 30007: SendRadioMessage(1, 0x8D8DFFFF, "* Central: La tienda 24-7 de AYUNTAMIENTO esta siendo robada.");
						case 30008: SendRadioMessage(1, 0x8D8DFFFF, "* Central: La tienda 24-7 de IDLEWOOD esta siendo robada.");
						case 30019: SendRadioMessage(1, 0x8D8DFFFF, "* Central: La Gasolinera de UNITY esta siendo robada.");
						case 30022: SendRadioMessage(1, 0x8D8DFFFF, "* Central: La Gasolinera de IDLEWOOD esta siendo robada.");
					}
					format(string, sizeof(string), "* Sospechoso identificado como: %s.", GetPlayerNameEx(playerid));
					SendRadioMessage(1, 0x8D8DFFFF, string);
					GameTextForPlayer(playerid, "ROBANDO...",5000,4);
					TogglePlayerControllable(playerid, 0);
					SleepEx(6000);
					TogglePlayerControllable(playerid, 1);
	            }
	        }
	    }
	    else SendClientMessageEx(playerid, COLOR_GREY, "  Uso: /robar [24-7] ó [Persona]");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
    return 1;
}
CMD:ayuda(playerid, params[])
{
    #pragma unused params
	if(IsPlayerConnectedEx(playerid))
	{
		new help[] = "General\nFacción\nLider\nTrabajo\nChat\nAnimaciones\nNegocios\nCasas\nVehiculos\nBanco\nArmas\nDrogas\nToys\nTeléfono\nNecesidades\nPesca\nEstereo\nRadio\nPaintball\nMatrimonio\nPremium";
		ShowPlayerDialog(playerid, HELP_MENU, DIALOG_STYLE_LIST, ""COL_GENERAL"NP:RP - "COL_WHITE"Ayuda", help, ">", "Salir");
	}
	return 1;
}
zcmd(darfaccion, playerid, params[])
{
    if(Info[playerid][pFactionModerator] == 1)
	{
	    if(!sscanf(params, "ui", params[0], params[1]))
	    {
            new ftext[30];
	        if(params[1] < 0 || params[1] > MAX_FACTION) 			return SendClientMessageEx(playerid, COLOR_GREY, "* ID de facción incorrecta.");
	        if(!IsPlayerConnectedEx(params[0]))                   	return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está conectado correctamente.");
	        switch(params[1])
	        {
	            case 0:{Info[params[0]][pRank] = 0; ftext = "Ninguna"; }
	            case 1: ftext = "San Andreas Police Department";
	            case 2: ftext = "FBI";
	            case 3: ftext = "San Andreas Ejército Militar";
	            case 4: ftext = "San Andreas Medical Deparment";
	            case 5: ftext = "Cable News Network";
	            case 6: ftext = "Mecanicos 24/7";
	            case 7: ftext = "Gobierno";
                case 8: ftext = "Hitman";
                case 9: ftext = "Mafia Rusa";
                case 10: ftext = "Mafia Italiana";
                case 11: ftext = "Grove Street";
                case 12: ftext = "Ballas";
                case 13: ftext = "Los Santos Vagos";
	        }
	        pTazer[params[0]] = 0; 					Info[params[0]][pLeader] = params[1];
	        Info[params[0]][pMember] = params[1]; 	Info[params[0]][pRank] = 6;
	        format(szMessage, sizeof(szMessage), "Administrador %s te asignó el líder de la facción %s.", GetPlayerNameEx(playerid), ftext);
	        SendClientMessageEx(params[0], COLOR_GENERAL, szMessage);
	        format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s asigno lider de la facción %s a %s.", GetPlayerNameEx(playerid), ftext, GetPlayerNameEx(params[0]));
			ABroadCast(COLOR_GENERAL, szMessage, 3);
	    }
     	else
 		{
 			SendClientMessageEx(playerid, COLOR_GREY, "USA: /darfaccion [ID] [Facción-ID]");
    		SendClientMessageEx(playerid, COLOR_GREY, "1) SAPD 2) FBI 3) SAEM 4) SAMD 5) CNN 6) Car Point");
      		SendClientMessageEx(playerid, COLOR_GREY, "7) Gobierno 8) Hitman 9) Mafia Rusa 10) Mafia Italiana");
      	}
	}
	else NoAutorizado
    return 1;
}
zcmd(licencias, playerid, params[])
{
	new giveplayerid, item[32], string[256];
	if(Mostrando[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* No puedes mostrar esto ahora, espera unos segundos.");
    if(!sscanf(params, "ds", giveplayerid, item))
	{
        if(IsPlayerConnected(giveplayerid))
		{
   			if(ProxDetectorS(5.0, playerid, giveplayerid))
   			{
   				if(strcmp(item,	"conduccion",	true) == 0)
   				{
   				    if(Info[playerid][pCarLic] > 0)
   				    {
   				        format(string, sizeof(string), "* %s muestra su licencia de conducción a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0,playerid,string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    				    SendClientMessageEx(giveplayerid,COLOR_GENERAL,"__________________ LICENCIA DE CONDUCCIÓN __________________");
					    format(string, sizeof(string), 				"Nombre: %s - Edad: %d - Fecha Nacimiento: %d", GetPlayerNameEx(playerid),Info[playerid][pAge]);
					    SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
					    SendClientMessageEx(giveplayerid,COLOR_GENERAL,"Licencia de conducción {FFFFFF}(clase A y B)");
					    SendClientMessageEx(giveplayerid,COLOR_GENERAL,"Le permite conducir:{FFFFFF} motocicletas, automóviles y camionetas.");
					    SendClientMessageEx(giveplayerid,COLOR_GENERAL,"____________________________________________________________");
					    return 1;
   				    }
   				    else
				   	{
						SendClientMessageEx(playerid, -1, "* No tienes licencia, la persona a la que se la has mostrado sabe que no tienes licencia");
						SendClientMessageEx(giveplayerid, -1, "* La persona que ha intentado mostrarte la licencia no tiene licencia");
					    return 1;
				    }
   				}
   				if(strcmp(item,	"navegacion",	true) == 0)
   			    {
   				    if(Info[playerid][pBoatLic] > 0)
   				    {
   				        format(string, sizeof(string), "* %s muestra su licencia de navegación a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0,playerid,string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    				    SendClientMessageEx(giveplayerid,COLOR_GENERAL,"__________________ LICENCIA DE NAVEGACIÓN __________________");
					    format(string, sizeof(string), 				"Nombre: %s - Edad: %d - Fecha Nacimiento: %d", GetPlayerNameEx(playerid),Info[playerid][pAge]);
					    SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
					    SendClientMessageEx(giveplayerid,COLOR_GENERAL,"Licencia de navegación {FFFFFF}(clase GENERAL)");
					    SendClientMessageEx(giveplayerid,COLOR_GENERAL,"Le permite utilizar:{FFFFFF} todo tipo de botes.");
					    SendClientMessageEx(giveplayerid,COLOR_GENERAL,"____________________________________________________________");
					    return 1;
   				    }
   				    else
				   	{
						SendClientMessageEx(playerid, -1, "* No tienes licencia, la persona a la que se la has mostrado sabe que no tienes licencia");
						SendClientMessageEx(giveplayerid, -1, "* La persona que ha intentado mostrarte la licencia no tiene licencia");
					    return 1;
				   	}
   				}
   				if(strcmp(item,	"aviacion",	true) == 0)
   				{
   				    if(Info[playerid][pFlyLic] > 0)
   				    {
   				        format(string, sizeof(string), "* %s muestra su licencia de aviación a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0,playerid,string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    				    SendClientMessageEx(giveplayerid,COLOR_GENERAL,"___________________ LICENCIA DE AVIACIÓN ___________________");
					    format(string, sizeof(string), 				"Nombre: %s - Edad: %d - Fecha Nacimiento: %d", GetPlayerNameEx(playerid),Info[playerid][pAge]);
					    SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
					    SendClientMessageEx(giveplayerid,COLOR_GENERAL,"Licencia de aviación {FFFFFF}(clase PRIVADOS)");
					    SendClientMessageEx(giveplayerid,COLOR_GENERAL,"Le permite utilizar:{FFFFFF} aviones y helicopteros privados.");
					    SendClientMessageEx(giveplayerid,COLOR_GENERAL,"____________________________________________________________");
					    return 1;
   				    }
   				    else
				   	{
				   		SendClientMessageEx(playerid, -1, "* No tienes licencia, la persona a la que se la has mostrado sabe que no tienes licencia");
						SendClientMessageEx(giveplayerid, -1, "* La persona que ha intentado mostrarte la licencia no tiene licencia");
					    return 1;
				    }
   				}
   				if(strcmp(item,	"armas",	true) == 0)
   			    {
   				    if(Info[playerid][pGunLic] > 0)
   				    {
  				        format(string, sizeof(string), "* %s muestra su licencia de armas a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0,playerid,string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    SendClientMessageEx(giveplayerid,COLOR_GENERAL,"___________________ LICENCIA DE ARMAS ______________________");
					    format(string, sizeof(string), 				"Nombre: %s - Edad: %d - Fecha Nacimiento: %d", GetPlayerNameEx(playerid),Info[playerid][pAge]);
					    SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
					    SendClientMessageEx(giveplayerid,COLOR_GENERAL,"Licencia de armas {FFFFFF}(clase CIVIL)");
					    SendClientMessageEx(giveplayerid,COLOR_GENERAL,"Le permite utilizar:{FFFFFF} armas permitidas por el estado.");
					    SendClientMessageEx(giveplayerid,COLOR_GENERAL,"____________________________________________________________");
					    return 1;
   				    }
   			        else
				   	{
						SendClientMessageEx(playerid, -1, "* No tienes licencia, la persona a la que se la has mostrado sabe que no tienes licencia");
						SendClientMessageEx(giveplayerid, -1, "* La persona que ha intentado mostrarte la licencia no tiene licencia");
					    return 1;
				    }
   				}
			}else SendClientMessageEx(playerid, COLOR_WHITE, "* Estás demasiado lejos del jugador.");
	    }else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
    }else SendClientMessageEx(playerid, COLOR_WHITE, "* /licencias <jugador> <opcion: conduccion, navegacion, aviacion, armas>");
    return 1;
}
CMD:reportarbug(playerid, params[])
{
    #pragma unused params
    if(Info[playerid][pBlockBug] == 0)
    {
   		ShowPlayerDialog(playerid,REBUG,DIALOG_STYLE_INPUT,"Reportar Bug","{FFFFFF}Escribe exactamente el bug que has encontrado, se quedará guardado en la Base de Datos\ncuando el equipo de desarrolladores lo revise, tratarán de solucionar el bug lo más rapido posible.\n\nGracias por reportar.", "Reportar", "Cancelar");
   	}
   	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes reportar bugs, estás bloqueado del comando. Razón: Abuso de Comando");
   	return 1;
}
zcmd(money, playerid, params[])
{
    if(!AdminOnDuty(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] < 5) return NoAutorizado
	if(sscanf(params, "ui", params[0], params[1])) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /money [PlayerID] [$] - [Cualquier abuso sera motivo de BAN, hay logs.]");
	if(!IsPlayerConnectedEx(params[0])) return SendClientMessageEx(playerid,  COLOR_GREY, "* ID Inválida");
 	GivePlayerCash(params[0], params[1]);
	format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s dio %d de dinero a %s.", GetPlayerNameEx(playerid), params[1], GetPlayerNameEx(params[0]));
	ABroadCast(COLOR_GENERAL, szMessage, 5);
	Log("logs/CMDmoney.log", szMessage);
	return 1;
}
zcmd(darvida, playerid, params[])
{
    if(!AdminOnDuty(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(sscanf(params, "ui", params[0], params[1])) return SendClientMessageEx(playerid, COLOR_GREY, "Utiliza: /darvida [PlayerID] [HP]");
	if(!IsPlayerConnectedEx(params[0])) return SendClientMessageEx(playerid,  COLOR_GREY, "* ID Inválida");
	if(Info[playerid][pAdmin] < 3) return NoAutorizado
	SetHP(params[0],params[1]);
	format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s estableció la salud de %s a %dHP.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[1]);
	ABroadCast(COLOR_GENERAL, szMessage, 3);
	return 1;
}
zcmd(darchaleco, playerid, params[])
{
    if(!AdminOnDuty(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(sscanf(params, "ui", params[0], params[1])) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /darchaleco [PlayerID] [armor]");
	if(!IsPlayerConnectedEx(params[0])) return SendClientMessageEx(playerid,  COLOR_GREY, "* ID Inválida");
	if(Info[playerid][pAdmin] < 3) return NoAutorizado
	GiveArmorToPlayer(params[0],params[1]);
	format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s estableció el chaleco de %s a %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[1]);
	ABroadCast(COLOR_GENERAL,szMessage,3);
    return 1;
}
zcmd(borrargraffiti, playerid, params[])
{
    if(Info[playerid][pAdmin] < 3) return NoAutorizado
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 3) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    foreach(Player, i)
    {
        for(new Graffiti = 0; Graffiti < MAX_PLAYERS_TAGS; Graffiti++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 5.0, SprayTags[i][Graffiti][_spPosX], SprayTags[i][Graffiti][_spPosY], SprayTags[i][Graffiti][_spPosZ]))
            {
                Tags_Clear(i, Graffiti);
            }
        }
    }
	return 1;
}

zcmd(loteria, playerid, params[])
{
    if(Info[playerid][pAdmin] < 5) return NoAutorizado
    if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /loteria [lanzar/ver/agregar]");
    new string[128];
    if(strcmp(params,"lanzar",true) == 0)
    {
        if(Jackpot == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* EL pozo está en cero es imposible sortear la lotería aún.");
    	format(string, sizeof(string), ""COL_GENERAL"Noticias de la Loteria: "COL_WHITE"Hemos iniciado la elección de la loteria (finaliza en 3 minutos).");
    	OOCNews(COLOR_WHITE, string);
    	new rand = random(250);
    	SetTimerEx("Lotto",180000,0,"d",rand);
	}
    else if(strcmp(params,"ver",true) == 0)
    {
        format(string, sizeof(string), "Pozo de lotería: %d",Jackpot);
    	SendClientMessageEx(playerid, COLOR_WHITE,string);

	}else if(strcmp(params,"agregar",true) == 0)
    {
        Jackpot += 1500;
        format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s agrego $1500 al pozo de la loteria.", GetPlayerNameEx(playerid));
	    ABroadCast(COLOR_GENERAL, szMessage, 1);
        format(string, sizeof(string), "Has agreado $1500 al pozo total de la loteria. Pozo total: %d", Jackpot);
    	SendClientMessageEx(playerid, COLOR_WHITE,string);
    }
    else SendClientMessageEx(playerid, COLOR_GREY, "* Has ingresado una opción que no existe en este comando.");
    return 1;
}
zcmd(pstat, playerid, params[])
{
	//if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	if(!AdminOnDuty(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	if(Info[playerid][pAdmin] < 5) return NoAutorizado
	if(sscanf(params, "uii", params[0],params[1],params[2]))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "* /pstat [playerid/nombre] [Numero] [valor]");
		SendClientMessageEx(playerid, COLOR_GREY, "[Nivel 1] [Teléfono 2] [Puntos de respeto 3] [ID House 4] [Hierba 5] [Renta 6] [T. Lucha 7] [Materiales 8] [Drogas 9] [Edad 10] [Trabajo 11]");
		SendClientMessageEx(playerid, COLOR_GREY, "[DudaMute 12] [Warns 13] [Tiempo Conec 14] [JailsAdm 15] [SkillGun 16] [Paquetes 17] [PackDrugs 18] [Total ADMutes 19]");
        return 1;
	}
	//if(!IsPlayerConnectedEx(params[0])) return SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID es inválida o el jugador no está correctamente conectado.");
	if(CommandSpamTimes[playerid] == 8)
	{
	  	format(szMessage, sizeof(szMessage), "ATENCIÓN: %s fue baneado automáticamente, razón: Flood Cmd´s", GetPlayerNameEx(playerid));
	    ABroadCast(COLOR_GENERAL,szMessage,1);
	    Log("logs/hackeraction.log", szMessage);
	    Info[playerid][pBanned] = 2;
	    SendClientMessageEx(playerid, COLOR_GENERAL,"ATENCIÓN: "COL_WHITE"Fuiste baneado automáticamente por seguridad, has usado el comando /pstat muchas veces.");
	    Expulsar(playerid);
		return 1;
	}
	switch(params[1])
	{
		case 1:
		{
            format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Nivel: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
            ABroadCast(COLOR_GENERAL, szMessage, 5);
            Log("logs/pstat.log", szMessage);
			Info[params[0]][pLevel] = params[2];
        }
		case 2:
		{
            format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Teléfono: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
			Info[params[0]][pPnumber] = params[2];
			//format(szMessage, sizeof(szMessage), "Teléfono: #%d", params[2]);
        }
		case 3:
		{
			Info[params[0]][pExp] = params[2];
			//format(szMessage, sizeof(szMessage), "Puntos Respeto: %d", params[2]);
			format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - P. Respeto: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
		}
		case 4:
		{
			Info[params[0]][pPhousekey] = params[2];
			//format(szMessage, sizeof(szMessage), "Casa: %d", params[2]);
			format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Casa: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
		}
		case 5:
		{
		    Info[params[0]][pPot] = params[2];
		    //format(szMessage, sizeof(szMessage), "Hierba: %d", params[2]);
		    format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Hierba: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
		}
		case 6:
		{
		    Info[params[0]][pRenting] = params[2];
		    //format(szMessage, sizeof(szMessage), "Renta: %d", params[2]);
		    format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Renta: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
		}
		case 7:
		{
		    Info[params[0]][pFStyle] = params[2];
		    //format(szMessage, sizeof(szMessage), "Tipo Lucha: %d", params[2]);
		    format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Tipo Lucha: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
		}
		case 8:
		{
		    Info[params[0]][pMats] = params[2];
		    //format(szMessage, sizeof(szMessage), "Materiales: %d", params[2]);
		    format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Materiales: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
		}
		case 9:
		{
		    Info[params[0]][pCrack] = params[2];
	    	//format(szMessage, sizeof(szMessage), "Drogas: %d", params[2]);
	    	format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Drogas: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
		}
		case 10:
		{
			Info[params[0]][pAge] = params[2];
			//format(szMessage, sizeof(szMessage), "Edad: %d", params[2]);
			format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Edad: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
		}
		case 11:
		{
		    Info[params[0]][pJob] = params[2];
		    //format(szMessage, sizeof(szMessage), "Trabajo: %d", params[2]);
		    format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Trabajo: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
        }
		case 12:
		{
	        Info[params[0]][pDudaMute] = params[2];
	        //format(szMessage, sizeof(szMessage), "Tiempo de DudaMute: %d", params[2]);
	        format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - T. DudaMute: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
	    }
		case 13:
		{
	        Info[params[0]][pWarn] = params[2];
	        //format(szMessage, sizeof(szMessage), "Warns: %d", params[2]);
	        format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Warns: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
	    }
		case 14:
		{
			Info[params[0]][pConnectTime] = params[2];
			//format(szMessage, sizeof(szMessage), "Connect Time: %d", params[2]);
			format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Connect Time: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
		}
		case 15:
		{
			Info[params[0]][pJailAdmin] = params[2];
			//format(szMessage, sizeof(szMessage), "Jails: %d", params[2]);
			format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Jails: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
		}
		case 16:
		{
			Info[params[0]][pArmsSkill] = params[2];
			//format(szMessage, sizeof(szMessage), "Skill Guns: %d", params[2]);
			format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Skill Guns: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
		}
		case 17:
		{
			SetPVarInt(params[0], "Packages",  params[2]);
			//format(szMessage, sizeof(szMessage), "Paquetes: %d", params[2]);
			format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Paquetes: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
		}
		case 18:
		{
		 	Info[params[0]][pCrates] = params[2];
		 	//format(szMessage, sizeof(szMessage), "Pack Drug: %d", params[2]);
		 	format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Pack Drug: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
		}
		case 19:
		{
		 	Info[params[0]][pADMuteTotal] = params[2];
		 	//format(szMessage, sizeof(szMessage), "Total Ad Mutes: %d.", params[2]);
		 	format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Total Ad Mutes: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
		}
		case 20:
		{
			Info[params[0]][pVIPDateD] = params[2];
			//format(szMessage, sizeof(szMessage), "Dia VIP: %d.", params[2]);
			format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Día VIP: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
		}
		case 21:
		{
			Info[params[0]][pVIPDateM] = params[2];
			//format(szMessage, sizeof(szMessage), "Mes VIP: %d.", params[2]);
			format(szMessage, sizeof(szMessage),""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /pstat con %s - Mes VIP: %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(params[0]),params[2]);
			ABroadCast(COLOR_GENERAL, szMessage, 5);
			Log("logs/pstat.log", szMessage);
		}
		default: SendClientMessageEx(playerid, COLOR_GREY, "* Código inválido!");
	}
	CommandSpamTimes[playerid]++;
	CommandSpamUnmute[playerid] = 60;
	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
	SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	return 1;
}
zcmd(color, playerid, params[])
{
    if(!AdminOnDuty(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] < 7) return NoAutorizado
	{
        ShowPlayerDialog(playerid, DIALOG_COLORADMIN, DIALOG_STYLE_LIST, "Colores Administrativos", "{FF0000}Rojo\n{00FF00}Verde\n{00FFFF}Celeste\n{FFFF00}Amarillo\n{BDBC4E}Oliva\n{FF87FF}Rosado\n{8C00FF}Morado\n{FF5C00}Naranjo\n{000000}Negro", "Seleccionar", "Salir");
    }
    return 1;
}
zcmd(check, playerid, params[])
{
    if(!AdminOnDuty(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] <= 1) return NoAutorizado
	if(!sscanf(params, "d", params[0]))
	{
	    if(!IsPlayerConnectedEx(params[0])) return SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID es inválida.");
	    ShowStats(playerid,params[0]);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "USA: /check <ID>");
    return 1;
}
zcmd(setint, playerid, params[])
{
    if(!AdminOnDuty(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] < 2) return NoAutorizado
	if(!sscanf(params, "dd", params[0],params[1]))
	{
	    if(!IsPlayerConnectedEx(params[0])) return SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID es inválida.");
	    new string[64];
	    SetPlayerInterior(params[0], params[1]);
	    format(string, sizeof(string), "- Interior de %s es ahora %d", GetPlayerNameEx(params[0]), params[1]);  SendClientMessageEx(playerid, COLOR_WHITE, string);
		return SendClientMessageEx(params[0], COLOR_WHITE, string);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "USA: /setint <PlayerID> <Interior>");
    return 1;
}
zcmd(setvw, playerid, params[])
{
    if(!AdminOnDuty(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] < 2) return NoAutorizado
	if(!sscanf(params, "dd", params[0],params[1]))
	{
	    if(!IsPlayerConnectedEx(params[0])) return SendClientMessageEx(playerid, COLOR_GREY, "Esa ID es inválida.");
	    new string[64];
	    SetPlayerVirtualWorld(params[0], params[1]);
	    format(string, sizeof(string), "- VirtualWorld de %s ahora es %d", GetPlayerNameEx(params[0]), params[1]);  SendClientMessageEx(playerid, COLOR_WHITE, string);
		return SendClientMessageEx(params[0], COLOR_WHITE, string);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "USA: /setvw <PlayerID> <VirtualWorld>");
    return 1;
}
zcmd(setcarvw, playerid, params[])
{
    if(!AdminOnDuty(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	if(Info[playerid][pAdmin] < 2) return NoAutorizado
	if(!sscanf(params, "dd", params[0],params[1]))
	{
	    if(!IsPlayerConnectedEx(params[0])) return SendClientMessageEx(playerid, COLOR_GREY, "Esa ID es inválida.");
		SetVehicleVirtualWorld(params[0], params[1]);
	    format(szMessage, sizeof(szMessage), "- VirtualWorld del Auto ID %d, ahora es %d", params[0], params[1]);
		return SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "USA: /setcarvw <CarId> <VirtualWorld>");
	return 1;
}
zcmd(silenciar, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] < 2) return NoAutorizado
	if(!sscanf(params, "d", params[0]))
	{
	    if(!IsPlayerConnectedEx(params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
	    if(Muted[params[0]] == 0)
		{
			Muted[params[0]] = 1;
		    format(szMessage, sizeof(szMessage), "Admin %s ha silenciado al jugador %s",GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
			SendClientMessageEx(params[0],COLOR_RED2,szMessage);
			return ABroadCast(COLOR_GENERAL,szMessage,2);
		}
		else
		{
			Muted[params[0]] = 0;
			format(szMessage, sizeof(szMessage), "Admin %s ha desilenciado al jugador %s",GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]));
			SendClientMessageEx(params[0],COLOR_RED2,szMessage);
			return ABroadCast(COLOR_GENERAL,szMessage,2);
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "USA: /silenciar <PlayerID>");
    return 1;
}
zcmd(warn, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] < 4) return NoAutorizado
    new reason[32];
	if(!sscanf(params, "ds[32]", params[0], reason))
	{
		if(Info[params[0]][pAdmin] > Info[playerid][pAdmin]) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hacer esto a administradores de mayor rango.");
		if(Info[params[0]][pWarn] == 3)
		{
            new ip[32],month,day,year;
			getdate(year,month,day);
			GetPlayerIp(params[0],ip,sizeof(ip));
		    Info[params[0]][pBanned] = 2;
		    Info[params[0]][pWarn]= 0;
		    format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s fue baneado automaticamente, razón: Execesivas advertencias.", GetPlayerNameEx(params[0]));
			BroadCast(COLOR_LIGHTRED,szMessage);
			AddBan(ip);
   			Expulsar(params[0]);
		}
		Info[params[0]][pWarn]++;
		format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s dió una advertencia a %s, razón: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]), reason);
		ABroadCast(COLOR_GENERAL,szMessage,2);
		format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s te dió una advertencia [%d/3], razón: %s (TIP: A la 3ra serás baneado automaticamente)",GetPlayerNameEx(playerid), Info[params[0]][pWarn],reason);
		SendClientMessageEx(params[0], COLOR_LIGHTRED, szMessage);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "USA: /warn <PlayerID> <Razón>");
    return 1;
}

zcmd(admins, playerid, params[])
{
    if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
    if(Info[playerid][pAdmin] == 0)
    {
       	SendClientMessageEx(playerid, COLOR_WHITE, "Si tienes preguntas acerca del juego o del servidor usa /duda [pregunta].");
	   	SendClientMessageEx(playerid, COLOR_WHITE, "Si ves a jugadores sospechosos usando software no permitidos. (Hacks, Cheats, CLEO Mods, ect.) usa /reportar [id] [razón].");
    }
    else
    {
        new string[64];
        SendClientMessageEx(playerid, COLOR_GENERAL, "Admins Online:");
		foreach(Player, i)
		{
			if(Info[i][pAdmin] >= 1 && Info[i][pAdmin] <= 8)
			{
				switch(Info[i][pAdmin])
				{
    				case 1: format(string, sizeof(string), "* Moderador: %s", GetPlayerNameEx(i));
			        case 2: format(string, sizeof(string), "* Mod Global: %s", GetPlayerNameEx(i));
			        case 3: format(string, sizeof(string), "* Mod Lider: %s", GetPlayerNameEx(i));
			        case 4: format(string, sizeof(string), "* Admin Junior: %s", GetPlayerNameEx(i));
			        case 5: format(string, sizeof(string), "* Administrador: %s", GetPlayerNameEx(i));
			        case 6: format(string, sizeof(string), "* Admin General: %s", GetPlayerNameEx(i));
			        case 7: format(string, sizeof(string), "* Director: %s", GetPlayerNameEx(i));
			        case 8: format(string, sizeof(string), "* Director General: %s", GetPlayerNameEx(i));
	   			}
			    SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
 		}
    }
	return 1;
}

zcmd(techs, playerid, params[])
{
	if(Info[playerid][pAdmin] < 5) return NoAutorizado
	SendClientMessageEx(playerid, COLOR_WHITE, "Techs Online:");
	new string[84];
    foreach(Player, i)
    {
          if(Info[i][pShopTech] >= 1)
          {
              format(string, sizeof(string), "* Shop Tech: %s", GetPlayerNameEx(i));
              SendClientMessageEx(playerid, COLOR_WHITE, string);
          }
    }
    return 1;
}

zcmd(creveh, playerid, params[])
{
    if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
    if(Info[playerid][pAdmin] < 6) return NoAutorizado
    if(!sscanf(params, "iii", params[0], params[1], params[2]))
	{
        new Float:X,Float:Y,Float:Z;
        GetPlayerPos(playerid, X,Y,Z);
        new carid = CreateVehicle(params[0], X+5,Y,Z, 0.0, params[1], params[2], 600000);
        format(szMessage, sizeof(szMessage), "Vehículo %d creado .", carid);
		SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
    }
	else SendClientMessageEx(playerid, COLOR_GREY, "USA: /veh <id> <color1> <color2>");
    return 1;
}

CMD:ir(playerid,params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] <= 1) return NoAutorizado
	if(sscanf(params, "u", params[0])) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /ir <PlayerID>");
	new Float:p_x,Float:p_y,Float:p_z;
	GetPlayerPos(params[0], p_x,p_y,p_z);
	new interior = GetPlayerInterior(params[0]), vw = GetPlayerVirtualWorld(params[0]);
	SetPosEx(playerid, p_x,p_y,p_z,0,interior,vw);
	SendClientMessageEx(playerid, COLOR_WHITE, "Teleportado!");
	SetPVarInt(playerid, "tempfixac", 1);
	SleepEx(2000);
	SetPVarInt(playerid, "tempfixac", 0);
	return 1;
}

zcmd(traer, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] <= 1) return NoAutorizado
    new giveplayerid;
    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /traer <PlayerID>");
	if(IsPlayerConnectedEx(giveplayerid))
	{
	    if(Info[giveplayerid][pAdmin] == 6) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes traer a un jugador de alto rango administrativo.");
		new Float:p_x,Float:p_y,Float:p_z;
	    GetPlayerPos(playerid, p_x,p_y,p_z);
	    new interior = GetPlayerInterior(playerid);
	    new vw = GetPlayerVirtualWorld(playerid);
    	SetPosEx(giveplayerid, p_x,p_y,p_z,0,interior,vw);
    	SendClientMessageEx(giveplayerid, COLOR_WHITE, "Teleportado!");
    	SetPVarInt(giveplayerid, "tempfixac", 1);
    	SleepEx(2000);
    	SetPVarInt(giveplayerid, "tempfixac", 0);
  	}
	else SendClientMessageEx(playerid, COLOR_GREY, "Esa ID es inválida.");
    return 1;
}
zcmd(checkwep, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] < 2) return NoAutorizado
    new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /checkwep <PlayerID>");
	if(!IsPlayerConnectedEx(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID es inválida.");
	if(GetPVarInt(giveplayerid, "EventToken") != 0 || GetPVarInt(giveplayerid, "IsInArena") == 1) SendClientMessageEx(playerid, COLOR_GREY, "Estás armas son del paintball o un evento.");
	new x,xweapon, xbalas, string[80],NombreArma[24];
	format(string, sizeof(string), "Armas de %s:", GetPlayerNameEx(giveplayerid)); SendClientMessageEx(playerid, COLOR_WHITE, string);
	for (new slot=0; slot<14; slot++)
	{
		GetPlayerWeaponData(giveplayerid, slot, xweapon, xbalas);
	    if(xweapon != 0)
		{
    	    GetWeaponName(xweapon,NombreArma,sizeof(NombreArma));
	        format(string, sizeof(string), "%s Balas: [%d]",NombreArma, xbalas);
	        x++;
	        SendClientMessageEx(playerid, COLOR_WHITE, string);
	    }
	    if(x >= 5)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			x = 0;
			format(string, sizeof(string), "");
		}
		else format(string, sizeof(string), "%s,  ", string);
	}
    return 1;
}
zcmd(facciones, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] > 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "= ID'S de Facciones =");
		SendClientMessageEx(playerid, -1, "1. SAPD - 2. FBI - 3. SAEM - 4. SAMD - 5. CNN - 6. Mecanicos");
		SendClientMessageEx(playerid, -1, "7. Gobierno - 8. Hitman - 9. Rusos - 10. LCN - 11. Grove Street");
		SendClientMessageEx(playerid, -1, "12. Ballas - 13. Vagos");
	}
	else NoAutorizado
	return 1;
}
zcmd(alimpiar, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] <= 1) return NoAutorizado
    CleanScreen();
	format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" Limpieza de chat por %s.", GetPlayerNameEx(playerid));
	return ABroadCast(COLOR_GENERAL,szMessage,1);
}
zcmd(lanzarvips, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] <= 1) return NoAutorizado
	format(szMessage, sizeof(szMessage), ""COL_BLUE"Información >"COL_WHITE" ¡Servicios VIP's disponibles!, información detallada en: www.newparadise-rp.net");
	return ABroadCast(COLOR_GENERAL,szMessage,1);
}
zcmd(lanzarfacc, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] <= 1) return NoAutorizado
	format(szMessage, sizeof(szMessage), ""COL_BLUE"Información >"COL_WHITE" ¡Facciones libres!, información detallada en: www.newparadise-rp.net");
	return ABroadCast(COLOR_GENERAL,szMessage,1);
}

zcmd(slap, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] < 2) return NoAutorizado
    new giveplayerid;
    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /slap <PlayerID>");
	if(IsPlayerConnectedEx(giveplayerid))
	{
	    new Float:sl[3];
		GetPlayerPos(giveplayerid, sl[0], sl[1], sl[2]);
		SetPlayerPos(giveplayerid, sl[0], sl[1], sl[2]+5);
		PlayerPlaySound(giveplayerid, 1130, sl[0], sl[1], sl[2]+5);
		format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s golpeó a %s",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
		ABroadCast(COLOR_GENERAL,szMessage,2);
		return SendClientMessageEx(giveplayerid, COLOR_RED2, szMessage);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID es inválida.");
    return 1;
}
zcmd(setskin, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] < 3) return NoAutorizado
	new giveplayerid, skin;
	if(!sscanf(params, "ui", giveplayerid, skin))
	{
	    if(IsPlayerConnectedEx(giveplayerid))
		{
		    if(skin > 299 || skin < 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Skin ID incorrecto (0-299)");
		    Info[giveplayerid][pChar] = skin;
		    SetPlayerSkin(giveplayerid, Info[giveplayerid][pChar]);
		    format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s te cambió el skin, ID SKIN: %d.", GetPlayerNameEx(playerid), skin);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, szMessage);
			format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s cambió el skin de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			return ABroadCast(COLOR_GENERAL,szMessage,2);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID es inválida.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "USA: /setskin <PlayerID> <SkinID>");
    return 1;
}
zcmd(vehslap, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] < 3) return NoAutorizado
	new alt, giveplayerid;
	if(!sscanf(params, "di", giveplayerid, alt))
	{
	    if(IsPlayerConnectedEx(giveplayerid))
		{
		    new Float:slx, Float:sly, Float:slz;
		    GetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz);
			SetVehiclePos(GetPlayerVehicleID(giveplayerid), slx, sly, slz+alt);
			PlayerPlaySound(giveplayerid, 1130, slx, sly, slz+alt);
			format(szMessage, sizeof(szMessage), "[Administración]%s golpeó tu vehiculo.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_RED2, szMessage);
			format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s golpeó el vehiculo de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			return ABroadCast(COLOR_GENERAL,szMessage,3);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID es inválida.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "USA: /vehslap <PlayerID> <Altitud>");
    return 1;
}
zcmd(getcar, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] < 3) return NoAutorizado
    new Float:plocx,Float:plocy,Float:plocz, vehicleid;
	if(!sscanf(params, "i", vehicleid))
	{
		GetPlayerPos(playerid, plocx, plocy, plocz);
		SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
		return SetVehiclePos(vehicleid,plocx,plocy+4, plocz);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* /getcar <VehicleID>");
	return 1;
}
zcmd(gotocar, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] < 3) return NoAutorizado
    new Float:cwx2,Float:cwy2,Float:cwz2,vehicleid;
    if(!sscanf(params, "i", vehicleid))
	{
		GetVehiclePos(vehicleid, cwx2, cwy2, cwz2);
		return SetPlayerPos(playerid, cwx2, cwy2, cwz2);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* /gotocar <VehicleID>");
	return 1;
}

zcmd(fixveh, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] < 3) return NoAutorizado
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "* No estás en un vehículo.");
    SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
	RepairVehicle(GetPlayerVehicleID(playerid));
	return SendClientMessageEx(playerid, COLOR_WHITE, "* Vehículo reparado.");
}

zcmd(fixvid, playerid, params[])
{
	if(Info[playerid][pAdmin] < 3) return NoAutorizado
	new vehicleid;
	if(!sscanf(params, "i", vehicleid))
	{
		SetVehicleHealth(vehicleid, 1000.0);
		SendClientMessageEx(playerid, COLOR_WHITE, "Vehículo reparado.");
		RepairVehicle(vehicleid);
	} else SendClientMessageEx(playerid, COLOR_WHITE, "* /fixvid <VehicleID>");
	return 1;
}

zcmd(mascara, playerid, params[])
{
    if(Info[playerid][pMask] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "¡No tienes máscara!");
    if(Info[playerid][pMaskuse] == 0){
        foreach(Player, i){
	    	if(IsPlayerConnectedEx(i)){
	   			ShowPlayerNameTagForPlayer(i, playerid, 0);
			}
		}
		Info[playerid][pMaskuse] = 1;
  		format(szMessage, sizeof(szMessage), "* %s se pone una máscara.", GetPlayerNameEx(playerid));
  		ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    }
    else{
        foreach(Player, i){
	    	if(IsPlayerConnectedEx(i)){
	   			ShowPlayerNameTagForPlayer(i, playerid, 1);
			}
		}
		Info[playerid][pMaskuse] = 0;
  		format(szMessage, sizeof(szMessage), "* %s se quita la máscara de su rostro.", GetPlayerNameEx(playerid));
  		ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    }
    return 1;
}

CMD:ah(playerid, params[])
{
	if(Info[playerid][pAdmin] == 0 && Info[playerid][pFactionModerator] == 0 && Info[playerid][pShopTech] == 0) return NoAutorizado
	szMessage = "";
	if(Info[playerid][pFactionModerator] == 1)
	{
	    strcat(szMessage, "{DF013A}Comando /irapunto {FFFFFF}- Ir a un punto\n");
	    strcat(szMessage, "{DF013A}Comando /facchat {FFFFFF}- Chat general de facciones");
	    ShowPlayerDialog(playerid, DIALOG_ADMINH_FM, DIALOG_STYLE_MSGBOX, "{DF013A}CMD Mod de Facciones", szMessage, ">>", "Salir");
	    return 1;
	}
	else if(Info[playerid][pShopTech] == 1)
	{
	    strcat(szMessage, "{DF013A}Comando /codigolibre {FFFFFF}- Ver ID de código libre\n");
	    strcat(szMessage, "{DF013A}Comando /crearcodigo {FFFFFF}- Crear código de Coins\n");
	    strcat(szMessage, "{DF013A}Comando /borrarcodigo {FFFFFF}- Borrar código de Coins");
	    ShowPlayerDialog(playerid, DIALOG_ADMINH_ST, DIALOG_STYLE_MSGBOX, "{DF013A}CMD Tecnicos", szMessage, ">>", "Salir");
	    return 1;
	}
	strcat(szMessage, "{DF013A}Comando /a {FFFFFF}- Admin Chat\n");
	strcat(szMessage, "{DF013A}Comando /desactivar {FFFFFF}- Activar/Desactivar AdminChat o MP's\n");
	strcat(szMessage, "{DF013A}Comando /gotoco {FFFFFF}- Ir a coordenadas\n");
	strcat(szMessage, "{DF013A}Comando /eventostaff {FFFFFF}- Ingresar a un evento como STAFF\n");
	strcat(szMessage, "{DF013A}Comando /w {FFFFFF}- Susurros\n");
	strcat(szMessage, "{DF013A}Comando /ls - /sf - /lv {FFFFFF}- Ir a LS/SF/LV\n");
	strcat(szMessage, "{DF013A}Comando /aa {FFFFFF}- Canal OOC administrativo\n");
	strcat(szMessage, "{DF013A}Comando /ar - /rr {FFFFFF}- Aceptar/Rechazar reportes\n");
	strcat(szMessage, "{DF013A}Comando /aduda - /rduda {FFFFFF}- Aceptar/Rechazar dudas");
	ShowPlayerDialog(playerid, DIALOG_ADMINH_1, DIALOG_STYLE_MSGBOX, "{DF013A}CMD Moderador", szMessage, ">>", "Salir");
	return 1;
}

CMD:desactivar(playerid, params[])
{
	new tog[5];
	if(Info[playerid][pAdmin] == 0) return NoAutorizado
	if(sscanf(params, "s[5]", tog)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /desactivar [ac/mp]");
	if(strcmp(tog, "ac") == 0)
	{
	    if(!AdminChat[playerid])
		{
	        AdminChat[playerid] = 1;
	        SendClientMessageEx(playerid, COLOR_WHITE, "- Canal de administración desactivado");
	    }
	    else
		{
	        AdminChat[playerid] = 0;
	        SendClientMessageEx(playerid, COLOR_WHITE, "- Canal de administración activado");
	    }
	}
	else if(strcmp(tog, "mp") == 0)
	{
	    switch(HidePM[playerid])
		{
		    case 1:
		    {
		        HidePM[playerid] = 0;
		        SendClientMessageEx(playerid, COLOR_WHITE, "¡MPs Habilitados!");
		    }
			default:
			{
				HidePM[playerid] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "¡MPs Bloqueados!");
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "USO: /desactivar [ac/mp]");
	return 1;
}

zcmd(bloqbug, playerid, params[])
{
	if(Info[playerid][pAdmin] >= 5)
	{
		new giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /bloqbug [playerid]");
		if(IsPlayerConnectedEx(giveplayerid))
		{
			format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s no podrá reportar nunca más un bug's, razón: Abuso de comando. Admin: %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
			BroadCast(COLOR_LIGHTRED, szMessage);
			Log("logs/reportbug.log", szMessage);
			Info[giveplayerid][pAdmin] = 0;
			Info[giveplayerid][pBlockBug] = 1;
			Kick(giveplayerid);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID es inválida.");
	}
	else NoAutorizado
	return 1;
}
zcmd(unbloqbug, playerid, params[])
{
	if(Info[playerid][pAdmin] >= 5)
	{
		new giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USE: /unbloqbug [playerid]");
		if(IsPlayerConnectedEx(giveplayerid))
		{
			format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s desbloqueó del comando [/reportarbug] %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_LIGHTRED, szMessage,3);
 			Log("logs/reportbug.log", szMessage);
			Info[giveplayerid][pBlockBug] = 0;
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID es inválida.");
	}
	else NoAutorizado
	return 1;
}
zcmd(cleanvarstaff, playerid, params[])
{
	new giveplayerid;
	if(Info[playerid][pAdmin] >= 7)
	{
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /cleanvarstaff [playerid]");
		if(IsPlayerConnectedEx(giveplayerid))
		{
       		format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s limpió variables admin a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
       		ABroadCast(COLOR_GENERAL,szMessage,2);
			Log("logs/admin.log", szMessage);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, "Restearon tus variables de administrador a 0.");
			Info[giveplayerid][pAdmin] = 0;
			Info[giveplayerid][pHelper] = 0;
			Info[giveplayerid][pFactionModerator] = 0;
			Info[giveplayerid][pBanAppealer] = 0;
			Info[giveplayerid][pStaffManager] = 0;
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID es inválida.");
	}
	else NoAutorizado
	return 1;
}
zcmd(removergps, playerid, params[])
{
	if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	if(Info[playerid][pMember] == 1||Info[playerid][pLeader] == 1)
	{
		DisablePlayerCheckpoint(playerid);
	}
	else if(Info[playerid][pMember] == 4||Info[playerid][pLeader] == 4)
	{
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}
zcmd(noac, playerid, params[])
{
    if(Info[playerid][pAdmin] < 7) return NoAutorizado
    if (!noac)
	{
		noac = 1;
		format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" Admin chat bloqueado por %s",GetPlayerNameEx(playerid));
		ABroadCast(COLOR_GENERAL,szMessage,1);
	}
	else
	{
		noac = 0;
		format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" Admin chat desbloqueado por %s",GetPlayerNameEx(playerid));
		ABroadCast(COLOR_GENERAL,szMessage,1);
	}
	return 1;
}
zcmd(nofac, playerid, params[])
{
    if(Info[playerid][pAdmin] < 3) return NoAutorizado
    new string[80];
    if (!nofac)
	{
		nofac = 1;
		format(string, sizeof(string), "Chat de facción bloqueado por %s ",GetPlayerNameEx(playerid));
		SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
	}
	else
	{
		nofac = 0;
		format(string, sizeof(string), "Chat de facción desbloqueado por %s",GetPlayerNameEx(playerid));
		SendFamilyMessage(Info[playerid][pMember], 0x7BDDA5AA, string);
	}
	return 1;
}
zcmd(update, playerid, params[])
{
    if (Info[playerid][pAdmin] < 6) return NoAutorizado
    saveAccounts();
    GuardarArmasSV();
	SaveStuff();
    UpdatePoints();
	atmSave();
	saveCarSale();
	saveCodes();
	foreach(Player, i) { OnPlayerSavedStats(i); }
	ABroadCast(COLOR_GENERAL,""COL_BLUE"Administración >"COL_WHITE" Los archivos (cuentas, casas, negocios, autos) Fuerón guardados",1);
    return 1;
}
	zcmd(admindarxrcon, playerid, params[]){
	new nick[MAX_PLAYER_NAME];
	GetPlayerName(playerid, nick, sizeof(nick));
	if(IsPlayerAdmin(playerid))
		{
		new giveplayerid, level;
		if(!sscanf(params, "di", giveplayerid, level)){
            if(IsPlayerConnected(giveplayerid)){
               	new string[128];
			    Info[giveplayerid][pAdmin] = level;
			    format(string, sizeof(string), "Usted ha sido promovido al rango administrativo %d por el administrador %s", params[1], GetPlayerNameEx(playerid));
                SendClientMessage(params[0], COLOR_WHITE, string);
			    format(string, sizeof(string), "AdmCmd: %s ha asignado a %s el rango administrativo %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),level);
                ABroadCast(COLOR_YELLOW,string,1);
			    Log("logs/admins.log", string);
			    new log[255];
                format(string, sizeof(string), "AdmCmd: %s ha asignado a %s el rango administrativo %d (%d-%d-%d)", GetPlayerNameEx(playerid), GetPlayerNameEx(params[0]), params[1]);
    			Log("logs/Admins.log", log);
              }else SendClientMessageEx(playerid, COLOR_WHITE, " Esa ID es inválida.");
           }
        } else SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado! ");
        return 1;
    }
    
    zcmd(admindars, playerid, params[])
    {
    if(Info[playerid][pAdmin] < 7) return NoAutorizado
    new iLevel, iTarget;
	if(sscanf(params, "ud", iTarget, iLevel)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /admindars [playerid] [nivel]");
    if(IsPlayerConnectedEx(iTarget))
    {
		if(Info[playerid][pAdmin] < Info[iTarget][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "* No puedes modificar el nivel administrativo de un administrador de mayor rango.");
		//if(Info[playerid][pAdmin] < iLevel && iTarget == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes modificar el nivel administrativo tuyo a un rango mayor.");
		if(Info[playerid][pAdmin] < iLevel) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes modificar el nivel administrativo a un rango mayor.");
        if(iLevel > 7)
        {
			format(szMessage, sizeof(szMessage), "AdmWarning: %s ha intentado dar un rango no permitido a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(iTarget));
			ABroadCast(COLOR_GENERAL,szMessage,1);
			return 1;
        }
		if(Info[iTarget][pAdmin] < iLevel)
        {
		    format(szMessage, sizeof(szMessage), "Has sido ascendido a administrador nivel %d por %s.", iLevel, GetPlayerNameEx(playerid));
		    SendClientMessageEx(iTarget, COLOR_GENERAL, szMessage);

			format(szMessage, sizeof(szMessage), "Has ascendido a %s a administrador nivel %d.",GetPlayerNameEx(iTarget), iLevel);
		    SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
		}
		else
		{
		    format(szMessage, sizeof(szMessage), "Has sido descendido a administrador nivel %d por %s.", iLevel, GetPlayerNameEx(playerid));
		    SendClientMessage(iTarget, COLOR_YELLOW, szMessage);

		    format(szMessage, sizeof(szMessage), "Has descendido a %s a administrador nivel %d.",GetPlayerNameEx(iTarget), iLevel);
		    SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
        }
        Info[iTarget][pAdmin] = iLevel;
		format(szMessage, sizeof(szMessage), "* %s asignó a %s administrador nivel %d.", GetPlayerNameEx(playerid),GetPlayerNameEx(iTarget),iLevel);
		Log("logs/security.log", szMessage);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está conectado correctamente.");
	return 1;
}
zcmd(makefacmod, playerid, params[])
{
    if(Info[playerid][pAdmin] < 6) return NoAutorizado
    new giveplayerid;
    if(!sscanf(params, "u", giveplayerid))
	{
        if(IsPlayerConnectedEx(giveplayerid))
		{
			Info[giveplayerid][pFactionModerator] = 1;
			format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s lo ha asignado moderador de facciones.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
			format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s ha asignado moderador de facciones a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_GENERAL,szMessage,2);
			Log("logs/security.log", szMessage);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID es inválida.");
    }
	else SendClientMessageEx(playerid, COLOR_GREY, "USA: /makefacmod <ID> ");
    return 1;
}

CMD:quitarfacmod(playerid, params[])
{
	if(Info[playerid][pAdmin] < 6) return NoAutorizado
	new giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /quitarfacmod [id]");
	Info[giveplayerid][pFactionModerator] = 0;
	return 1;
}

zcmd(makeshop, playerid, params[])
{
    if(Info[playerid][pAdmin] < 7) return NoAutorizado
    new giveplayerid;
    if(!sscanf(params, "u", giveplayerid))
	{
        if(IsPlayerConnectedEx(giveplayerid))
		{
			Info[giveplayerid][pShopTech] = 1;
			format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s lo ha asignado Técnico de la Tienda Online.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
			format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s ha asignado Técnico de la Tienda Online a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_GENERAL,szMessage,2);
			Log("logs/security.log", szMessage);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID es inválida.");
    }
	else SendClientMessageEx(playerid, COLOR_GREY, "USA: /makeshop <ID> ");
    return 1;
}

CMD:quitarshop(playerid, params[])
{
	if(Info[playerid][pAdmin] < 7) return NoAutorizado
	new giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /quitarshop [id]");
	Info[giveplayerid][pShopTech] = 0;
	return 1;
}

zcmd(makeapban, playerid, params[])
{
    if(Info[playerid][pAdmin] < 6) return NoAutorizado
    new giveplayerid;
    if(!sscanf(params, "u", giveplayerid))
	{
        if(IsPlayerConnectedEx(giveplayerid))
		{
			Info[giveplayerid][pBanAppealer] = 1;
			format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s lo ha asignado Apelador a Desbaneo.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_GENERAL, szMessage);
			format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s ha asignado Apelador de desbaneos a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_GENERAL,szMessage,2);
			Log("logs/security.log", szMessage);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID es inválida.");
    }
	else SendClientMessageEx(playerid, COLOR_GREY, "USA: /makepaban <ID>");
    return 1;
}

CMD:quitarapban(playerid, params[])
{
	if(Info[playerid][pAdmin] < 6) return NoAutorizado
	new giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USO: /quitarapban [id]");
	Info[giveplayerid][pBanAppealer] = 0;
	return 1;
}

zcmd(disarm, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if (Info[playerid][pAdmin] < 3) return SendClientMessageEx(playerid, COLOR_GREY, "* No autorizado!");
    new giveplayerid;
	if(!sscanf(params, "u", giveplayerid))
	{
		if(!IsPlayerConnectedEx(giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
        new string[84];
        ResetPlayerWeaponsEx(giveplayerid);
        format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s limpio el inventario de armas de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
        ABroadCast(COLOR_GENERAL,string,2);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "USA: /disarm <PlayerID>");
	return 1;
}
CMD:jailcuenta(playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	if(Info[playerid][pAdmin] >= 3)
	{
		new string[128], name[MAX_PLAYER_NAME], minutes;
		if(sscanf(params, "s[24]d", name, minutes)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /jailcuenta [Nombre_Apellido] [Minutos]");
		if(INI_Exist(name))
		{
			new PlayerFile[MAX_PLAYER_NAME + 32];
    		format( PlayerFile , sizeof PlayerFile, USERFILE, name);
    		new INI:File = INI_Open(PlayerFile);
    		INI_SetTag(File,"data");
    		INI_WriteInt(File,"Jailed",4);
    		INI_WriteInt(File,"JailTime",minutes*60);
    		INI_WriteFloat(File,"Pos_x",2764.9155);
    		INI_WriteFloat(File,"Pos_y",377.0344);
    		INI_WriteFloat(File,"Pos_z",3.0396);
    		INI_Close(File);
			new year, month,day;
			getdate(year, month, day);
			format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s fue jaileado por %s (%d-%d-%d) [CMD OFFLINE]", name, GetPlayerNameEx(playerid),month,day,year);
			Log("logs/admin.log", string);
			format(string, 128, ""COL_BLUE"Administración >"COL_WHITE" %s fue jaileado por %s. [CMD OFFLINE]", name, GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED,string,2);
		}
		else SendClientMessageEx( playerid, COLOR_GREY, "* Esa cuenta no existe." );
	}
	else NoAutorizado
	return 1;
}
zcmd(ls, playerid, params[]){
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] >= 1){
    	if (GetPlayerState(playerid) == 2)
		{
			return SetVehiclePos(GetPlayerVehicleID(playerid), 1529.6,-1691.2,13.3);
		}
		else{
			SetPosEx(playerid, 1529.6,-1691.2,13.3, 0, 0 ,0);
		}
	}
	else NoAutorizado
	return 1;
}
zcmd(sf, playerid, params[]){
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if (Info[playerid][pAdmin] < 1) return NoAutorizado
    if (GetPlayerState(playerid) == 2){
		return SetVehiclePos(GetPlayerVehicleID(playerid), -1417.0,-295.8,14.1);
	}
	else{
		SetPosEx(playerid, -1417.0,-295.8,14.1, 0, 0 ,0);
		return 1;
	}
}
zcmd(lv, playerid, params[]){
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if (Info[playerid][pAdmin] < 1) return NoAutorizado
    if (GetPlayerState(playerid) == 2){
		return SetVehiclePos(GetPlayerVehicleID(playerid), 1694.6566,1453.4523,10.7632);
	}
	else{
		SetPosEx(playerid, 1694.6566,1453.4523,10.7632, 0, 0 ,0);
		return 1;
	}
}
zcmd(entercar, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    new vehicleid;
    if (Info[playerid][pAdmin] < 3) return NoAutorizado
    if (!sscanf(params, "i", vehicleid))
	{
        PutPlayerInVehicle(playerid, vehicleid, 1);
		return SendClientMessageEx(playerid, COLOR_WHITE, "¡Teleportado!");
    }
	else SendClientMessageEx(playerid, COLOR_GREY, "USA: /entercar <VehicleID>");
    return 1;
}
zcmd(fuelcars, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if (Info[playerid][pAdmin] < 3) return NoAutorizado
    SendClientMessageToAllEx(COLOR_GREEN, "La gasolina de los vehículos fue llenada");
	for(new c=0;c<MAX_VEHICLES;c++) VehicleFuel[c] = 300;
    return 1;
}
zcmd(cnnn, playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    new text[64], type;
    if (Info[playerid][pAdmin] < 4) return NoAutorizado
    if (!sscanf(params, "is", type, text))
	{
        if(type == 2) return SendClientMessageEx(playerid, COLOR_GREY, "¡No puedes elegir el #2!");
		foreach(Player, i){ if(IsPlayerConnectedEx(i)){ GameTextForPlayer(i, text, 5000, type); } }
        new string[128];
        format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s usó el comando /cnnn.", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_GENERAL,string,4);
    }
	else SendClientMessageEx(playerid, COLOR_GREY, "USA: /cnnn <Tipo> <Texto>");
    return 1;
}
zcmd(deposito, playerid, params[])
{
   	if (PlayerToPoint(10, playerid,1619.69995117,-1852.59997559,12.50000000))
	{
		MoveDynamicObject(depgate,1626.00000000,-1852.19995117,12.50000000, 4.0);
  		PlayerPlaySound(playerid, 1153, 0,0,0);
  		SetTimer("depositogate", 7000, 0);
	}
	return 1;
}
zcmd(seguridadpeajes, playerid, params[])
{
	if(!IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres miembro de una organizacion del estado.");
	if(Info[playerid][pRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, " No puedes hacer esto.");
	if(AutoPeaje != 1)
	{
		AutoPeaje = 1;
		BroadCast(ROJO_ADMIN, "[Información]{FFFFFF} Todos los peajes han sido cerrados y puestos en custodia por las organizaciones de seguridad del Estado.");
	}
	else
	{
		AutoPeaje = 0;
		BroadCast(ROJO_ADMIN, "[Información]{FFFFFF} Todos los peajes han sido abiertos y habilitados nuevamente.");
	}
	return 1;
}
zcmd(peaje, playerid, params[])
{
	if(CheckMoney(playerid,20))
	{
		if(PlayerToPoint(5.0, playerid, 608.1693,339.6902,18.9297))
		{
			if(AutoPeaje == 0)
			{
				SetDynamicObjectRot(pea3, 0.00000000,2.50000000,34.25003052);
				SetTimer("peaje3", 7000, 0);
				Bought(playerid, 20);

			}
			else SendClientMessageEx(playerid, COLOR_WHITE, " Éste peaje fue deshabilitado por las organizaciones de seguridad.");
		}

		else if(PlayerToPoint(5.0, playerid, 618.1724,339.9881,19.1228))
		{
			if(AutoPeaje == 0)
			{
				SetDynamicObjectRot(pea4, 0.00000000,355.75003052,37.99072266);
				SetTimer("peaje4", 7000, 0);
				Bought(playerid, 20);

			}
			else SendClientMessageEx(playerid, COLOR_WHITE, " Éste peaje fue deshabilitado por las organizaciones de seguridad.");
		}

		else if(PlayerToPoint(5.0, playerid, -182.0773,329.9183,12.0781))
		{
			if(AutoPeaje == 0)
			{
				SetDynamicObjectRot(pea5, 0.00000000,0.00000000,343.00000000);
				SetTimer("peaje5", 7000, 0);
				Bought(playerid, 20);

			}
			else SendClientMessageEx(playerid, COLOR_WHITE, " Éste peaje fue deshabilitado por las organizaciones de seguridad.");
		}

		else if(PlayerToPoint(5.0, playerid, -176.0248,322.3244,12.0781))
		{
			if(AutoPeaje == 0)
			{
				SetDynamicObjectRot(pea6, 0.00000000,0.00000000,342.99865723);
				SetTimer("peaje6", 7000, 0);
				Bought(playerid, 20);

			}
			else SendClientMessageEx(playerid, COLOR_WHITE, " Éste peaje fue deshabilitado por las organizaciones de seguridad.");
		}

		else if(PlayerToPoint(8.0, playerid, 1722.6185,507.6076,28.9528))
		{
			if(AutoPeaje == 0)
			{
				SetDynamicObjectRot(pea1, 0.00000000,35.00000000,341.50000000);
				SetTimer("peaje1", 7000, 0);
				Bought(playerid, 20);

			}
			else SendClientMessageEx(playerid, COLOR_WHITE, " Éste peaje fue deshabilitado por las organizaciones de seguridad.");
		}

		else if(PlayerToPoint(8.0, playerid, 1746.4300,513.2691,28.2265))
		{
			if(AutoPeaje == 0)
			{
				SetDynamicObjectRot(pea2, 359.76928711,336.74743652,339.64782715);
				SetTimer("peaje2", 7000, 0);
				Bought(playerid, 20);

			}
			else SendClientMessageEx(playerid, COLOR_WHITE, " Éste peaje fue deshabilitado por las organizaciones de seguridad.");
		}
        else if(PlayerToPoint(8.0, playerid, 40.9993,-1522.2847,5.1837))
		{
			if(AutoPeaje == 0)
			{
				SetDynamicObjectRot(pea7, 0.0000, 350.0000, 265.1184);
				SetTimer("peaje7", 7000, 0);
				Bought(playerid, 20);

			}
			else SendClientMessageEx(playerid, COLOR_WHITE, " Éste peaje fue deshabilitado por las organizaciones de seguridad.");
		}
        else if(PlayerToPoint(8.0, playerid, 59.7798,-1540.4568,5.0815))
		{
			if(AutoPeaje == 0)
			{
				SetDynamicObjectRot(pea8, 0.0000, 350.0000, 84.4490);
				SetTimer("peaje8", 7000, 0);
				Bought(playerid, 20);

			}
			else SendClientMessageEx(playerid, COLOR_WHITE, " Éste peaje fue deshabilitado por las organizaciones de seguridad.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, " No estás en el peaje.");
	}
	return 1;
}
zcmd(abrirpuerta, playerid, params[])
{
	if(IsAPolice(playerid))
	{
    	if (PlayerToPoint(10, playerid,1589.053344,-1638.123168,14.122960)){
  			MoveDynamicObject(pdgate1,1599.053344,-1638.123168,14.122960, 0.8);
  			PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
			return 1;
		}
		if (PlayerToPoint(15, playerid,1545.7398681641, -1627.7280273438, 15.206203460693)){
  			MoveDynamicObject(pdgate2,1545.7392578125, -1627.7275390625, 20.381204605103, 3.0);
  			SetTimer("GateClose5", 7000, 0);
  			return 1;
		}
        else SendClientMessageEx(playerid, COLOR_GREY,"  No hay señal!");
	}
	else if(Team_LSTV(playerid)){
  		if (PlayerToPoint(30, playerid,781.77209500,-1330.31884800,12.68660500)){
       		MoveDynamicObject(tvp, 773.89648400,-1330.31884800,12.68660500, 5.0);
       		SetTimer("GateCloseCNN", 7000, 0);
       		return 1;
   		}
        if (PlayerToPoint(30, playerid,774.11425781,-1384.98632812,12.92022705)){
       		MoveDynamicObject(tvp1, 765.11425781,-1384.98632812,12.92022705, 5.0);
       		SetTimer("GateCloseCNN1", 7000, 0);
       		return 1;
      	}
      	else SendClientMessageEx(playerid, COLOR_GREY,"  No hay señal!");
	}
	else if(Team_Mecanicos(playerid))
	{
	    if (PlayerToPoint(20, playerid,1823.74646, -1406.35303, 13.84960)){
	      	MoveDynamicObject(Mecagate,1823.74646, -1406.35303, 10.34860, 5.0);
	        return 1;
		}
		if (PlayerToPoint(20, playerid,1813.60327, -1427.44653, 13.84860)){
	      	MoveDynamicObject(Mecagate2,1813.60327, -1427.44653, 10.35550, 5.0);
	      	return 1;
		}
		else SendClientMessageEx(playerid, COLOR_GREY,"  No hay señal!");
	}
	else if(Team_NG(playerid)) // By CreadorRejas Grove4l
	{
       	if (PlayerToPoint(30, playerid,2720.218505,-2405.194580,15.981236))
	   	{
	    	MoveDynamicObject(saem3, 2720.218505,-2405.194580,8.481236, 5.0);
   			return SetTimer("OpenDoorNG3", 7000, 0);
    	}
      	else SendClientMessageEx(playerid, COLOR_GREY,"  No hay señal!");
	}
	else if(Hitman(playerid)) //
		{
      		if (PlayerToPoint(30, playerid,-283.8739, -2190.3965, 30.1216)){
      		    MoveDynamicObject(hitman, -283.8739, -2190.3965, 35.3132, 5.0);
	       		SetTimer("CloseHitman", 7000, 0);
	       		return 1;
	       	}
          	else SendClientMessageEx(playerid, COLOR_GREY,"  No hay señal!");
		}
	else if(Team_SAMD(playerid)){
	    if (PlayerToPoint(30, playerid,1141.40002441,-1293.69995117,20.50000000)){
		    MoveDynamicObject(hospitalgate, 1141.40002441,-1293.69995117,20.50000000, 1.5);
		    SetTimer("GateClose4", 7000, 0);
		    return 1;
	    }
	    else SendClientMessageEx(playerid, COLOR_GREY,"  No hay señal!");
	}
	else if(Gobierno(playerid)){
        if (PlayerToPoint(10, playerid,1386.099609375, -1647.8994140625, 14.10000038147)){
      		MoveDynamicObject(gobiernogate,1390.39074707,-1639.57287598,16.29999924, 5.0);
            SetTimer("GateCloseGob", 7000, 0);
            return 1;
		}
		if (PlayerToPoint(15, playerid,1391.29980469,-1629.89941406,12.52500343) || PlayerToPoint(15, playerid,1391.29980469,-1629.89941406,37.20010376)){
      		MoveDynamicObject(gobiernogate1,1391.29980469,-1629.89941406,37.20010376, 5.0);
      		SetTimer("GateCloseGob1", 7000, 0);
      		return 1;
		}
        else SendClientMessageEx(playerid, COLOR_GREY,"  No hay señal!");
    }
	else if(Rusos(playerid)){
        if (PlayerToPoint(10, playerid,659.65, -1227.13, 17.70)){
      		MoveDynamicObject(rusa1,659.6467, -1227.1348, 22.1564, 5.0);
            SetTimer("reja1rusa", 7000, 0);
            return 1;
		}
		if (PlayerToPoint(10, playerid,664.9059, -1309.2028, 15.3109)){
      		MoveDynamicObject(rusa2,664.9059, -1309.2028, 20.4521, 5.0);
            SetTimer("reja2rusa", 7000, 0);
            return 1;
		}
		if (PlayerToPoint(10, playerid,785.3090, -1152.4523, 25.3706)){
      		MoveDynamicObject(rusa3,785.3090, -1152.4523, 30.5138, 5.0);
            SetTimer("reja3rusa", 7000, 0);
            return 1;
		}
        else SendClientMessageEx(playerid, COLOR_GREY,"  No hay señal!");
    }
	else if(Italianos(playerid)){
        if (PlayerToPoint(10, playerid,1426.85, -1885.90, 15.28)){
      		MoveDynamicObject(lcnpuerta,1426.8494, -1885.9042, 20.5760, 5.0);
            SetTimer("rejalcn", 7000, 0);
            return 1;
		}
        else SendClientMessageEx(playerid, COLOR_GREY,"  No hay señal!");
    }
    else SendClientMessageEx(playerid, COLOR_GREY,"Usted no tiene un mando a distancia.");
    return 1;
}

zcmd(cpuerta, playerid, params[]) return CheckForCloseDoor(playerid);
zcmd(sacarsangre, playerid, params[]){
    new giveplayerid;
    if(!sscanf(params, "d", giveplayerid)){
        if(OnDuty[playerid] == 0)   return SendClientMessageEx(playerid, COLOR_WHITE, "¡No estás de servicio!");
        if(IsPlayerConnectedEx(giveplayerid)){
            if(Team_SAMD(playerid)){
                if (ProxDetectorS(5.0, playerid, giveplayerid)){
        		    new Float:HP, string[128]; GetPlayerHealth(giveplayerid, HP);
        		    if(HP < 100) return SendClientMessageEx(playerid, COLOR_WHITE, "El paciente debe estar con el máximo de vida");
        		    SetHP(giveplayerid, HP-80);
					SetPlayerDrunkLevel(giveplayerid, 3000);
					Blood += 80;
					format(string, sizeof(string), "* El doctor %s realiza una extracción de sangre a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string, sizeof(string), "Información: Hay %d ml de sangre disponible.", Blood);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					SaveStuff();
        		} else SendClientMessageEx(playerid, COLOR_WHITE, "El jugador debe estar cerca de usted");
            } else SendClientMessageEx(playerid, COLOR_WHITE, "¡No eres médico!");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no conectado");
    } else SendClientMessageEx(playerid, COLOR_WHITE, "* /sacarsangre <jugador>");
    return 1;
}
zcmd(pcinfo, playerid, params[]){
    if(Team_SAMD(playerid)){
		new string[128];
    	ClearChatbox(playerid);
        SendClientMessageEx(playerid, 0x00D535FF, "PCU (Loading ... )");
        format(string, sizeof(string), "Sangre disponible: %d", Blood);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        format(string, sizeof(string), "Radiación TAC: No disponible");
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        format(string, sizeof(string), "Fondos: No disponible");
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        SendClientMessageEx(playerid, 0x00D535FF, "------------------------------");
	} else SendClientMessageEx(playerid, COLOR_WHITE, "¡No eres médico!");
	return 1;
}
zcmd(atar, playerid, params[]){
	if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No puedes usar este comando mientras estás herido.");
	if(Info[playerid][pLevel] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "¡Necesitas ser nivel 2 para arriba!");
    if(Rope[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "¡No tienes una cuerda!");
    if(Blinded[playerid] == 1 || Tied[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "¡No puedes hacer esto estando atado/vendado!");
	new giveplayerid;
	if(!sscanf(params, "d", giveplayerid)){
        if(IsPlayerConnectedEx(giveplayerid)){
            if(ProxDetectorS(4.0,playerid,giveplayerid)){
                new string[128];
                if(Tied[giveplayerid] == 0){
                    Tied[giveplayerid] = 1;
					format(string, sizeof(string), "* %s agarra una cuerda y ata a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
                else{
                    Tied[giveplayerid] = 0;
					format(string, sizeof(string), "* %s agarra una cuerda y desata a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					TogglePlayerControllable(giveplayerid, 1);
                }
            } else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
        } else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
    } else SendClientMessageEx(playerid, COLOR_WHITE, "* /atar <ID>");
    return 1;
}
zcmd(vendar, playerid, params[]){
	if(GetPVarInt(playerid, "Injured") == 0){
        if(Info[playerid][pLevel] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "¡Necesitas ser nivel 2 para arriba!");
        if(Rope[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "¡No tienes venda!");
        if(Blinded[playerid] == 1 || Tied[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "¡No puedes hacer esto estando atado/vendado!");
        new giveplayerid;
		if(!sscanf(params, "d", giveplayerid)){
            if(IsPlayerConnectedEx(giveplayerid)){
                if(ProxDetectorS(4.0,playerid,giveplayerid)){
                    new string[90];
                    if(Blinded[giveplayerid] == 0){
                        Blinded[giveplayerid] = 1;
						format(string, sizeof(string), "* %s venda los ojos de %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerCameraPos(giveplayerid,0.0,0.0,1000);
						SetPlayerCameraLookAt(giveplayerid,0.0,0.0,5000);
						Info[playerid][pRob]++;
                    }
                    else{
                        Blinded[giveplayerid] = 0;
						format(string, sizeof(string), "* %s desvenda los ojos de %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetCameraBehindPlayer(giveplayerid);
                    }
                } else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador muy lejos.");
            } else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador desconectado.");
        } else return SendClientMessageEx(playerid, COLOR_WHITE, "* /vendar <ID>");
    } else SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No puedes usar este comando mientras estás herido.");
	return 1;
}

zcmd(bmbuy, playerid, params[]){

		if (PlayerToPoint(10, playerid,1294.4835,-988.4177,32.6953)){
			return ShowPlayerDialog(playerid, MERCADONEGRO, DIALOG_STYLE_LIST, "Mercado Negro","Puño Americano(15$)\nMáscara(50$)\nPalanca(50$)\nGanzúas(70$)\nSoga + Venda(120$)", "Comprar", "Salir");
		}
		return 1;
    }
zcmd(puente, playerid, params[])
{
	new string[128];
	new engine,lights,alarm,doors,bonnet,boot,objective,vehicleid;
	vehicleid = GetPlayerVehicleID(playerid);
	if(Ganzuas[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No tienes ganzúas!");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "No eres el conductor.");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo!");
    if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_WHITE,"[ERROR]: No puedes usar este comando si estás en este tipo de vehiculos.");
	if(engine == VEHICLE_PARAMS_ON) return SendClientMessage(playerid, COLOR_GREY, "Este vehiculo ya está encendido!");
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	new randg = Random(1,6);
	switch(randg)
	{
	    case 1:
	    {
	        format(string, sizeof(string), "* %s utiliza unas ganzúas y cruza los cables de encendido.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        	SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			GameTextForPlayer(playerid, "~p~haciendo puente.",2500,3);
		}
		case 2:
	    {
	        format(string, sizeof(string), "* %s utiliza unas ganzúas pero no logra encender el vehiculo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		case 3:
	    {
	        format(string, sizeof(string), "* %s rompe las ganzúas intentando encender el vehiculo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Ganzuas[playerid] = 0;
		}
		case 4:
	    {
	        format(string, sizeof(string), "* %s rompe las ganzúas intentando encender el vehiculo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Ganzuas[playerid] = 0;
		}
		case 5:
		{
		    format(string, sizeof(string), "* %s rompe las ganzúas contra el piso por no poder encender el vehiculo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Ganzuas[playerid] = 0;
		}
	}
	return 1;
}
CMD:sms(playerid, params[]){
	if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
	new string[128], phonenumb, text[100];
	if(sscanf(params, "ds[100]", phonenumb, text)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: (/t)ext [numero teléfonico] [texto]");
	if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "  No tienes un teléfono...");
	if (Info[playerid][pJailTime] > 0) return SendClientMessageEx(playerid,COLOR_GREY,"[ERROR]: No puedes usar este comando mientras estás en prisión.");
	foreach(Player, i){
		if(Info[i][pPnumber] == phonenumb && phonenumb != 0){
			new giveplayerid = i;
			if(Mobile[giveplayerid] != -1) return SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador está en una llamada.");
			Mobile[playerid] = giveplayerid; //caller connecting
			if(IsPlayerConnectedEx(giveplayerid)){
				if(giveplayerid != -1){
					if(PhoneOnline[giveplayerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador tiene el teléfono apagado.");
					if(UnidentifedCall[playerid] == 1){
						format(string, sizeof(string), "SMS: %s, De: Numero Privado.", text,GetPlayerNameEx(playerid),Info[playerid][pPnumber]);
					}
					else{
						format(string, sizeof(string), "SMS: %s, De: %s (%d)", text,GetPlayerNameEx(playerid),Info[playerid][pPnumber]);
					}
					SendClientMessageEx(giveplayerid, COLOR_GRAD1, string);
					SendClientMessageEx(playerid, COLOR_GRAD1, string);
					SendClientMessageEx(playerid, COLOR_WHITE, "Mensaje de Texto Enviado.");
					GameTextForPlayer(playerid, "~r~$-25", 5000, 1);
					GivePlayerCash(playerid,-25);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					Mobile[playerid] = -1;
					if(strcmp(Info[giveplayerid][pAutoTextReply], "Nada", true) != 0){
						format(string, sizeof(string), "SMS: %s, Destinatario: %s [Auto Respuesta] (%d)", Info[giveplayerid][pAutoTextReply], GetPlayerNameEx(giveplayerid), Info[giveplayerid][pPnumber]);
						SendClientMessageEx(playerid, COLOR_GRAD1, string);
					}
					return 1;
				}
			}
		}
	}
	SendClientMessageEx(playerid, COLOR_WHITE, "  Envio de mensaje falló...");
	return 1;
}

CMD:numero(playerid, params[])
{
	//if(Info[playerid][pLevel] < 2) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo los usuarios nivel 2 para adelante pueden usar este comando");
	if(Info[playerid][pPhoneBook] == 1)
	{
		new iTarget;
		if(sscanf(params, "d", iTarget)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /numero [playerid]");
		if(!IsPlayerConnectedEx(iTarget)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
		if(Info[iTarget][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "* No figura. (No tiene número)");
        if(UnidentifedCall[iTarget] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* Número privado.");
		format(szMessage, sizeof(szMessage), "* %s (%i)", GetPlayerNameEx(iTarget), Info[iTarget][pPnumber]);
		SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	}
	else SendClientMessage(playerid, COLOR_WHITE, "No tienes un PhoneBook.");
	return 1;
}

CMD:bebersprunk(playerid, params[])
{
    #pragma unused params
	if(Info[playerid][pSprunk] > 0)
	{
		if( Info[playerid][pEstado] >= 1 || GetPVarInt(playerid, "Injured") == 1 || GetPVarInt(playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar esto ahora.");
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes beber aqui, estás conduciendo.");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
		format(szMessage, sizeof(szMessage), "* %s abre su sprunk para beberlo.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		SetPVarInt(playerid, "UsingSprunk", 1);
		Info[playerid][pSprunk]--;
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes un sprunk, compralo en el 24/7.");
	return 1;
}
CMD:llamar(playerid, params[])
{
	new string[128], phonenumb;
	if(sscanf(params, "d", phonenumb)) return SendClientMessageEx(playerid, COLOR_WHITE, "USO: /llamar [numero telefónico]");
	if (Info[playerid][pJailTime] > 0) return SendClientMessageEx(playerid,COLOR_GREY,"[ERROR]: No puedes usar este comando mientras estás en prisión.");
	if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid,COLOR_GREY,"No puedes usar tu teléfono.");
	if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un teléfono.");
	if(PhoneOnline[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "Tu celular está apagado.");
	if(Mobile[playerid] != -1) return SendClientMessageEx(playerid, COLOR_WHITE, " Ya se encuentra en una llamada...");
	if(Info[playerid][pJailed] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Este numero no lo puedes usar en jail admin!");
	format(string, sizeof(string), "* %s coge su teléfono.", GetPlayerNameEx(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	PlayerPlaySound(playerid, 3600, 0, 0, 0);
	if(phonenumb == 911) return SendClientMessageEx(playerid, COLOR_GREY, "* Para llamar al 911 usa /servicios .");

	if(phonenumb == 757)
	{
        if(InLive == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "En este momento la línea está fuera de servicio o ocupada.");
		InLive = 0;
        Mobile[playerid] = 758;
		format(string,128,"Llamada entrante: Nombre: %s - Número: %d.", GetPlayerNameEx(playerid), Info[playerid][pPnumber]);
		SendFamilyMessage(5, COLOR_GRAD1, string);
        SetPlayerAttachedObject(playerid, 9, 330, 6); // 4 = attachment slot, 330 = cellphone model, 6 = right hand
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
        return SendClientMessageEx(playerid, COLOR_WHITE, "SA News: Hola. . . estás en línea, desde este momento puedes hablar.");
	}
	else if(phonenumb == 3900)
	{
	   	SendClientMessageEx(playerid, COLOR_WHITE, "Operador: Bienvenido. ¿ Tiene algúna noticia, quiere participar ?");
	   	SendClientMessageEx(playerid, COLOR_WHITE, "Operador: Déjenos un mensaje después de la señal, ¡hasta la vista!");
	  	SendClientMessageEx(playerid, COLOR_WHITE, "Biiip!");
	   	return Mobile[playerid] = 3901;
	}
	if(phonenumb == Info[playerid][pPnumber]) return SendClientMessageEx(playerid, COLOR_WHITE, " Está ocupado...");
	foreach(Player, i){
		if(Info[i][pPnumber] == phonenumb && phonenumb != 0){
			new giveplayerid = i;
			Mobile[playerid] = giveplayerid; //caller connecting
			if(IsPlayerConnectedEx(giveplayerid)){
				if(giveplayerid != INVALID_PLAYER_ID){
					if(GetPVarInt(giveplayerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "El jugador está en el paintball arena no puede recibir llamadas.");
					if(PhoneOnline[giveplayerid] > 0){
						SendClientMessageEx(playerid, COLOR_GREY, "Tono a apagado.");
						Mobile[playerid] = -1;
						return 1;
					}
					if(Mobile[giveplayerid] != -1){
						SendClientMessageEx(playerid, COLOR_WHITE, "Tono a ocupado...");
						Mobile[playerid] = -1;
						return 1;
					}
					if (Mobile[giveplayerid] == -1){
					    SetPlayerAttachedObject(playerid, 9, 330, 6); // 4 = attachment slot, 330 = cellphone model, 6 = right hand
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
						PlayerPlaySoundEx(20600, 0.0, 0.0, 0.0);
						format(string, sizeof(string), "Tu telefono está sonando - Usa /contestar para atender la llamada. [De: %s]", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "* Teléfono de %s suena.", GetPlayerNameEx(i));
						SendClientMessageEx(playerid, COLOR_WHITE, "Tip: Ahora usa T, y habla por el chat por teléfono.");
						ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						CellTime[playerid] = 1;
						return 1;
					}
				}
			}
		}
	}
	SendClientMessageEx(playerid, COLOR_WHITE, "Su llamada no puede darse por el numero marcado, por favor, compruebe el número e inténtelo nuevamente.");
	return 1;
}
CMD:contestar(playerid, params[]){
    #pragma unused params
	new string[128];
	if(Mobile[playerid] != -1) return SendClientMessageEx(playerid, COLOR_WHITE, "  Ya estás en una llamada...");
	foreach(Player, i){
		if(Mobile[i] == playerid){
			Mobile[playerid] = i; //caller connecting
			SendClientMessageEx(i,  COLOR_WHITE, "  Contestaron la llamada.");
			format(string, sizeof(string), "* %s contesta su teléfono.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            SetPlayerAttachedObject(playerid, 9, 330, 6); // 4 = attachment slot, 330 = cellphone model, 6 = right hand
			return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		}
	}
	return 1;
}
CMD:colgar(playerid,params[]){
    #pragma unused params
	new string[128];
	if(Info[playerid][pEstado]!=0) return SendClientMessageEx (playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
	if(Mobile[playerid] == 758){
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 9);
		InLive = 1;
		SendClientMessageEx (playerid, COLOR_WHITE, "* CNN: Gracias por llamar a CNN.");
		return Mobile[playerid] = -1;
	}
	new caller = Mobile[playerid];
	if((IsPlayerConnectedEx(caller) && caller != -1)|| caller == 911 || caller == 3901){
		if(caller < 500){
			SendClientMessageEx(caller,  COLOR_WHITE, "   Colgaron el teléfono.");
			format(string, sizeof(string), "* %s guarda su teléfono.", GetPlayerNameEx(caller));
			ProxDetector(30.0, caller, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			CellTime[caller] = 0;
			Mobile[caller] = -1;
		}
		CellTime[playerid] = 0;
		SendClientMessageEx(playerid,  COLOR_WHITE, "   Colgaste.");
		format(string, sizeof(string), "* %s guarda su teléfono.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		Mobile[playerid] = -1;
		SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(caller, 9);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 9);
		return 1;
	}
	SendClientMessageEx(playerid,  COLOR_GREY, "* Tu teléfono está en el bolsillo.");
	return 1;
}
zcmd(enmascarados, playerid, params[]){
    if(IsPlayerConnectedEx(playerid))
    if(Info[playerid][pAdmin] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Enmascarados:");
		foreach(Player, i)
		{
			if(IsPlayerConnectedEx(i))
			{
			    if(Info[i][pMaskuse] == 1)
				{
					new string[128];
					format(string, 256, "** ID: %d ** %s", i, GetPlayerNameEx(i));
					SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
			}
		}
	}
	else NoAutorizado
	return 1;
}
// zcmd:job ============================================================================================================================
zcmd(unirse, playerid, params[])
{
    #pragma unused params
	if(Info[playerid][pJob] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes un trabajo. Primero usa /renunciar.");
	if (PlayerToPoint(3.0, playerid, 2104.8408,-1810.0991,13.5547)){
		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora eres "COL_BLUE"Repartidor de pizza"COL_WHITE", usa /vestidor para la ropa! Puedes usar /ayuda para ver los comandos disponibles.");
		return Info[playerid][pJob] = 1;
    }
    else if(IsPlayerInRangeOfPoint(playerid,3.0,2176.2505,-2259.4224,14.7734)){
		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora eres "COL_BLUE"Camionero!"COL_WHITE" Puedes usar /ayuda para ver los comandos disponibles.");
        return Info[playerid][pJob] = 2;
	}
    else if (PlayerToPoint(3.0, playerid, 1752.7062,-1894.1708,13.5574)){
		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora eres "COL_BLUE"Taxista!"COL_WHITE" Puedes usar /ayuda para ver los comandos disponibles.");
        return Info[playerid][pJob] = 3;
	}
    else if (PlayerToPoint(3.0, playerid, -382.7300,-1426.3325,26.2570)){
		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora eres "COL_BLUE"Cosechador!"COL_WHITE" Puedes usar /ayuda para ver los comandos disponibles.");
        return Info[playerid][pJob] = 4;
	}
    else if (IsPlayerInRangeOfPoint(playerid,3.0,0000.0000,-000.0000,00.0000)){
    	SendClientMessageEx(playerid, COLOR_GENERAL, "Ahora eres un "COL_BLUE"Bodyguard!"COL_WHITE" Puedes usar /ayuda para ver los comandos disponibles.");
        return Info[playerid][pJob] = 5;
    }
    else if (IsPlayerInRangeOfPoint(playerid,3.0,-132.4102,-1176.0121,3.1017))
	{
    	SendClientMessageEx(playerid, COLOR_GENERAL, "Ahora eres "COL_BLUE"Leñador!"COL_WHITE" Puedes usar /ayuda para ver los comandos disponibles.");
        return Info[playerid][pJob] = 6;
    }
    else if (IsPlayerInRangeOfPoint(playerid,3.0,-77.1577,-1136.5863,1.0781))
	{
    	SendClientMessageEx(playerid, COLOR_GENERAL, "Ahora eres "COL_BLUE"Obrero!"COL_WHITE" Puedes usar /ayuda para ver los comandos disponibles.");
        return Info[playerid][pJob] = 7;
    }
    else if (IsPlayerInRangeOfPoint(playerid,3.0,2195.9170,-1973.0699,13.5589))
	{
    	SendClientMessageEx(playerid, COLOR_GENERAL, "Ahora eres "COL_WHITE"Basurero!"COL_GENERAL" Puedes usar /ayuda para ver los comandos disponibles.");
        return Info[playerid][pJob] = 8;
    }
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el lugar adecuado");
	return 1;
}
zcmd(renunciar, playerid, params[])
{
	if(Info[playerid][pJob] > 0)
	{
	    Info[playerid][pJob] = 0;
		return SendClientMessageEx(playerid, COLOR_WHITE, "* Has renunciado a tu trabajo, ya puedes obtener uno nuevo.");
	}
	else if(Info[playerid][pJob] == 0){SendClientMessageEx(playerid, COLOR_WHITE, "* No tienes trabajo.");}
	return 1;
}
zcmd(cosechar, playerid, params[]){
    new idcar = GetPlayerVehicleID(playerid);
	if(Info[playerid][pJob] == 4 || Info[playerid][pJob2] == 4){
	    if(IsAHarvest(idcar)){
            if(DrugFarming[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Ya estás cosechando!");
      	    DrugFarming[playerid] = 1;
			new randomize = random(sizeof(gDrugFarmVar));
      		SetPlayerCheckpoint(playerid, gDrugFarmVar[randomize][0], gDrugFarmVar[randomize][1], gDrugFarmVar[randomize][2], 5.0);
       	    SendClientMessageEx(playerid, COLOR_WHITE, "Dirígete a los Checkpoints y cosecha lo que necesites.");
       	    SendClientMessageEx(playerid, COLOR_WHITE, "Cuando quieras dejar de cosechar usa /dcosechar.");
       	} else return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una cosechadora!");
    } else SendClientMessageEx(playerid, COLOR_WHITE, "No eres cosechador!");
    return 1;
}
zcmd(dcosechar, playerid, params[]){
    new idcar = GetPlayerVehicleID(playerid);
    if(!IsAHarvest(idcar)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una cosechadora!");
    if(DrugFarming[playerid] == 1){
  	    if(DrugFarming[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás cosechando!");
  	    DrugFarming[playerid] = 0;
  	    SetVehicleToRespawn(idcar);
  	    SendClientMessageEx(playerid, COLOR_WHITE, "Dejaste de cosechar! Puedes ver los KG que hiciste. (/cuenta)");
  	    DisablePlayerCheckpoint(playerid);
    } else SendClientMessageEx(playerid, COLOR_GREY, "No estás cosechando!");
    return 1;
}
// zcmd: mecas ============================================================================================================================
zcmd(menu, playerid, params[])
{
    #pragma unused params
    if(Team_Mecanicos(playerid))
	{
	    new iVeh = GetPlayerVehicleID(playerid);
 		if(OnDuty[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás de servicio!");
 		if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el taller de mecanica!");
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehículo!");
 		if(LSPD_IsACopCar(iVeh)||Taxi_Vehicle(iVeh)||AutoRusos(iVeh)||AutoItalianos(iVeh)||AutoGrove(iVeh)||AutoBallas(iVeh)||AutoVagos(iVeh)||Bus_Vehicle(iVeh)||SAMD_Vehicle(iVeh)||Mecanico_Vehicle(iVeh)||FBI_Vehicle(iVeh)||CNN_Vehicle(iVeh)||IsAPizzabike(iVeh)||GobierAuto(iVeh)||IsAnNGCar(iVeh)){
		return 1; }
		ShowPlayerDialog(playerid, MECANICO_MENU, DIALOG_STYLE_LIST, "Menú", "Repararaciones\nGasolina\nTunning\nSeguros\nEquipo de Sonido", ">>", "<<");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres mecánico");
	return 1;
}

zcmd(autotaller, playerid, params[])
{
	if(!IsAtTaller(playerid)) return SendClientMessage(playerid, -1, "No estas en el taller de reparaciones!");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "Debes estar en un vehiculo!");
	for(new i ; i < MAX_PLAYERS ; i++)
	{
	    if(Team_Mecanicos(i) && OnDuty[i] == 1) return SendClientMessage(playerid, -1, "No puedes usar el AutoTaller, hay mecanicos OnDuty.");
	}
	ShowPlayerDialog(playerid, UMENU_REPARACION, DIALOG_STYLE_LIST, "Reparar", "Cambiar Motor\t\t\t\t($5000)\nCambiar Motor + Chasis\t\t($8000)\nSeguro\nSprays\nEquipo de Sonido", "Ok", "Atrás");
	return 1;
}

CMD:me(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid,COLOR_GREY,"USA: /me [TEXTO]");
	format(szMessage, sizeof(szMessage), ""COL_PURPLE"* %s %s", GetPlayerNameEx(playerid), params);
	NearMsg(playerid, -1, szMessage, 15.0);
	return 1;
}
CMD:ame(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid,COLOR_GREY,"USA: /ame [TEXTO]");
	format(szMessage, sizeof(szMessage), ""COL_PURPLE"* a %s %s", GetPlayerNameEx(playerid), params);
	NearMsg(playerid, -1, szMessage, 15.0);
	return 1;
}
CMD:b(playerid,params[])
{
	if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY,"USA: /b [TEXTO OOC]");
	format(szMessage, sizeof(szMessage), "(( %s dice: %s ))", GetPlayerNameEx(playerid), params);
	NearMsg(playerid, COLOR_FADE1, szMessage, 15.0);
	return 1;
}
CMD:aa(playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 1) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	if(Info[playerid][pAdmin] == 0) return NoAutorizado
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /aa [texto]");
	if(Info[playerid][pAdmin] <= 3) format(szMessage, sizeof(szMessage), "(( Moderador %s: %s ))", GetPlayerNameEx(playerid), params);
	else format(szMessage, sizeof(szMessage), "(( Administrador %s: %s ))", GetPlayerNameEx(playerid), params);
	NearMsg(playerid, COLOR_RED, szMessage, 40.0);
	SetPlayerChatBubble(playerid,szMessage,COLOR_RED,60.0,5000);
	return 1;
}
CMD:do(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid,COLOR_GREY,"USA: /do [TEXTO]");
	format(szMessage, sizeof(szMessage), "* %s (( %s ))", params, GetPlayerNameEx(playerid));
	NearMsg(playerid, COLOR_GREEN, szMessage, 15.0);
	return 1;
}
zcmd(so, playerid, params[]){
        if(!isnull(params)){
            new string[128];
            if(Info[playerid][pMaskuse] == 1) format(string, sizeof(string), "*[Se escucha] %s (( Desconocido )).", params);
			else format(string, sizeof(string), "* %s [Se escucha] %s", GetPlayerNameEx(playerid), params);
            return ProxDetector(30.0, playerid, string, TEAM_BAR_COLOR,TEAM_BAR_COLOR,TEAM_BAR_COLOR,TEAM_BAR_COLOR,TEAM_BAR_COLOR);
        }
		else SendClientMessageEx(playerid, COLOR_WHITE, "* /so <Sonido>");
        return 1;
    }
zcmd(s, playerid, params[]){
    if(!isnull(params)){
        switch(Info[playerid][pMaskuse]){
			case 1: format(szMessage, sizeof(szMessage), "Desconocido susurra:  %s", params);
			default: format(szMessage, sizeof(szMessage), "[Acento %s] %s susurra: %s", Info[playerid][pAcento], GetPlayerNameEx(playerid), params);
		}
        ProxDetector(5.0, playerid, szMessage,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
		format(szMessage, sizeof(szMessage), "susurro: %s", params);
		return SetPlayerChatBubble(playerid,szMessage,COLOR_WHITE,5.0,5000);
    }
	else SendClientMessageEx(playerid, COLOR_WHITE, "* /s <Texto>");
    return 1;
}
zcmd(g, playerid, params[]){
    if(!isnull(params)){
        if(GetPVarInt(playerid, "PlayerCuffed") == 1) return	SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hablar cuando fuiste taseado, espera a que te quiten los cables.");
        switch(Info[playerid][pMaskuse]){
			case 1: format(szMessage, sizeof(szMessage), "Desconocido grita: ¡%s!", params);
			default: format(szMessage, sizeof(szMessage), "[Acento %s] %s grita: ¡%s!", Info[playerid][pAcento], GetPlayerNameEx(playerid), params);
		}
        ProxDetector(40.0, playerid, szMessage,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
		format(szMessage, sizeof(szMessage), "grito: ¡%s!", params);
		return SetPlayerChatBubble(playerid,szMessage,COLOR_WHITE,60.0,5000);
    }
	else SendClientMessageEx(playerid, COLOR_WHITE, "* /g <Texto>");
    return 1;
}

zcmd(ao, playerid, params[]){
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 4) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
    if(Info[playerid][pAdmin] < 4) return NoAutorizado
    if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /ao [general chat]");
   	if(Info[playerid][pAdmin] <= 3){
		new string[128];
		format(string, sizeof(string), "[AOOC] Moderador %s:"COL_WHITE" %s", GetPlayerNameEx(playerid), params);
		OOCOff(ROJO_ADMIN,string);
	}
	else if(Info[playerid][pAdmin] <= 6){
		new string[128];
		format(string, sizeof(string), "[AOOC] Administrador %s:"COL_WHITE" %s", GetPlayerNameEx(playerid), params);
		OOCOff(ROJO_ADMIN,string);
	}
	else if(Info[playerid][pAdmin] >= 7){
		new string[128];
		format(string, sizeof(string), "[AOOC] Director %s:"COL_WHITE" %s", GetPlayerNameEx(playerid), params);
		OOCOff(ROJO_ADMIN,string);
	}
    return 1;
}

CMD:desbug(playerid, params[])
{
	if(Info[playerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando mientras estás en prisión.");
	if(GetPVarInt(playerid, "IsInArena") > 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando en el Paintball.");
	if(TutStep[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando mientras estas en el tutorial.");
	if(IsPlayerConnectedEx(playerid))
	{
	    SetPlayerInterior(playerid,0);
	    SetPlayerVirtualWorld(playerid, 0);
	    Info[playerid][pInt] = 0;
	    Info[playerid][pVW] = 0;
		ClearAnimations(playerid);
     	SendClientMessageEx(playerid, -1, "Esperamos que tu problema se haya solucionado, de lo contrario llame a un administrador o re-conecte.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	return 1;
}

CMD:divorcio(playerid, params[])
{
	if(Info[playerid][pMarried] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "No estás casado!");
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /divorcio [ID]");
	if(IsPlayerConnectedEx(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			new dstring[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			new giveplayer[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			format(string, sizeof(string), "%s", giveplayer);
			strmid(wstring, string, 0, strlen(string), 24);
			format(string, sizeof(string), "%s", Info[playerid][pMarriedTo]);
			strmid(dstring, string, 0, strlen(string), 24);
			if(strcmp(dstring ,wstring, true ) == 0 )
			{
				format(string, sizeof(string), "* Has propuesto divorcio a %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_GENERAL, string);
				format(string, sizeof(string), "* %s te ha propuesto divorcio. (escribe /aceptar divorcio)", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
				DivorceOffer[giveplayerid] = playerid;
				return 1;
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está casado contigo!");
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está cerca tuyo.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "* Jugador especificado no está conectado.");
}
CMD:adivorcio(playerid, params[])
{
	if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	if(Info[playerid][pAdmin] >= 5)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /adivorcio [ID]");
		if(IsPlayerConnectedEx(giveplayerid))
		{
			ClearMarriage(giveplayerid);
			format(string, sizeof(string), "* Limpiaste el matrimonio de %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			format(string, sizeof(string), "* Tu has sido divorciado por %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
			DivorceOffer[giveplayerid] = playerid;
			return 1;

		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "* Jugador especificado no está conectado.");
	}
	else return NoAutorizado
}
CMD:proponer(playerid, params[])
{
	if(GetPlayerCash(playerid) < 4000) return SendClientMessageEx(playerid, COLOR_GREY, "   El matrimonio y recepción cuesta 4.000");
	if(Info[playerid][pMarried] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "   Tu ya estás casado");
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /proponer [ID]");
	if(IsPlayerConnectedEx(giveplayerid))
	{
	    if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "No te puedes proponer a tí mismo!");
		if(Info[giveplayerid][pMarried] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "   Ese jugador ya está casado!");
		else if(MarryWitness[playerid] == giveplayerid) return SendClientMessageEx(playerid, COLOR_GREY, "   No puedes casarte con el testigo!");
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			format(string, sizeof(string), "* Propusiste matrimonio a %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			format(string, sizeof(string), "* %s te propuso matrimonio. (Escribe /aceptar matrimonio)", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
			ProposeOffer[giveplayerid] = playerid;
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador no está cerca tuyo.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "Jugador especificado no está conectado.");
	return 1;
}
CMD:testigo(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /testigo [ID]");
	if(IsPlayerConnectedEx(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "No puedes proponerte a ti mismo."); return 1; }
			format(string, sizeof(string), "* Has solicitado a %s para ser tu testigo de matrimonio.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			format(string, sizeof(string), "* %s te ha pedido que seas su testigo de matrimonio. (usa /aceptar testigo)", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
			MarryWitnessOffer[giveplayerid] = playerid;
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador no está cerca tuyo.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "Jugador especificado no está conectado.");
	return 1;
}

CMD:radargun(playerid, params[])
{
if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No puedes usar este comando mientras estás herido.");
if(IsAPolice(playerid))
{
	new string[128];
	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando mientras estás en un vehículo.");
		return 1;
	}
	if(Info[playerid][pJailed] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando mientras estás prisión.");
		return 1;
	}
	if(GetPVarInt( playerid, "EventToken") != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando mientras estás en un evento.");
		return 1;
	}
	if(Info[playerid][pEstado] >= 1) {
		SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando mientras estás tazeado.");
		return 1;
	}
	new SpeedRadar = GetPVarInt(playerid, "SpeedRadar");
	if(SpeedRadar == 0)
	{
		SetPVarInt(playerid, "RadarReplacement", Info[playerid][pWeapons][9]);
		SetPVarInt(playerid, "RadarMunicion", Info[playerid][pMunicion][9]);
		if(Info[playerid][pWeapons][9] != 0) RemovePlayerWeapon(playerid, Info[playerid][pWeapons][9]);
		format(string, sizeof(string), "* %s coge la cámara de velocidad.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        GivePlayerValidWeapon(playerid, 43, 99999);
		SetPVarInt(playerid, "SpeedRadar", 1);
	}
	else
	{
		RemovePlayerWeapon(playerid, 43);
		GivePlayerValidWeapon(playerid, GetPVarInt(playerid, "RadarReplacement"), GetPVarInt(playerid, "RadarMunicion"));
		format(string, sizeof(string), "* %s guarda la cámara de velocidad.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		DeletePVar(playerid, "SpeedRadar");
	}
}
else SendClientMessageEx(playerid, COLOR_GREY, "* No eres policía");
return 1;
}

CMD:adminarmadar(playerid, params[])
{
    if (Info[playerid][pAdmin] >= 5)
	{
        new sstring[128], playa, gun, balas;
        if(sscanf(params, "ddd", playa, gun, balas))
		{
            SendClientMessageEx(playerid, COLOR_GRAD2, "Utiliza: /adminarmadar [PlayerID] [ID Arma] [Munición]");
            SendClientMessageEx(playerid, COLOR_GENERAL, "_______________________________________");
            SendClientMessageEx(playerid, COLOR_WHITE, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
            SendClientMessageEx(playerid, COLOR_WHITE, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flores 15: Cane 16: Frag Grenade");
            SendClientMessageEx(playerid, COLOR_WHITE, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle");
            SendClientMessageEx(playerid, COLOR_WHITE, "26: Sawnoff Shotgun 27: Combat Shotgun 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
            SendClientMessageEx(playerid, COLOR_WHITE, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
            SendClientMessageEx(playerid, COLOR_WHITE, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
            SendClientMessageEx(playerid, COLOR_GENERAL, "_______________________________________");
            return 1;
        }

        format(sstring, sizeof(sstring), "Has dado un arma a %s [ID Arma: %d con %d balas].",GetPlayerNameEx(playa),gun, balas);
        if(gun < 1||gun > 47)
            { SendClientMessageEx(playerid, COLOR_GRAD1, "ID de Arma invalido!"); return 1; }
        if(IsPlayerConnected(playa))
		{
            if((Info[playa][pConnectTime] < 2 || Info[playa][pWRestricted] > 0) && gun != 46 && gun != 43) return SendClientMessageEx(playerid, COLOR_GRAD2, "Ese jugador tiene restricción de armas de momento.");
            if(playa != INVALID_PLAYER_ID && gun <= 20 || gun >= 22)
			{
                GivePlayerValidWeapon(playa, gun, balas);
                SendClientMessageEx(playerid, COLOR_GRAD1, sstring);
                Log("logs/security.log", sstring);
            }
            else if(playa != INVALID_PLAYER_ID && gun == 21)
			{
                JetPack[playa] = 1;
                SetPlayerSpecialAction(playa, SPECIAL_ACTION_USEJETPACK);
                SendClientMessageEx(playerid, COLOR_GRAD1, sstring);
            }
        }
    }
    else SendClientMessageEx(playerid, COLOR_GRAD1, "No estás autorizado para usar este comando!");
    return 1;
}

CMD:creararma(playerid, params[])
{
	if(IsPlayerConnectedEx(playerid))
	{
		if(Info[playerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes crear armas en Jail!");
		if(Info[playerid][pEstado] == 0){
			if (GetPVarInt(playerid, "ArmsTimer") > 0){
			    new string[128];
	    		format(string, sizeof(string), "   Tienes que esperar %d segundos despues de haber creado algún arma.", GetPVarInt(playerid, "ArmsTimer"));
	    		SendClientMessageEx(playerid,COLOR_GREY,string);
	    		return 1;
			}
			else
			{
				switch(Info[playerid][pArmsSkill])
				{
					case 0 .. 49: ShowPlayerDialog(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "Seleccionar Arma", "Katana (30)\nCane (30)\nPool Cue (33)\nBaseball Bat (35)\nShovel (50)","Ok", "Cancelar");
					case 50 .. 99: ShowPlayerDialog(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "Seleccionar Arma", "Katana (30)\nCane (30)\nPool Cue (33)\nBaseball Bat (35)\nShovel (50)\nColt 45 (250)","Ok", "Cancelar");
					case 100 .. 149: ShowPlayerDialog(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "Seleccionar Arma", "Katana (30)\nCane (30)\nPool Cue (33)\nBaseball Bat (35)\nShovel (50)\n9mm Pistol (250)\nSilenced Pistol (300)","Ok", "Cancelar");
					case 150 .. 199: ShowPlayerDialog(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "Seleccionar Arma", "Katana (30)\nCane (30)\nPool Cue (33)\nBaseball Bat (35)\nShovel (50)\n9mm Pistol (250)\nSilenced Pistol (300)\nShotgun (550)","Ok", "Cancelar");
					case 200 .. 249: ShowPlayerDialog(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "Seleccionar Arma", "Katana (30)\nCane (30)\nPool Cue (33)\nBaseball Bat (35)\nShovel (50)\n9mm Pistol (250)\nSilenced Pistol (300)\nShotgun (550)\nDesert Eagle (1000)","Ok", "Cancelar");
					case 250 .. 299: ShowPlayerDialog(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "Seleccionar Arma", "Katana (30)\nCane (30)\nPool Cue (33)\nBaseball Bat (35)\nShovel (50)\n9mm Pistol (250)\nSilenced Pistol (300)\nShotgun (550)\nDesert Eagle (1000)\nMP5 (1500)","Ok", "Cancelar");
					case 300 .. 349: ShowPlayerDialog(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "Seleccionar Arma", "Katana (30)\nCane (30)\nPool Cue (33)\nBaseball Bat (35)\nShovel (50)\n9mm Pistol (250)\nSilenced Pistol (300)\nShotgun (550)\nDesert Eagle (1000)\nMP5 (1500)\nMicro Uzi (900)","Ok", "Cancelar");
					case 350 .. 399: ShowPlayerDialog(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "Seleccionar Arma", "Katana (30)\nCane (30)\nPool Cue (33)\nBaseball Bat (35)\nShovel (50)\n9mm Pistol (250)\nSilenced Pistol (300)\nShotgun (550)\nDesert Eagle (1000)\nMP5 (1500)\nMicro Uzi (900)\nAK-47 (15500)","Ok", "Cancelar");
					default: ShowPlayerDialog(playerid, DIALOG_CREATEGUN, DIALOG_STYLE_LIST, "Seleccionar Arma", "Katana (30)\nCane (30)\nPool Cue (33)\nBaseball Bat (35)\nShovel (50)\n9mm Pistol (250)\nSilenced Pistol (300)\nShotgun (550)\nDesert Eagle (1000)\nMP5 (1500)\nMicro Uzi (900)\nAK-47 (15500)\nM4A1 (16500)\nSniper (30000)","Ok", "Cancelar");
				}
			}
			return 1;
		}
		else SendClientMessage(playerid, COLOR_GREY, "* No puedes hacer esto mientras estas tazeado, congelado o esposado.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	return 1;
}

CMD:cancelar(playerid, params[])
{
new string[128], choice[32];
if(sscanf(params, "s[32]", choice))
{
	SendClientMessageEx(playerid, COLOR_WHITE, "|__________________ Cancelar __________________|");
	SendClientMessageEx(playerid, COLOR_WHITE, "USA: /cancelar [Nombre]");
	SendClientMessageEx(playerid, COLOR_GREY, "bebida - materiales - matrimonio - arma - divorcio - testigo");
	SendClientMessageEx(playerid, COLOR_GREY, "telefono - taxi - multa - coche - mecanico - droga - casa - vip");
	return 1;
}
else if(strcmp(choice,"hierba",true) == 0) { PotOffer[playerid] = 999; PotPrice[playerid] = 0; PotGram[playerid] = 0; }
else if(strcmp(choice,"crack",true) == 0) { CrackOffer[playerid] = 999; CrackPrice[playerid] = 0; CrackGram[playerid] = 0; }
else if(strcmp(choice,"materiales",true) == 0) { MatsOffer[playerid] = 999; MatsPrice[playerid] = 0; MatsAmount[playerid] = 0; }
else if(strcmp(choice,"arma",true) == 0) { GunOffer[playerid] = 999; GunId[playerid] = 0; SetPVarInt(playerid,"Dandoarma",0); }
else if(strcmp(choice,"testigo",true) == 0) { MarryWitnessOffer[playerid] = 999; }
else if(strcmp(choice,"matrimonio",true) == 0) { ProposeOffer[playerid] = 999; }
else if(strcmp(choice,"divorcio",true) == 0) { DivorceOffer[playerid] = 999; }
else if(strcmp(choice,"live",true) == 0) { LiveOffer[playerid] = 999; }
else if(strcmp(choice,"bebida",true) == 0) { DrinkOffer[playerid] = INVALID_PLAYER_ID; }
else if(strcmp(choice,"coche",true) == 0) { VehicleOffer[playerid] = 999; VehiclePrice[playerid] = 0; VehicleId[playerid] = -1; }
else if(strcmp(choice,"casa",true) == 0) { HouseOffer[playerid] = 999; HousePrice[playerid] = 0; House[playerid] = 0; }
else if(strcmp(choice,"bodyguard",true) == 0) { GuardOffer[playerid] = 999; GuardPrice[playerid] = 0; }
else if(strcmp(choice,"camion",true) == 0)
{
	DestroyProgressBar(LoadTruckBar[playerid]);
	LoadTruckBar[playerid] = INVALID_BAR_ID;
	LoadTruckTime[playerid] = 0;
	DeletePVar(playerid, "TruckDeliver");
	TruckUsed[playerid] = INVALID_VEHICLE_ID;
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	DisablePlayerCheckpoint(playerid);
}
if(strcmp(choice,"telefono",true) == 0)
{
    if(NumBuy[playerid] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "¡Nadie te ha ofrecido un número!");
    NumBuy[playerid] = 0;
    NumPrice[playerid] = 0;
    NumSeller[playerid] = 0;
    Facturing[playerid] = 0;
}
else if(strcmp(choice,"multa",true) == 0)
{
    if(TicketOffer[playerid] == 999) return SendClientMessageEx(playerid, COLOR_WHITE, "¡Nadie te multado!");
    format(string, sizeof(string), " %s se niega a pagar una multa", GetPlayerNameEx(playerid));
    ProxDetector(30.0,playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    format(string, sizeof(string), "* %s canceló el pago de una multa de %d$.", GetPlayerNameEx(playerid), TicketMoney[playerid]);
    SendClientMessageEx(TicketOffer[playerid], -1, string);
    TicketOffer[playerid] = 999;
    TicketMoney[playerid] = 0;
    Facturing[playerid] = 0;
}
else if(strcmp(choice,"mecanico",true) == 0) { if(IsPlayerConnectedEx(MechanicCall)) { if(MechanicCall == playerid) { MechanicCall = 999; } else { SendClientMessageEx(playerid, COLOR_GREY, "   No has llamado a un mecanico!"); return 1; } } }
else if(strcmp(choice,"ayuda",true) == 0) { if(IsPlayerConnectedEx(AdvisorCall)) { if(AdvisorCall == playerid) { AdvisorCall = 999; } else { SendClientMessageEx(playerid, COLOR_GREY, "   No has pedido ese servicio!"); return 1; } } }
else if(strcmp(choice,"taxi",true) == 0)
{
	if(IsPlayerConnected(TaxiCall)){if(TaxiCall == playerid){TaxiCall = 999;}}
	foreach(Player, i)
	{
		if(TaxiCallReady[i] != -1)
		{
			if(TaxiCallReady[i] == playerid)
			{
				TaxiCallReady[i] = -1;
				GameTextForPlayer(i, "~w~Llamada de taxi~n~~w~Cancelada", 5000, 1);
				DisablePlayerCheckpoint(i);
			}
		}
	}
}
else { return 1; }
format(string, sizeof(string), "* Cancelaste: "COL_WHITE"%s.", choice);
SendClientMessageEx(playerid, COLOR_GENERAL, string);
return 1;
}

CMD:dararma(playerid, params[])
{
	new string[128],id,weapon,balas;
	if(IsACop(playerid)) return SendClientMessageEx(playerid,COLOR_GREY,"* Eres de una fuerza de la ley, no puedes dar armas.");
	if(GetPVarInt(playerid, "IsInArena") != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes dar armas en el paintball!");
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Uso: /dararma [playerid]");
	else if(Info[playerid][pEstado]==0)
	{
		if(id == playerid) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes darte un arma a ti mismo!");
		if(Info[id][pConnectTime] < 2 || Info[id][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador tiene restricción de armas.");
		if(IsPlayerConnectedEx(id)){
	   	    if(ProxDetectorS(6.0, playerid, id) && !IsPlayerInAnyVehicle(playerid)){
	            if(IsPlayerInAnyVehicle(id)) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes dar un arma si el jugador esta en un vehículos.");
				weapon = GetPlayerWeapon(playerid);
				balas = GetPlayerAmmo(playerid);
				switch(weapon)
				{
					case 16, 18, 35, 36, 37, 38, 39, 40, 44, 45, 46, 0: SendClientMessage(playerid, COLOR_GREY, "Arma Inválida.");
					default:
					{
						format(string, sizeof(string), "Ofreciste a %s tu %s.", GetPlayerNameEx(id), WeaponNames[weapon]);
						SendClientMessage(playerid, COLOR_GENERAL, string);
						format(string, sizeof(string), "%s te ha ofrecido su %s - Usa /aceptar arma para recibirla.", GetPlayerNameEx(playerid), WeaponNames[weapon]);
						SendClientMessage(id, COLOR_GENERAL, string);
						SetPVarInt(id,"gunID",playerid);
						SetPVarInt(playerid,"gun",weapon);
						SetPVarInt(playerid,"bala",balas);
						SetPVarInt(playerid,"slot",GetWeaponSlot(weapon));
						SetPVarInt(playerid,"Dandoarma",1);
					}
				}
	    	}
	    	else SendClientMessage(playerid, COLOR_GREY, "* Tu estas lejos del jugador o en un vehículo.");
	    }
		else SendClientMessage(playerid, COLOR_GREY, "* La ID que has ingresado es inválida.");
	}
	else SendClientMessage(playerid, COLOR_GREY, "* No puedes hacer esto mientras estas tazeado, esposado o congelado.");
	return 1;
}


CMD:misarmas(playerid, params[]){
new string[128], myweapons[13][2], weaponname[50], name[MAX_PLAYER_NAME];
GetPlayerName(playerid, name, sizeof(name));
SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
format(string, sizeof(string), "Armas - %s:", name);
SendClientMessageEx(playerid, COLOR_WHITE, string);
for (new i = 0; i < 13; i++)	{
	GetPlayerWeaponData(playerid, i, myweapons[i][0], myweapons[i][1]);
	if(myweapons[i][0] > 0)		{
		if(Info[playerid][pWeapons][i] == myweapons[i][0])			{
			GetWeaponName(myweapons[i][0], weaponname, sizeof(weaponname));
			format(string, sizeof(string), "* %s (%d) - (%d balas).", weaponname, myweapons[i][0], myweapons[i][1]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
}
new year, month, day, hour, minute, second;
getdate(year, month, day);
gettime(hour, minute, second);
format(string, sizeof(string), "[%d/%d/%d %d:%d:%d]", month, day, year, hour, minute,second);
SendClientMessageEx(playerid, COLOR_GREEN, string);
SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
return 1;
}

CMD:wepreset(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if(Info[playerid][pAdmin] >= 3)
{
    new string[75 + (MAX_PLAYER_NAME * 2)], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /wepreset [playerid]");
	if(IsPlayerConnectedEx(giveplayerid))
	{
	    if(Info[giveplayerid][pWRestricted] > 0)
	    {
	        Info[giveplayerid][pWRestricted] = 0;
	        if(Info[giveplayerid][pConnectTime] < 2) Info[giveplayerid][pConnectTime] += 2;
	        format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s reseteó la restricción de armas de %s's (ID:%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), giveplayerid);
	        ABroadCast(COLOR_GENERAL, string, 2);
	    }
	    else return SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador no tiene restricción de armas.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador está desconectado!");
}
return 1;
}

CMD:habilidad(playerid, params[])
{
if(isnull(params))
{
	SendClientMessageEx(playerid, COLOR_WHITE, "USA: /habilidad [Número]");
	SendClientMessageEx(playerid, COLOR_GREY, "| 1: Creacion de Armas         | 3: Traficante de Drogas");
	SendClientMessageEx(playerid, COLOR_GREY, "| 2: Camionero                 | 4: Vendedor de Drogas");
	return SendClientMessageEx(playerid, COLOR_GREY, "| 5: Pesca");
}
new string[62];
switch(strval(params))
{
	case 1:
	{
		new level = Info[playerid][pArmsSkill];
		switch(level)
		{
		    case 0 .. 50: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de vendedor de armas es 1."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 50 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			case 51 .. 100: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de vendedor de armas es 2."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 100 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			case 101 .. 200: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de vendedor de armas es 3."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 200 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			case 201 .. 400: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de vendedor de armas es 4."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 400 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			default: SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de vendedor de armas es 5.");
		}
	}
	case 2://Trucker
	{
	    new level = Info[playerid][pTruckSkill];
		switch(level)
		{
		    case 0 .. 50: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de camionero es 1."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 51 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			case 51 .. 100: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de camionero es 2."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 101 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			case 101 .. 200: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de camionero es 3."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 201 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			case 201 .. 400: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de camionero es 4."); format(string, sizeof(string), "Necesitas transportar %d veces para subir de nivel.", 401 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			default: SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de camionero es 5.");
		}
	}
	case 3://Drug Smuggling
	{
		new level = Info[playerid][pSmugSkill];
		switch(level)
		{
		    case 0 .. 50: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de traficante es 1."); format(string, sizeof(string), "Necesitas traficar %d veces para subir de nivel.", 20 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			case 51 .. 100: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de traficante es 2."); format(string, sizeof(string), "Necesitas traficar %d veces para subir de nivel.", 50 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			case 101 .. 200: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de traficante es 3."); format(string, sizeof(string), "Necesitas traficar %d veces para subir de nivel.", 100 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			case 201 .. 400: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de traficante es 4."); format(string, sizeof(string), "Necesitas traficar %d veces para subir de nivel.", 200 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			default: SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de traficante es 5.");
		}
	}
	case 4://Drugs Dealer
	{
		new level = Info[playerid][pDrugsSkill];
		switch(level)
		{
		    case 0 .. 50: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de vendedor de drogas es 1."); format(string, sizeof(string), "Necesitas vender %d veces para subir de nivel.", 50 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			case 51 .. 100: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de vendedor de drogas es 2."); format(string, sizeof(string), "Necesitas vender %d veces para subir de nivel.", 100 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			case 101 .. 200: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de vendedor de drogas es 3."); format(string, sizeof(string), "Necesitas vender %d veces para subir de nivel.", 200 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			case 201 .. 400: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de vendedor de drogas es 4."); format(string, sizeof(string), "Necesitas vender %d veces para subir de nivel.", 400 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			default: SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de vendedor de drogas es 5.");
		}
	}
	case 5://Fishing
	{
		new level = Info[playerid][pFishSkill];
		switch(level)
		{
		    case 0 .. 50: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de pescador es 1."); format(string, sizeof(string), "Necesitas pescar %d veces más para subir de nivel.", 50 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			case 51 .. 100: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de pescador es 2."); format(string, sizeof(string), "Necesitas pescar %d veces más para subir de nivel.", 100 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			case 101 .. 200: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de pescador es 3."); format(string, sizeof(string), "Necesitas pescar %d veces más para subir de nivel.", 200 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			case 201 .. 400: { SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de pescador es 4."); format(string, sizeof(string), "Necesitas pescar %d veces más para subir de nivel.", 400 - level); SendClientMessageEx(playerid, COLOR_GRAD1, string); }
			default: SendClientMessageEx(playerid, COLOR_GRAD1, "Tu nivel de pescador es 5.");
		}
	}
}
return 1;
}

CMD:arena(playerid, params[])
{
if(GetPVarInt(playerid, "IsInArena") == 0)
{
    if(Info[playerid][pConnectTime] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes entrar al Paintball ya que tienes restricción de armas.");
    if(IsPlayerInRangeOfPoint(playerid,5.0,305.3528,-141.9280,1004.0625))
    {
		PaintballMainMenu(playerid);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No estás en el Paintball!");
}
else SendClientMessageEx(playerid, COLOR_GREY, "* Ya estás en el Paintball!");
return 1;
}

CMD:scores(playerid, params[])
{
if(GetPVarInt(playerid, "IsInArena") == 1) PaintballScoreboard(playerid);
else SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando si no estás en el paintball.");
return 1;
}

CMD:salirarena(playerid, params[])
{
if(GetPVarInt(playerid, "IsInArena") == 1)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_WASTED) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando en este momento.");
    LeavePaintballArena(playerid);
}
else SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando si no estás en el paintball.");
return 1;
}

CMD:cequipo(playerid, params[])
{
if(GetPVarInt(playerid, "ArenaMode") == 2)
{
	PaintballSwitchTeam(playerid);
}
else
{
    SendClientMessageEx(playerid,COLOR_GREY,"* No puedes usar este comando si no estás en el paintball modo Team DeathMatch.");
}
return 1;
}

CMD:armas(playerid, params[])
{
if(GetPVarInt(playerid, "ArenaMode") > 0)
{
    ShowPlayerDialog(playerid, PB_ARMAS, DIALOG_STYLE_LIST, "{FFFFFF}Armas","9mm(1 Ficha)\nDesert Eagle(1 Ficha)\nMP5(1 Ficha)\nAK-47(1 Ficha)\nM4(2 Fichas)\nShotgun(1 Fichas)\nCombat Shotgun(2 Fichas)\nArmadura(1 Ficha)","OK","Atrás");
}
else
{
    SendClientMessageEx(playerid,COLOR_GREY,"* No puedes usar este comando si no estás en el paintball.");
}
return 1;
}

CMD:adarfichas(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
new string[128], giveplayerid, amount;
if(sscanf(params, "dd", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /adarfichas [playerid] [fichas]");
if(IsPlayerConnectedEx(giveplayerid))
{
	if(Info[playerid][pAdmin] < 4) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para dar fichas.");
	Info[giveplayerid][pPaintTokens] += amount;
	format(string, sizeof(string), "Te han dado %d fichas de Paintball - Admin %s.", amount, GetPlayerNameEx(playerid));
	SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
	format(string, sizeof(string), "Has dado a %s, %d fichas de Paintball.", GetPlayerNameEx(giveplayerid), amount);
	SendClientMessageEx(playerid, COLOR_GENERAL, string);
	format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s dió %s, %d Fichas de Paintball.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),amount);
	ABroadCast(COLOR_GENERAL, string, 2);

}
return 1;
}

CMD:usarhierba(playerid, params[])
{
if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes drogarte en el paintball!");
if(UsedWeed[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes que esperar 5 segundos para usar hierba.");
new string[128], Float:health, healthint;
GetPlayerHealth(playerid, health);
healthint = floatround(health, floatround_round);
if(healthint >= 100 ) return SendClientMessageEx(playerid, COLOR_GREY, "Tienes la vida llena.");
if(Info[playerid][pPot] > 1)
{
	if(PlayerStoned[playerid] > 3) return SendClientMessageEx(playerid, COLOR_GRAD1, "Estás demasiado drogado para utilizar hierba.");
	PlayerStoned[playerid] += 1;
	if(PlayerStoned[playerid] == 3)
	{
		GameTextForPlayer(playerid, "~r~ESTAS DROGADO", 1000, 15);
		SetPlayerDrunkLevel(playerid, 5000);
	}
	if(healthint > 95)
	{
		SetHP(playerid, 100);
	}
	else
	{
		SetHP(playerid, health + 5.0);
	}
	SendClientMessageEx(playerid, COLOR_GREY, " Usaste 2 gramos de hierba!");
	format(string, sizeof(string), "* %s se fuma algo de hierba.", GetPlayerNameEx(playerid));
	ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	Info[playerid][pPot] -= 2;
	UsedWeed[playerid] = 1;
	Info[playerid][pAdiccion] += 2;
	SetPlayerDrunkLevel(playerid, Info[playerid][pAdiccion]*500);
	SetTimerEx("ClearDrugs", 5000, false, "d", playerid);
	if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
}
else SendClientMessageEx(playerid, COLOR_GREY,"No tienes hierba!");
return 1;
}

CMD:usarcrack(playerid, params[])
{
new Float:armour;
GetPlayerArmour(playerid, armour);
if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No puedes usar este comando si estás en el paintball.");
if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR]: No puedes usar este comando si estás herido.");
if(UsedCrack[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "[INFO]: Debe esperar 8 segundos antes de usar más drogas.");
if(armour >= 100) return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: No puedes usar este comando, tienes demasiada armadura.");
if(Info[playerid][pCrack] > 1)
{
	if(PlayerStoned[playerid] > 3) return SendClientMessageEx(playerid, COLOR_GRAD1, "[ERROR]: No puedes usar este comando si estás muy drogado.");
	PlayerStoned[playerid] += 1;
	if(PlayerStoned[playerid] == 3)
	{
        GameTextForPlayer(playerid, "~r~ESTAS DROGADO", 1000, 15);
		SetPlayerDrunkLevel(playerid, 5000);
	}
	new string[128], Float:PlayersArmour;
	GetPlayerArmour(playerid, PlayersArmour);
	SendClientMessageEx(playerid, COLOR_GREY, " Usaste 2 gramos de crack!");
	format(string, sizeof(string), "* %s usa un poco de droga.", GetPlayerNameEx(playerid));
	ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	Info[playerid][pCrack] -= 2;
	UsedCrack[playerid] = 1;
	Info[playerid][pAdiccion] += 2;
	SetPlayerDrunkLevel(playerid, Info[playerid][pAdiccion]*1000);
	SetTimerEx("ClearDrugs", 8000, false, "d", playerid);
	if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
	if(PlayersArmour > 95) SetPlayerArmour(playerid, 100);
	else SetPlayerArmour(playerid, PlayersArmour + 5.0);
}
else SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: No puedes usar este comando si no tienes drogas.");
return 1;
}

CMD:venderspray(playerid, params[])
{
	if(!Team_Mecanicos(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: No puedes usar este comando si no eres mecánico.");
	if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No puedes usar este comando si estás herido.");
	new string[128], giveplayerid, spray, money;
	if(sscanf(params, "ddd", giveplayerid, spray, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /venderspray [playerid] [potes] [precio]");
	if(spray < 1 || spray > 30) { SendClientMessageEx(playerid, COLOR_GREY, "   Los valores no pueden ser mayores a 30 potes."); return 1; }
	if(money < 1 || money > 99999) { SendClientMessageEx(playerid, COLOR_GREY, "   El precio no puede ser menor que 1 ni mayor que 99999!"); return 1; }
	if(IsPlayerConnectedEx(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "   El vendedor no está cerca tuyo!");
					return 1;
				}
				format(string, sizeof(string), "* Ofreciste a %s para que te compre %d potes de spray por $%d.", GetPlayerNameEx(giveplayerid), spray, money);
				SendClientMessageEx(playerid, COLOR_GENERAL, string);
				format(string, sizeof(string), "* Mecánico %s quiere venderte %d potes de spray por $%d. (escribe /aceptar spray)", GetPlayerNameEx(playerid), spray, money);
				SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
				SprayOffer[giveplayerid] = playerid;
				SprayPrice[giveplayerid] = money;
				SprayGram[giveplayerid] = spray;
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador no está cerca tuyo.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "   Ese jugador está desconectado.");
	return 1;
}

CMD:numeropriv(playerid, params[])
{
if(Info[playerid][pPnumber] != 0)
{
    if(UnidentifedCall[playerid] == 1)
	{
        UnidentifedCall[playerid] = 0;
        SendClientMessageEx(playerid, COLOR_WHITE, "Desabilitaste el numero privado.");
    }
    else
	{
        UnidentifedCall[playerid] = 1;
        SendClientMessageEx(playerid, COLOR_WHITE, "Activaste el numero privado.");
    }
}
else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un teléfono.");
return 1;
}

CMD:god(playerid, params[])
{
	if(Info[playerid][pAdmin] >= 1)
	{
	    SetHP(playerid, INFINITY_HEALTH);
	    GiveArmorToPlayer(playerid, 100000);
	}
	else NoAutorizado
	return 1;
}

CMD:v(playerid, params[])
{
if(isnull(params))
{
	SendClientMessageEx(playerid, COLOR_WHITE, "USA: /v [nombre]");
	SendClientMessageEx(playerid, COLOR_GREY, "Nombres: estado, luces, maletero, capo");
	return 1;
}

else if(strcmp(params, "luces", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_WHITE,"[ERROR]: No puedes usar este comando si estás en este tipo de vehiculos.");
	SetVehicleLights(vehicleid, playerid);
}
else if(strcmp(params, "capo", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || IsAPlane(vehicleid) || IsABike(vehicleid))
		{
			return SendClientMessageEx(playerid,COLOR_WHITE,"[ERROR]: No puedes usar este comando si estás en este tipo de vehiculos.");
		}
		SetVehicleHood(vehicleid, playerid);
	}
	else if(!IsPlayerInAnyVehicle(playerid))
	{
		new closestcar = GetClosestCar(playerid);
		if(IsPlayerInRangeOfVehicle(playerid, closestcar, 5.0))
		{
			if(GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510 || IsAPlane(closestcar) || IsABike(closestcar))
			{
				return SendClientMessageEx(playerid,COLOR_WHITE,"[ERROR]: No puedes usar este comando si estás en este tipo de vehiculos.");
			}
			SetVehicleHood(closestcar, playerid);
		}
	}
}
else if(strcmp(params, "maletero", true) == 0)
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510)
		{
			return SendClientMessageEx(playerid,COLOR_WHITE,"[ERROR]: No puedes usar este comando si estás en este tipo de vehiculos.");
		}
		if(EstereoON[vehicleid]) return SendClientMessage(playerid, COLOR_WHITE, "No puedes cerrar el maletero si el vehículo tiene el estereo encendido!");
		SetVehicleTrunk(vehicleid, playerid);
	}
	else if(!IsPlayerInAnyVehicle(playerid))
	{
		new closestcar = GetClosestCar(playerid);
		if(IsPlayerInRangeOfVehicle(playerid, closestcar, 5.0))
		{
			if(GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510)
			{
				return SendClientMessageEx(playerid,COLOR_WHITE,"[ERROR]: No puedes usar este comando si estás en este tipo de vehiculos.");
			}
			SetVehicleTrunk(closestcar, playerid);
		}
	}
}
else if(strcmp(params, "estado", true) == 0)
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		new engine,lights,alarm,doors,bonnet,boot,objective,enginestatus[15],lightstatus[15], string[128];
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_RED,"Este vehiculo no necesita gasolina.");
		if(engine != VEHICLE_PARAMS_ON) format(enginestatus, sizeof(enginestatus), "Apagado");
		else format(enginestatus, sizeof(enginestatus), "Prendido");
		if(lights != VEHICLE_PARAMS_ON) format(lightstatus, sizeof(lightstatus), "Apagadas");
		else format(lightstatus, sizeof(lightstatus), "Prendidas");
		format(string, sizeof(string), "Motor: %s | Luces: %s | Gasolina: %d",enginestatus,lightstatus,VehicleFuel[vehicleid]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
}
else SendClientMessageEx(playerid, COLOR_GREY, "* Opción no existe.");
return 1;
}


CMD:llenar(playerid, params[])
{
if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(engine == VEHICLE_PARAMS_ON) return SendClientMessageEx(playerid, COLOR_WHITE, "Es necesario apagar el motor antes de llenar el tanque (Presiona 'N' del teclado para apagarlo).");
    if(!IsAtGasStation(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en la gasolineria.");
    if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_RED,"Este vehiculo no necesita gasolina.");
    if(VehicleFuel[vehicleid] >= 300) return SendClientMessageEx(playerid, COLOR_RED, "El tanque de gasolina de este vehiculo está lleno.");
    if(RefuelingVehicle[playerid] == 1) return SendClientMessageEx(playerid, COLOR_RED, "Se está recargando el tanque de tu vehículo.");
   	SendClientMessageEx(playerid, COLOR_WHITE, "Recargando tanque de tu vehiculo, no bajes del vehiculo y por favor espera.");
   	RefuelingVehicle[playerid] = 1;
   	RefuelingVehicleTimer[playerid] = SetTimerEx("ReFill", 5600, true, "i", playerid);
}
return 1;
}

CMD:shopcar(playerid, params[])
{
	new string[128], giveplayerid, modelid, color1, color2, invoicenum[32];
	if(sscanf(params, "dddds", giveplayerid, modelid, color1, color2, invoicenum)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /shopcar [playerid] [modelid] [color 1] [color 2] [Factura]");
	if (Info[playerid][pShopTech] == 0) return NoAutorizado
	if(color1 < 0 || color1 > 126) { SendClientMessageEx(playerid, COLOR_GREY, "   Numero de color no debe ser menor de 0 o mayor que 126 !"); return 1; }
	if(color2 < 0 || color2 > 126) { SendClientMessageEx(playerid, COLOR_GREY, "   Numero de color 2 no debe ser menor de 0 o mayor que 126 !"); return 1; }
	if(modelid < 400 || modelid > 611) { SendClientMessageEx(playerid, COLOR_GREY, "   Id del vehiculo debe ser del 400 al 611 !"); return 1; }
	new playervehicleid = GetPlayerFreeVehicleId();
	if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: El jugador no puede tener más coches.");
	carsforplayer = VehicleCount(giveplayerid);
	if(carsforplayer == 5) return SendClientMessageEx(playerid,COLOR_WHITE,"* El jugador sólo puede tener 5 coches spawneados.");
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(giveplayerid,X,Y,Z);
	new Float:Angle;
	GetPlayerFacingAngle(giveplayerid,Angle);
	new car = CreatePlayerVehicle(giveplayerid, playervehicleid, modelid, X, Y, Z, Angle, color1, color2, 0);
	if(car == INVALID_PLAYER_VEHICLE_ID)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Algo salió mal y el coche no se creó.");
	}
	else
	{
	    format(string, sizeof(string), "[SHOPCAR] %s creó [M-%d C1-%d C2-%d] - Factura por %s a %s", GetPlayerNameEx(playerid), modelid, color1, color2, invoicenum, GetPlayerNameEx(giveplayerid));
	    SendClientMessageEx(playerid, COLOR_WHITE, string);
	    Log("logs/shoplog.log", string);
	}
	return 1;
}

CMD:borrarcoche(playerid, params[])
{
	new pnamep[MAX_PLAYER_NAME];
	format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
	if(GetPVarInt(playerid, "dcConfirm") == 0)
	{
		SetPVarInt(playerid, "dcConfirm", 1);
		SendClientMessageEx(playerid, COLOR_WHITE, "El uso de este comando borrará completamente el vehículo y no habrá reembolso");
		SendClientMessageEx(playerid, COLOR_WHITE, "Si estás seguro de que deseas eliminar tu vehículo, por favor re-escriba el comando /borrarcoche");
	}
	else
	{
		DeletePVar(playerid, "dcConfirm");
		for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
		{
		    if(strcmp(PlayerVehicleInfo[d][pvOwner], pnamep) == 0)
		    {
				if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[d][pvId]))
				{
					DestroyVehicle(PlayerVehicleInfo[d][pvId]);
					strmid(PlayerVehicleInfo[d][pvOwner], "Nadie", 0, strlen("Nadie"), 255);
					PlayerVehicleInfo[d][pvId] = 0;
		            PlayerVehicleInfo[d][pvModelId] = 0;
					PlayerVehicleInfo[d][pvPosX] = 0.0;
					PlayerVehicleInfo[d][pvPosY] = 0.0;
					PlayerVehicleInfo[d][pvPosZ] = 0.0;
					PlayerVehicleInfo[d][pvPosAngle] = 0.0;
					PlayerVehicleInfo[d][pvLock] = 0;
					PlayerVehicleInfo[d][pvLocked] = 0;
					PlayerVehicleInfo[d][pvPaintJob] = -1;
					PlayerVehicleInfo[d][pvColor1] = 0;
					PlayerVehicleInfo[d][pvColor2] = 0;
					PlayerVehicleInfo[d][pvPrice] = 0;
					PlayerVehicleInfo[d][pvImpounded] = 0;
					strcpy(PlayerVehicleInfo[d][pvAllowPlayer], "Nadie", MAX_PLAYER_NAME);
					PlayerVehicleInfo[d][pvPark] = 0;
					PlayerVehicleInfo[d][pvEnVenta] = 0;
					PlayerVehicleInfo[d][pvEnVentaP] = 0;
					PlayerVehicleInfo[d][pvEqSound] = 0;
					PlayerVehicleInfo[d][pvAllowedPlayerId] = INVALID_PLAYER_ID;
					for(new m = 0; m < MAX_MODS; m++)
					{
						PlayerVehicleInfo[d][pvMods][m] = 0;
					}
					PlayerVehicleInfo[d][pvStereo] = 0;
					PlayerCars--;
					SendClientMessageEx(playerid, COLOR_WHITE, "Su vehículo ha sido borrado.");
					return 1;
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, " Tienes que estar dentro de tu vehiculo.");
	}
	return 1;
}

CMD:verllaves(playerid, params[])
{
	if(IsACop(playerid))
	{
    	new string[128], listid;
    	if(sscanf(params, "s[24]", params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /verllaves [Nombre Apellido]");
		for(new i=0; i<MAX_PLAYERVEHICLES; i++)
		{
		    if(PlayerVehicleInfo[i][pvOwner] == params[0]) listid++;
		}
		if(listid <= 0) return SendClientMessage(playerid, COLOR_WHITE, "[Error]: Nombre introducido invalido.");
		listid = 0;
		SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
		format(string, sizeof(string), "*** Coches de %s  ***", params[0]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
 		for(new i=0; i<MAX_PLAYERVEHICLES; i++)
		{
			if(strcmp(PlayerVehicleInfo[i][pvOwner], params[0]) == 0)
			{
 				if(PlayerVehicleInfo[i][pvId] != INVALID_PLAYER_VEHICLE_ID)
				{
					format(string, sizeof(string), "Registro del Coche: %d | Modelo: %s | Multa: $%d.",PlayerVehicleInfo[i][pvId],GetVehicleName(PlayerVehicleInfo[i][pvId]),PlayerVehicleInfo[i][pvTicket]);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
				else if(PlayerVehicleInfo[i][pvImpounded])
				{
					format(string, sizeof(string), "Registro del Coche: Anulado (No Disponible) | Modelo: %s | Multa: $%d.",VehicleName[PlayerVehicleInfo[i][pvModelId] - 400],PlayerVehicleInfo[i][pvTicket]);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
	}
	return 1;
}

CMD:vcoche(playerid, params[])
{
	new string[78 + MAX_PLAYER_NAME];
	if(IsACop(playerid))
	{
	    new carid = GetPlayerVehicleID(playerid);
	    new closestcar = GetClosestCar(playerid, carid);
	    if(IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0) && !IsTrailerAttachedToVehicle(carid))
		{
		    if(strcmp(PlayerVehicleInfo[closestcar][pvOwner], "Nadie") == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Este vehículo no pertenece a nadie!");
		    format(string, sizeof(string), "Registro Vehicular: %d | Modelo: %s | Dueño: %s | Multa: $%d.",PlayerVehicleInfo[closestcar][pvId],GetVehicleName(PlayerVehicleInfo[closestcar][pvId]),PlayerVehicleInfo[closestcar][pvOwner],PlayerVehicleInfo[closestcar][pvTicket]);
      		SendClientMessageEx(playerid, COLOR_WHITE, string);
      		return 1;
	    }
	    else return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: No estás cerca de un vehículo.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	return 1;
}

CMD:embargar(playerid, params[])
{
	switch(Info[playerid][pMember])
	{
		case 1:
		{
			if(!IsAtImpoundingPoint(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No estás cerca del punto de incautación, no puedes confiscar!");
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{
				new iVehType,iVehTowed = GetVehicleTrailer(GetPlayerVehicleID(playerid));
				if(!GetVehicleModel(iVehTowed)) return SendClientMessageEx(playerid, COLOR_GREY, "El vehículo en el remolque se ha desenganchado y por lo tanto no puede ser confiscado.");
				if(PlayerVehicleInfo[iVehTowed][pvOwner]) iVehType = 1;
				if(!iVehType) iVehType = 2;
				switch(iVehType)
				{
					case 0, 2:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "No se pudo encontrar ningún tipo de registro en el vehículo y se ha devuelto.");
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						SetVehiclePos(iVehTowed, 0, 0, 0); // Attempted desync fix
						SetVehicleToRespawn(iVehTowed);
					}
					case 1:
					{
				    	if(PlayerVehicleInfo[iVehTowed][pvTicket] <= 1000) return SendClientMessageEx(playerid, COLOR_GREY, "Para embargar un vehiculo es necesario que este mismo tenga mínimo $1000 en multas!");
						PlayerVehicleInfo[iVehTowed][pvImpounded] = 1;
						PlayerVehicleInfo[iVehTowed][pvId] = INVALID_PLAYER_VEHICLE_ID;
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						SetVehiclePos(iVehTowed, 0, 0, 0);
						DestroyVehicle(iVehTowed);
						format(szMessage, sizeof(szMessage),"* Has confiscado el vehiculo de %s - Modelo %s.",PlayerVehicleInfo[iVehTowed][pvOwner], VehicleName[PlayerVehicleInfo[iVehTowed][pvModelId] - 400]);
						SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
						format(szMessage, sizeof(szMessage), "El policia %s a confiscado el vehiculo de %s", GetPlayerNameEx(playerid), PlayerVehicleInfo[iVehTowed][pvOwner]);
				   	 	Log("logs/embargos.log", szMessage);
						format(szMessage, sizeof(szMessage), "HQ: %s ha confiscado el vehiculo de %s - Modelo %s (No pagó $%i de multa).", GetPlayerNameEx(playerid), PlayerVehicleInfo[iVehTowed][pvOwner], VehicleName[PlayerVehicleInfo[iVehTowed][pvModelId] - 400], PlayerVehicleInfo[iVehTowed][pvTicket]);
						SendRadioMessage(Info[playerid][pMember], TEAM_RADIO_COLOR, szMessage);
						--PlayerCars;
					}
				}
				arr_Towing[playerid] = INVALID_VEHICLE_ID;
			}
		}
		default: SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando.");
	}
	return 1;
}

CMD:pagarm(playerid, params[])
{
	new pnamep[MAX_PLAYER_NAME];
	format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 240.6911,112.7308,1003.2188))
	{
	    if(Info[playerid][pCarLic] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Una licencia de conducir válida es necesaria para liberar su vehículo del depósito municipal.");
		new vstring[1024],iCount;
		for(new i; i < MAX_PLAYERVEHICLES; i++)
		{
		    if(strcmp(PlayerVehicleInfo[i][pvOwner],pnamep) == 0)
		    {
		    	if(PlayerVehicleInfo[i][pvPrice] < 1) PlayerVehicleInfo[i][pvPrice] = 15000;
				if(PlayerVehicleInfo[i][pvId] > INVALID_PLAYER_VEHICLE_ID)
				{
					if(PlayerVehicleInfo[i][pvTicket])
					{
						format(vstring, sizeof(vstring), "%s\n%s (Multa - $%i)", vstring, VehicleName[PlayerVehicleInfo[i][pvModelId] - 400], PlayerVehicleInfo[i][pvTicket]);
						++iCount;
					}
					else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[i][pvModelId] - 400]);
				}
				else if(PlayerVehicleInfo[i][pvImpounded])
				{
			    	new iCost = (PlayerVehicleInfo[i][pvPrice] / 20) + PlayerVehicleInfo[i][pvTicket] + (Info[playerid][pLevel] * 2);
					format(vstring, sizeof(vstring), "%s\n%s (Multa - $%i) (Embargado - $%i Liberación)", vstring, VehicleName[PlayerVehicleInfo[i][pvModelId] - 400], PlayerVehicleInfo[i][pvTicket],iCost);
					++iCount;
				}
				else format(vstring, sizeof(vstring), "%s\nNada", vstring);
			}
		}
		if(iCount) ShowPlayerDialog(playerid, MPSPAYTICKETS, DIALOG_STYLE_LIST, "Vehiculos", vstring, "Liberar", "Cancelar");
		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes multas para pagar o vehículos para ser liberados.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en la central de SAPD.");
	return 1;
}

CMD:enganchar(playerid, params[])
{
if(IsACop(playerid))
 {
	if(IsPlayerInAnyVehicle(playerid))
 	{
		new
			carid = GetPlayerVehicleID(playerid);

		if(IsATowTruck(carid))
		{
			new
				closestcar = GetClosestCar(playerid, carid);

   			if(GetDistancePlayerVeh(playerid,closestcar) <= 8 && !IsTrailerAttachedToVehicle(carid))
			   {
				foreach(Player, i)
				{
					if(GetPlayerVehicle(i, closestcar) != -1)
					{
					    if(ProxDetectorS(30.0,playerid,i))
							SendClientMessageEx(i, COLOR_GENERAL, "Alguien está tratando de remolcar tu vehículo!");

						arr_Towing[playerid] = closestcar;
					    SendClientMessageEx(playerid, COLOR_WHITE, "Este coche está disponible para embargar.");
  						return AttachTrailerToVehicle(closestcar,carid);
					}
				}
				SendClientMessageEx(playerid, COLOR_WHITE, "Este vehiculo no tiene ningún registro, está disponible para embargar");
				AttachTrailerToVehicle(closestcar,carid);
				arr_Towing[playerid] = closestcar;
				return 1;
 			}
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* No puedes remolcar en este tipo de vehículo.");
	}
 	else SendClientMessageEx(playerid, COLOR_GREY, "* Tienes que estar en un coche.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes autorización a usar este comando.");
return 1;
}

CMD:desenganchar(playerid, params[])
{
if(IsACop(playerid))
{
	if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
 	{
  		SendClientMessageEx(playerid, COLOR_WHITE,"Has desenganchado el vehículo que traías.");
		arr_Towing[playerid] = INVALID_VEHICLE_ID;
		DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
 	}
  	else{SendClientMessageEx(playerid, COLOR_WHITE,"Aún no has enganchado nada.");}
}
else SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No tienes autorización a usar este comando.");
return 1;
}


CMD:dejarmulta(playerid, params[])
{
	if(IsACop(playerid))
	{
	    if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /dejarmulta [Registro Vehicular]");
		if(Info[playerid][pRank] < 2) return SendClientMessageEx(playerid, COLOR_GREY, "   Sólo rangos 2 y superiores pueden dejar multas!");
	    new Float: x, Float: y, Float: z, vehicleid = strval(params);
	    GetVehiclePos(vehicleid, x, y, z);
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
		{
	        if(vehicleid != INVALID_VEHICLE_ID)
			{
			    if(!PlayerVehicleInfo[vehicleid][pvOwner]) return SendClientMessageEx(playerid, COLOR_WHITE, "Este vehículo no tiene ningún registro!");
			    if(PlayerVehicleInfo[vehicleid][pvTicket] >= 3000) return SendClientMessageEx(playerid, COLOR_GREY, "Este vehiculo ya excedio el máximo de multas, se debe embargar!");
				new string[62 + MAX_PLAYER_NAME];
   				PlayerVehicleInfo[vehicleid][pvTicket] += 1000;
   				format(string, sizeof(string), "Dejaste una multa de $1000 en el coche de %s, modelo %s.",PlayerVehicleInfo[vehicleid][pvOwner],GetVehicleName(PlayerVehicleInfo[vehicleid][pvId]));
   				return SendClientMessageEx(playerid, COLOR_WHITE, string);
	        }
	    }
	    else return SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas estar cerca de dicho vehículo.");
	}
	return 1;
}

CMD:seguro(playerid, params[])
{
	new Float: x, Float: y, Float: z, pnamep[MAX_PLAYER_NAME];
	format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
	    if(strcmp(PlayerVehicleInfo[d][pvOwner], pnamep) == 0) GetVehiclePos(PlayerVehicleInfo[d][pvId], x, y, z);
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
		    if(PlayerVehicleInfo[d][pvLock] == 0) return SendClientMessageEx(playerid, COLOR_GREY, " Usted no tiene un sistema de bloqueo instalado en el vehículo.");
	        if(PlayerVehicleInfo[d][pvLock] > 0 && PlayerVehicleInfo[d][pvLocked] == 0)
			{
	            GameTextForPlayer(playerid,"~r~Vehiculo bloqueado!",5000,6);
	            PlayerPlaySoundEx(1145, x, y, z);
	            PlayerVehicleInfo[d][pvLocked] = 1;
	            LockStatus[PlayerVehicleInfo[d][pvId]] = 1;
				vehicle_lock_doors(PlayerVehicleInfo[d][pvId]);
	            return 1;
	        }
	        else if(PlayerVehicleInfo[d][pvLock] > 0 && PlayerVehicleInfo[d][pvLocked] == 1)
			{
	            GameTextForPlayer(playerid,"~g~Vehiculo desbloqueado!",5000,6);
	            PlayerPlaySoundEx(1145, x, y, z);
	            PlayerVehicleInfo[d][pvLocked] = 0;
	            LockStatus[PlayerVehicleInfo[d][pvId]] = 0;
				vehicle_unlock_doors(PlayerVehicleInfo[d][pvId]);
	            return 1;
	        }
	    }
	}
	SendClientMessageEx(playerid, COLOR_GREY, " Debes de estar cerca de un coche tuyo.");
	return 1;
}

CMD:recargarcochesd(playerid, params[])
{
	if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	if (Info[playerid][pAdmin] < 3) return NoAutorizado
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /recargarcochesd [playerid]");
	UnloadPlayerVehicles(giveplayerid);
	LoadPlayerVehicles(giveplayerid);
	format(string, sizeof(string), "Recargaste los vehiculos de %s.", GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_GREY, string);
	return 1;
}

CMD:deletecp(playerid, params[])
{
	new string[128], giveplayerid, vehicleid;
	if(sscanf(params, "dd", giveplayerid, vehicleid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /deletecp [playerid] [vehicleid]");
	if (Info[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_GREY, " No puedes utilizar este comando.");
	new playervehicleid = GetPlayerVehicle(giveplayerid, vehicleid);
	if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: El jugador no tiene ese vehículo.");
	DestroyPlayerVehicle(giveplayerid, playervehicleid);
	format(string, sizeof(string), "%s ha destruido el auto %s de %s.", GetPlayerNameEx(playerid), GetVehicleName(vehicleid), GetPlayerNameEx(giveplayerid));
	Log("logs/playervehicle.log", string);
	return 1;
}

CMD:gps(playerid, params[])
{
    carsforplayer = VehicleCount(playerid);
	if(carsforplayer == 0) return 1;
	new vstring[1024], pnamep[MAX_PLAYER_NAME], pvarfix[24];
	format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
	new countslot = 0;
	for(new i; i < MAX_PLAYERVEHICLES; i++)
	{
	    if(strcmp(PlayerVehicleInfo[i][pvOwner], pnamep) == 0)
	    {
	        if(PlayerVehicleInfo[i][pvId] > INVALID_PLAYER_VEHICLE_ID)
			{
				format(vstring, sizeof(vstring), "%s\n[SLOT: %d] %s (ID:%d)", vstring, countslot, VehicleName[PlayerVehicleInfo[i][pvModelId] - 400], PlayerVehicleInfo[i][pvId]);
				format(pvarfix, sizeof(pvarfix), "PVarTrackCarSlot%d", countslot);
				SetPVarInt(playerid, pvarfix, PlayerVehicleInfo[i][pvId]);
			}
			else if(PlayerVehicleInfo[i][pvImpounded] == 1)
			{
				format(vstring, sizeof(vstring), "%s\n[SLOT: %d] %s (Embargado)", vstring, countslot, VehicleName[PlayerVehicleInfo[i][pvModelId] - 400]);
                format(pvarfix, sizeof(pvarfix), "PVarTrackCarSlot%d", countslot);
				SetPVarInt(playerid, pvarfix, 3500);
			}
			else
			{
				format(vstring, sizeof(vstring), "%s\n[SLOT: %d] Vacío", vstring, countslot);
                format(pvarfix, sizeof(pvarfix), "PVarTrackCarSlot%d", countslot);
				SetPVarInt(playerid, pvarfix, 3501);
			}
			countslot++;
		}
	}
	ShowPlayerDialog(playerid, TRACKCAR, DIALOG_STYLE_LIST, "GPS - Llaves", vstring, "Buscar", "Salir");
	return 1;
}

CMD:enventa(playerid, params[])
{
	new price, pnamep[MAX_PLAYER_NAME], Float:health;
    format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
	if(!IsPlayerInAnyVehicle(playerid)) return 1;
    if(Info[playerid][pLevel] <= 1) return SendClientMessageEx(playerid, COLOR_GREY, "Necesitas ser nivel 2 o más para poder vender vehículos.");
	if(sscanf(params, "d", price)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /enventa [precio]");
	if(price <= 0) return SendClientMessageEx(playerid, COLOR_GREY, "Precio debe ser mayor a 0.");
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
    {
        if(strcmp(PlayerVehicleInfo[d][pvOwner], pnamep) == 0)
		{
        	if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[d][pvId]))
       		{
       		    GetVehicleHealth(PlayerVehicleInfo[d][pvId], health);
       		    if(health < 500) return SendClientMessageEx(playerid, COLOR_GREY, " El vehiculo está muy dañado para ser vendido.");
       		    if(PlayerVehicleInfo[d][pvEnVenta] == 0)
       		    {
           		 	PlayerVehicleInfo[d][pvEnVenta] = 1;
           		 	PlayerVehicleInfo[d][pvEnVentaP] = price;
           		 	format(szMessage, sizeof(szMessage), "{DF013A}Vehiculo {FFFFFF}usado {DF013A} en venta!\nDueño: {FFFFFF}%s\n{DF013A}Precio: {FFFFFF}$%d\n\nSubete para comprarlo.", PlayerVehicleInfo[d][pvOwner], price);
					PlayerVehicleInfo[d][pvEnVentaT] = CreateDynamic3DTextLabel(szMessage,-1,0.0, 0.0, 0.0,25.0,INVALID_PLAYER_ID,PlayerVehicleInfo[d][pvId]);
					SetVehicleParamsEx(GetPlayerVehicleID(playerid),0,0,0,0,0,0,0);
					RemovePlayerFromVehicle(playerid);
					cmd_me(playerid, "pone su vehiculo en venta.");
				}
			}
		}
	}
	return 1;
}

CMD:qenventa(playerid, params[])
{
	new pnamep[MAX_PLAYER_NAME];
    format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
    for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
    {
        if(strcmp(PlayerVehicleInfo[d][pvOwner], pnamep) == 0)
		{
        	if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[d][pvId]))
       		{
				if(PlayerVehicleInfo[d][pvEnVenta] == 0) return SendClientMessage(playerid, COLOR_GREY, "Este vehiculo no esta en venta!");
			    PlayerVehicleInfo[d][pvEnVenta] = 0;
			    PlayerVehicleInfo[d][pvEnVentaP] = 0;
			    DestroyDynamic3DTextLabel(PlayerVehicleInfo[d][pvEnVentaT]);
			}
		}
	}
	return 1;
}

CMD:vendermicoche(playerid, params[])
{
	new string[128], giveplayerid, price, pnamep[MAX_PLAYER_NAME];
	format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
	    if(strcmp(PlayerVehicleInfo[d][pvOwner], pnamep) == 0)
	    {
	    	if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[d][pvId]))
			{
	        	new Float:health;
	        	GetVehicleHealth(PlayerVehicleInfo[d][pvId], health);
		        if(Info[playerid][pLevel] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Necesitas ser nivel 2 o más para poder vender vehículos.");
		        if(health < 500) return SendClientMessageEx(playerid, COLOR_GREY, " El vehiculo está muy dañado para ser vendido.");
				if(sscanf(params, "dd", giveplayerid, price)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /vendermicoche [id] [precio]");
		        if(price < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Precio debe ser mayor a 0.");
		        if(Info[giveplayerid][pLevel] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "El jugador tiene que ser nivel 2 o más para que puedas venderle vehiculos.");
		        if(playerid == giveplayerid) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes venderte el auto a ti mismo.");
		        if(!IsPlayerConnectedEx(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Jugador no está conectado al servidor.");
		        if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador no está cerca tuyo.");
	         	VehicleOffer[giveplayerid] = playerid;
	         	VehicleId[giveplayerid] = d;
	         	VehiclePrice[giveplayerid] = price;
	         	format(string, sizeof(string), "* Ofreciste a %s para comprar este %s por $%d.", GetPlayerNameEx(giveplayerid), GetVehicleName(PlayerVehicleInfo[d][pvId]), price);
	         	SendClientMessageEx(playerid, COLOR_GENERAL, string);
	         	format(string, sizeof(string), "* %s te ha ofrecidor su %s por $%d, (usa /aceptar coche).", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[d][pvId]), price);
	         	return SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
			}
        }
    }
	return SendClientMessageEx(playerid, COLOR_GREY, " Tu necesitas estar dentro de un vehiculo que te pertenece.");
}

CMD:radiorespawn(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if (Info[playerid][pAdmin] >= 3)
{
	new string[128], radius;
	if(sscanf(params, "d", radius)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /radiorespawn [Radio]");
	if(radius < 1 || radius > 100) return SendClientMessageEx(playerid, COLOR_GREY, "El radio debe ser de 1 a 40!");
	RespawnNearbyVehicles(playerid, radius);
	format(string, sizeof(string), "Usted ha respawneado los vehículos dentro del radio de %d.", radius);
	SendClientMessageEx(playerid, COLOR_GREY, string);
}
else NoAutorizado
return 1;
}

CMD:rtcar(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if (Info[playerid][pAdmin] >= 2)
{
	new string[128], carid;
	if(sscanf(params, "d", carid)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /rtcar [carid]");

	SetVehicleToRespawn(carid);
	format(string, sizeof(string), "Coche ID %d - Respawned.", carid);
	SendClientMessageEx(playerid, COLOR_GREY, string);
}
else NoAutorizado
return 1;
}

CMD:colorcoche(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehiculo.");
	if(Info[playerid][pSpraycan] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un spray.");
	new iVeh = GetPlayerVehicleID(playerid), pnamep[MAX_PLAYER_NAME], iColors[2];
	if(LSPD_IsACopCar(iVeh)||Taxi_Vehicle(iVeh)||AutoRusos(iVeh)||AutoItalianos(iVeh)||AutoGrove(iVeh)||AutoBallas(iVeh)||AutoVagos(iVeh)||Bus_Vehicle(iVeh)||SAMD_Vehicle(iVeh)||Mecanico_Vehicle(iVeh)||FBI_Vehicle(iVeh)||CNN_Vehicle(iVeh)||IsAPizzabike(iVeh)||GobierAuto(iVeh)||IsAnNGCar(iVeh)){
	return SendClientMessageEx(playerid, COLOR_GREY, "No puedes pintar vehículos facciónes."); }
	if(sscanf(params, "ii", iColors[0], iColors[1])) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /colorcoche [ID 1] [ID 2]");
	if(!(0 <= iColors[0] <= 255 && 0 <= iColors[1] <= 255)) return SendClientMessageEx(playerid, COLOR_WHITE, "Color Inválido (ID comienza en 0, y el final es 255)");
	format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
	if(strcmp(PlayerVehicleInfo[iVeh][pvOwner], pnamep) == 1) return SendClientMessageEx(playerid,COLOR_GREY,"No se puede pintar los vehículos de otras personas.");
    PlayerVehicleInfo[iVeh][pvColor1] = iColors[0], PlayerVehicleInfo[iVeh][pvColor2] = iColors[1];
	format(szMessage, sizeof(szMessage), "Cambiaste el color del vehiculo. - ID %d, %d.", iColors[0], iColors[1]);
	SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	return ChangeVehicleColor(iVeh, iColors[0], iColors[1]);
}

CMD:paintcoche(playerid, params[])
{
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /paintcoche [0-6] (3 para remover la pintura)");
	else if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehiculo.");
	else if(Info[playerid][pSpraycan] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un spray.");
	new iVeh = GetPlayerVehicleID(playerid),iPaintID = strval(params), pnamep[MAX_PLAYER_NAME];
	if(LSPD_IsACopCar(iVeh)||Taxi_Vehicle(iVeh)||AutoRusos(iVeh)||AutoItalianos(iVeh)||AutoGrove(iVeh)||AutoBallas(iVeh)||AutoVagos(iVeh)||Bus_Vehicle(iVeh)||SAMD_Vehicle(iVeh)||Mecanico_Vehicle(iVeh)||FBI_Vehicle(iVeh)||CNN_Vehicle(iVeh)|| IsAPizzabike(iVeh)||GobierAuto(iVeh)||IsAnNGCar(iVeh)){
	return SendClientMessageEx(playerid, COLOR_GREY, "No puedes pintar vehículos facción."); }
	else if(!(0 <= iPaintID <= 6)) return SendClientMessageEx(playerid, COLOR_WHITE, "Pintura debe ser del ID 0 al 6.");
	format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
	if(strcmp(PlayerVehicleInfo[iVeh][pvOwner], pnamep) == 1) return SendClientMessageEx(playerid,COLOR_GREY,"No se puede pintar los vehículos de otras personas.");
    PlayerVehicleInfo[iVeh][pvPaintJob] = iPaintID;
	ChangeVehiclePaintjob(iVeh, iPaintID);
	return SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste la pintura de tu vehiculo.");
}

CMD:remolcar(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
    	new Float:vX,Float:vY,Float:vZ,Found=0,vid=0,idcar = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(idcar) == 525)
		{
			new Float:pX,Float:pY,Float:pZ;
			GetPlayerPos(playerid,pX,pY,pZ);
			while((vid<MAX_VEHICLES)&&(!Found))
			{
				vid++;
				GetVehiclePos(vid,vX,vY,vZ);
				if ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
				{
					Found=1;
					if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
	   					DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					}
		   			else
		   			{
	   					AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
					}
				}
			}
			if(!Found)
			{
				SendClientMessageEx(playerid,COLOR_WHITE,"No hay ningún vehículo cerca!");
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes remolcar con este vehículo!");
	}
	return 1;
}

CMD:nos(playerid, params[])
{
	if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el taller de mecanica!");
	if(Team_Mecanicos(playerid))
	{
    	if(IsPlayerInAnyVehicle(playerid))
		{
    	    if( ! IsPlayerInInvalidNosVehicle( playerid ) )
			{
    	        new string[128];
    	        AddVehicleComponent(GetPlayerVehicleID(playerid),1010);
				//NOS
				new Float: soPos[3];
				GetVehiclePos(GetPlayerVehicleID(playerid), soPos[0], soPos[1], soPos[2]);
				PlayerPlaySoundEx(1133, soPos[0], soPos[1], soPos[2]);
            	format(string, sizeof(string), "* %s instala óxido de nitrógeno al vehiculo.", GetPlayerNameEx(playerid));
            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    	if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1)
				{
					UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
				}
        	}
       	 	else SendClientMessageEx(playerid, COLOR_WHITE, "Óxido de nitrógeno no se puede instalar en este vehículo.");
    	}
    	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehiculo.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No eres un mecanico!" );
	return 1;
}

CMD:unmodcoche(playerid, params[])
{
	new pnamep[MAX_PLAYER_NAME];
    format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
    for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
	    if(strcmp(PlayerVehicleInfo[d][pvOwner], pnamep) == 0)
	    {
	        if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[d][pvId]))
			{
			    for(new f = 0 ; f < MAX_MODS; f++)
				{
					RemoveVehicleComponent(PlayerVehicleInfo[d][pvId], GetVehicleComponentInSlot(PlayerVehicleInfo[d][pvId], f));
					PlayerVehicleInfo[d][pvMods][f] = 0;
				}
				return SendClientMessageEx(playerid, COLOR_WHITE, "Todas las modificaciones se han eliminado de tu vehículo.");
			}
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, " Necesitas estar en un vehiculo tuyo.");
	return 1;
}

CMD:hyd(playerid, params[])
{
	if(!IsAtTaller(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* No estás en el taller de mecanica!");
	if(Team_Mecanicos(playerid))
	{
	    if(IsPlayerInAnyVehicle(playerid))
		{
	        if( ! IsPlayerInInvalidNosVehicle( playerid ) )
			{
	            new string[128],
					Float: soPos[3];
				GetVehiclePos(GetPlayerVehicleID(playerid), soPos[0], soPos[1], soPos[2]);
				PlayerPlaySoundEx(1133, soPos[0], soPos[1], soPos[2]);
	            AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
			    if(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1)
				{
					UpdatePlayerVehicleMods(GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
				}
	            format(string, sizeof(string), "* %s añade suspensión hidráulica al vehiculo.", GetPlayerNameEx(playerid));
	            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	        }
	        else return SendClientMessageEx(playerid, COLOR_GREY, "* Suspensión Hidráulica no se puede instalar en este vehículo." );
	    }
	    else return SendClientMessageEx(playerid, COLOR_GREY, "* No estás en un vehiculo.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No eres un mecánico." );
	return 1;
}

CMD:tarifa(playerid, params[])
{
    if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	if(Info[playerid][pJob] == 3 ||  Info[playerid][pJob2] == 3)
    {
        new fare;
        if(sscanf(params, "d", fare)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /tarifa [precio]");
		if(TaxiOnDuty[playerid] == 1)
		{
		    TaxiDrivers -= 1;
		    TaxiOnDuty[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Ahora estás fuera de servicio.");
			SetPlayerToTeamColor(playerid);
			return 1;
		}
		new newcar = GetPlayerVehicleID(playerid);
		if(IsAnTaxi(newcar) || IsAnBus(newcar))
		{
			if(GetPlayerState(playerid) != 2) return SendClientMessageEx(playerid, COLOR_GREY, "* No eres el conductor.");
			if(fare < 1 || fare > 10) return SendClientMessageEx(playerid, COLOR_GREY, "* Precio de la tarifa debe ser de $ 1 a $ 10.");
            if(Info[playerid][pTaxiLicense] == 0) SendClientMessageEx(playerid, COLOR_WHITE, "No tienes una licencia de servicio de taxi, recuerda que puedes ser multado por trabajar sin ella.");
			TaxiDrivers += 1;
            TaxiOnDuty[playerid] = 1;
            TaxiTarifa[playerid] = fare;
			format(szMessage, sizeof(szMessage), "Ahora estas en servicio como taxista. Tarifa: $%d.", TaxiTarifa[playerid]);
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			SetPlayerToTeamColor(playerid);
			return 1;
		}
		else if (Info[playerid][pTaxiLicense] == 1)
		{
			if(GetPlayerState(playerid) != 2) return SendClientMessageEx(playerid, COLOR_GREY, "* No eres el conductor.");
			if(fare < 1 || fare > 10) return SendClientMessageEx(playerid, COLOR_GREY, "* Precio de la tarifa debe ser de $ 1 a $ 10.");
            TaxiDrivers += 1;
            TaxiOnDuty[playerid] = 1;
            TaxiTarifa[playerid] = fare;
			format(szMessage, sizeof(szMessage), "Ahora estas en servicio como taxista. Tarifa: $%d.", TaxiTarifa[playerid]);
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			SetPlayerToTeamColor(playerid);
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No eres taxista.");
	return 1;
}

CMD:servicios(playerid, params[])
{
	if(Info[playerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar esto en prisión.");
	if(Info[playerid][pServiceTime] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Necesitas esperar 30 segundos para usar este comando.");
	ShowPlayerDialog(playerid,D_SERVICES,DIALOG_STYLE_LIST,""COL_GENERAL"Selecciona","{F81414}Ambulancia [Emergencia]\n"COL_BLUE"Policía [Emergencia]\nMédico\n{FFFF00}Compañia de Taxi\n{00CED1}Mecánicos","Llamar","Cancelar");
	return 1;
}

CMD:mduty(playerid, params[])
{
	if(Team_Mecanicos(playerid))
	{
	    if(OnDuty[playerid] == 1)
		{
		    SendClientMessageEx(playerid, COLOR_GENERAL, "* Ahora estás fuera servicio, ya no recibirás llamadas.");
		    //SendClientMessageToAllEx(COLOR_GENERAL, "[Informacion OOC] Mecanico fuera de servicio.");
		    OnDuty[playerid] = 0;
	        Mechanics -= 1;
	    }
	    else
		{
			SendClientMessageEx(playerid, COLOR_GENERAL, "* Ahora estás en servicio, recibirás llamadas de la gente que te necesite.");
			//SendClientMessageToAllEx(COLOR_GENERAL, "[Informacion OOC] Mecanico en servicio.");
	        OnDuty[playerid] = 1;
	        ++Mechanics;
	    }
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No puedes usar este comando porque no eres mecánico.");
	return 1;
}

CMD:irpt(playerid, params[])
{
	if(Team_SAMD(playerid))
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /irpt [Jugador/ID]");

		if(IsPlayerConnectedEx(giveplayerid))
		{
		    if (giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando mientras tu seas la persona que llamó.");

		    if(GetPVarInt(giveplayerid, "EMSAttempt") == 8) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando porque ya aceptaron la llamada.");

			if(GetPVarInt(giveplayerid,"MedicCall") == 1)
			{
				if(Info[giveplayerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No puedes usar este comando mientras el usuario este en prisión.");
				format(string, sizeof(string), "Paramédico %s aceptó la llamada de la centra de emergencia Nrº %d, Paciente: %s.",GetPlayerNameEx(playerid),giveplayerid,GetPlayerNameEx(giveplayerid));
				SendRadioMessage(4, TEAM_MED_COLOR, string);
				format(string, sizeof(string), "* Has aceptado la llamada de emergencia de %s, podrás ver un marcador en el mapa.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_GENERAL, string);
				format(string, sizeof(string), "* Paramédico %s aceptó tu llamada; por favor espera en tu posición actual.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
				GameTextForPlayer(playerid, "~r~Ve~n~al marcador rojo.", 5000, 1);
				EMSCallTime[playerid] = 1;
				EMSAccepted[playerid] = giveplayerid;
				SetPVarInt(giveplayerid, "EMSAttempt", 8);
				//Info[playerid][pCallsAccepted]++;
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no necesita asistencia médica!");
		}
	}
	return 1;
}

CMD:subirpt(playerid, params[])
{
	if(Team_SAMD(playerid) || (Info[playerid][pMember] == 1 && Info[playerid][pDivision] == 2) || Team_NG(playerid) && Info[playerid][pDivision] == 3)
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando mientras estes en un coche.");

	    new string[128], giveplayerid, seat;
	    if(sscanf(params, "dd", giveplayerid, seat)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /subirpt [playerid] [Asiento]");

	    if(IsPlayerConnectedEx(giveplayerid))
		{
	        if(giveplayerid != INVALID_PLAYER_ID)
			{
	            if(seat < 2 || seat > 3) return SendClientMessageEx(playerid, COLOR_GREY, "* El ID del asiento no puede estar por encima o por debajo de 3 o 2.");

	            if(GetPVarInt(giveplayerid, "Injured") != 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando mientras el paciente no este herido.");

	            if(IsPlayerInAnyVehicle(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando porque el paciente ya está en el coche.");

	            if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
	                if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "* No puedes subirte a tu mismo."); return 1; }
	                if(Info[giveplayerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando mientras el paciente este en prisión.");
	                new carid = gLastCar[playerid];
	                if(GetVehicleModel(carid) == 416)
					{
	                    new Float:pos[6];
	                    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	                    GetPlayerPos(giveplayerid, pos[3], pos[4], pos[5]);
	                    GetVehiclePos( carid, pos[0], pos[1], pos[2]);
	                    if (floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
	                        floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
	                        floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
	                    format(string, sizeof(string), "* Fuiste cargado por el paramédico %s.", GetPlayerNameEx(playerid));
	                    SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
	                    format(string, sizeof(string), "* Cargaste al auto a %s.", GetPlayerNameEx(giveplayerid));
	                    SendClientMessageEx(playerid, COLOR_GENERAL, string);
	                    format(string, sizeof(string), "* %s sube a %s en la ambulancia.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	                    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                    SetPVarInt(giveplayerid, "EMSAttempt", 3);
	                    ClearAnimations(giveplayerid);
	                    PutPlayerInVehicle(giveplayerid,carid,seat);
	                    TogglePlayerControllable(giveplayerid, false);
	                }
	                else return SendClientMessageEx(playerid, COLOR_GREY, "* El último coche que has manejado debe ser una ambulancia.");
	            }
	            else return SendClientMessageEx(playerid, COLOR_GREY, "* No estás lo suficientemente cerca del jugador o de tu coche.");
	        }
	    }
	    else return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando porque esa ID no está disponible.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No eres parte de SAMD o de la unidad de emergencia de SAPD");
	return 1;
}

CMD:oldcar(playerid, params[])
{
	new string[128];
	format(string, sizeof(string), "Tu último vehiculo manejado fue el ID %d.",gLastCar[playerid]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	return 1;
}

CMD:dejarpt(playerid, params[])
{
	if(Team_SAMD(playerid) || (Info[playerid][pMember] == 1 && Info[playerid][pDivision] == 2) || Team_NG(playerid) && Info[playerid][pDivision] == 3)
	{
	    if(IsPlayerInAnyVehicle(playerid))
		{
			new string[128], giveplayerid;
		    if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /dejarpt [playerid]");

	        new carid = GetPlayerVehicleID(playerid);
	        new caridex = GetPlayerVehicleID(giveplayerid);
	        if(IsAnAmbulance(carid))
			{
	            if(carid == caridex){
	                if(IsAtDeliverPatientPoint(playerid)){
	                    if(playerid == giveplayerid)
						{
	                        SendClientMessageEx(playerid, COLOR_WHITE, "No puedes dejarte a ti mismo en el hospital!");
	                        return 1;
	                    }
	                    if(GetPVarInt(giveplayerid, "Injured") == 0)
						{
	                        return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no está herido!");
	                    }
	                    SetHP(giveplayerid, 100);
	                    /*if(STDPlayer[giveplayerid] > 0)
						{
	                        STDPlayer[giveplayerid] = 0;
	                        SendClientMessageEx(giveplayerid, COLOR_GENERAL, "* You are no longer infected with a STD anymore because of the hospital's help!");
	                    }*/
	                    GivePlayerCash(giveplayerid, -350);
	                    Tax += 100;
	                    GivePlayerCash(playerid,250);
	                    KillEMSQueue(giveplayerid);
	                    SetPVarInt(giveplayerid, "MedicBill", 0);
	                    SendClientMessageEx(giveplayerid, TEAM_CYAN_COLOR, "Dr: Los gastos médicos son de $350. Que tengas buen día!");
	                    SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Ganaste $250 por dejar sano y salvo un paciente!");
	                    SetPlayerInterior(giveplayerid, 0); Info[giveplayerid][pInt] = 0;
	                    LoadObjects(giveplayerid);
	                    SetPVarInt(giveplayerid, "PlayerCuffed", 0);
	                    //Info[playerid][pPatientsDelivered]++;
	                    if(Team_SAMD(playerid))
	                    {
	                    	format(string, sizeof(string), "Paramédico %s ha dejado satisfactoriamente a %s en el hospital.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendRadioMessage(4, TEAM_MED_COLOR, string);
						}
						else if(Team_NG(playerid))
	                    {
	                    	format(string, sizeof(string), "%s ha dejado satisfactoriamente a %s en el hospital de SAEM.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							SendRadioMessage(4, TEAM_MED_COLOR, string);
						}
	                    //new Float:X, Float:Y, Float:Z;
	                    //GetObjectPos(Carrier[0], X, Y, Z);
	                    if(IsPlayerInRangeOfPoint(playerid, 5.0,1174.6427,-1308.5641,13.9963))
						{
	                    	SetPlayerPos(giveplayerid, 817.2863,-1209.1100,1195.8129);
	                        SetPlayerVirtualWorld(giveplayerid, 5);
	                        Info[giveplayerid][pVW] = 5;
	                    }
	                    else if(IsPlayerInRangeOfPoint(playerid, 5.0,225.0963,1980.7179,17.6406))
						{
						    SetPlayerPos(giveplayerid, 1233.5699,321.7521,-11.7422);
	                        SetPlayerVirtualWorld(giveplayerid, 0);
	                        Info[giveplayerid][pVW] = 0;
	                    }
	                }
	                else return SendClientMessageEx(playerid, COLOR_GREY, "* No estás en el punto para dejar a los pacientes.");
	            }
	            else return SendClientMessageEx(playerid, COLOR_GREY, "* Ese paciente no está en la ambulancia.");
	        }
	        else return SendClientMessageEx(playerid, COLOR_GREY, "* No estás en una ambulancia");
	    }
	}
	return 1;
}

CMD:curar(playerid, params[])
{
	if(Team_SAMD(playerid) || Team_NG(playerid) && Info[playerid][pDivision] == 3)//model
	{
		if(Info[playerid][pTriageTime] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Debes esperar 2 minutos para hacer esto de nuevo.");
	    new string[128], giveplayerid;
	    if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /curar [playerid]");
		if(IsPlayerConnectedEx(giveplayerid))
		{
		    if(playerid == giveplayerid) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando contigo mismo.");
		    if(ProxDetectorS(5.0, playerid, giveplayerid))
			{
	    	    new Float: health;
	    	    GetPlayerHealth(giveplayerid, health);
	    	    if(health >= 85) SetHP(giveplayerid, 100);
				else SetHP(giveplayerid, health+15.0);
				Blood -= 15;
	    	    format(string, sizeof(string), "* %s da a %s 15ml de sangre.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	    	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Info[playerid][pTriageTime] = 120;
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "* El jugador no está cerca tuyo.");
		}
	}
	return 1;
}

CMD:sendtols(playerid, params[])
{
	if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	if (Info[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /sendtols [ID/Jugador]");
		if(IsPlayerConnectedEx(giveplayerid))
		{
			if (Info[giveplayerid][pAdmin] >= 5) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando para este jugador!");
			format(string, sizeof(string), " Enviaste a Los Santos a %s.", GetPlayerNameEx(giveplayerid));
			format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s a enviado a %s [ID: %d] a Los Santos", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), giveplayerid);
			ABroadCast(COLOR_GRAD1,string,2);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, "   Fuiste teleportado!");
			SetPlayerPos(giveplayerid, 1529.6,-1691.2,13.3);
			SetPlayerVirtualWorld(giveplayerid, 0);
			SetPlayerInterior(giveplayerid, 0);
			Info[giveplayerid][pInt] = 0;
			Info[giveplayerid][pVW] = 0;
		}
	}
	else NoAutorizado
	return 1;
}

CMD:miembros(playerid, params[])
{
	new member = Info[playerid][pMember];
	new leader = Info[playerid][pLeader];
	new teamnumber;
	if (Info[playerid][pLeader] != 0) teamnumber = Info[playerid][pLeader];
	else if (Info[playerid][pMember] != 0) teamnumber = Info[playerid][pMember];
	if(member > 0 || leader > 0)
	{
	    SendClientMessageEx(playerid, COLOR_GENERAL, "Miembros Conectados:");
		foreach(Player, i)
		{
		    new string[32];
			if (IsPlayerConnectedEx(i))
			{
				if (Info[i][pLeader] == teamnumber) format(string, sizeof(string), "%s (Líder)",GetPlayerNameEx(i));
				else if (Info[i][pMember] == teamnumber) format(string, sizeof(string), "%s, Rango: %d.",GetPlayerNameEx(i), Info[i][pRank]);
				if(strlen(string) > 0) SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No perteneces a ninguna facción.");
	return 1;
}

CMD:salirfaccion(playerid, params[])
{
	if(Info[playerid][pMember] != 0)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL, "* Saliste de tu facción, ahora eres un civil.");
		Info[playerid][pFMember] = 255;
		Info[playerid][pRank] = 0;
		Info[playerid][pChar] = 299;
		Info[playerid][pMember] = 0;
		Info[playerid][pLeader] = 0;
		OnDuty[playerid] = 0; //  Reset Duty!
		SetPlayerSkin(playerid,299);
		for(new iToyIter; iToyIter < MAX_PLAYER_ATTACHED_OBJECTS; ++iToyIter)
		{
			for(new LoopRapist; LoopRapist < sizeof(HoldingObjectsCop); ++LoopRapist)
			{
				if(HoldingObjectsCop[LoopRapist][holdingmodelid] == PlayerToyInfo[playerid][iToyIter][ptModelID])
				{
					PlayerToyInfo[playerid][iToyIter][ptModelID] = 0;
					PlayerToyInfo[playerid][iToyIter][ptBone] = 0;
					PlayerToyInfo[playerid][iToyIter][ptPosX] = 0.0;
					PlayerToyInfo[playerid][iToyIter][ptPosY] = 0.0;
					PlayerToyInfo[playerid][iToyIter][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][iToyIter][ptPosX] = 0.0;
					PlayerToyInfo[playerid][iToyIter][ptPosY] = 0.0;
					PlayerToyInfo[playerid][iToyIter][ptPosZ] = 0.0;
					PlayerToyInfo[playerid][iToyIter][ftscaleX] = 0.0;
					PlayerToyInfo[playerid][iToyIter][ftscaleY] = 0.0;
					PlayerToyInfo[playerid][iToyIter][ftscaleZ] = 0.0;
				}
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en una facción.");
	return 1;
}

CMD:comprarcasa(playerid, params[])
{
	new string[128];
	new playername[MAX_PLAYER_NAME];
	new Float:oldposx, Float:oldposy, Float:oldposz;
	GetPlayerName(playerid, playername, sizeof(playername));
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
	    if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]) )
		{
	        if(HouseInfo[h][hOwned] == 0)
			{
	            if(Info[playerid][pLevel] < HouseInfo[h][hLevel])
				{
	                format(string, sizeof(string), "   Tú necesitas ser nivel %d para comprar está casa.", HouseInfo[h][hLevel]);
	                SendClientMessageEx(playerid, COLOR_WHITE, string);
	                return 1;
	            }
	            if(Info[playerid][pPhousekey] == INVALID_HOUSE_ID)
				{
					if(GetPlayerCash(playerid) > HouseInfo[h][hValue])
					{
						Info[playerid][pPhousekey] = h;
						HouseInfo[h][hOwned] = 1;
						strcpy(HouseInfo[h][hOwner], Info[playerid][pNormalName], MAX_PLAYER_NAME);
						GivePlayerCash(playerid,-HouseInfo[h][hValue]);
						Tax += (HouseInfo[h][hValue] * 40 ) / ( 100 );
						SetPlayerInterior(playerid,HouseInfo[h][hHInteriorWorld]);
					    LoadObjects(playerid);
						SetPlayerPos(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
						GameTextForPlayer(playerid, "~w~Bienvenido~n~Puedes salir en cualquier momento, usando /salir en este mismo lugar.", 5000, 3);
						Info[playerid][pInt] = HouseInfo[h][hHInteriorWorld];
						SendClientMessageEx(playerid, COLOR_WHITE, "Felicitaciones por tu nueva compra!");
						SendClientMessageEx(playerid, COLOR_WHITE, "Escribe /ayuda casa para ver los comandos disponibles!");
						saveHouse(h);
						OnPlayerUpdate(playerid);
						Info[playerid][pVW] = h+6000;
						SetPlayerVirtualWorld(playerid, h+6000);
						DestroyDynamicPickup(HouseInfo[h][hPickupID]);
						HouseInfo[h][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]);
						format(string, sizeof(string), ""COL_HOUSET"Dueño\n"COL_WHITE"%s\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d",HouseInfo[h][hOwner],HouseInfo[h][hLevel],h,HouseInfo[h][hDireccion],h+178);
						UpdateDynamic3DTextLabelText(HouseInfo[h][hTextID], -1, string);
						DestroyDynamicPickup(HouseInfo[h][gPickupID]);
                        HouseInfo[h][gPickupID] = CreateDynamicPickup(1239, 23, HouseInfo[h][gX], HouseInfo[h][gY], HouseInfo[h][gZ]);
                        new gt[24];
						if(HouseInfo[h][gT] == 1) gt = "Pequeño";
						else if(HouseInfo[h][gT] == 2) gt = "Mediano";
						else if(HouseInfo[h][gT] == 3) gt = "Grande";
                        format(string, sizeof(string), ""COL_HOUSET"Garage\nDueño: "COL_WHITE"%s\nTamaño: "COL_WHITE"%s", HouseInfo[h][hOwner],gt);
						UpdateDynamic3DTextLabelText(HouseInfo[h][gTextID], -1, string);
						new ip[32];
						GetPlayerIp(playerid,ip,sizeof(ip));
						format(string,sizeof(string),"%s (IP: %s) has bought house ID %d for $%d.",GetPlayerNameEx(playerid),ip,h,HouseInfo[h][hValue]);
						Log("logs/house.log", string);
						return 1;
					}
					else return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes dinero para comprar esta casa!");
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "* Solo una casa por usuario!");
	        }
	        else return SendClientMessageEx( playerid, COLOR_GREY, "* Esta casa ya tiene dueño." );
		}
	}
	return 1;
}

CMD:rentar(playerid, params[])
{
	new string[128];
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]) && HouseInfo[h][hRentFee] >= 1)
		{
	        if( ! strcmp( HouseInfo[h][hOwner], "Nobody", true ) ) { SendClientMessageEx( playerid, COLOR_WHITE, "No se puede alquilar una casa sin dueño." ); }
	        else
			{
	            if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0)
				{
	                SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes una casa, escribe /vendercasa si quieres alquilar esta.");
	                return 1;
	            }
	            if(Info[playerid][pRenting] != INVALID_HOUSE_ID)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "Ya tienes una casa en renta, escribe /desrentar si quieres dejar de rentar en la actual.");
	                return 1;
	            }
	            if(GetPlayerCash(playerid) > HouseInfo[h][hRentFee])
				{
	                if( HouseInfo[h][hRentable] == 0 )
					{
	                    SendClientMessageEx(playerid, COLOR_WHITE, "Está casa no está en renta, lo sentimos.");
	                    return 1;
	                }
	                else
					{
	                    Info[playerid][pRenting] = h;
	                    GivePlayerCash(playerid,-HouseInfo[h][hRentFee]);
	                    HouseInfo[h][hSafeMoney] = HouseInfo[h][hSafeMoney]+HouseInfo[h][hRentFee];
	                    SetPlayerInterior(playerid,HouseInfo[h][hHInteriorWorld]);
					    LoadObjects(playerid);
	                    SetPlayerPos(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
	                    GameTextForPlayer(playerid, "~w~Bienvenido a Casa", 5000, 3);
	                    Info[playerid][pInt] = HouseInfo[h][hHInteriorWorld];
	                    Info[playerid][pVW] = 6000+h;
	                    SetPlayerVirtualWorld(playerid, h+6000);
	                    SendClientMessageEx(playerid, COLOR_WHITE, "Felicitaciones. Puedes salir en cualquier momento por este mismo lugar, escribiendo /salir.");
	                    SendClientMessageEx(playerid, COLOR_WHITE, "Usa /ayuda casa para ver los comandos disponibles.");
	                    OnPlayerUpdate(playerid);
	                    new ip[32];
	                    GetPlayerIp(playerid,ip,sizeof(ip));
	                    format(string,sizeof(string),"%s (IP: %s) has rented house ID %d (owned by %s) for $%d.",GetPlayerNameEx(playerid),ip,h,HouseInfo[h][hOwner],HouseInfo[h][hRentFee]);
	                    Log("logs/house.log", string);
	                    return 1;
	                }
	            }
	            else return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes dinero para comprar esta casa!");
	        }
	    }
	}
	return 1;
}

CMD:desrentar(playerid, params[])
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "Es usted el propietario esta casa!");
	    return 1;
	}
	if( Info[playerid][pRenting] != INVALID_HOUSE_ID )
	{
	    Info[playerid][pRenting] = INVALID_HOUSE_ID;
	    SendClientMessageEx(playerid, COLOR_WHITE, "Quedaste sin casa.");
	}
	return 1;
}

CMD:timbre(playerid, params[])
{
for(new h; h < sizeof(HouseInfo); h++) if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]))
{
	new string[128];
	foreach(Player, i) if(GetPlayerVirtualWorld(i) == h + 6000 && GetPlayerInterior(i) == HouseInfo[h][hHInteriorWorld])
	{
		format(string,sizeof(string),"Timbre de %s suena.", HouseInfo[h][hOwner]);
		SendClientMessageEx(i,COLOR_PURPLE,string);
		GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~w~Timbre...", 4000,3);
	}
	format(string,sizeof(string),"* %s presiona un botón al lado de la puerta y toca el timbre de la casa de %s.",GetPlayerNameEx(playerid), HouseInfo[h][hOwner]);
	ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
}
return 1;
}

CMD:vendermicasa(playerid, params[])
{
new playername[MAX_PLAYER_NAME];
GetPlayerName(playerid, playername, sizeof(playername));
if((Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0))
{
    new string[128], giveplayerid, price;
    if(sscanf(params, "dd", giveplayerid, price)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /vendermicasa [player] [precio]");
    if(price < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Precio debe ser mayor a 0.");
    if(!IsPlayerConnectedEx(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Jugador especificado no está conectado en el servidor.");
    if(Info[giveplayerid][pPhousekey] != INVALID_HOUSE_ID)
	{
        SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador ya tiene una casa.");
        return 1;
    }
    if(Info[giveplayerid][pLevel] >= HouseInfo[Info[playerid][pPhousekey]][hLevel])
	{
        if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[Info[playerid][pPhousekey]][hExteriorX],HouseInfo[Info[playerid][pPhousekey]][hExteriorY],HouseInfo[Info[playerid][pPhousekey]][hExteriorZ]))
		{
            if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
                HouseOffer[giveplayerid] = playerid;
                HousePrice[giveplayerid] = price;
                House[giveplayerid] = 1;
                format(string, sizeof(string), "* Ofreciste a tu casa a %s por $%d.", GetPlayerNameEx(giveplayerid), price);
                SendClientMessageEx(playerid, COLOR_GENERAL, string);
                format(string, sizeof(string), "* %s te ha ofrecido su casa por $%d. (usa /aceptar casa para comprarla)", GetPlayerNameEx(playerid), price);
                SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
                return 1;
            }
            else SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador no está cerca tuyo.");
        }
        else SendClientMessageEx(playerid, COLOR_GREY, "Tienes que estar cerca de casa.");
    }
    else SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador no tiene el nivel requerido para tener esta casa.");
}
return 1;
}

CMD:casamenu(playerid, params[])
{
	if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID)
	{
	    if(GetPlayerVirtualWorld(playerid) == Info[playerid][pPhousekey]+6000)
	    {
			if(HouseInfo[Info[playerid][pPhousekey]][hLock] == 1) szDialog = "Cerrada";
			else szDialog = "Abierta";
	        format(szMessage, sizeof(szMessage), "{DF013A}» {FFFFFF}Renta\n{DF013A}» {FFFFFF}Casa [%s]\n{DF013A}» {FFFFFF}Dinero\n{DF013A}» {FFFFFF}Items\n{DF013A}» {FFFFFF}Armas\n{DF013A}» {FFFFFF}Muebles",szDialog);
			ShowPlayerDialog(playerid,HOUSE_OPTIONS,DIALOG_STYLE_LIST,"{DF013A}Selecciona:",szMessage, "Seleccionar", "Atras");
		}
	    else return SendClientMessageEx(playerid, COLOR_GREY, "* No estás en ninguna casa.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes una casa.");
	return 1;
}

CMD:ropero(playerid, params[])
{
new houseID = Info[playerid][pPhousekey];
if(houseID != -1)
{
    if(GetPlayerVirtualWorld(playerid) == houseID + 6000)
	{
						new slot1casa = HouseInfo[houseID][hSlotRopero1];
					new slot2casa = HouseInfo[houseID][hSlotRopero2];
					new slot3casa = HouseInfo[houseID][hSlotRopero3];
					new slot4casa = HouseInfo[houseID][hSlotRopero4];
					new slot5casa = HouseInfo[houseID][hSlotRopero5];
					new slot6casa = HouseInfo[houseID][hSlotRopero6];
					new slot7casa = HouseInfo[houseID][hSlotRopero7];
					new slot8casa = HouseInfo[houseID][hSlotRopero8];
					new slot9casa = HouseInfo[houseID][hSlotRopero9];
					new slot10casa = HouseInfo[houseID][hSlotRopero10];

					new string[128];
					format(string, sizeof(string), "1 - %d\n2 - %d\n3 - %d\n4 - %d\n5 - %d\n6 - %d\n7 - %d\n8 - %d\n9 - %d\n10 - %d", slot1casa, slot2casa, slot3casa, slot4casa, slot5casa, slot6casa, slot7casa, slot8casa, slot9casa, slot10casa);
	ShowPlayerDialog(playerid, DIALOG_ROPEROMENU, DIALOG_STYLE_LIST, "Ropero", string, "Aceptar", "Cancelar");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No estás dentro de tu casa.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes una casa.");
return 1;
}

CMD:avecasa(playerid, params[])
{
	if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	if (Info[playerid][pAdmin] >= 5)
	{
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));

		new string[256], house;
		if(sscanf(params, "d", house)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /avecasa [houseid]");
		HouseInfo[house][hLock] = 1;
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"Administrator %s (IP: %s) has admin-sold house ID %d (was owned by %s).",GetPlayerNameEx(playerid),ip,house,HouseInfo[house][hOwner]);
		Log("logs/house.log", string);
		ClearHouse(house);
		format( HouseInfo[house][hOwner], 128, "Nobody" );
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~Vendiste la Casa Numero %d.", house);
		GameTextForPlayer(playerid, string, 10000, 3);
		saveHouse(house);
		new gtext[24];
		if(HouseInfo[house][gT] == 1) gtext = "Pequeño";
		else if(HouseInfo[house][gT] == 2) gtext = "Mediano";
		else if(HouseInfo[house][gT] == 3) gtext = "Grande";
		DestroyDynamicPickup(HouseInfo[house][hPickupID]);
		HouseInfo[house][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
		DestroyDynamic3DTextLabel(HouseInfo[house][hTextID]);
		format(string, sizeof(string), ""COL_HOUSET"Casa en Venta!\nCosto: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_WHITE"Para comprar usa: /comprarcasa",HouseInfo[house][hValue],HouseInfo[house][hLevel],house);
		HouseInfo[house][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]+0.5, 10.0);
        DestroyDynamicPickup(HouseInfo[house][gPickupID]);
        HouseInfo[house][gPickupID] = CreateDynamicPickup(1239, 23, HouseInfo[house][gX], HouseInfo[house][gY], HouseInfo[house][gZ]);
  		format(string, sizeof(string), ""COL_HOUSET"Garage\nCasa en venta!\nTamaño: "COL_WHITE"%s",gtext);
        UpdateDynamic3DTextLabelText(HouseInfo[house][gTextID], -1, string);
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este comando");
	return 1;
}

CMD:vendercasa(playerid, params[])
{
	new string[256];
	new house = Info[playerid][pPhousekey];
	if(house == INVALID_HOUSE_ID) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres dueño de una casa.");
	if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ]))
	{
		ClearHouse(house);
		HouseInfo[house][hLock] = 1;
		format( HouseInfo[house][hOwner], 128, "Nobody" );
		new cost = (HouseInfo[house][hValue] * 40 ) / ( 100 );
		GivePlayerCash(playerid,cost);
		Tax -= cost;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~Felicitaciones~n~ Vendiste tu casa por ~n~~g~$%d", cost);
		GameTextForPlayer(playerid, string, 4000, 3);
		Info[playerid][pPhousekey] = INVALID_HOUSE_ID;
		if(Info[playerid][pVW] == house+6000)
		{
			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ]);
			Info[playerid][pInt] = 0;
			Info[playerid][pPhousekey] = INVALID_HOUSE_ID;
		}
		//Info[playerid][pInsurance] = 0;
		saveHouse(house);
		OnPlayerUpdate(playerid);
		DestroyDynamicPickup(HouseInfo[house][hPickupID]);
		HouseInfo[house][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
		DestroyDynamic3DTextLabel(HouseInfo[house][hTextID]);
		format(string, sizeof(string), ""COL_HOUSET"Casa en Venta!\nCosto: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_WHITE"Para comprar usa: /comprarcasa",HouseInfo[house][hValue],HouseInfo[house][hLevel],house);
		HouseInfo[house][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]+0.5, 10.0);
        DestroyDynamicPickup(HouseInfo[house][gPickupID]);
        HouseInfo[house][gPickupID] = CreateDynamicPickup(1239, 23, HouseInfo[house][gX], HouseInfo[house][gY], HouseInfo[house][gZ]);
        new gtext[24];
		if(HouseInfo[house][gT] == 1) gtext = "Pequeño";
		else if(HouseInfo[house][gT] == 2) gtext = "Mediano";
		else if(HouseInfo[house][gT] == 3) gtext = "Grande";
		format(string, sizeof(string), ""COL_HOUSET"Garage\nCasa en venta!\nTamaño: "COL_WHITE"%s",gtext);
        UpdateDynamic3DTextLabelText(HouseInfo[house][gTextID], -1, string);
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has sold their house (ID %d) for $%d.",GetPlayerNameEx(playerid),ip,house,HouseInfo[house][hValue]);
		Log("logs/house.log", string);
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Necesitas estar cerca su casa (exterior) para venderla.");
	return 1;
}

CMD:goinhouse(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if(Info[playerid][pAdmin] >= 5)
{
	new housenum;
	if(sscanf(params, "d", housenum)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /goinhouse [housenumber]");

	SetPlayerInterior(playerid,HouseInfo[housenum][hHInteriorWorld]);
	if(HouseInfo[housenum][hCustomInterior] == 1)
	{
	    LoadObjects(playerid);
	}
	SetPlayerPos(playerid,HouseInfo[housenum][hInteriorX],HouseInfo[housenum][hInteriorY],HouseInfo[housenum][hInteriorZ]);
	GameTextForPlayer(playerid, "~w~Teletransportado", 5000, 1);
	Info[playerid][pInt] = HouseInfo[housenum][hHInteriorWorld];
}
return 1;
}

CMD:gotohouse(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if(Info[playerid][pAdmin] >= 4)
{
	new housenum;
	if(sscanf(params, "d", housenum)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /gotohouse [housenumber]");

	SetPlayerPos(playerid,HouseInfo[housenum][hExteriorX],HouseInfo[housenum][hExteriorY],HouseInfo[housenum][hExteriorZ]);
	GameTextForPlayer(playerid, "~w~Teletransportado", 5000, 1);
	SetPlayerInterior(playerid, 0);
	Info[playerid][pInt] = 0;
}
return 1;
}

CMD:editar(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if(Info[playerid][pAdmin] < 5) return NoAutorizado
new string[128], choice[32], amount;
if(sscanf(params, "s[32]d", choice, amount))
{
	SendClientMessageEx(playerid, COLOR_WHITE, "USA: /edit [name] [amount]");
	SendClientMessageEx(playerid, COLOR_GREY,  "Nombres: Nivel, Precio");
	return 1;
}

for(new i = 0; i < sizeof(HouseInfo); i++)
{
	if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
	{
		format(string, sizeof(string), "Casa: %d", i);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(amount > 0)
		{
			if(strcmp(choice,"Nivel",true) == 0)
			{
				HouseInfo[i][hLevel] = amount;
			}
			else if(strcmp(choice,"Precio",true) == 0)
			{
				HouseInfo[i][hValue] = amount;
			}
		}
		if(HouseInfo[i][hOwned] ==0)
		{
			format(string, sizeof(string), ""COL_HOUSET"Casa en Venta!\nCosto: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d\n"COL_WHITE"Para comprar usa: /comprarcasa",HouseInfo[i][hValue],HouseInfo[i][hLevel],i,HouseInfo[i][hDireccion],i+178);
			UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_GREEN2, string);
		}
		else
		{
			if(HouseInfo[i][hRentable] == 0)
			{
				format(string, sizeof(string), ""COL_HOUSET"Dueño\n"COL_WHITE"%s\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d",HouseInfo[i][hOwner],HouseInfo[i][hLevel],i,HouseInfo[i][hDireccion],i+178);
				UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_GREEN2, string);
			}
			else
			{
				format(string, sizeof(string), ""COL_HOUSET"Dueño:\n"COL_WHITE"%s\n"COL_HOUSET"Renta: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d\n"COL_WHITE"Usa /rentroom para rentar aquí",HouseInfo[i][hOwner],HouseInfo[i][hRentFee],HouseInfo[i][hLevel],i,HouseInfo[i][hDireccion],i+178);
				UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_GREEN2, string);
			}
		}
	}
}
return 1;
}

CMD:hnext(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if(Info[playerid][pAdmin] >= 5)
{
	SendClientMessageEx(playerid, COLOR_RED, "* Lista casas disponible siguiente...");
	for(new x;x<MAX_HOUSES;x++)
	{
	    if(HouseInfo[x][hExteriorX] == 0.0)
	    {
	        new string[128];
	        format(string, sizeof(string), "%d está casa está disponible para usarla", x);
	        SendClientMessageEx(playerid, COLOR_WHITE, string);
	        break;
		}
	}
}
else SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado!");
return 1;
}

CMD:hname(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if(Info[playerid][pAdmin] < 5) NoAutorizado
new string[128], houseid, ownername[24];
if(sscanf(params, "ds[24]", houseid, ownername)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /hname [houseid] [Nombre]");

format(HouseInfo[houseid][hOwner], 24, "%s", ownername);
format(string, sizeof(string), "Estableciste el nombre del dueño de la casa a: %s", ownername);
HouseInfo[houseid][hOwned] = 1;
SendClientMessageEx(playerid, COLOR_WHITE, string);
DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
HouseInfo[houseid][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
format(string, sizeof(string), ""COL_HOUSET"Dueño:\n "COL_WHITE"%s\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hDireccion],houseid+178);
UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN2, string);
format(string, sizeof(string), "%s has edited HouseID %d's Owner to %s.", GetPlayerNameEx(playerid), houseid, ownername);
Log("logs/hedit.log", string);
return 1;
}

CMD:editarh(playerid, params[])
{

if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if (Info[playerid][pAdmin] < 5) return NoAutorizado
new string[256], choice[32], houseid, amount;
if(sscanf(params, "s[32]dD", choice, houseid, amount))
{
	SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarh [Nombre] [houseid] [(Optional)Codigo]");
	SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, CustomExterior, Clase (1-3), Nivel, Precio, Garage, GarageT");
	return 1;
}
if(strcmp(choice, "interior", true) == 0)
{
	GetPlayerPos(playerid, HouseInfo[houseid][hInteriorX], HouseInfo[houseid][hInteriorY], HouseInfo[houseid][hInteriorZ]);
	GetPlayerFacingAngle(playerid, HouseInfo[houseid][hInteriorA]);
	HouseInfo[houseid][hHInteriorWorld] = GetPlayerInterior( playerid );
	SendClientMessageEx( playerid, COLOR_WHITE, "Cambiaste el interior de la casa!" );
 	saveHouse(houseid);

	format(string, sizeof(string), "%s has edited HouseID %d's Interior.", GetPlayerNameEx(playerid), houseid);
	Log("logs/hedit.log", string);
	return 1;
}
else if(strcmp(choice, "custominterior", true) == 0)
{
	if(HouseInfo[houseid][hCustomInterior] == 0)
	{
		HouseInfo[houseid][hCustomInterior] = 1;
		SendClientMessageEx( playerid, COLOR_WHITE, "Casa establecida a un Interior Personalizado! (1)" );
	}
	else
	{
		HouseInfo[houseid][hCustomInterior] = 0;
		SendClientMessageEx( playerid, COLOR_WHITE, "Casa establecida a un Interior Normal! (0)" );
	}
	saveHouse(houseid);

	format(string, sizeof(string), "%s has edited HouseID %d's Custom Interior.", GetPlayerNameEx(playerid), houseid);
	Log("logs/hedit.log", string);
	return 1;
}
else if(strcmp(choice, "customexterior", true) == 0)
{
	if(HouseInfo[houseid][hCustomExterior] == 0)
	{
		HouseInfo[houseid][hCustomExterior] = 1;
		SendClientMessageEx( playerid, COLOR_WHITE, "Casa establecida a un Exterior Personalizado! (1)" );
	}
	else
	{
		HouseInfo[houseid][hCustomExterior] = 0;
		SendClientMessageEx( playerid, COLOR_WHITE, "Casa establecida a un Exterior Normal! (0)" );
	}
	saveHouse(houseid);

	format(string, sizeof(string), "%s has edited HouseID %d's Custom Exterior.", GetPlayerNameEx(playerid), houseid);
	Log("logs/hedit.log", string);
	return 1;
}
else if(strcmp(choice, "garage", true) == 0)
{
    GetPlayerPos(playerid, HouseInfo[houseid][gX], HouseInfo[houseid][gY], HouseInfo[houseid][gZ]);
    GetPlayerFacingAngle(playerid, HouseInfo[houseid][gR]);
    SendClientMessageEx( playerid, COLOR_WHITE, "Cambiaste el exterior de el garage!");
    saveHouse(houseid);
    format(string, sizeof(string), "%s has edited HouseID %d's Garage.", GetPlayerNameEx(playerid), houseid);
	Log("logs/hedit.log", string);
	new gtext[24];
	if(HouseInfo[houseid][gT] == 1) gtext = "Pequeño";
	else if(HouseInfo[houseid][gT] == 2) gtext = "Mediano";
	else if(HouseInfo[houseid][gT] == 3) gtext = "Grande";
    if(HouseInfo[houseid][hOwned] ==0)
	{
		DestroyDynamicPickup(HouseInfo[houseid][gPickupID]);
		DestroyDynamic3DTextLabel(HouseInfo[houseid][gTextID]);
  		format(string, sizeof(string), ""COL_HOUSET"Garage\nCasa en venta!\nTamaño: "COL_WHITE"%s",gtext);
		HouseInfo[houseid][gTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, HouseInfo[houseid][gX], HouseInfo[houseid][gY], HouseInfo[houseid][gZ]+0.5,10.0);
		HouseInfo[houseid][gPickupID] = CreateDynamicPickup(1239, 23, HouseInfo[houseid][gX], HouseInfo[houseid][gY], HouseInfo[houseid][gZ]);
	}
	else
	{
		DestroyDynamicPickup(HouseInfo[houseid][gPickupID]);
		DestroyDynamic3DTextLabel(HouseInfo[houseid][gTextID]);
		format(string, sizeof(string), ""COL_HOUSET"Garage\nDueño: "COL_WHITE"%s\nTamaño: "COL_WHITE"%s", HouseInfo[houseid][hOwner],gtext);
		HouseInfo[houseid][gTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN2,HouseInfo[houseid][gX], HouseInfo[houseid][gY], HouseInfo[houseid][gZ]+0.5,10.0);
		HouseInfo[houseid][gPickupID] = CreateDynamicPickup(1239, 23, HouseInfo[houseid][gX], HouseInfo[houseid][gY], HouseInfo[houseid][gZ]);
	}
}
else if(strcmp(choice, "garaget", true) == 0)
{
	switch(amount)
	{
	    case 1: HouseInfo[houseid][gT] = 1;
	    case 2: HouseInfo[houseid][gT] = 2;
	    case 3: HouseInfo[houseid][gT] = 3;
	}
    saveHouse(houseid);
    format(string, sizeof(string), "%s has edited HouseID %d's Garage Type.", GetPlayerNameEx(playerid), houseid);
	Log("logs/hedit.log", string);
	new gtext[24];
	if(HouseInfo[houseid][gT] == 1) gtext = "Pequeño";
	else if(HouseInfo[houseid][gT] == 2) gtext = "Mediano";
	else if(HouseInfo[houseid][gT] == 3) gtext = "Grande";
    if(HouseInfo[houseid][hOwned] ==0)
	{
		DestroyDynamicPickup(HouseInfo[houseid][gPickupID]);
		DestroyDynamic3DTextLabel(HouseInfo[houseid][gTextID]);
  		format(string, sizeof(string), ""COL_HOUSET"Garage\nCasa en venta!\nTamaño: "COL_WHITE"%s",gtext);
		HouseInfo[houseid][gTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, HouseInfo[houseid][gX], HouseInfo[houseid][gY], HouseInfo[houseid][gZ]+0.5,10.0);
		HouseInfo[houseid][gPickupID] = CreateDynamicPickup(1239, 23, HouseInfo[houseid][gX], HouseInfo[houseid][gY], HouseInfo[houseid][gZ]);
	}
	else
	{
		DestroyDynamicPickup(HouseInfo[houseid][gPickupID]);
		DestroyDynamic3DTextLabel(HouseInfo[houseid][gTextID]);
		format(string, sizeof(string), ""COL_HOUSET"Garage\nDueño: "COL_WHITE"%s\nTamaño: "COL_WHITE"%s", HouseInfo[houseid][hOwner],gtext);
		HouseInfo[houseid][gTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN2,HouseInfo[houseid][gX], HouseInfo[houseid][gY], HouseInfo[houseid][gZ]+0.5,10.0);
		HouseInfo[houseid][gPickupID] = CreateDynamicPickup(1239, 23, HouseInfo[houseid][gX], HouseInfo[houseid][gY], HouseInfo[houseid][gZ]);
	}
}
else if(strcmp(choice, "exterior", true) == 0)
{
    new zone[MAX_ZONE_NAME];
    GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
    format(HouseInfo[houseid][hDireccion], 256, "%s", zone);
	GetPlayerPos(playerid, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
	GetPlayerFacingAngle(playerid, HouseInfo[houseid][hExteriorA]);
	SendClientMessageEx( playerid, COLOR_WHITE, "Cambiaste el exterior de la casa!" );
	DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
    saveHouse(houseid);
	format(string, sizeof(string), "%s has edited HouseID %d's Exterior.", GetPlayerNameEx(playerid), houseid);
	Log("logs/hedit.log", string);
	if(HouseInfo[houseid][hOwned] ==0)
	{
		DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
		DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
		format(string, sizeof(string), ""COL_HOUSET"Casa en Venta!\nCosto: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d\n"COL_WHITE"Para comprar usa: /comprarcasa",HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hDireccion],houseid+178);
		HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN2, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0);
		HouseInfo[houseid][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
	}
	else
	{
		if(HouseInfo[houseid][hRentable] == 0)
		{
			DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
			DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
			format(string, sizeof(string), ""COL_HOUSET"Dueño\n"COL_WHITE"%s\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hDireccion],houseid+178);
			HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN2,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0);
			HouseInfo[houseid][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		}
		else
		{
			DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
			DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
			format(string, sizeof(string), ""COL_HOUSET"Dueño:\n"COL_WHITE"%s\n"COL_HOUSET"Renta: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d\n"COL_WHITE"Usa /rentar para rentar aquí",HouseInfo[houseid][hOwner],HouseInfo[houseid][hRentFee],HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hDireccion],houseid+178);
			HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN2,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0);
			HouseInfo[houseid][hPickupID] = CreateDynamicPickup(1272, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		}
	}
}
else if(strcmp(choice, "nivel", true) == 0)
{
	HouseInfo[houseid][hLevel] = amount;
	format(string, sizeof(string), "Editaste el nivel a %d.", amount);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	if(HouseInfo[houseid][hOwned] ==0)
	{
		format(string, sizeof(string), ""COL_HOUSET"Casa en Venta!\nCosto: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d\n"COL_WHITE"Para comprar usa: /comprarcasa",HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hDireccion],houseid+178);
		UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN2, string);
	}
	else
	{
		if(HouseInfo[houseid][hRentable] == 0)
		{
			format(string, sizeof(string), ""COL_HOUSET"Dueño\n"COL_WHITE"%s\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hDireccion],houseid+178);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN2, string);
		}
		else
		{
			format(string, sizeof(string), ""COL_HOUSET"Dueño:\n%s\n"COL_HOUSET"Renta: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d\n"COL_WHITE"Usa /rentar para rentar aquí",HouseInfo[houseid][hOwner],HouseInfo[houseid][hRentFee],HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hDireccion],houseid+178);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN2, string);
		}
	}
	format(string, sizeof(string), "%s has edited HouseID %d's Level to %d.", GetPlayerNameEx(playerid), houseid, amount);
	Log("logs/hedit.log", string);
}
else if(strcmp(choice, "precio", true) == 0)
{
	HouseInfo[houseid][hValue] = amount;
	format(string, sizeof(string), "Editaste el precio a $%d.", amount );
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	if(HouseInfo[houseid][hOwned] ==0)
	{
		format(string, sizeof(string), ""COL_HOUSET"Casa en Venta!\nCosto: "COL_WHITE"$%d\n"COL_HOUSET"Nivel: "COL_WHITE"%d\n"COL_HOUSET"ID: "COL_WHITE"%d\n"COL_HOUSET"Direccion: "COL_WHITE"%s %d\n"COL_WHITE"Para comprar usa: /comprarcasa",HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hDireccion],houseid+178);
		UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN2, string);
	}
	format(string, sizeof(string), "%s has edited HouseID %d's Price to $%d.", GetPlayerNameEx(playerid), amount);
	Log("logs/hedit.log", string);
}
saveHouse(houseid);
return 1;
}

CMD:licencia(playerid, params[])
{
	if (!IsPlayerInRangeOfPoint(playerid,2.0,252.1511,117.4176,1003.21889)) { return SendClientMessage(playerid, COLOR_WHITE, "No estas en el centro de licencias!"); }
	if (Info[playerid][pWantedLevel] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Tienes órden de arresto, te prohibieron la adquisición de licencias.");
	ShowPlayerDialog(playerid, DIALOG_LIC_BUY, DIALOG_STYLE_MSGBOX, "{FFFFFF}Centro de Licencias", "{FFFFFF}Debes tener en cuenta que para obtener alguna licencia, primeramente se te realizará un test teórico, para luego pasar a la parte practica.\n\n"COL_GENERAL"¿Estas de acuerdo?", "Aceptar", "Cancelar");
	return 1;
}

CMD:tomarpizza(playerid, params[])
{
	if (Info[playerid][pJob] != 1 && Info[playerid][pJob2] != 1) return SendClientMessageEx(playerid,COLOR_GREY,"No eres repartidor de Pizza!");
	new vehicleid = GetPlayerVehicleID(playerid);
	if(!(IsAPizzabike(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)) return SendClientMessageEx(playerid,COLOR_GREY,"Tu necesitas estar en una motocicleta de repartidor de pizza!");
	if(Info[playerid][pChar] == 155)
		{
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));
	
		if (!IsPlayerInRangeOfPoint(playerid, 3.0, 2098.6919,-1789.5027,13.5547)) return SendClientMessageEx(playerid,COLOR_GREY,"* No estás en el lugar adecuado!");
		if(GetPVarInt(playerid, "Pizza") > 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya estás entregando pizzas!");

		new rand = random(40);
		if(rand == 40) { rand = 1; }
		SetPVarInt(playerid, "tpPizzaTimer", floatround((GetPizzaDistance(rand) / 100), floatround_round));
		SetPVarInt(playerid, "pizzaTotal", floatround((GetPizzaDistance(rand) / 10), floatround_round));
		SetPVarInt(playerid, "pizzaTimer", GetPVarInt(playerid, "pizzaTotal"));
 		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPPIZZARUNTIMER);
 		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PIZZATIMER);
		format(szMessage, sizeof(szMessage), "Has cogido una pizza. Tienes %d segundos para entregarla!", /*HouseInfo[rand][hOwner],*/ GetPVarInt(playerid, "pizzaTotal"));
		SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
		SetPVarInt(playerid, "Pizza", rand);
 		PizzaBar[playerid] = CreateProgressBar(501.00, 119.00, 106.50, 1.50, -169954390, 100.0);
		SetProgressBarValue(PizzaBar[playerid], 100.0);
		ShowProgressBarForPlayer(playerid, PizzaBar[playerid]);
		SetPlayerCheckpoint(playerid, HouseInfo[rand][hExteriorX], HouseInfo[rand][hExteriorY], HouseInfo[rand][hExteriorZ], 5);
		}
	else SendClientMessageEx(playerid, COLOR_GREY, " No tienes el traje de Pizzero, usa /vestidor en el lugar de empleo");
	return 1;
}
CMD:saem(playerid, params[])
{
	if(Team_NG(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,10.0,298.0089,-106.0455,985.5322) && GetPlayerVirtualWorld(playerid) == 8)// NG Duty
		{
			ShowPlayerDialog(playerid, NGMENU, DIALOG_STYLE_LIST, "Equipo","Duty\nUniformes\nArmas\nEncubierto\nKevlar Vest\nFirst Aid Kit\nAccessorios\nParacaídas", "Select", "Cancel");
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes acceder a los casilleros de SAEM.");
	}
	return 1;
}

zcmd(racall, playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, NoConectado);
if(Info[playerid][pAdmin] >= 3)
{
	new bool:unwanted[MAX_VEHICLES];
	foreach(Player, player)
	{
		if(IsPlayerInAnyVehicle(player))
		{
			unwanted[GetPlayerVehicleID(player)]=true;
		}
	}
	for(new car = 0; car < MAX_VEHICLES; car++)
	{
		if(!unwanted[car]) SetVehicleToRespawn(car);
		//SetVehicleParamsEx(car,0,0,0,0,0,0,0);
		//arr_Engine{car} = 0;
	}
	format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" Respawn Total realizado por %s.",GetPlayerNameEx(playerid));
	return ABroadCast(COLOR_GENERAL, szMessage, 3);
}
else SendClientMessageEx(playerid, COLOR_WHITE, "¡No estás autorizado para usar este comando!");
return 1;
}

CMD:fixvehall(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if(IsPlayerConnectedEx(playerid)) {
    if(Info[playerid][pAdmin] < 5) {
        SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
        return 1;
    }
    for(new v = 0; v < MAX_VEHICLES; v++)
	{
        RepairVehicle(v);
    	SetVehicleHealth(v, 1000.0);
    }
    SendClientMessageEx(playerid, COLOR_GREY, "   Todos los vehiculos reparados!");
}
return 1;
}

CMD:forcedied(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if (Info[playerid][pAdmin] >= 3)
{
	new giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /forcedied [playerid]");

	if(IsPlayerConnectedEx(giveplayerid))
	{
		if(GetPVarInt(giveplayerid, "Injured") == 1)
		{
			format(szMessage, sizeof(szMessage), " Forzaste la muerte de %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, " Un administrador forzó tu muerte.");
			KillEMSQueue(giveplayerid);
			ResetPlayerWeaponsEx(giveplayerid);
			SpawnPlayer(giveplayerid);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está herido!");
	}
}
else SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando!");
return 1;
}

CMD:vendercosecha(playerid, params[])
{
if(!IsAt247(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en el 24/7.");
if(Info[playerid][pJob] == 4 || Info[playerid][pJob2] == 4)
{
    if(Info[playerid][pCosecha] > 1)
    {
		if(Tax <= 5000) return SendClientMessageEx(playerid, COLOR_GREY, "* En este momento no tenemos fondos suficientes para pagarte por tu cosecha.");
		
		new string[48], pay = Info[playerid][pCosecha]*10;
		Tax -= pay;
		SaveStuff();
		format(string, sizeof(string), "Vendiste %d Kg de cosecha y ganaste "COL_BLUE"$%d", Info[playerid][pCosecha], pay);
		GivePlayerCash(playerid,pay);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		Info[playerid][pCosecha] = 0;
		return 1;
    }
    else return SendClientMessageEx(playerid, COLOR_GREY, "Lo mínimo para vender es 1 KG.");
}
else SendClientMessageEx(playerid, COLOR_WHITE, "No eres cosechador.");
return 1;
}

CMD:limpiarcamion(playerid, params[])
{
if(!IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No eres policía!");
new carid = GetPlayerVehicleID(playerid);
new closestcar = GetClosestCar(playerid, carid);
if(IsPlayerInRangeOfVehicle(playerid, closestcar, 6.0) && IsATruckerCar(closestcar))
{
	new truckcontents = TruckContents[closestcar];
	if(truckcontents < 11) return SendClientMessageEx(playerid, COLOR_WHITE, "No hay artículos ilegales en el camión.");
	new string[128];
	new truckcontentname[50];
	switch(truckcontents)
	{
	    case 11 .. 15: format(truckcontentname, sizeof(truckcontentname), ""COL_GENERAL"Armas Ilegales");
	    case 16 .. 20: format(truckcontentname, sizeof(truckcontentname), ""COL_GENERAL"Drogas Ilegales");
	    case 21 .. 25: format(truckcontentname, sizeof(truckcontentname), ""COL_GENERAL"Materiales Ilegales");
	}
	foreach(Player, i)
	{
		if(TruckUsed[i] == closestcar)
 		{
			DestroyProgressBar(LoadTruckBar[i]);
			LoadTruckBar[i] = INVALID_BAR_ID;
			LoadTruckTime[i] = 0;
			DeletePVar(i, "TruckDeliver");
			TruckUsed[i] = INVALID_VEHICLE_ID;
			TruckContents[closestcar] = 0;
			DisablePlayerCheckpoint(i);
			gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
			SendClientMessageEx(i, COLOR_WHITE, "Tu entrega no ha podido ser completada. Las autoridades han confiscado los productos ilegales.");
   		}
	}
	format(string, sizeof(string), "Removiste las %s del camión.", truckcontentname);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "* %s ha tomado los puntos ilegales de los camiones.", GetPlayerNameEx(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
}
else SendClientMessageEx(playerid, COLOR_WHITE, "No está cerca de un camión.");
return 1;
}

CMD:robarcamion(playerid, params[])
{
if(Info[playerid][pJob] == 2 || Info[playerid][pJob2] == 2)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    if(IsATruckerCar(vehicleid))
    {
        if(Info[playerid][p_Pr_Time] == 10) return SendClientMessageEx(playerid, COLOR_GREY, "Ya hiciste 10 viajes en está hora de pago, espera al proximo payday.");
 		if(gPlayerCheckpointStatus[playerid] == CHECKPOINT_NONE || GetPVarInt(playerid, "Packages") == 0 || EMSAccepted[playerid] == 999 || MedicAccepted[playerid] == 999 || MechanicCallTime[playerid] == 0)
        {
     		if(GetProgressBarValue(LoadTruckBar[playerid]) > 10)
            {
                SendClientMessageEx(playerid, COLOR_WHITE, "En este momento está cargando tu camión!");
				return 1;
            }
            if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
            {
                SendClientMessageEx(playerid, COLOR_WHITE, "Estás en otra entrega, usa /cancelar camion para cancelar la entrega.");
				return 1;
            }
			if(TruckContents[vehicleid] == 0)
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "Este camión no tiene nada de mercancía.!");
			    return 1;
			}
			if(IsPlayerInRangeOfPoint(playerid, 65, -1572.767822, 81.137527, 3.554687))
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "No puedes robar camiones estando cerca de Ocean Docks.");
				return 1;
			}
			SendClientMessageEx(playerid, COLOR_GENERAL,"* Estás tratando de robar el camión, por favor espere ....");

			TogglePlayerControllable(playerid, 0);
			SetPVarInt(playerid, "IsFrozen", 1);

			LoadTruckBar[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
			SetProgressBarValue(LoadTruckBar[playerid], 100.0);
			ShowProgressBarForPlayer(playerid, LoadTruckBar[playerid]);
			SetTimerEx("HijackTruck", 1000, 0, "dd", playerid);
        }
        else return SendClientMessageEx(playerid, COLOR_WHITE, "Por favor asegúrate de que los otros checkpoints que están activados.");
    }
    else return SendClientMessageEx(playerid, COLOR_GREY, "No estás manejando un camión.");
}
else return SendClientMessageEx(playerid, COLOR_GREY, "No eres camionero!");
return 1;
}

function HijackTruck(playerid)
{
new vehicleid = GetPlayerVehicleID(playerid);
LoadTruckTime[playerid]--;
SetProgressBarValue(LoadTruckBar[playerid], GetProgressBarValue(LoadTruckBar[playerid])-10.0);
UpdateProgressBar(LoadTruckBar[playerid], playerid);
if(GetProgressBarValue(LoadTruckBar[playerid]) > 10) SetTimerEx("HijackTruck", 1000, 0, "d", playerid);

if(GetProgressBarValue(LoadTruckBar[playerid]) == 50.0)
{
	SetProgressBarColor(LoadTruckBar[playerid], COLOR_GRAD1);
	UpdateProgressBar(LoadTruckBar[playerid], playerid);
}
else if(GetProgressBarValue(LoadTruckBar[playerid]) == 20.0)
{
	SetProgressBarColor(LoadTruckBar[playerid], COLOR_RED);
	UpdateProgressBar(LoadTruckBar[playerid], playerid);
}
else if(GetProgressBarValue(LoadTruckBar[playerid]) <= 10.0)
{
	DeletePVar(playerid, "IsFrozen");
	TogglePlayerControllable(playerid, 1);
	DestroyProgressBar(LoadTruckBar[playerid]);
	LoadTruckBar[playerid] = INVALID_BAR_ID;

    if(!IsPlayerInVehicle(playerid, vehicleid))
    {
   		DestroyProgressBar(LoadTruckBar[playerid]);
		LoadTruckBar[playerid] = INVALID_BAR_ID;
		LoadTruckTime[playerid] = 0;
		DeletePVar(playerid, "TruckDeliver");
		TruckUsed[playerid] = INVALID_VEHICLE_ID;
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
		DisablePlayerCheckpoint(playerid);
        SendClientMessageEx(playerid, COLOR_GENERAL,"* No pudiste robar el camión.");
		return 1;
    }


	foreach(Player, i)
	{
		if(TruckUsed[i] == vehicleid)
		{
			DestroyProgressBar(LoadTruckBar[i]);
			LoadTruckBar[i] = INVALID_BAR_ID;
			LoadTruckTime[i] = 0;
			DeletePVar(i, "TruckDeliver");
			TruckUsed[i] = INVALID_VEHICLE_ID;
			DisablePlayerCheckpoint(i);
			gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
			SendClientMessageEx(i, COLOR_WHITE, "Su entrega de camionero ha fallado, le han robado el camión.");
		}
	}

	new truckdeliver = TruckContents[vehicleid];
	SetPVarInt(playerid, "TruckDeliver", truckdeliver);
	TruckUsed[playerid] = vehicleid;

	if(truckdeliver == 1)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Tu camión robado está lleno de comida y bebidas.");
		SetPlayerCheckpoint(playerid, 1025.6554,-1362.6024,13.5649, 5);
	}
	else if(truckdeliver == 2)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Tu camión robado está lleno de comida y bebidas.");
		SetPlayerCheckpoint(playerid, 793.0801,-1625.8910,13.3906, 5);
	}
	else if(truckdeliver == 3)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Tu camión robado está lleno de comida y bebidas.");
		SetPlayerCheckpoint(playerid, 1197.6417,-887.7512,43.0229, 5);
	}
	else if(truckdeliver == 4)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Tu camión robado está lleno de ropa.");
		SetPlayerCheckpoint(playerid, 2247.2351,-1661.2406,15.6749, 5);
	}
	else if(truckdeliver == 5)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Tu camión robado está lleno de ropa.");
		SetPlayerCheckpoint(playerid, 455.2845,-1501.5569,31.0434, 5);
	}
	else if(truckdeliver == 6)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Tu camión robado está lleno de ropa.");
		SetPlayerCheckpoint(playerid, 2112.7766,-1216.1750,23.8047, 5);
	}
	else if(truckdeliver == 7)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Tu camión robado está lleno de materiales.");
		SetPlayerCheckpoint(playerid, 1474.4786,-1140.6188,24.0781, 5);
	}
	else if(truckdeliver == 8)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Tu camión robado está lleno de productos del 24/7.");
		SetPlayerCheckpoint(playerid, 1331.2570,-885.2997,39.9401, 5);
	}
	else if(truckdeliver == 9)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Tu camión robado está lleno de productos del 24/7.");
		SetPlayerCheckpoint(playerid, 1347.0487,-1752.1692,13.7886, 5);
	}
	else if(truckdeliver == 10)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Tu camión robado está lleno de productos del 24/7.");
		SetPlayerCheckpoint(playerid, 1925.5968,-1789.5017,13.1459, 5);
	}
	else if(truckdeliver >= 11 && truckdeliver <= 15)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Tu camión robado está lleno de armas ilegales.");
		SetPlayerCheckpoint(playerid, -64.5445,-1120.5356,1.0781, 5);

		new level = Info[playerid][pTruckSkill];
		if(level >= 0 && level <= 50)
		{ SetPVarInt(playerid, "TruckDeliver", 11); }
		else if(level >= 51 && level <= 100)
		{ SetPVarInt(playerid, "TruckDeliver", 12); }
		else if(level >= 101 && level <= 200)
		{ SetPVarInt(playerid, "TruckDeliver", 13); }
		else if(level >= 201 && level <= 400)
		{ SetPVarInt(playerid, "TruckDeliver", 14); }
		else if(level >= 401)
		{ SetPVarInt(playerid, "TruckDeliver", 15); }
	}
	else if(truckdeliver >= 16 && truckdeliver <= 20)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Tu camión robado está lleno de drogas.");
		SetPlayerCheckpoint(playerid, -86.3670,-1195.7297,2.1664, 5);

		new level = Info[playerid][pTruckSkill];
		if(level >= 0 && level <= 50)
		{ SetPVarInt(playerid, "TruckDeliver", 16); }
		else if(level >= 51 && level <= 100)
		{ SetPVarInt(playerid, "TruckDeliver", 17); }
		else if(level >= 101 && level <= 200)
		{ SetPVarInt(playerid, "TruckDeliver", 18); }
		else if(level >= 201 && level <= 400)
		{ SetPVarInt(playerid, "TruckDeliver", 19); }
		else if(level >= 401)
		{ SetPVarInt(playerid, "TruckDeliver", 20); }
	}
	else if(truckdeliver >= 21 && truckdeliver <= 25)
	{
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Tu camión robado está lleno de materiales ilegales.");
		SetPlayerCheckpoint(playerid, -70.8884,-1549.4922,2.6172, 5);

		new level = Info[playerid][pTruckSkill];
		if(level >= 0 && level <= 50)
		{ SetPVarInt(playerid, "TruckDeliver", 21); }
		else if(level >= 51 && level <= 100)
		{ SetPVarInt(playerid, "TruckDeliver", 22); }
		else if(level >= 101 && level <= 200)
		{ SetPVarInt(playerid, "TruckDeliver", 23); }
		else if(level >= 201 && level <= 400)
		{ SetPVarInt(playerid, "TruckDeliver", 24); }
		else if(level >= 401)
		{ SetPVarInt(playerid, "TruckDeliver", 25); }
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "TIP: Entregar la mercancía a la ubicación especificada (Ir a Checkpoint).");
	SendClientMessageEx(playerid, COLOR_REALRED, "Advertencia: Cuidado con los que roban camiones, pueden robarte y quedarse con tu mercancía.");
	if(truckdeliver >= 9)
	{
		SendClientMessageEx(playerid, COLOR_REALRED, "Advertencia #2: El camión está lleno de mercancía ilegal cuidado con los policías que te pueden quitar tu mercancía.");
	}
	// If hijacked near delivery point it would send an inaccurate warning.
	/*SetPVarInt(playerid, "tpTruckRunTimer", 10);
	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);*/
}
return 1;
}

CMD:cargarcamion(playerid, params[])
{
if(Info[playerid][pJob] == 2 || Info[playerid][pJob2] == 2)
{
    if(Info[playerid][p_Pr_Time] == 10) return SendClientMessageEx(playerid, COLOR_WHITE, "Ya hiciste 10 viajes en está hora de pago, espera al proximo payday.");
    new vehicleid = GetPlayerVehicleID(playerid);
    if(IsATruckerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        if(gPlayerCheckpointStatus[playerid] == CHECKPOINT_NONE || GetPVarInt(playerid, "Packages") == 0 || EMSAccepted[playerid] == 999 || MedicAccepted[playerid] == 999 || MechanicCallTime[playerid] == 0)
		{
            if(GetProgressBarValue(LoadTruckBar[playerid]) > 10)
            {
                SendClientMessageEx(playerid, COLOR_WHITE, "En este momento está cargando su camión!");
				return 1;
            }
            if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
            {
                SendClientMessageEx(playerid, COLOR_WHITE, "Ya estás en otra entrega, usa /cancelar camión para cancelar la entrega.");
				return 1;
            }
            gPlayerCheckpointStatus[playerid] = CHECKPOINT_LOADTRUCK;
            SetPlayerCheckpoint(playerid,2173.9336,-2267.3589,13.3802, 4);
            //GameTextForPlayer(playerid, "~w~Ve al checkpoint", 5000, 1);
            SendClientMessageEx(playerid, COLOR_WHITE, "* Recoge mercancía en el lugar especificado. (Ve al CheckPoint)");
            SendClientMessageEx(playerid, COLOR_WHITE, "* Recuerda que sólo podrás hacer 10 viajes por payday, también recuerda manejar por el carril correcto o puedes ser sancionado.");
        }
        else return SendClientMessageEx(playerid, COLOR_WHITE, "Por favor, asegúrese de que su checkpoint actual esté destruido.");
    }
    else return SendClientMessageEx(playerid, COLOR_GREY, "No estás manejando un camión");
}
else return SendClientMessageEx(playerid, COLOR_GREY, "No eres camionero!");
return 1;
}

CMD:eliminarcheckpoint(playerid, params[])
{
	DeletePVar(playerid, "TrackCar");
	DisablePlayerCheckpoint(playerid);
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	EMSAccepted[playerid] = 999;
	MedicAccepted[playerid] = 999;
	TaxiCallReady[playerid] = -1;
	MechanicCallTime[playerid] = 0;
	MedicCallTime[playerid] = 0;
	SetPVarInt(playerid, "Pizza", 0);
	SendClientMessageEx(playerid,COLOR_WHITE,"Eliminaste todos los checkpoint's");
	return 1;
}

CMD:tirarpaquetes(playerid, params[])
{
	DeletePVar(playerid, "Packages");
	DeletePVar(playerid, "MatDeliver");
	DisablePlayerCheckpoint(playerid);
	SendClientMessageEx(playerid,COLOR_WHITE,"Has tirado un paquete");
	return 1;
}

function LoadTruck(playerid)
{
LoadTruckTime[playerid]--;
SetProgressBarValue(LoadTruckBar[playerid], GetProgressBarValue(LoadTruckBar[playerid])-10.0);
UpdateProgressBar(LoadTruckBar[playerid], playerid);
if(GetProgressBarValue(LoadTruckBar[playerid]) > 10) SetTimerEx("LoadTruck", 1000, 0, "d", playerid);

if(GetProgressBarValue(LoadTruckBar[playerid]) == 50.0)
{
	SetProgressBarColor(LoadTruckBar[playerid], COLOR_YELLOW);
	UpdateProgressBar(LoadTruckBar[playerid], playerid);
}
else if(GetProgressBarValue(LoadTruckBar[playerid]) == 20.0)
{
	SetProgressBarColor(LoadTruckBar[playerid], COLOR_RED);
	UpdateProgressBar(LoadTruckBar[playerid], playerid);
}
else if(GetProgressBarValue(LoadTruckBar[playerid]) <= 10.0)
{
	DeletePVar(playerid, "IsFrozen");
	TogglePlayerControllable(playerid, 1);
	DestroyProgressBar(LoadTruckBar[playerid]);
	LoadTruckBar[playerid] = INVALID_BAR_ID;

	new vehicleid = GetPlayerVehicleID(playerid);
	new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
	TruckContents[vehicleid] = truckdeliver;
	TruckUsed[playerid] = vehicleid;

	if(truckdeliver == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE,"{E3E4ED}Atención:{FFFFFF} Su camión se llenó de alimentos y bebidas.");
	  	TextDrawHideForPlayer(playerid, boxGM);
	    DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
		SetPlayerCheckpoint(playerid, 1025.6554,-1362.6024,13.5649, 5);
	}
	else if(truckdeliver == 2)
	{
		SendClientMessageEx(playerid, COLOR_WHITE,"{E3E4ED}Atención:{FFFFFF} Su camión se llenó de alimentos y bebidas.");
	  	TextDrawHideForPlayer(playerid, boxGM);
	    DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
		SetPlayerCheckpoint(playerid, 793.0801,-1625.8910,13.3906, 5);
	}
	else if(truckdeliver == 3)
	{
		SendClientMessageEx(playerid, COLOR_WHITE,"{E3E4ED}Atención:{FFFFFF} Su camión se llenó de alimentos y bebidas.");
	  	TextDrawHideForPlayer(playerid, boxGM);
	    DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
		SetPlayerCheckpoint(playerid, 1197.6417,-887.7512,43.0229, 5);
	}
	else if(truckdeliver == 4)
	{
		SendClientMessageEx(playerid, COLOR_WHITE,"{E3E4ED}Atención:{FFFFFF} Su camión se llenó de ropa.");
	  	TextDrawHideForPlayer(playerid, boxGM);
	    DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
		SetPlayerCheckpoint(playerid, 2247.2351,-1661.2406,15.6749, 5);
	}
	else if(truckdeliver == 5)
	{
		SendClientMessageEx(playerid, COLOR_WHITE,"{E3E4ED}Atención:{FFFFFF} Su camión se llenó de ropa.");
	  	TextDrawHideForPlayer(playerid, boxGM);
	    DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
		SetPlayerCheckpoint(playerid, 455.2845,-1501.5569,31.0434, 5);
	}
	else if(truckdeliver == 6)
	{
		SendClientMessageEx(playerid, COLOR_WHITE,"{E3E4ED}Atención:{FFFFFF} Su camión se llenó de ropa.");
	  	TextDrawHideForPlayer(playerid, boxGM);
	    DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
		SetPlayerCheckpoint(playerid, 2112.7766,-1216.1750,23.8047, 5);
	}
	else if(truckdeliver == 7)
	{
		SendClientMessageEx(playerid, COLOR_WHITE,"{E3E4ED}Atención:{FFFFFF} Su camión se llenó de Materiales.");
	  	TextDrawHideForPlayer(playerid, boxGM);
	    DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
		SetPlayerCheckpoint(playerid, 1474.4786,-1140.6188,24.0781, 5);
	}
	else if(truckdeliver == 8)
	{
		SendClientMessageEx(playerid, COLOR_WHITE,"{E3E4ED}Atención:{FFFFFF} Su camión se llenó con artículos 24/7.");
	  	TextDrawHideForPlayer(playerid, boxGM);
	    DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
		SetPlayerCheckpoint(playerid, 1331.2570,-885.2997,39.9401, 5);
	}
	else if(truckdeliver == 9)
	{
		SendClientMessageEx(playerid, COLOR_WHITE,"{E3E4ED}Atención:{FFFFFF} Su camión se llenó con artículos 24/7.");
	  	TextDrawHideForPlayer(playerid, boxGM);
	    DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
		SetPlayerCheckpoint(playerid, 1347.0487,-1752.1692,13.7886, 5);
	}
	else if(truckdeliver == 10)
	{
		SendClientMessageEx(playerid, COLOR_WHITE,"{E3E4ED}Atención:{FFFFFF} Su camión se llenó con artículos 24/7.");
	  	TextDrawHideForPlayer(playerid, boxGM);
	    DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
		SetPlayerCheckpoint(playerid, 1925.5968,-1789.5017,13.1459, 5);
	}
	else if(truckdeliver >= 11 && truckdeliver <= 15)
	{
		SendClientMessageEx(playerid, COLOR_WHITE,"{E3E4ED}Atención:{FFFFFF} Su camión se llenó de armas.");
	  	TextDrawHideForPlayer(playerid, boxGM);
	    DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
		SetPlayerCheckpoint(playerid, -64.5445,-1120.5356,1.0781, 5);
	}
	else if(truckdeliver >= 16 && truckdeliver <= 20)
	{
		SendClientMessageEx(playerid, COLOR_WHITE,"{E3E4ED}Atención:{FFFFFF} Su camión se llenó de drogas.");
	  	TextDrawHideForPlayer(playerid, boxGM);
	    DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
		SetPlayerCheckpoint(playerid, -86.3670,-1195.7297,2.1664, 5);
	}
	else if(truckdeliver >= 21 && truckdeliver <= 25)
	{
		SendClientMessageEx(playerid, COLOR_WHITE,"{E3E4ED}Atención:{FFFFFF} Su camión se llenó de materiales ilegales.");
	  	TextDrawHideForPlayer(playerid, boxGM);
	    DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
		SetPlayerCheckpoint(playerid, -70.8884,-1549.4922,2.6172, 5); //{E3E4ED}Atención:{FFFFFF} Su camión se lleno de
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "{E3E4ED}<!> Objetivo:{FFFFFF} Entregar la mercancía a la ubicación especificada (Vé al checkpoint)");
	SendClientMessageEx(playerid, COLOR_WHITE, "{E3E4ED}<!> Atención:{FFFFFF} Tenga cuidado con los secuestradores de camiones, que puede robar su vehículo y salirse con la mercancía.");
	TextDrawHideForPlayer(playerid, boxGM);
    DeletePVar(playerid, "IsFrozen");
	TogglePlayerControllable(playerid, 1);
	if(truckdeliver >= 11)
	{
		SendClientMessageEx(playerid, COLOR_REALRED, "Estás transportando mercancía ilegal recuerda que los policías pueden capturarte y quitarte la mercancía.");
	}
	SetPVarInt(playerid, "tpTruckRunTimer", 30);
	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
}
return 1;
}

CMD:serverstreamer(playerid, params[])
{
if(Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás autorizado para usar este comando!");
new string[128], rate;
if(sscanf(params, "d", rate)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /serverstreamer [rate] (1: Low) (2: Medium) (3: High)");
if(rate > 3 || rate < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /serverstreamer [rate] (1: Low) (2: Medium) (3: High)");
switch(rate)
{
	case 	1:
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el streamer rate a (LOW), es recomendable usarlo cuando el contador de players está bajo 100.");
		format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s ha cambiado el streamer rate. (Bajo 100 Players).",GetPlayerNameEx(playerid));
		ABroadCast(COLOR_GENERAL, string, 2);
		SendRconCommand("onfoot_rate 40");
		SendRconCommand("incar_rate 40");
		SendRconCommand("weapon_rate 40");
		SendRconCommand("stream_distance 300.0");
		SendRconCommand("stream_rate 1000");
		Streamer_TickRate(50);
	}
	case 	2:
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el streamer rate a (MEDIUM), es recomendable usarlo cuando el contador de players está bajo 200.");
		format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s ha cambiado el streamer rate. (Bajo 200 Players).",GetPlayerNameEx(playerid));
		ABroadCast(COLOR_GENERAL, string, 2);
		SendRconCommand("onfoot_rate 40");
		SendRconCommand("incar_rate 40");
		SendRconCommand("weapon_rate 40");
		SendRconCommand("stream_distance 250.0");
		SendRconCommand("stream_rate 1000");
		Streamer_TickRate(75);
	}
	case 	3:
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el streamer rate a (MEDIUM), es recomendable usarlo cuando el contador de players está sobre 200.");
		format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s ha cambiado el streamer rate. (sobre 200 Players).",GetPlayerNameEx(playerid));
		ABroadCast(COLOR_GENERAL, string, 2);
		SendRconCommand("onfoot_rate 50");
		SendRconCommand("incar_rate 50");
		SendRconCommand("weapon_rate 50");
		SendRconCommand("stream_distance 200.0");
		SendRconCommand("stream_rate 2000");
		Streamer_TickRate(100);
	}
}
return 1;
}

CMD:ta(playerid, params[])
{
if(IsACop(playerid))
{
	new string[128];
	if(Info[playerid][pConnectTime] < 2 || Info[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando, tienes restricción de armas!");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto en un vehiculo.");
	if(GetPVarInt( playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este comando en un evento.");
	if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando en la Arena!");
	if(PlayerCuffedTime[playerid] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	if(Info[playerid][pJailed] > 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto en prisión.");
	if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto mientras estás tazeado o arrestado.");
	if(pTazer[playerid] == 0)
	{
	    pTazer[playerid] = 1;
		pTazerReplace[playerid] = Info[playerid][pWeapons][2];
		if(Info[playerid][pWeapons][2] != 0) RemovePlayerWeapon(playerid, Info[playerid][pWeapons][2]);
		format(string, sizeof(string), "* %s carga su pistola taser.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		GivePlayerValidWeapon(playerid, 23, 99999);
	}
	else
	{
	    pTazer[playerid] = 0;
		RemovePlayerWeapon(playerid, 23);
		GivePlayerValidWeapon(playerid, pTazerReplace[playerid], 99999);
		format(string, sizeof(string), "* %s apaga y guarda su pistola taser.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
}
else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes un taser para hacer esto.");
return 1;
}

CMD:vmaletero(playerid, params[])
{
	new string[128];
	if (!IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* No perteneces a las fuerzas de la ley!");
	new carid = GetPlayerVehicleID(playerid), closestcar = GetClosestCar(playerid,carid);
	if(!IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0)) return SendClientMessageEx(playerid,COLOR_GREY,"No estás cerca de ningún vehiculo.");
	if(PlayerVehicleInfo[closestcar][pvOwner])
	{
	    string[0] = 0;
	    new szWep[20];
	    for(new x = 0 ; x < 3 ; x++)
	    {
	        if(PlayerVehicleInfo[closestcar][pvWeapons][x] != 0)
	        {
	            GetWeaponName(PlayerVehicleInfo[closestcar][pvWeapons][x], szWep, sizeof(szWep));
	            if(isnull(string)) format(string, sizeof(string), "* Contenido: %s", szWep);
             	else format(string, sizeof(string), "%s, %s", string, szWep);
			}
		}
		if(!isnull(string)) SendClientMessageEx(playerid, COLOR_WHITE, string);
  		else SendClientMessageEx(playerid, COLOR_WHITE, "* Contenido: Nada.");
	}
	return 1;
}

CMD:tgunmaletero(playerid, params[])
{
	if(!IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* No perteneces a las fuerzas de la ley!");
	new carid = GetPlayerVehicleID(playerid), closestcar = GetClosestCar(playerid,carid), engine, lights, alarm, doors, bonnet, boot, objective;
	if(!IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0)) return SendClientMessageEx(playerid,COLOR_GREY,"No estás cerca de ningún vehiculo.");
	if(PlayerVehicleInfo[closestcar][pvOwner])
	{
	    GetVehicleParamsEx(PlayerVehicleInfo[closestcar][pvId], engine, lights, alarm, doors, bonnet, boot, objective);
	    if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes tomar armas del maletero, si está cerrado! /v maletero para abrirlo.");
		PlayerVehicleInfo[closestcar][pvWeapons][0] = 0;
		PlayerVehicleInfo[closestcar][pvWeapons][1] = 0;
		PlayerVehicleInfo[closestcar][pvWeapons][2] = 0;
		SendClientMessageEx(playerid, COLOR_WHITE,  "Removiste todas las armas del maletero.");
	}
	return 1;
}

CMD:revive(playerid, params[])
{
	if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	if(Info[playerid][pAdmin] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /revive [playerid]");
		if(IsPlayerConnectedEx(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				format(string, sizeof(string), " Has revivido a %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, "Fuiste revivido por un administrador y se te devolvio las armas.");
				format(szMessage, sizeof(szMessage),"AdmCmdExe: %s a revivido al usuario %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_GENERAL, szMessage, 1);
				KillEMSQueue(giveplayerid);
				ClearAnimations(giveplayerid);
				SetPlayerWeapons(giveplayerid);
				SetHP(giveplayerid, 100);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está herido!");
		}
	}
	else NoAutorizado
	return 1;
}

CMD:spec(playerid, params[])
{
	if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	if(Info[playerid][pAdmin] >= 2)
	{
	    new userID;
		if(sscanf(params, "u", userID)) return SendClientMessage(playerid, COLOR_GREY, "USA: /spec [playerid]");
		else if(!IsPlayerConnectedEx(userID)) return SendClientMessage(playerid, COLOR_GREY, "* El jugador especificado no está conectado.");
		else
		{
			if(Info[playerid][pSpectating] == -1)
			{ 
				GetPlayerPos(playerid, Info[playerid][pPos_x], Info[playerid][pPos_y], Info[playerid][pPos_z]);
				Info[playerid][pInt] = GetPlayerInterior(playerid);
				Info[playerid][pVW] = GetPlayerVirtualWorld(playerid);
				Info[playerid][pChar] = GetPlayerSkin(playerid);
		    }
		    SendClientMessage(playerid, COLOR_GREY, "* Usa '/specoff' para dejar de spectear.");
		    Info[playerid][pSpectating] = userID;
		    TogglePlayerSpectating(playerid, true);
			SetPlayerInterior(playerid, GetPlayerInterior(userID));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(userID));
		    if(IsPlayerInAnyVehicle(userID)) { PlayerSpectateVehicle(playerid, GetPlayerVehicleID(userID)); }
		    else { PlayerSpectatePlayer(playerid, userID); }
			if(TutStep[userID] >= 1) SendClientMessageEx(playerid, COLOR_WHITE, "NOTA: Este jugador está en el tutorial, no considerar que usa Teleport Hack.");
		}
	}
	else NoAutorizado
	return 1;
}
CMD:specoff(playerid, params[])
{
	if(Info[playerid][pSpectating] != -1)
	{
		Info[playerid][pSpectating] = -1;
		TogglePlayerSpectating(playerid, false);
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, Info[playerid][pPos_x], Info[playerid][pPos_y], Info[playerid][pPos_z]);
		SetPlayerInterior(playerid, Info[playerid][pInt]);
		SetPlayerVirtualWorld(playerid, Info[playerid][pVW]);
  	    SetTimerEx("SetPlayerToAdminColor", 500, false, "i", playerid);
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No estás spectando a nadie.");
	return 1;
}
CMD:liberar(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if(Info[playerid][pAdmin] >= 3)
{
	new string[128], giveplayerid, reason[64];
	if(sscanf(params, "ds[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /liberar [playerid] [razón]");

	if(IsPlayerConnectedEx(giveplayerid))
	{
		new year, month,day;
		getdate(year, month, day);
		format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s fue liberado de prisión por %s, razón: %s(%d-%d-%d)", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason, month, day, year);
		Log("logs/admin.log", string);
		format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s fue liberado de prisión por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
		BroadCast(COLOR_LIGHTRED, string);
		Info[giveplayerid][pJailed] = 0;
		Info[giveplayerid][pWantedLevel] = 0;
		SetPlayerToTeamColor(giveplayerid);
		SetPlayerWantedLevel(giveplayerid, 0);
		Info[giveplayerid][pJailTime] = 0;
		Info[giveplayerid][pJailAdmin] -= 1;
		SetPlayerPos(giveplayerid, 1529.6,-1691.2,13.3);
		SetPlayerInterior(giveplayerid,0);
		Info[giveplayerid][pInt] = 0;
		SetPlayerVirtualWorld(giveplayerid, 0);
		Info[giveplayerid][pVW] = 0;
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador no conectado!");
}
else NoAutorizado
return 1;
}

CMD:activarlinea(playerid, params[])
{
    if(!Team_LSTV(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* No formas parte de CNN.");
    if(InLive == 0){
        SendClientMessageEx(playerid, COLOR_GREEN, "* Activaste el número 757, ahora la línea está abierta, ahora la gente puede llamar.");
        return InLive = 1;
	}
	else{
        InLive = 0;
        SendClientMessageEx(playerid, COLOR_GREEN, "* Desactivaste el número 757, ahora la línea está cerrada.");
	}
	return 1;
}
CMD:entrevista(playerid, params[])
{
	if(Team_LSTV(playerid))
	{
	    //if(shutdown == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Es sistema de CNN está caido." );
		if(TalkingLive[playerid] != INVALID_PLAYER_ID)
		{
			SendClientMessageEx(playerid, COLOR_GENERAL, "* Entrevista terminada.");
			SendClientMessageEx(TalkingLive[playerid], COLOR_GENERAL, "* Entrevista terminada.");
			TalkingLive[TalkingLive[playerid]] = INVALID_PLAYER_ID;
			TalkingLive[playerid] = INVALID_PLAYER_ID;
			return 1;
		}
		new string[128], giveplayerid;
		if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /entrevista [playerid]");
		if (IsPlayerConnectedEx(giveplayerid))
		{
			if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
				if(Info[giveplayerid][pEstado] >= 1 || Info[playerid][pEstado] >= 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hacer esto ahora.");
				}
				else
				{
					if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer una entrevista a ti mismo!"); return 1; }
					format(string, sizeof(string), "* Ofreciste a %s una entrevista.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_GENERAL, string);
					format(string, sizeof(string), "* %s te ha ofrecido una entrevista, usa /aceptar entrevista para aceptar.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
					LiveOffer[giveplayerid] = playerid;
				}
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está cerca tuyo.");
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "* Jugador especificado no inválido.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No eres un reportero!");
	return 1;
}

CMD:nr(playerid, params[])
{
	if(Team_LSTV(playerid))
	{
		new string[128];
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /nr [Texto]");
		new newcar = GetPlayerVehicleID(playerid);
		if(IsANewsCar(newcar) || IsPlayerInRangeOfPoint(playerid,7.0,1288.1742,-1044.1243,3359.8960))
		{
			if(Info[playerid][pRank] < 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Usted debe ser al menos rango 1");
			}
			else
			{
				format(string, sizeof(string), "[CNN] %s: %s", GetPlayerNameEx(playerid), params);
				OOCNews(COLOR_SANEWS,string);
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "* No eres en una camioneta de noticias o helicóptero o en el estudio.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No formas parte de CNN!");
	return 1;
}

CMD:trabajos(playerid, params[])
{
if(EmpleosPOS(playerid))
{
	ShowPlayerDialog(playerid, JOBFINDMENU, DIALOG_STYLE_LIST, ""COL_GENERAL"Buscar - {FFFFFF}Trabajos Legales","Bartender\nPizza Boy\nCamionero\nVendedor de Moviles\nTaxista\nCosechador\nBodyguard\nTraficante\nPescador\nLeñador\nObrero", "Ok", "Cancelar");
}
else SendClientMessageEx(playerid, COLOR_GREY, "No estas en el Centro de Empleos!");
return 1;
}

CMD:mihq(playerid, params[])
{
	if(Info[playerid][pMember] == 0) return SendClientMessage(playerid, COLOR_WHITE, "No perteneces a una faccion!");
 	SetPVarInt(playerid, "FINDHQ", 1);
 	switch(Info[playerid][pMember])
 	{
 	    case 1: SetPlayerCheckpoint(playerid, 1555.340820, -1675.515014, 16.195312, 5.0);//
 	    case 2: SetPlayerCheckpoint(playerid, 326.117126, -1515.372924, 36.032508, 5.0);//
 	    case 3: SetPlayerCheckpoint(playerid, 2755.489746, -2382.392089, 13.632812, 5.0);//
 	    case 4: SetPlayerCheckpoint(playerid, 1172.455200, -1324.151123, 15.404762, 5.0);//
 	    case 5: SetPlayerCheckpoint(playerid, 649.325195, -1353.783691, 14.163208, 5.0);//
 	    case 6: SetPlayerCheckpoint(playerid, 1830.3441,  -1415.8441,   13.6016, 5.0);//
 	    case 7: SetPlayerCheckpoint(playerid, 1481.305419, -1767.187011, 15.195590, 5.0);//
 	    case 8: SetPlayerCheckpoint(playerid, 2770.658203, -1628.688964, 12.177453, 5.0);//
 	    case 9: SetPlayerCheckpoint(playerid, 690.846191, -1275.888916, 13.560194, 5.0);//
 	    case 10: SetPlayerCheckpoint(playerid, 1123.440307, -2037.284301, 69.886955, 5.0);//
 	    case 11: SetPlayerCheckpoint(playerid, 2495.351318, -1690.724243, 14.765625, 5.0);//
 	    case 12: SetPlayerCheckpoint(playerid, 2000.118896, -1114.414794, 27.125000, 5.0);//
 	    case 13: SetPlayerCheckpoint(playerid, 2324.340820, -1280.967285, 27.982196, 5.0);//
	}
	SendClientMessage(playerid, COLOR_WHITE, "HQ marcada en el minimapa.");
	return 1;
}

CMD:setmoney(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if (Info[playerid][pAdmin] > 5)
{
	new string[128], giveplayerid, money;
	if(sscanf(params, "dd", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /setmoney [playerid] [dinero]");
	if(IsPlayerConnectedEx(giveplayerid))
	{
		ResetPlayerCash(giveplayerid);
		GivePlayerCash(giveplayerid, money);
		format(string, sizeof(string), "Estableciste el dinero de %s a $%d !",GetPlayerNameEx(giveplayerid),money);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s estableción el dinero de %s a $%d (/setmoney)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid),money);
		Log("logs/stats.log", string);

	}
}
else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
return 1;
}

CMD:darestilopelea(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if (Info[playerid][pAdmin] >= 5)
{
	new string[128], giveplayerid, fightstyle;
	if(sscanf(params, "dd", giveplayerid, fightstyle))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USA: /darestilopelea [playerid] [fightstyle]");
		SendClientMessageEx(playerid, COLOR_WHITE, "Fighting styles: 4, 5, 6, 7, 15, 26.");
		return 1;
	}

	if(fightstyle > 3 && fightstyle < 8 || fightstyle == 15 || fightstyle == 26)
	{
		format(string, sizeof(string), " Tu estilo de pelea ha sido cambiado al ID %d.", fightstyle);
		SendClientMessageEx(giveplayerid,COLOR_GRAD1,string);
		format(string, sizeof(string), " Cambiaste el estilo de pelea de %s a %d.", GetPlayerNameEx(giveplayerid), fightstyle);
		SendClientMessageEx(playerid,COLOR_GRAD1,string);
		SetPlayerFightingStyle(giveplayerid, fightstyle);
		Info[playerid][pFStyle] = fightstyle;
		return 1;
	}
}
else NoAutorizado
return 1;
}

CMD:id(playerid, params[])
{
new string[128], giveplayerid;
if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /id [ID]");
if(IsPlayerConnectedEx(giveplayerid))
{
	format(string, sizeof(string), "(ID: %d) - (Nombre: %s) - (Nivel: %d) - (Ping: %d)", giveplayerid, GetPlayerNameEx(giveplayerid),  Info[giveplayerid][pLevel], GetPlayerPing(giveplayerid));
	SendClientMessageEx(playerid, COLOR_WHITE, string);
}
else SendClientMessageEx(playerid, COLOR_WHITE, "ID No válida.");
return 1;
}

CMD:shoplaser(playerid, params[])
{
if (Info[playerid][pShopTech] != 1) return SendClientMessageEx(playerid, COLOR_GREY, " No puedes usar este comando.");
new string[128], giveplayerid, slot, color[32], invoice[64];
if(sscanf(params, "ddss[64]", giveplayerid, slot, color, invoice)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /shoplaser [playerid] [slot(0-9)] [red/green/orange/yellow/pink/blue] [factura #]");

if(strcmp(color,"red",true) == 0)
{
	PlayerToyInfo[giveplayerid][slot][ptModelID] = 18643;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
	PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
}
else if(strcmp(color,"green",true) == 0)
{
	PlayerToyInfo[giveplayerid][slot][ptModelID] = 19083;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
	PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
}
else if(strcmp(color,"orange",true) == 0)
{
	PlayerToyInfo[giveplayerid][slot][ptModelID] = 19082;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
	PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
}
else if(strcmp(color,"yellow",true) == 0)
{
	PlayerToyInfo[giveplayerid][slot][ptModelID] = 19084;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
	PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
}
else if(strcmp(color,"pink",true) == 0)
{
	PlayerToyInfo[giveplayerid][slot][ptModelID] = 19081;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
	PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
}
else if(strcmp(color,"blue",true) == 0)
{
	PlayerToyInfo[giveplayerid][slot][ptModelID] = 19080;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
	PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
}
format(string, sizeof(string), "Recibiste un laser de color %s en el slot %d, usa /toys para verlo.", color, slot);
SendClientMessageEx(giveplayerid, COLOR_LIGHTGREEN, string);
format(string, sizeof(string), "Le diste a %s laser de color %s en el slot %d", GetPlayerNameEx(giveplayerid), color, slot);
SendClientMessageEx(playerid, COLOR_LIGHTGREEN, string);
format(string, sizeof(string), "[SHOPLASER] %s dió %s un laser toy - Pagó fue de %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
Log("logs/shoplog.log", string);
return 1;
}


CMD:congelar(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if (Info[playerid][pAdmin] >= 1)
{
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /congelar [playerid]");
	if(IsPlayerConnectedEx(giveplayerid))
	{
		if(Info[giveplayerid][pAdmin] > Info[playerid][pAdmin]) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes congelar a un administrador de mayor nivel.");
		TogglePlayerControllable(giveplayerid, 0);
		SetPVarInt(giveplayerid, "IsFrozen", 1);
		format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s fue congelado por %s",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
		return ABroadCast(COLOR_GENERAL,string,1);
	}
}
else NoAutorizado
return 1;
}

CMD:descongelar(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if (Info[playerid][pAdmin] >= 1)
{
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /descongelar [playerid]");
	if(IsPlayerConnectedEx(giveplayerid))
	{
		//Descongelamiento
		DeletePVar(giveplayerid, "IsFrozen");
		TogglePlayerControllable(giveplayerid, 1);
		format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s fue descongelado por %s.",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
		ABroadCast(COLOR_GENERAL,string,1);
	}
	else return SendClientMessageEx(playerid, COLOR_WHITE, "Jugador especificado ínvalido.");
}
else NoAutorizado
return 1;
}

CMD:a(playerid, params[])
{
    if((noac))
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: (/a)dmin [Admin Chat]");
	switch(Info[playerid][pAdmin])
	{
	   	case 1: format(szMessage, sizeof(szMessage), ""COL_YELLOW"[AC] {72E663}Moderador %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
	   	case 2: format(szMessage, sizeof(szMessage), ""COL_YELLOW"[AC] {3EDC29}Mod Global %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
		case 3: format(szMessage, sizeof(szMessage), ""COL_YELLOW"[AC] {16BC00}Mod Lider %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
		case 4: format(szMessage, sizeof(szMessage), ""COL_YELLOW"[AC] {7EC4F3}Admin Junior %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
		case 5: format(szMessage, sizeof(szMessage), ""COL_YELLOW"[AC] {3FA8EE}Administrador %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
		case 6: format(szMessage, sizeof(szMessage), ""COL_YELLOW"[AC] {1292E7}Admin General %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
		case 7: format(szMessage, sizeof(szMessage), ""COL_YELLOW"[AC] {F68535}Director %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
		case 8: format(szMessage, sizeof(szMessage), ""COL_YELLOW"[AC] {F63535}Director General %s:{FFFFFF} %s", GetPlayerNameEx(playerid), params);
		default: return NoAutorizado
	}
	SendAdminMessage(COLOR_GRAD1, szMessage);
	return 1;
}

CMD:weatherall(playerid, params[])
{
if(Info[playerid][pAdmin] < 5) return NoAutorizado
new weather, string[84];
if(sscanf(params, "d", weather)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /weatherall [weatherid]");
if(weather < 0||weather > 45) { SendClientMessageEx(playerid, COLOR_GREY, "Nota: 0 a 45!"); return 1; }
SetWeather(weather);
gWeather = weather;
format(string, 256, "AdmCdmExe: %s cambió el clima al ID %d", GetPlayerNameEx(playerid), gWeather);
ABroadCast(COLOR_GENERAL,string,4);
return 1;
}

CMD:gotoco(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if(Info[playerid][pAdmin] >= 1)
{
	new Float: pos[3], int;
	if(sscanf(params, "fffd", pos[0], pos[1], pos[2], int)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /gotoco [coordenada x] [coordenada y] [coordenada z] [interior]");
	SendClientMessageEx(playerid, COLOR_WHITE, "SERVER: Fuiste teletransportado a las coordenadas establecidas.");
	SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	SetPlayerInterior(playerid, int);
}
return 1;
}

CMD:bar(playerid, params[]){
if(IsACop(playerid)){
	if(IsPlayerInAnyVehicle(playerid)){
		return SendClientMessageEx(playerid, COLOR_GREY, "Tienes que estar en el piso para usar este comando");
	}
	if(Info[playerid][pRank] < 3){
		return SendClientMessageEx(playerid, COLOR_GREY, "Necesitas ser mayor de rango 3.");
	}
	new Float:Position[4];
	for(new i; i<MAX_BARRICADES; i++){
		if(Barricade[i] == 0){
			GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
			GetPlayerFacingAngle(playerid, Position[3]);
			Barricade[i] = CreateDynamicObject(981, Position[0]-1, Position[1], Position[2], 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
			SetPlayerPos(playerid, Position[0], Position[1], Position[2]+5);
			new zone[MAX_ZONE_NAME];
			GetPlayer3DZone(playerid, zone, sizeof(zone));
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "Todas las barreras disponibles se han desplegado.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "No eres SAPD/SAEM/FBI.");
return 1;
}

CMD:bar2(playerid, params[]){
if(IsACop(playerid)){
	if(IsPlayerInAnyVehicle(playerid)){
		return SendClientMessageEx(playerid, COLOR_GREY, "Tienes que estar en el piso para usar este comando");
	}
	if(Info[playerid][pRank] < 3){
		return SendClientMessageEx(playerid, COLOR_GREY, "Necesitas ser mayor de rango 3.");
	}
	new Float:Position[4];
	for(new i; i<MAX_BARRICADES; i++){
		if(Barricade[i] == 0){
			GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
			GetPlayerFacingAngle(playerid, Position[3]);
			Barricade[i] = CreateDynamicObject(1459, Position[0], Position[1], Position[2]-0.5, 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
			SetPlayerPos(playerid, Position[0]-1, Position[1], Position[2]);
			new zone[MAX_ZONE_NAME];
			GetPlayer3DZone(playerid, zone, sizeof(zone));
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "Todas las barreras disponibles se han desplegado.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "No eres SAPD/SAEM/FBI.");
return 1;
}

CMD:bar3(playerid, params[]){
if(IsACop(playerid)){
	if(IsPlayerInAnyVehicle(playerid)){
		return SendClientMessageEx(playerid, COLOR_GREY, "Tienes que estar en el piso para usar este comando");
	}
	if(Info[playerid][pRank] < 3){
		return SendClientMessageEx(playerid, COLOR_GREY, "Necesitas ser mayor de rango 3.");
	}
	new Float:Position[4];
	for(new i; i<MAX_BARRICADES; i++){
		if(Barricade[i] == 0){
			GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
			GetPlayerFacingAngle(playerid, Position[3]);
			Barricade[i] = CreateDynamicObject(978, Position[0], Position[1], Position[2]-0.5, 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
			SetPlayerPos(playerid, Position[0]-1, Position[1], Position[2]);
			new zone[MAX_ZONE_NAME];
			GetPlayer3DZone(playerid, zone, sizeof(zone));
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "Todas las barreras disponibles se han desplegado.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "No eres SAPD/SAEM/FBI.");
return 1;
}

CMD:bengala(playerid, params[]){
if(IsACop(playerid)){
	if(IsPlayerInAnyVehicle(playerid)){
		return SendClientMessageEx(playerid, COLOR_GREY, "Tienes que estar en el piso para usar este comando");
	}
	if(Info[playerid][pRank] < 3){
		return SendClientMessageEx(playerid, COLOR_GREY, "Necesitas ser mayor de rango 3.");
	}
	new Float:Position[4];
	for(new i; i<MAX_BARRICADES; i++){
		if(Barricade[i] == 0){
			GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
			GetPlayerFacingAngle(playerid, Position[3]);
			Barricade[i] = CreateDynamicObject(18728, Position[0], Position[1], Position[2]-2.8, 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
			new zone[MAX_ZONE_NAME];
			GetPlayer3DZone(playerid, zone, sizeof(zone));
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "Todas las barreras disponibles se han desplegado.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "No eres SAPD/SAEM/FBI.");
return 1;
}

CMD:cono(playerid, params[]){
if(IsACop(playerid)){
	if(IsPlayerInAnyVehicle(playerid)){
		SendClientMessageEx(playerid, COLOR_GREY, "Tienes que estar en el piso para usar este comando");
		return 1;
	}
	if(Info[playerid][pRank] < 3){
		SendClientMessageEx(playerid, COLOR_GREY, "Necesitas ser mayor de rango 3.");
		return 1;
	}
	new Float:Position[4];
	for(new i; i<MAX_BARRICADES; i++){
		if(Barricade[i] == 0){
			GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
			GetPlayerFacingAngle(playerid, Position[3]);
			Barricade[i] = CreateDynamicObject(1238, Position[0], Position[1], Position[2]-0.7, 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
			new zone[MAX_ZONE_NAME];
			GetPlayer3DZone(playerid, zone, sizeof(zone));
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "Todas las barreras disponibles se han desplegado.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "No eres SAPD/SAEM/FBI.");
return 1;
}

CMD:qb(playerid, params[]){
if(IsACop(playerid)){
	if(IsPlayerInAnyVehicle(playerid)){
		return SendClientMessageEx(playerid, COLOR_GREY, "Tienes que estar en el piso para usar este comando");
	}
	if(Info[playerid][pRank] < 3){
		return SendClientMessageEx(playerid, COLOR_GREY, "Necesitas ser mayor de rango 3.");
	}
	new Float:Position[3];
	for(new i; i<MAX_BARRICADES; i++){
		GetDynamicObjectPos(Barricade[i], Position[0], Position[1], Position[2]);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Position[0], Position[1], Position[2])){
			DestroyDynamicObject(Barricade[i]);
			Barricade[i] = 0;
			new zone[MAX_ZONE_NAME];
			GetPlayer3DZone(playerid, zone, sizeof(zone));
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "No estás cerca de las barricadas.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "No eres SAPD/SAEM/FBI.");
return 1;
}

CMD:spikes(playerid, params[])
{
if(IsACop(playerid))
{
	if(Info[playerid][pRank] >= 3)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Spikes Actuales:");
		for(new i, string[58 + MAX_PLAYER_NAME]; i < sizeof(SpikeStrips); i++)
		{
			if(SpikeStrips[i][sX] != 0) // Checking for next available ID.
			{
				format(string, sizeof(string), "HQ: Spike ID: %d | Localización: %s | Puesto por: %s", i, SpikeStrips[i][sDeployedAt], SpikeStrips[i][sDeployedBy]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, " Debes ser rango mayor a 3!");
}
else SendClientMessageEx(playerid, COLOR_GREY, "No eres SAPD/SAEM/FBI.");
return 1;
}

CMD:pspikes(playerid, params[])
{
if(IsACop(playerid))
{
	if(Info[playerid][pRank] >= 3)
	{
		for(new i; i < sizeof(SpikeStrips); i++)
		{
			if(SpikeStrips[i][sX] == 0)
			{
				new
					Float: f_TempAngle,
					string[128];

				GetPlayerPos(playerid, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]);
				GetPlayerFacingAngle(playerid, f_TempAngle);
				SpikeStrips[i][sObjectID] = CreateDynamicObject(2899, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]-0.8, 0.0, 0.0, f_TempAngle);
				GetPlayer3DZone(playerid, SpikeStrips[i][sDeployedAt], MAX_ZONE_NAME);
				SpikeStrips[i][sDeployedBy] = GetPlayerNameEx(playerid);
				format(string,sizeof(string),"Spike ID: %d fue creado exitosamente.", i);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "HQ: Un spike fue puesto por %s en %s.", GetPlayerNameEx(playerid), SpikeStrips[i][sDeployedAt]);
				foreach(Player, x)
				{
					if(IsACop(x))
					{
						SendClientMessageEx(x, TEAM_BLUE_COLOR, string);
						if (Info[x][pRank] >= 3)
						{
							SendClientMessageEx(x, COLOR_GRAD1, "Puedes remover el spike usando /qspikes.");
						}
					}
				}
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "No es posible generar más spikes, límite es de 5." );
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, " Debes ser rango mayor a 3!");
}
else SendClientMessageEx(playerid, COLOR_GREY, "No eres SAPD/SAEM/FBI.");
return 1;
}

CMD:qspikes(playerid, params[])
{
if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /qspike [spikeid]");

if(IsACop(playerid))
{
	if(Info[playerid][pRank] >= 3)
	{
		new id = strval(params);
		if(!(0 <= id <= sizeof(SpikeStrips)) || SpikeStrips[id][sX] == 0) {
			return SendClientMessageEx(playerid, COLOR_WHITE, "Spike ID Inválido.");
		}
		else
		{
			new string[43 + MAX_PLAYER_NAME + MAX_ZONE_NAME];
			DestroyDynamicObject(SpikeStrips[id][sObjectID]);
			SpikeStrips[id][sX] = 0; SpikeStrips[id][sY] = 0; SpikeStrips[id][sZ] = 0;
			SpikeStrips[id][sObjectID] = INVALID_OBJECT_ID;
			format(string,sizeof(string),"Spike ID: %d borrado.", id);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			new zone[MAX_ZONE_NAME];
			GetPlayer3DZone(playerid, zone, sizeof(zone));
			format(string, sizeof(string), "HQ: Un spike a sido borrado por %s en %s.", GetPlayerNameEx(playerid), zone);
			foreach(Player, x)
			{
				if(IsACop(x)){ SendClientMessageEx(x, TEAM_BLUE_COLOR, string); }
			}
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, " Debes ser rango mayor a 3!");
}
else SendClientMessageEx(playerid, COLOR_GREY, "No eres SAPD/SAEM/FBI.");
return 1;
}

CMD:leveluno(playerid, params[])
{
if(Info[playerid][pAdmin] >= 1)
{
	SendClientMessageEx(playerid,COLOR_WHITE,"Lista de todos los niveles 1");
	new szNoobs[14 + MAX_PLAYER_NAME];
	foreach(Player, i) if(Info[i][pLevel] == 1)
	{
		format(szNoobs, sizeof(szNoobs), "* %s (ID %i)", GetPlayerNameEx(i), i);
		SendClientMessageEx(playerid, COLOR_WHITE, szNoobs);
	}
}
return 1;
}


CMD:dar(playerid, params[])
{
new string[128], giveplayerid, choice[32], amount;
if(sscanf(params, "ds[32]d", giveplayerid, choice, amount))
{
	SendClientMessageEx(playerid, COLOR_WHITE, "USA: /dar [playerid] [nombre] [monto]");
	SendClientMessageEx(playerid, COLOR_GREY,  "* Crack, Materiales, Fichas, Chaleco, Hierba");
	return 1;
}

if(IsPlayerConnectedEx(giveplayerid))
{
	if(giveplayerid != INVALID_PLAYER_ID)
	{
		if(amount < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes la cantidad que pusiste.");
		if (!ProxDetectorS(5.0, playerid, giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "El jugador no está cerca tuyo.");
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este comando contigo mismo!");
		if (strcmp(choice, "materiales", true) == 0)
		{
			if(Info[playerid][pMats] >= amount)
			{
				format(string, sizeof(string), "Recibiste %d materiales de %s.", amount, GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				Info[giveplayerid][pMats] += amount;
				Info[playerid][pMats] -= amount;
				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
				format(string, sizeof(string), "%s(IP:%s) has given %s(IP:%s) %d materials.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
				Log("logs/pay.log", string);
				if(Info[playerid][pAdmin] >= 2)
				{
					format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d materials.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("logs/admingive.log", string);
				}
				format(string, sizeof(string), "Le diste a %s, %d materiales.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* %s le da a %s algo de materiales.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "No tienes tanto!");
		}
		if (strcmp(choice, "hierba", true) == 0)
		{
			if(Info[playerid][pPot] >= amount)
			{
				if(amount + Info[giveplayerid][pPot] >= 51 )
				{
					SendClientMessageEx( playerid, COLOR_GREY, "Este jugador no puede tener más de 50 gramos de hierba!" );
					return 1;
				}
				new level = Info[playerid][pDrugsSkill];
				if(level >= 0 && level <= 50)
				{ if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 10 con tu nivel de skill!"); return 1; } }
				else if(level >= 51 && level <= 100)
				{ if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 20 con tu nivel de skill!"); return 1; } }
				else if(level >= 101 && level <= 200)
				{ if(amount < 1 || amount > 30) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 30 con tu nivel de skill!"); return 1; } }
				else if(level >= 201 && level <= 400)
				{ if(amount < 1 || amount > 40) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 40 con tu nivel de skill!"); return 1; } }
				else if(level >= 401)
				{ if(amount < 1 || amount > 50) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 50 con tu nivel de skill!"); return 1; } }
				format(string, sizeof(string), "Recibiste %d de hierba de parte de %s.", amount, GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				Info[giveplayerid][pPot] += amount;
				Info[playerid][pPot] -= amount;
				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
				format(string, sizeof(string), "%s(IP:%s) has given %s(IP:%s) %d pot.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
				Log("logs/pay.log", string);
				if(Info[playerid][pAdmin] >= 2)
				{
					format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d pot.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("logs/admingive.log", string);
				}
				format(string, sizeof(string), "Le diste a %s, %d de hierba.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* %s le dá a %s algo de hierba.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "No tienes tanto hierba!");
		}
		if (strcmp(choice, "fichas", true) == 0)
		{
			if(Info[playerid][pPaintTokens] >= amount)
			{
				format(string, sizeof(string), "Recibiste %d fichas de paintball de %s.", amount, GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				Info[giveplayerid][pPaintTokens] += amount;
				Info[playerid][pPaintTokens] -= amount;
				format(string, sizeof(string), "Le diste a %s, %d fichas de paintbal.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* %s le da a %s unas fichas de paintball.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "No tienes tantas fichas!");
		}
		if (strcmp(choice, "chaleco", true) == 0)
		{
            new Float:xC,Float:xD;
			GetPlayerArmour(playerid, xC);
	    	GetPlayerArmour(giveplayerid, xD);
			if(xC > 0)
			{
   				if(xC > xD)
		        {
       				format(string, sizeof(string), "* %s le da su chaleco antibalas a %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	        		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        	GiveArmorToPlayer(playerid, 0);
		        	GiveArmorToPlayer(giveplayerid, xC);
		        }
		        else return SendClientMessageEx(playerid, COLOR_WHITE, "¡El jugador tiene una cantidad de chaleco antibalas superior al tuyo!");
		    }
		    else return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un chaleco antibalas para dar.");
		}
		if (strcmp(choice, "crack", true) == 0)
		{
			if(Info[playerid][pCrack] >= amount)
			{
				if(amount + Info[giveplayerid][pCrack] >= 26 )
				{
					SendClientMessageEx( playerid, COLOR_GREY, "Este jugador no puede llevar más de 25 de crack!" );
					return 1;
				}
				new level = Info[playerid][pDrugsSkill];
				if(level >= 0 && level <= 50)
				{ if(amount < 1 || amount > 5) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes dar más de 5 con tu nivel de skill!"); return 1; } }
				else if(level >= 51 && level <= 100)
				{ if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "  No puedes dar más de 10 con tu nivel de skill!"); return 1; } }
				else if(level >= 101 && level <= 200)
				{ if(amount < 1 || amount > 15) { SendClientMessageEx(playerid, COLOR_GREY, "  No puedes dar más de 15 con tu nivel de skill!"); return 1; } }
				else if(level >= 201 && level <= 400)
				{ if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "  No puedes dar más de 20 con tu nivel de skill!"); return 1; } }
				else if(level >= 401)
				{ if(amount < 1 || amount > 25) { SendClientMessageEx(playerid, COLOR_GREY, "  Sólo se puede dar 25 máximo!"); return 1; } }
				format(string, sizeof(string), "Recibiste %d gramos de crack de %s.", amount, GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				Info[giveplayerid][pCrack] += amount;
				Info[playerid][pCrack] -= amount;
				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
				format(string, sizeof(string), "%s(IP:%s) has given %s(IP:%s) %d crack.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
				Log("logs/pay.log", string);
				if(Info[playerid][pAdmin] >= 2)
				{
					format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d crack.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("logs/admingive.log", string);
				}
				format(string, sizeof(string), "Le diste a %s, %d gramos de Crack.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* %s le da a %s algo de crack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "No tienes tanto!");
			return 1;
		}
	}
}
return 1;
}

CMD:recargar(playerid, params[])
{
if(Team_Mecanicos(playerid))
{
	new string[128];
	if(Info[playerid][pTriageTime] >= 1)
	{
		format(string, sizeof(string), "Debes esperar %d segundos!", Info[playerid][pTriageTime]);
		return SendClientMessageEx(playerid, COLOR_WHITE,string);
	}
	new giveplayerid, money;
	if(sscanf(params, "dd", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /recargar [playerid] [precio]");
	if(!(money >= 1 && money < 100000))
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "* Precio determinado inválido - no puede ser inferior a 1 o superior a $ 99.999.");
	}
	if(IsPlayerConnectedEx(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid) && IsPlayerInAnyVehicle(giveplayerid))
		{
			if(giveplayerid != playerid)
			{
				format(string, sizeof(string), "* Ofreciste %s llenar el tanque de tu coche por $%d.",GetPlayerNameEx(giveplayerid),money);
				SendClientMessageEx(playerid, COLOR_GENERAL, string);
				format(string, sizeof(string), "* %s te ha ofrecido llenar tu coche por $%d, usa /aceptar recarga para aceptar.",GetPlayerNameEx(playerid),money);
				SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
				Info[playerid][pTriageTime] = 60;
				RefillOffer[giveplayerid] = playerid;
				RefillPrice[giveplayerid] = money;
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando contigo mismo!"); return 1;
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está cerca de ti, o no está en un coche.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* Jugador especificado no está conectado.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "* No eres mecánico.");
return 1;
}

/*CMD:fix(playerid, params[])
{
	if(Team_Mecanicos(playerid))
	{
		new string[32 + MAX_PLAYER_NAME];
	    if(IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando en un vehículo.");
		    return 1;
		}
		if( Info[playerid][pTriageTime] > 0 )
		{
			format(string, sizeof(string), "Debes esperar %d segundos!", Info[playerid][pTriageTime]);
	 		SendClientMessageEx(playerid, COLOR_WHITE,string);
	 	}
		else if(GetPVarInt(playerid, "EventToken"))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando en un evento.");
		}
		else
		{
			new closestcar = GetClosestCar(playerid);
			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 10.0))
			{
				if(!IsABike(closestcar) && !IsAPlane(closestcar))
				{
					new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
					if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Este vehículo necesita tener el capó abierto para repararlo.");
						return 1;
					}
				}
				Info[playerid][pTriageTime] = 60;
				SetVehicleHealth(closestcar, 1000.0);
				format(string, sizeof(string), "* %s ha reparado el vehículo.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "No estás cerca de un vehículo.");
		}
	}
	else return SendClientMessageEx(playerid, COLOR_WHITE, "No eres un mecánico!" );
	return 1;
}*/

CMD:goto(playerid, params[])
{
if(InfoEvento[EventCreator] == playerid || Info[playerid][pAdmin] >= 5)
{
	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USA: /goto [location]");
		SendClientMessageEx(playerid, COLOR_WHITE, "Locations 1: LS, SF, LV");
		SendClientMessageEx(playerid, COLOR_WHITE, "Locations 2: stadium1, stadium2, stadium3, stadium4, int1, mall");
		SendClientMessageEx(playerid, COLOR_WHITE, "Locations 3: bank, allsaints, countygen, gym, fbi, prison, rc, pubvip, mark");
		SendClientMessageEx(playerid, COLOR_WHITE, "Locations 4: garage1 (grande), garage2 (mediano), garage3 (chico)");
		return 1;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto mientras estan espectando.");
		return 1;
	}
	if(strcmp(params,"garage1",true) == 0)
	{
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1328.0479,-1590.8223,10037.3408);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1328.0479,-1590.8223,10037.3408);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"garage2",true) == 0)
	{
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1349.7227,-1553.7635,10037.3408);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1349.7227,-1553.7635,10037.3408);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"garage3",true) == 0)
	{
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1332.9047,-1559.4679,10037.3398);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1332.9047,-1559.4679,10037.3398);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"ls",true) == 0)
	{
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"sf",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, -1417.0,-295.8,14.1);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"lv",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1699.2,1435.1, 10.7);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"bank",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1487.91, -1030.60, 23.66);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1487.91, -1030.60, 23.66);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"allsaints",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1192.78, -1292.68, 13.38);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1192.78, -1292.68, 13.38);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"countygen",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 2000.05, -1409.36, 16.99);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 2000.05, -1409.36, 16.99);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"gym",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 2227.60, -1674.89, 14.62);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 2227.60, -1674.89, 14.62);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"fbi",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 344.77,-1526.08,33.28);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 344.77,-1526.08,33.28);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"rc",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1253.70, 343.73, 19.41);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1253.70, 343.73, 19.41);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
 	else if(strcmp(params,"pubvip",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1814.42, -1575.05, 13.54);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1814.42, -1575.05, 13.54);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"prison",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 112.67, 1917.55, 18.72);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 112.67, 1917.55, 18.72);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"stadium1",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, -1424.93, -664.59, 1059.86);
			LinkVehicleToInterior(tmpcar, 4);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, -1424.93, -664.59, 1059.86);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,4);
		Info[playerid][pInt] = 4;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"stadium2",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, -1395.96, -208.20, 1051.28);
			LinkVehicleToInterior(tmpcar, 7);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, -1395.96, -208.20, 1051.28);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,7);
		Info[playerid][pInt] = 7;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"stadium3",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, -1410.72, 1591.16, 1052.53);
			LinkVehicleToInterior(tmpcar, 14);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, -1410.72, 1591.16, 1052.53);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,14);
		Info[playerid][pInt] = 14;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"stadium4",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, -1394.20, 987.62, 1023.96);
			LinkVehicleToInterior(tmpcar, 15);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, -1394.20, 987.62, 1023.96);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,15);
		Info[playerid][pInt] = 15;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"int1",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
			LinkVehicleToInterior(tmpcar, 1);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1416.107000,0.268620,1000.926000);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,1);
		Info[playerid][pInt] = 1;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
	else if(strcmp(params,"mark",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
			LinkVehicleToInterior(tmpcar, TeleportDestInt[playerid]);
		}
		else
		{
			SetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
		}
		SetPlayerInterior(playerid,TeleportDestInt[playerid]);
		Info[playerid][pInt] = TeleportDestInt[playerid];
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
	}
	else if(strcmp(params,"mall",true) == 0)
	{
	 	if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, 1133.71,-1464.52,15.77);
			LinkVehicleToInterior(tmpcar, 0);
			SetVehicleVirtualWorld(tmpcar, 0);
			TelePos[playerid][0] = 0.0;TelePos[playerid][0] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, 1133.71,-1464.52,15.77);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
		Info[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		Info[playerid][pVW] = 0;
	}
}
else
{
	SendClientMessageEx(playerid, COLOR_WHITE, "No autorizado!");
}
return 1;
}

CMD:adminevento(playerid, params[])
{
if (InfoEvento[EventCreator] == playerid || Info[playerid][pAdmin] >= 5)
{
    SendClientMessageEx(playerid, COLOR_GENERAL,"_______________________________________");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** EVENTO *** Escribe uno de estos comandos para más información");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** EVENTO *** /eventopos /infoevento /empezarevento /lockevento /finevento /anunciar /goevento /salirevento");
	SendClientMessageEx(playerid, COLOR_GENERAL,"_______________________________________");
}
return 1;
}

CMD:eventostaff(playerid, params[]){
if( Info[ playerid ][ pAdmin ] >= 1){
    if(InfoEvento[EventJoinStaff] == 1){
        new bool:breakingloop = false, newid = 999;
        for(new i=0;i<5;i++){
            if(!breakingloop){
                if(InfoEvento[EventStaff][i] == 999){
                    breakingloop = true;
                    newid = i;
                }
            }
        }
        if(newid != 999){
            SetPVarInt( playerid, "EventToken", 1 );
            GetPlayerHealth(playerid, EventFloats[playerid][4]);
            GetPlayerArmour(playerid, EventFloats[playerid][5]);
            EventLastVW[playerid] = GetPlayerVirtualWorld(playerid);
            EventLastInt[playerid] = GetPlayerInterior(playerid);
            GetPlayerPos(playerid, EventFloats[playerid][1], EventFloats[playerid][2], EventFloats[playerid][3]);
            GetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
            SetPlayerPos( playerid, InfoEvento[ EventPositionX ], InfoEvento[ EventPositionY ], InfoEvento[ EventPositionZ ] );
            SetPlayerInterior( playerid, InfoEvento[ EventInterior ] );
            SetHP( playerid, 999999 );
            SetPlayerVirtualWorld( playerid, InfoEvento[ EventWorld ] );
            GivePlayerValidWeapon(playerid, 38, 99999);
            InfoEvento[EventStaff][newid] = playerid;
            SendClientMessageEx( playerid, COLOR_WHITE, "Te has unido al staff del evento." );
        }
        else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes unirte, el max es 5.");
    }
}
return 1;
}

CMD:salirevento(playerid, params[])
{
if( GetPVarInt( playerid, "EventToken" ) == 1 ) {
    if( InfoEvento[ EventStatus ] == 1 || InfoEvento[ EventStatus ] == 2 ) {
        SendClientMessageEx( playerid, COLOR_WHITE, "No se puede dejar el evento en esta etapa del acontecimiento." );
        return 1;
    }
    ResetPlayerWeapons( playerid );
    SetPVarInt(playerid, "EventToken", 0);
    SetPlayerWeapons(playerid);
    SetPlayerToTeamColor(playerid);
    SetPlayerSkin(playerid, Info[playerid][pChar]);
    SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
    SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
    SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
    SetPlayerInterior(playerid,EventLastInt[playerid]);
    SetHP(playerid, EventFloats[playerid][4]);
    GiveArmorToPlayer(playerid, EventFloats[playerid][5]);
    for(new i = 0; i < 6; i++) {
        EventFloats[playerid][i] = 0.0;
    }
    EventLastVW[playerid] = 0;
    EventLastInt[playerid] = 0;
    SendClientMessageEx( playerid, COLOR_GENERAL, "* Saliste del evento." );
}
return 1;
}

CMD:eventopos(playerid, params[]){
if(Info[playerid][pAdmin] >= 5){
	if(InfoEvento[EventCreator] == playerid || Info[playerid][pAdmin] >= 4){
		new string[128];
		GetPlayerPos(playerid, InfoEvento[EventPositionX], InfoEvento[EventPositionY], InfoEvento[EventPositionZ]);
		InfoEvento[EventInterior] = GetPlayerInterior(playerid);
		InfoEvento[EventWorld] = GetPlayerVirtualWorld(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "Ha ajustado la posición del evento, escriba /infoevento para cambiar las propiedades del evento.");
		InfoEvento[EventJoinStaff] = 1;
		format(string, sizeof( string ), ""COL_BLUE"Administración >"COL_WHITE" %s ha empezado el evento, usá /eventostaff si quieres ser del staff del evento.", GetPlayerNameEx(playerid) );
		ABroadCast(COLOR_GRAD1, string, 2);
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás haciendo un evento o no eres el nivel administrativo correcto.");
}
return 1;
}

CMD:tipoevento(playerid, params[]){
if(Info[playerid][pAdmin] >= 5){
	if(InfoEvento[EventCreator] == playerid || Info[playerid][pAdmin] >= 4){
		if(isnull(params)){
			SendClientMessageEx(playerid, COLOR_WHITE, "USA: /tipoevento [tipo]");
			SendClientMessageEx(playerid, COLOR_GREY,  "Nombres: DM, TDM, Race");
			return 1;
		}
		if(strcmp(params,"dm",true) == 0){
			InfoEvento[ EventType ] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el tipo de evento a DM.");
		}
		else if(strcmp(params,"tdm",true) == 0){
			InfoEvento[ EventType ] = 2;
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el tipo de evento a TDM.");
		}
		else if(strcmp(params,"race",true) == 0){
			InfoEvento[ EventType ] = 3;
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el tipo de evento a Race.");
		}
		else if(strcmp(params,"ninguno",true) == 0){
			InfoEvento[ EventType ] = 3;
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el tipo de evento a Ninguno.");
		}
	}
}
return 1;
}

CMD:editarevento(playerid, params[]){
if(Info[playerid][pAdmin] >= 5){
	if(InfoEvento[EventCreator] == playerid || Info[playerid][pAdmin] >= 4){
		new choice[32], opstring[64];
		if(sscanf(params, "s[32]S[64]", choice, opstring)){
			if(InfoEvento[EventType] == 1){
				SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarevento [nombre]");
				SendClientMessageEx(playerid, COLOR_GREY, "Available names: text, limite, vida, Armor, Gun1, Gun2, Gun3, Gun4, Gun5");
				return 1;
			}
			else if(InfoEvento[EventType] == 2){
				SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarevento [nombre]");
				SendClientMessageEx(playerid, COLOR_GREY, "Available names: text, limite, Team1Skin, Team2Skin, Team1Color, Team2Color");
				SendClientMessageEx(playerid, COLOR_GREY, "Team1Spawn, Team2Spawn, vida, Armor, Gun1, Gun2, Gun3, Gun4, Gun5");
				return 1;
			}
			else if(InfoEvento[EventType] == 3){
				SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarevento [name]");
				SendClientMessageEx(playerid, COLOR_GREY, "Available names: text, limite, vida");
 				return 1;
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "Es necesario primero establecer el tipo de evento!");
		}
		if(strcmp(choice, "text",true) == 0)
		{
			if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarevento jointext [text]");
			strmid(InfoEvento[EventoInfo], opstring, 0, strlen(opstring), 64);
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el TEXTO de información del evento.");
		}
		else if(strcmp(choice, "vida", true) == 0)
		{
			if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1 && InfoEvento[EventType] != 3) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
			if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarevento health [health]");
			new Float: health;
			health = floatstr(opstring);
			InfoEvento[EventHealth] = health;
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el spawn health del evento.");
		}
		else if(strcmp(choice, "armor", true) == 0)
		{
			if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
			if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarevento armor [armor]");
			new Float: armor;
			armor = floatstr(opstring);
			InfoEvento[EventArmor] = armor;
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste la armadura del evento.");
		}
		else if(strcmp(choice, "team1skin", true) == 0)
		{
			if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
			if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarevento team1skin [skinid]");
			new skin;
			skin = strval(opstring);
			InfoEvento[EventTeamSkin][0] = skin;
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el skin del equipo 1.");
		}
		else if(strcmp(choice, "team2skin", true) == 0)
		{
			if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
			if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarevento team2skin [skinid]");
			new skin;
			skin = strval(opstring);
			InfoEvento[EventTeamSkin][1] = skin;
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el skin del equipo 2.");
		}
		else if(strcmp(choice, "team1color", true) == 0)
		{
			if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
			if(!strlen(opstring))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarevento team1color [color]");
				SendClientMessageEx(playerid, COLOR_GREY, "black | white | blue | red | green | purple | yellow | lightblue |");
				SendClientMessageEx(playerid, COLOR_GREY, "darkgreen | darkblue | darkgrey | brown | darkbrown | darkred | pink ");
				return 1;
			}
			InfoEvento[EventTeamColor][0] = GetColorCode(opstring);
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el color del equipo 1.");
		}
		else if(strcmp(choice, "team2color", true) == 0)
		{
			if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
			if(!strlen(opstring))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarevento team2color [color]");
				SendClientMessageEx(playerid, COLOR_GREY, "black | white | blue | red | green | purple | yellow | lightblue |");
				SendClientMessageEx(playerid, COLOR_GREY, "darkgreen | darkblue | darkgrey | brown | darkbrown | darkred | pink ");
				return 1;
			}
			InfoEvento[EventTeamColor][1] = GetColorCode(opstring);
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el color del equipo 2.");
		}
		else if(strcmp(choice, "team1spawn", true) == 0)
		{
			if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
			GetPlayerPos(playerid, InfoEvento[ EventTeamPosX1 ], InfoEvento[ EventTeamPosY1 ], InfoEvento[ EventTeamPosZ1 ] );
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el spawn del equipo 1.");
		}
		else if(strcmp(choice, "team2spawn", true) == 0)
		{
			if(InfoEvento[EventType] != 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
			GetPlayerPos(playerid, InfoEvento[ EventTeamPosX2 ], InfoEvento[ EventTeamPosY2 ], InfoEvento[ EventTeamPosZ2 ]);
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el spawn del equipo 2.");
		}
		else if(strcmp(choice, "limite", true) == 0)
		{
			if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarevento limite [limite 0-60]");
			new limit;
			limit = strval(opstring);
			if(limit < 0 || limit > 90) return SendClientMessageEx(playerid, COLOR_RED, "No se puede ajustar el límite de eventos superiores a 60 o por debajo de 0.");
			InfoEvento[EventLimit] = limit;
			SendClientMessageEx(playerid, COLOR_WHITE, "Usted ha ajustado el límite de los jugadores en el evento.");
		}
		else if(strcmp(choice, "gun1", true) == 0)
		{
			if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Este nombre no está disponible para este tipo de evento.");
			if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarevento gun1 [weaponid]");
			new weapon;
			weapon = strval(opstring);
			if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes establecer esta arma para este evento.");
			InfoEvento[EventWeapons][0] = weapon;
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el arma del evento [1]");
		}
		else if(strcmp(choice, "gun2", true) == 0)
		{
			if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");
			if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarevento gun1 [weaponid]");
			new weapon;
			weapon = strval(opstring);
			if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes establecer esta arma para este evento.");
			InfoEvento[EventWeapons][1] = weapon;
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el arma del evento [2]");
		}
		else if(strcmp(choice, "gun3", true) == 0)
		{
			if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");

			if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarevento gun1 [weaponid]");

			new weapon;
			weapon = strval(opstring);
			if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes establecer esta arma para este evento.");
			InfoEvento[EventWeapons][2] = weapon;
			SendClientMessageEx(playerid, COLOR_WHITE, "Ajustaste el arma del evento [3]");
		}
		else if(strcmp(choice, "gun4", true) == 0)
		{
			if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no puedes usarla para este evento.");

			if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarevento gun1 [weaponid]");

			new weapon;
			weapon = strval(opstring);
			if(weapon == 35 || weapon == 37 || weapon == 38) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes establecer esta arma para este evento.");
			InfoEvento[EventWeapons][3] = weapon;
			SendClientMessageEx(playerid, COLOR_WHITE, "Modificaste el arma 4 del evento.");
		}
		else if(strcmp(choice, "gun5", true) == 0)
		{
			if(InfoEvento[EventType] != 2 && InfoEvento[EventType] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta opción no es posible para este evento.");

			if(!opstring[0]) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarevento gun1 [weaponid]");

			new weapon;
			weapon = strval(opstring);
			if(weapon == 35 || weapon == 37 || weapon == 38) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes establecer está arma para este evento.");
			InfoEvento[EventWeapons][4] = weapon;
			SendClientMessageEx(playerid, COLOR_WHITE, "Modificaste el gun 5 del evento.");
		}
	}
}
return 1;
}

CMD:esolovip(playerid, params[])
{
if(Info[playerid][pAdmin] >= 5)
{
	if(InfoEvento[EventCreator] == playerid || Info[playerid][pAdmin] >= 4)
	{
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /esolovip [0/1]");

		if(Info[playerid][pVIP] == 3 && Info[playerid][pAdmin] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Error: Usted no está autorizado a modificar esta opción!");

		if(strcmp(params,"0",true) == 0){
			InfoEvento[ VipOnly ] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Has ajustado el tipo de evento no sólo para VIP´s.");
		}
		else if(strcmp(params,"1",true) == 0){
			InfoEvento[ VipOnly ] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Has ajustado el tipo de evento sólo para VIP´s.");
		}

	}
}
return 1;
}

CMD:infoevento(playerid, params[])
{
if( Info[ playerid ][ pAdmin ] >= 5)
{
	if( InfoEvento[EventCreator] == playerid || Info[playerid][pAdmin] >= 4 )
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USA: /editarevento /tipoevento /esolovip (una vez listo, usa /empezarevento y después /lockevento)");
		return 1;
	}
}
return 1;
}

CMD:finevento(playerid, params[])
{
if(Info[playerid][pAdmin] >= 5 || InfoEvento[EventCreator] == playerid)
{
	if(InfoEvento[EventStatus] != 0)
	{
		foreach(Player, i)
		{
			if( GetPVarInt( i, "EventToken" ) == 1 )
			{
				ResetPlayerWeapons( i );
				SetPlayerWeapons(i);
				SetPlayerToTeamColor(i);
				SetPlayerSkin(i, Info[i][pChar]);
				SetPlayerPos(i,EventFloats[i][1],EventFloats[i][2],EventFloats[i][3]);
				SetPlayerVirtualWorld(i, EventLastVW[i]);
				SetPlayerFacingAngle(i, EventFloats[i][0]);
				SetPlayerInterior(i,EventLastInt[i]);
				SetHP(i, EventFloats[i][4]);
				GiveArmorToPlayer(i, EventFloats[i][5]);
				for(new d = 0; d < 6; d++)
				{
					EventFloats[i][d] = 0.0;
				}
				EventLastVW[i] = 0;
				EventLastInt[i] = 0;
				SetPVarInt(i, "EventToken", 0);
				SendClientMessageEx( i, COLOR_GRAD1, "Has sido expulsado del evento ya que un administrador lo termino." );
			}
		}
		InfoEvento[ EventPositionX ] = 0;
		InfoEvento[ EventPositionY ] = 0;
		InfoEvento[ EventPositionZ ] = 0;
		InfoEvento[ EventTeamPosX1 ] = 0;
		InfoEvento[ EventTeamPosY1 ] = 0;
		InfoEvento[ EventTeamPosZ1 ] = 0;
		InfoEvento[ EventTeamPosX2 ] = 0;
		InfoEvento[ EventTeamPosY2 ] = 0;
		InfoEvento[ EventTeamPosZ2 ] = 0;
		InfoEvento[ EventStatus ] = 0;
		InfoEvento[ EventType ] = 0;
		InfoEvento[ EventHealth ] = 0;
		InfoEvento[ EventLimit ] = 0;
		InfoEvento[ EventPlayers ] = 0;
		InfoEvento[ EventWeapons ][0] = 0;
		InfoEvento[ EventWeapons ][1] = 0;
		InfoEvento[ EventWeapons ][2] = 0;
		InfoEvento[ EventWeapons ][3] = 0;
		InfoEvento[ EventWeapons ][4] = 0;
		InfoEvento[EventCreator] = 999;
		InfoEvento[VipOnly] = 0;
		InfoEvento[EventJoinStaff] = 0;
		BroadCast(COLOR_GENERAL, "* El evento ha sido terminado por un administrador." );
	}
	else SendClientMessageEx( playerid, COLOR_GREY, "* En este momento no hay un evento activo." );
}
return 1;
}

CMD:empezarevento(playerid, params[])
{
if( Info[ playerid ][ pAdmin ] >= 5)
{
	new string[128];

	if( InfoEvento[ EventStatus ] == 0)
	{
		if(Info[playerid][pAdmin] >= 4)
		{
			if(InfoEvento[ EventHealth ] == 0)
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "No se ha definido la salud del evento!" );
				return 1;
			}
			if(InfoEvento[ EventPositionX ] == 0 || InfoEvento[ EventPositionY ] == 0 || InfoEvento[ EventPositionZ ] == 0)
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "No se ha definido la posición de evento!" );
				return 1;
			}
			if( (InfoEvento[ EventTeamPosX1 ] == 0 || InfoEvento[ EventTeamPosY1 ] == 0 || InfoEvento[ EventTeamPosZ1 ] == 0) && InfoEvento[ EventType ] == 2)
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "No ha establecido la posición del equipo 1." );
				return 1;
			}
			if( (InfoEvento[ EventTeamPosX2 ] == 0 || InfoEvento[ EventTeamPosY2 ] == 0 || InfoEvento[ EventTeamPosZ2 ] == 0) && InfoEvento[ EventType ] == 2)
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "No ha establecido la posición del equipo 2." );
				return 1;
			}
			if(InfoEvento[ EventLimit ] == 0)
			{
				InfoEvento[ EventLimit ] = 90;
			}
			InfoEvento[ EventStatus ] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "Ha iniciado un evento, utilice /anunciar para anunciar el evento a todo el servidor." );
			foreach(Player, i)
			{
				if(Info[i][pVIP] >= 3)
				{
					SendClientMessageEx(i, COLOR_GRAD1, "*VIP: Un evento a comenzado! /unirseevento para unirte!");
				}
			}

			return 1;
		}
		else if( InfoEvento[EventCreator] == playerid)
		{
			if(InfoEvento[ EventHealth ] == 0)
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "No se ha definido la salud evento!" );
				return 1;
			}
			if(InfoEvento[ EventPositionX ] == 0 || InfoEvento[ EventPositionY ] == 0 || InfoEvento[ EventPositionZ ] == 0)
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "No se ha definido la posición de evento!" );
				return 1;
			}
			if(InfoEvento[ EventLimit ] == 0)
			{
				InfoEvento[ EventLimit ] = 90;
			}
			InfoEvento[ EventStartRequest ] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "Ha solicitado para comenzar un evento, por favor espere hasta que un administrado lo apruebe." );
			format( string, sizeof( string ), "Event Position: x:%f y:%f z:%f.", InfoEvento[EventPositionX], InfoEvento[EventPositionY], InfoEvento[EventPositionZ] );
			ABroadCast( COLOR_WHITE, string, 4 );
			format( string, sizeof( string ), "Event Info: %s EventLimite: %d.", InfoEvento[EventoInfo], InfoEvento[EventLimit] );
			ABroadCast( COLOR_WHITE, string, 4 );
			format( string, sizeof( string ), "Event Health: %f Event Armor: %f.", InfoEvento[EventHealth], InfoEvento[EventArmor] );
			ABroadCast( COLOR_WHITE, string, 4 );
			if(InfoEvento[EventWeapons][0] != 0)
			{
				format( string, sizeof( string ), "Event Gun1: %d.", InfoEvento[EventWeapons][0] );
				ABroadCast( COLOR_WHITE, string, 4 );
			}
			if(InfoEvento[EventWeapons][1] != 0)
			{
				format( string, sizeof( string ), "Event Gun2: %d.", InfoEvento[EventWeapons][1] );
				ABroadCast( COLOR_WHITE, string, 4 );
			}
			if(InfoEvento[EventWeapons][2] != 0)
			{
				format( string, sizeof( string ), "Event Gun3: %d.", InfoEvento[EventWeapons][2] );
				ABroadCast( COLOR_WHITE, string, 4 );
			}
			if(InfoEvento[EventWeapons][3] != 0)
			{
				format( string, sizeof( string ), "Event Gun4: %d.", InfoEvento[EventWeapons][3] );
				ABroadCast( COLOR_WHITE, string, 4 );
			}
			if(InfoEvento[EventWeapons][4] != 0)
			{
				format( string, sizeof( string ), "Event Gun5: %d.", InfoEvento[EventWeapons][4] );
				ABroadCast( COLOR_WHITE, string, 4 );
			}
			if(InfoEvento[EventType] == 2)
			{
				format( string, sizeof( string ), "Event Team 1 Color: %d Event Team 1 Skin: %d.", InfoEvento[EventTeamColor][0], InfoEvento[EventTeamSkin][0] );
				ABroadCast( COLOR_WHITE, string, 4 );
				format( string, sizeof( string ), "Event Team 2 Color: %d Event Team 2 Skin: %d.", InfoEvento[EventTeamColor][1], InfoEvento[EventTeamSkin][1] );
				ABroadCast( COLOR_WHITE, string, 4 );
			}
			else if(InfoEvento[EventType] == 3)
			{
			}
			format( string, sizeof( string ), ""COL_BLUE"Administración >"COL_WHITE" %s quiere comenzar el evento, ¿lo apruebas? /approveevent o /denyevent.", GetPlayerNameEx(playerid) );
			ABroadCast( COLOR_GENERAL, string, 4 );
		}
	}
	else SendClientMessageEx( playerid, COLOR_WHITE, "Ya hay un evento activo (usa /finevento)." );
}
return 1;
}

CMD:goevento(playerid, params[])
{
if( Info[ playerid ][ pAdmin ] >= 5 || InfoEvento[EventCreator] == playerid)
{
	if( InfoEvento[ EventStatus ] == 3 )
	{
		InfoEvento[ EventStatus ] = 4;
		foreach(Player, i)
		{
			if( GetPVarInt( i, "EventToken" ) == 1 )
			{
				if( InfoEvento[ EventType ] == 1 )
				{
					//GivePlayerEventWeapons( i );
					SendClientMessageEx( i, COLOR_GENERAL, "* !Vamos! "COL_WHITE"El evento ha empezado." );
					SetHP( i, InfoEvento[ EventHealth ] );
					GiveArmorToPlayer( i, InfoEvento[ EventArmor ] );
					for(new d = 0; d < 4; d++)
					{
						if(i == InfoEvento[EventStaff][d])
						{
							SetHP(i, 999999);
						}
					}
					GivePlayerEventWeapons( i );
				}
				else if( InfoEvento[ EventType ] == 2 )
				{
					//GivePlayerEventWeapons( i );
					SendClientMessageEx( i, COLOR_GENERAL, "* !Vamos! "COL_WHITE"El evento ha empezado." );
					SetHP( i, InfoEvento[ EventHealth ] );
					GiveArmorToPlayer( i, InfoEvento[ EventArmor ] );
					for(new d = 0; d < 5; d++)
					{
						if(i == InfoEvento[EventStaff][d])
						{
							SetHP(i, 999999);
						}
					}
					GivePlayerEventWeapons( i );
				}
			}
			else SendClientMessageEx( i, COLOR_GREY, "* El evento ha comenzado. Si la próxima vez deseas unirte usa /unirseevento." );
		}

	}
	else SendClientMessageEx( playerid, COLOR_GREY, "Ya hay un evento activo (usar /finevento)." );
}
return 1;
}

CMD:anunciar(playerid, params[])
{
if(Info[playerid][pAdmin] >= 5 || InfoEvento[EventCreator] == playerid)
{
	if( InfoEvento[ EventStatus ] == 1)
	{
		InfoEvento[ EventStatus ] = 2;
		SendClientMessageEx(playerid, COLOR_WHITE, "Para bloquear el evento usa /lockevento");
		if(InfoEvento[VipOnly] == 1) BroadCast( COLOR_LIGHTBLUE, "* Un evento VIP ha sido iniciado por un administrador, usuarios VIP usar /unirseevento para participar." );
		else BroadCast( COLOR_GENERAL, "* Un evento ha sido iniciado por un administrador, usa "COL_WHITE"/unirseevento "COL_GENERAL"para participar.");
	}
	else SendClientMessageEx( playerid, COLOR_GREY, "* Ya hay un evento activo (usa /finevento)." );
}
return 1;
}

CMD:lockevento(playerid, params[])
{
if(Info[playerid][pAdmin] >= 5 || InfoEvento[EventCreator] == playerid)
{
	if( InfoEvento[ EventStatus ] == 2 )
	{
		InfoEvento[ EventStatus ] = 3;
		SendClientMessageEx( playerid, COLOR_WHITE, "Has bloqueado el evento, utiliza /goevento para iniciar oficialmente el evento." );
		BroadCast( COLOR_GENERAL, "* El evento ha sido bloqueado por un administrador." );
	}
	else SendClientMessageEx( playerid, COLOR_GREY, "* Ya hay un evento activo (usa /finevento)." );
}
return 1;
}

CMD:unirseevento(playerid, params[])
{
if( InfoEvento[ EventStatus ] == 0 )
{
	SendClientMessageEx( playerid, COLOR_GREY, "* En este momento no hay un evento activo." );
}
else if( GetPVarInt( playerid, "EventToken" ) == 1 )
{
	SendClientMessageEx( playerid, COLOR_GREY, "* Ya estás en el evento." );
}
else if(GetPVarInt(playerid, "IsInArena") == 1)
{
	SendClientMessageEx(playerid, COLOR_GREY, "* No puedes unirte estando en el paintball!");
}
else if( Info[playerid][pEstado] >= 1 || Info[ playerid ][ pJailTime ] > 0 || GetPVarInt(playerid, "injured") == 1 )
{
	SendClientMessageEx( playerid, COLOR_GREY, "* No puedes hacer esto ahora mismo." );
}
else if(InfoEvento[VipOnly] == 1 && Info[playerid][pVIP] < 1)
{
	SendClientMessageEx(playerid, COLOR_GREY, "* Este evento está restringido sólo para VIP´s.");
}
else if(InfoEvento[EventPlayers] >= InfoEvento[EventLimit]) {
	SendClientMessageEx(playerid, COLOR_GREY, "* Este evento ha alcanzado el límite máximo de jugadores.");
}
else if( InfoEvento[ EventStatus ] == 2 || (InfoEvento[ EventStatus ] == 1 && Info[playerid][pVIP] >= 3))
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* No se puedes unirte estando en un vehículo.");
	SetPVarInt( playerid, "EventToken", 1 );
	ResetPlayerWeapons( playerid );
	pTazer[playerid] = 0;
	GetPlayerHealth(playerid, EventFloats[playerid][4]);
	GetPlayerArmour(playerid, EventFloats[playerid][5]);
	EventLastVW[playerid] = GetPlayerVirtualWorld(playerid);
	EventLastInt[playerid] = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, EventFloats[playerid][1], EventFloats[playerid][2], EventFloats[playerid][3]);
	GetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
	if(InfoEvento[EventType] != 2)
	{
		SetPlayerPos( playerid, InfoEvento[ EventPositionX ], InfoEvento[ EventPositionY ], InfoEvento[ EventPositionZ ] );
	}
	SetPlayerInterior( playerid, InfoEvento[ EventInterior ] );
	SetPlayerVirtualWorld( playerid, InfoEvento[ EventWorld ] );
	SendClientMessageEx( playerid, COLOR_WHITE, InfoEvento[ EventoInfo ] );
	SetHP( playerid, InfoEvento[ EventHealth ] );
	GiveArmorToPlayer( playerid, InfoEvento[ EventArmor ] );
	SetPlayerVirtualWorld( playerid, 0 );

	if(InfoEvento[EventType] == 2)
	{
		SetPlayerSkin(playerid, InfoEvento[EventTeamSkin][nextteam]);
		new color = InfoEvento[EventTeamColor][nextteam];
		if (color==0) SetPlayerColor(playerid, 0x00000000);
		if (color==1) SetPlayerColor(playerid, 0xFFFFFF00);
		if (color==2) SetPlayerColor(playerid, 0x2641FE00);
		if (color==3) SetPlayerColor(playerid, 0xAA333300);
		if (color==16) SetPlayerColor(playerid, 0x33AA3300);
		if (color==5) SetPlayerColor(playerid, 0xC2A2DA00);
		if (color==6) SetPlayerColor(playerid, 0xFFFF0000);
		if (color==7) SetPlayerColor(playerid, 0x33CCFF00);
		//if (strcmp(clr, "navy", true)==0) color=94;
		//if (strcmp(clr, "beige", true)==0) color=102;
		if (color==51) SetPlayerColor(playerid, 0x2D6F0000);
		if (color==103) SetPlayerColor(playerid, 0x0B006F00);
		if (color==13) SetPlayerColor(playerid, 0x52525200);
		if (color==55) SetPlayerColor(playerid, 0xB46F0000);
		if (color==84) SetPlayerColor(playerid, 0x814F0000);
		if (color==74) SetPlayerColor(playerid, 0x750A0000);
		//if (strcmp(clr, "maroon", true)==0) color=115;
		if (color==126) SetPlayerColor(playerid, 0xFF51F100);
		if(nextteam == 0)
		{
			SetPlayerPos(playerid, InfoEvento[EventTeamPosX1], InfoEvento[EventTeamPosY1], InfoEvento[EventTeamPosZ1]);
		}
		else
		{
			SetPlayerPos(playerid, InfoEvento[EventTeamPosX2], InfoEvento[EventTeamPosY2], InfoEvento[EventTeamPosZ2]);
		}
		if(nextteam == 0) nextteam++;
		else if(nextteam == 1) nextteam--;
	}

	InfoEvento[EventPlayers] ++;
	if(InfoEvento[EventPlayers] == InfoEvento[EventLimit])
	{
		ABroadCast(COLOR_GENERAL, "AdmAnuncio: El evento ha alcanzado el límite máximo de jugadores.", 2);
	}
}

else if( InfoEvento[ EventStatus ] == 3 )
{
	SendClientMessageEx( playerid, COLOR_GREY, "* El evento está bloqueado, no puedes entrar al evento" );
}
else if( InfoEvento[ EventStatus ] == 4 )
{
	SendClientMessageEx( playerid, COLOR_GREY, "* El evento ya se ha iniciado, no puedes entrar al evento." );
}

return 1;
}

CMD:ram(playerid, params[]){
if(IsACop(playerid)){
	if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto en la Arena!");
	if( Info[playerid][pEstado] >= 1 ) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto ahora.");
	new string[128];
	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
		{
			format(string, sizeof(string), "* %s rompe la puerta, y entra.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
			LoadObjects(playerid);
			SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
			GameTextForPlayer(playerid, "~r~Rompiste la puerta", 5000, 1);
			Info[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
			Info[playerid][pVW] = i+6000;
			SetPlayerVirtualWorld(playerid, i+6000);
			//SetPVarInt( playerid, "InHouse", i );
		}
	}
}
else SendClientMessageEx(playerid, COLOR_GREY, "   No eres policía!");
return 1;
}

CMD:toy(playerid, params[])
{
if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando en este momento.");
new toyslot,string[128];
if(sscanf(params, "d", toyslot)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /toy [slot (0-9)]");
if(toyslot < 0 || toyslot > MAX_PLAYERTOYS) return SendClientMessageEx(playerid, COLOR_WHITE, "Los Slots de los toys son del número 0 al 9!");
switch(toyslot)
{
    case 0, 1, 2, 3, 4, 5, 6, 7, 8, 9:
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, toyslot)){
		    new name[24];
		    format(name, sizeof(name), "None");
			for(new i;i<sizeof(HoldingObjectsAll);i++){
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][toyslot][ptModelID]){
					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}
		    format(string, sizeof(string), "Te quitaste el toy correctamente. (%s) (Parte: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][toyslot][ptBone]], toyslot);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		    RemovePlayerAttachedObject(playerid, toyslot);
		    return 1;
		}
		else
		{
  			if(PlayerToyInfo[playerid][toyslot][ptModelID] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes ningún toy en ese slot.");
			SetPlayerAttachedObject(playerid, toyslot, PlayerToyInfo[playerid][toyslot][ptModelID], PlayerToyInfo[playerid][toyslot][ptBone], PlayerToyInfo[playerid][toyslot][ptPosX], PlayerToyInfo[playerid][toyslot][ptPosY], PlayerToyInfo[playerid][toyslot][ptPosZ], PlayerToyInfo[playerid][toyslot][ptRotX], PlayerToyInfo[playerid][toyslot][ptRotY], PlayerToyInfo[playerid][toyslot][ptRotZ], PlayerToyInfo[playerid][toyslot][ftscaleX],
			PlayerToyInfo[playerid][toyslot][ftscaleY], PlayerToyInfo[playerid][toyslot][ftscaleZ]);
			new name[24];
			format(name, sizeof(name), "Nada");
			for(new i;i<sizeof(HoldingObjectsAll);i++){
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][toyslot][ptModelID]){
					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}
			format(string, sizeof(string), "Te pusiste el toy correctamente. (%s) (Parte: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][toyslot][ptBone]], toyslot);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
}
return 1;
}
CMD:ant(playerid, params[])
	{
		if(IsACop(playerid))
		{
			new string[128], giveplayerid, reason[32];
			if(sscanf(params, "ds[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /ant [player] [texto]");
			if(strlen(reason) > 32) return SendClientMessageEx(playerid, COLOR_WHITE, "El antecedente solo puede tener 32 caracteres");
			if(IsPlayerConnected(giveplayerid))
			{
			    if(Info[giveplayerid][pAntecedenteID1] == 0)
			    {
			        Info[giveplayerid][pAntecedente1] = reason;
			        format(string, sizeof(string), "* Has colocado a %s su primer antecedente (%s)", GetPlayerNameEx(giveplayerid),reason);
			        SendClientMessageEx(playerid, COLOR_WHITE, string);
                    format(string, sizeof(string), "* %s te ha colocado tu primer antecedente (%s)", GetPlayerNameEx(playerid),reason);
                    SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
					format(string, sizeof(string), "* Central: %s ha puesto un antecedente a %s (%s)", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
                	SendRadioMessage(1, 0x8D8DFFFF, string);
                	Info[giveplayerid][pAntecedenteID1] = 1;
                	return 1;
			    }
			    if(Info[giveplayerid][pAntecedenteID2] == 0)
			    {
			        Info[giveplayerid][pAntecedente2] = reason;
			        format(string, sizeof(string), "* Has colocado a %s su segundo antecedente (%s)", GetPlayerNameEx(giveplayerid),reason);
                    format(string, sizeof(string), "* %s te ha colocado tu segundo antecedente (%s)", GetPlayerNameEx(playerid),reason);
                    SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
					format(string, sizeof(string), "* Central: %s ha puesto un antecedente a %s (%s)", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
                	SendRadioMessage(1, 0x8D8DFFFF, string);
                	Info[giveplayerid][pAntecedenteID2] = 1;
                	return 1;
			    }
			    if(Info[giveplayerid][pAntecedenteID3] == 0)
			    {
			        Info[giveplayerid][pAntecedente3] = reason;
			        format(string, sizeof(string), "* Has colocado a %s su tercer antecedente (%s)", GetPlayerNameEx(giveplayerid),reason);
			        SendClientMessageEx(playerid, COLOR_WHITE, string);
                    format(string, sizeof(string), "* %s te ha colocado tu tercer antecedente (%s)", GetPlayerNameEx(playerid),reason);
                    SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
					format(string, sizeof(string), "* Central: %s ha puesto un antecedente a %s (%s)", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
                	SendRadioMessage(1, 0x8D8DFFFF, string);
                	Info[giveplayerid][pAntecedenteID3] = 1;
                	return 1;
			    }
			    else SendClientMessageEx(playerid, COLOR_WHITE, "Este usuario no puede tener más antecedentes");
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "No eres policía");
		return 1;
	}

CMD:esposar(playerid, params[])
{
if(IsACop(playerid))
{
	if(GetPVarInt(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto ahora.");
	new string[128],Float:Pos[3],giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /esposar [playerid]");
	if(IsPlayerConnectedEx(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto contigo mismo!");
			if(Info[giveplayerid][pEstado] == 1 || GetPlayerSpecialAction(giveplayerid) == SPECIAL_ACTION_HANDSUP)
			{
				format(string, sizeof(string), "* Fuiste esposado por "COL_WHITE"%s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
				format(string, sizeof(string), "* Esposaste a "COL_WHITE"%s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_GENERAL, string);
				format(string, sizeof(string), "* %s esposa a %s, las esposas estan seguras.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GameTextForPlayer(giveplayerid, "~r~Esposado", 2500, 3);
				GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
				ClearAnimations(giveplayerid);
				Info[giveplayerid][pEstado] = 2;
				SetPVarInt(giveplayerid, "PlayerCuffed", 2);
				SetPVarInt(giveplayerid, "IsFrozen", 1);
				PlayerPlaySoundEx(1145, Pos[0], Pos[1], Pos[2]);
				SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_CUFFED);
				//ApplyAnimation(giveplayerid,"ped","cower",1,1,0,0,0,0,1);
				TogglePlayerControllable(giveplayerid, 1);
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "El jugador tiene que estar tazeado o con las manos arriba!");
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador no está cerca tuyo.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "Jugador especificado inválido.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este comando.");
return 1;
}
CMD:qcables(playerid, params[])
{
if(IsACop(playerid))
{
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /qcables [playerid]");
	if(IsPlayerConnectedEx(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			//if(Info[giveplayerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto con un jugador esposado.");
			if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes quitarte los cables tu mismo.");
			if(Info[giveplayerid][pEstado] == 1)
			{
				DeletePVar(giveplayerid, "IsFrozen");
				format(string, sizeof(string), "* "COL_WHITE"%s "COL_GENERAL"te quito los cables del taser.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
				format(string, sizeof(string), "* Le quitaste los cables a "COL_WHITE"%s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_GENERAL, string);
				format(string, sizeof(string), "* %s quitó los cables del taser a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GameTextForPlayer(giveplayerid, "~g~Te quitaron los cables", 2500, 3);
				TogglePlayerControllable(giveplayerid, 1);
				ClearAnimations(giveplayerid);
				SetPlayerSpecialAction(giveplayerid, 0);
				ApplyAnimation(giveplayerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				Info[giveplayerid][pEstado] = 0;
                PlayerCuffedTime[giveplayerid] = 0;
				DeletePVar(giveplayerid, "PlayerCuffed");
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador ya no está taseado.");
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador no está cerca tuyo.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "Jugador especificado inválido.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este comando.");
return 1;
}
CMD:qesposas(playerid, params[])
{
if(IsACop(playerid))
{
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /qesposas [playerid]");
	if(IsPlayerConnectedEx(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			//if(Info[giveplayerid][pJailed] >= 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto con un jugador esposado.");
			if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes quitarte las esposas tu mismo.");
			if(Info[giveplayerid][pEstado] == 2)
			{
				DeletePVar(giveplayerid, "IsFrozen");
				format(string, sizeof(string), "* "COL_WHITE"%s "COL_GENERAL"Te quito las esposas.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
				format(string, sizeof(string), "* Le quitaste las esposas "COL_WHITE"%s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_GENERAL, string);
				format(string, sizeof(string), "* %s quitó las esposas a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GameTextForPlayer(giveplayerid, "~g~Te quitaron ~n~las esposas", 2500, 3);
				TogglePlayerControllable(giveplayerid, 1);
				ClearAnimations(giveplayerid);
				SetPlayerSpecialAction(giveplayerid, 0);
				ApplyAnimation(giveplayerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				Info[giveplayerid][pEstado] = 0;
                PlayerCuffedTime[giveplayerid] = 0;
				DeletePVar(giveplayerid, "PlayerCuffed");
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador ya no está arrestado.");
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador no está cerca tuyo.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "Jugador especificado inválido.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este comando.");
return 1;
}

CMD:detener(playerid, params[])
{
if(IsACop(playerid))
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto en un vehiculo.");
	new string[128], giveplayerid, seat;
	if(sscanf(params, "dd", giveplayerid, seat)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /detener [playerid] [Asiento 1-3]");
	if(IsPlayerConnectedEx(giveplayerid))
	{
		if(seat < 1 || seat > 3) return SendClientMessageEx(playerid, COLOR_WHITE, "Asientos: 1 al 3.");
		if(IsACop(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes detener a esta persona (LSPD/FBI/SAEM).");
		if(IsPlayerInAnyVehicle(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Esa persona está en un vehiculo.");
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto contigo mismo!"); return 1; }
			if(Info[giveplayerid][pEstado] == 2)
			{
				new carid = gLastCar[playerid];
				if(IsSeatAvailable(carid, seat))
				{
					new Float:pos[6];
					GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
					GetPlayerPos(giveplayerid, pos[3], pos[4], pos[5]);
					GetVehiclePos( carid, pos[0], pos[1], pos[2]);
					if (floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
							floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
							floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
					format(string, sizeof(string), "* Fuiste detenido por %s .", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
					format(string, sizeof(string), "* Detuviste a %s .", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_GENERAL, string);
					format(string, sizeof(string), "* %s sube a %s al vehiculo.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(giveplayerid, "~r~Detenido", 2500, 3);
					ClearAnimations(giveplayerid);
					TogglePlayerControllable(giveplayerid, false);
					PutPlayerInVehicle(giveplayerid, carid, seat);
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "Ese asiento no está disponible!");
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "Esa persona no está esposada");
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, " Usted no está lo suficientemente cerca del jugador o de su coche!");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "Jugador especificado inválido.");
}
else SendClientMessageEx(playerid, COLOR_WHITE, "  No eres policía!");
return 1;
}

CMD:fbi(playerid, params[]){
if(Team_FBI(playerid))	{
	if(PlayerToPoint(5, playerid, 310.6649,-1537.4591,-45.1338) || PlayerToPoint(5, playerid, 310.6895,-1543.0925,-45.1338))		{
		ShowPlayerDialog(playerid, FDUTYMENU, DIALOG_STYLE_LIST, "FBI Menu","Duty\nEquipo\nUniforme SWAT\nUniformes\nEncubierto", "Ok", "Cancelar");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en los casilleros del FBI.");
}
return 1;
}

CMD:sapd(playerid, params[]){
if(Team_SAPD(playerid))	{
	if(PlayerToPoint(5, playerid, 264.6584,109.6664,1004.617) || PlayerToPoint(5, playerid,327.2326,307.2340,999.1484) ){
		ShowPlayerDialog(playerid, DUTYMENU, DIALOG_STYLE_LIST, "SAPD Menu","Duty\nEquipo\nSWAT\nUniformes\nEncubierto", "Ok", "Cancelar");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No estás en los casilleros de SAPD.");
}
return 1;
}

CMD:darrol(playerid, params[]){
if(Info[playerid][pAdmin] >= 3)	{
	new giveplayerid, string[128];
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /darrol [playerid]");
    if(Info[giveplayerid][pAdmin] > Info[playerid][pAdmin]) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer eso con administradores de mayor rango.");
	if(IsPlayerConnectedEx(giveplayerid))		{
	    if(Info[giveplayerid][pAdmin] >= 2) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto con administradores." );
		if(ShowRules[giveplayerid] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador ya está leyendo las reglas de rol.");
		new Float:roldX, Float:roldY, Float:roldZ;
		GetPlayerPos(giveplayerid, roldX, roldY, roldZ);
		SetPVarFloat(giveplayerid, "rOldX", roldX);
		SetPVarFloat(giveplayerid, "rOldY", roldY);
		SetPVarFloat(giveplayerid, "rOldZ", roldZ);
		SetPVarInt(giveplayerid, "rOldInt", GetPlayerInterior(giveplayerid));
		SetPVarInt(giveplayerid, "rOldVW", GetPlayerVirtualWorld(giveplayerid));
	    ShowRules[giveplayerid] = 1;
	    RulesTime[giveplayerid] = 1;
	    ShowRol(giveplayerid);
		format( string, sizeof( string ), ""COL_BLUE"Administración >"COL_WHITE" %s (ID %d) fue enviado a leer las reglas de rol por %s.", GetPlayerNameEx(giveplayerid), giveplayerid, GetPlayerNameEx(playerid));
		ABroadCast( COLOR_GENERAL, string, 2 );
		return 1;
	}
}
else NoAutorizado
return 1;
}

CMD:paquete(playerid, params[])
{
new mypoint = -1, playername[MAX_PLAYER_NAME];
GetPlayerName(playerid, playername, sizeof(playername));
for (new i=0; i<MAX_POINTS; i++)
{
	if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Lab Drug", true) == 0)
	{
		mypoint = i;
	}
}
if (mypoint == -1) return SendClientMessageEx(playerid, COLOR_GREY, " No estás en el punto específico!");
if(Info[playerid][pCrates]) return SendClientMessageEx(playerid, COLOR_GREY, "No se puede sostener más paquetes de drogas!");
ShowPlayerDialog(playerid,TRAFICDRUGS,DIALOG_STYLE_MSGBOX, ""COL_GENERAL"Selecciona", "¿Que deseas transportar?", "Hierba", "Crack");
SetPVarInt(playerid, "ChoosingDrugs", 1);
return 1;
}

CMD:comprarcrack(playerid, params[])
{
	new string[128], amount;
	if(sscanf(params, "d", amount)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /comprarcrack [monto]");
	new tel,price,level = Info[playerid][pDrugsSkill];
	if(level >= 0 && level <= 50)
		{tel = 500;if(amount < 1 || amount > 5){SendClientMessageEx(playerid, COLOR_GREY, "   Sólo puedes cojer 5 o menos con ese skil!");return 1;}}
	else if(level >= 51 && level <= 100)
		{ tel = 500; if(amount < 1 || amount > 5) { SendClientMessageEx(playerid, COLOR_GREY, "   Sólo puedes cojer 10 o menos con ese skil!"); return 1; } }
	else if(level >= 101 && level <= 200)
		{ tel = 500; if(amount < 1 || amount > 15) { SendClientMessageEx(playerid, COLOR_GREY, "   Sólo puedes cojer 15 o menos con ese skil!"); return 1; } }
	else if(level >= 201 && level <= 400)
		{ tel = 500; if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "   Sólo puedes cojer 20 o menos con ese skil!"); return 1; } }
	else if(level >= 401)
		{ tel = 500; if(amount < 1 || amount > 25) { SendClientMessageEx(playerid, COLOR_GREY, "   Sólo puedes cojer 25!"); return 1; } }
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 4)
		{
			mypoint = i;
		}
	}
	if (mypoint == -1) return SendClientMessageEx(playerid, COLOR_GREY, "* No estás en la casa de crack!");
	if ( Info[playerid][pCrack] >= 25) return SendClientMessageEx(playerid, COLOR_GREY, "* Tu ya tienes 25 gramos de crack, no puedes cargar más.");
	if (Info[playerid][pMember] <= 8)
	{
		price = amount * tel;
		if(Points[mypoint][Stock] < amount && Info[playerid][pVIP] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* Esta casa de crack no tiene más crack!");
		if(GetPlayerCash(playerid) > price)
		{
			format(string, sizeof(string), "* Compraste %d gramos por $%d.", amount, price);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			GivePlayerCash(playerid, -price);
			Info[playerid][pCrack] += amount;
			if(Info[playerid][pVIP] < 1) Points[mypoint][Stock] = Points[mypoint][Stock]-amount;
			format(szMessage, sizeof(szMessage), " CRACK DISPONIBLE: %d\n(/COMPRARCRACK)", Points[mypoint][Stock]);
			UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_GRAD1, szMessage);
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes dinero para pagar estas drogas.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* Debes pertenecer a una familia/banda para vender drogas.");
	return 1;
}

CMD:venderhierba(playerid, params[])
{
if (Info[playerid][pMember] <= 8) return SendClientMessageEx(playerid, COLOR_GREY, "* Debes pertenecer a una familia/banda para vender drogas.");
new string[128], giveplayerid, needed, money;
if(sscanf(params, "ddd", giveplayerid, needed, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /venderhierba [playerid] [monto] [precio]");

if(needed < 1 || needed > 99) { SendClientMessageEx(playerid, COLOR_GREY, "   Gramos no pueden ser menor que 1, ni mayor que 99!"); return 1; }
if(money < 1 || money > 99999) { SendClientMessageEx(playerid, COLOR_GREY, "   Precio: Mínimo 1 - Máximo: 99999!"); return 1; }
if(needed > Info[playerid][pPot]) { SendClientMessageEx(playerid, COLOR_GREY, "	No tienes tanta hierba para vender."); return 1; }
if(IsPlayerConnectedEx(giveplayerid))
{
	if(giveplayerid != INVALID_PLAYER_ID)
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   No puedes venderte a ti mismo!");
				return 1;
			}
			format(string, sizeof(string), "* Ofreciste a %s comprar %d gramos de hierba por $%d.", GetPlayerNameEx(giveplayerid), needed, money);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			format(string, sizeof(string), "* Vendedor %s quiere venderte %d gramos de hierba por $%d. (Usa /aceptar hierba)", GetPlayerNameEx(playerid), needed, money);
			SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
			PotOffer[giveplayerid] = playerid;
			PotPrice[giveplayerid] = money;
			PotGram[giveplayerid] = needed;
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador no está cerca tuyo.");
	}
}
else SendClientMessageEx(playerid, COLOR_GREY, "   Ese jugador está desconectado.");
return 1;
}

CMD:vendercrack(playerid, params[])
{
if (Info[playerid][pMember] <= 8) return SendClientMessageEx(playerid, COLOR_GREY, "* Debes pertenecer a una familia/banda para vender drogas.");
new string[128], giveplayerid, needed, money;
if(sscanf(params, "ddd", giveplayerid, needed, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /vendercrack [playerid] [gramos] [precio]");
if(needed < 1 || needed > 99) { SendClientMessageEx(playerid, COLOR_GREY, "   Los valores no pueden ser mayores a 99 gramos."); return 1; }
if(money < 1 || money > 99999) { SendClientMessageEx(playerid, COLOR_GREY, "   El precio no puede ser menor que 1 ni mayor que 99999!"); return 1; }
if(needed > Info[playerid][pCrack]) { SendClientMessageEx(playerid, COLOR_GREY, "  No tienes suficiente droga para venderla!"); return 1; }
if(IsPlayerConnectedEx(giveplayerid))	{
	if(giveplayerid != INVALID_PLAYER_ID){
		if (ProxDetectorS(8.0, playerid, giveplayerid)){
			if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes venderte a ti mismo!");
			format(string, sizeof(string), "* Ofreciste a %s para que te compre %d gramos de crack por $%d.", GetPlayerNameEx(giveplayerid), needed, money);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			format(string, sizeof(string), "* Vendedor de drogas %s quiere venderte %d gramos de crack por $%d. (escribe /aceptar crack)", GetPlayerNameEx(playerid), needed, money);
			SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
			CrackOffer[giveplayerid] = playerid;
			CrackPrice[giveplayerid] = money;
			CrackGram[giveplayerid] = needed;
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador no está cerca tuyo.");
	}
}
else SendClientMessageEx(playerid, COLOR_GREY, "   Ese jugador está desconectado.");
return 1;
}

CMD:semillas(playerid, params[])
{
if(Info[playerid][pWSeeds] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "Ya tienes semillas usalas primero");
if(GetPlayerCash(playerid) < 1500) return SendClientMessageEx(playerid, COLOR_GREY, " No tienes $1,500 para pagar por esto");
new mypoint = -1;
for (new i=0; i<MAX_POINTS; i++)
{
   	if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 3)
   	{
		mypoint = i;
	}
}
if (mypoint == -1) return SendClientMessageEx(playerid, COLOR_GREY, " No estás en la casa de drogas!");
if(Points[mypoint][Stock] < 1 && Info[playerid][pVIP] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "   Esta casa de drogas no tiene más hierba.");
if(Info[playerid][pVIP] < 1)
{
	Points[mypoint][Stock] -= 3;
	format(szMessage, sizeof(szMessage), " HIERBA DISPONIBLE: %d\n(/SEMILLAS)", Points[mypoint][Stock]);
	UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_GRAD1, szMessage);
}
Info[playerid][pWSeeds] += 3;
SendClientMessageEx(playerid, COLOR_GENERAL, " Acabas de comprar una bolsa de semillas de hierba de la Casa de Drogas. ");
GivePlayerCash(playerid, -1500);
GameTextForPlayer(playerid, "~r~-$1500", 3000, 1 );
return 1;
}

CMD:capturar(playerid, params[])
{
	new string[128];
	new mypoint = -1;
	if(GetPVarInt(playerid,"Injured") == 1)return SendClientMessageEx(playerid, COLOR_GRAD1, " No puedes hacer esto ahora!");
	if (Info[playerid][pMember] <= 8 || Info[playerid][pRank] < 5) return SendClientMessageEx(playerid, COLOR_GRAD1, " No eres el rango suficiente para capturar! (5)");
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz])) mypoint = i;
	}
	if (mypoint == -1) return SendClientMessageEx(playerid, COLOR_GRAD1, " Usted no está en el lugar de captura!");
	if (Points[mypoint][Vulnerable] > 0) return SendClientMessageEx(playerid, COLOR_GRAD1, " Este punto no está listo para la toma de posesión.");
	if (Points[mypoint][TimeToClaim]) return SendClientMessageEx(playerid, COLOR_GRAD1, " Este punto ya está capturado!");
	if(GetPlayerPing(playerid) > 600) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes hacer esto mientras tienes más de 600 de ping!");
	Points[mypoint][PointBarID] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
	SetProgressBarValue(Points[mypoint][PointBarID], 100.0);
	ShowProgressBarForPlayer(playerid, Points[mypoint][PointBarID]);
	format(string,sizeof(string), " %s está tratando de apoderarse del punto.", GetPlayerNameEx(playerid));
	ProxDetector(70.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
	GetPlayerPos(playerid, Points[mypoint][Capturex], Points[mypoint][Capturey], Points[mypoint][Capturez]);
	Points[mypoint][ClaimerId] = playerid;
	Points[mypoint][TimeToClaim] = 1;
	Points[mypoint][TimeLeft] = 10;
	SetTimerEx("ProgressTimer", 1000, 0, "d", mypoint);
	return 1;
}

CMD:puntos(playerid, params[])
{
	new string[2000];
	for(new i; i < MAX_POINTS; i++)
	{
		if (Points[i][Type] >= 0)
		{
			format(string, sizeof(string), "%sNombre: %s | Dueño: %s | Capturado por: %s | Horas: %d",string,Points[i][Name],Points[i][Owner],Points[i][CapperName],Points[i][Vulnerable]);
	        format(string, sizeof(string), "%s\n", string);
		}
	}
	format(string, sizeof(string), "%s\n", string);
	ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX,""COL_GENERAL"Puntos",string,"Volver","");
	return 1;
}

CMD:pedit(playerid, params[]){
if(Info[playerid][pFactionModerator] == 1){
	new string[128], hours;
	if(sscanf(params, "d", hours)){
		SendClientMessageEx(playerid, COLOR_WHITE, "USA: /pedit [HORAS]");
		SendClientMessageEx(playerid, COLOR_GREY, "{37B9F5}<!>{E3E4ED} Párese cerca de un punto para ajustar las horas.");
		return 1;
	}
	for(new h = 0; h < sizeof(Points); h++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
		{
			if(hours < 1|| hours > 24) SendClientMessageEx(playerid, COLOR_GREY, "Tip: 1 - 24");
			else if(hours >= 1|| hours <= 24)
			{
				format(string, sizeof(string), "Estableciste el tiempo de vulnerabilidad a %d horas !", hours);
				Points[h][Vulnerable] = hours;
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				UpdatePoints();
			}
		}
	}
}
return 1;
}

CMD:dedit(playerid, params[])
{
	if(Info[playerid][pFactionModerator] == 0) return 1;
	new choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USA: /dedit [nombre] [monto]");
		SendClientMessageEx(playerid, COLOR_GREY, "Nombres: hierba, Crack");
		return 1;
	}
	if(strcmp(choice,"hierba",true) == 0)
	{
		for(new h = 0; h < sizeof(Points); h++)
		{
			if(Points[h][Type] == 3)
			{
				Points[h][Stock] = amount;
				format(szMessage, sizeof(szMessage), " HIERBA DISPONIBLE: %d\n(/SEMILLAS)", Points[h][Stock]);
				UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_GRAD1, szMessage);
				SendClientMessageEx(playerid, COLOR_WHITE, " Estableciste la cantidad de hierba en la casa de drogas.");
			}
		}
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		for(new h = 0; h < sizeof(Points); h++)
		{
			if(Points[h][Type] == 4)
			{
				Points[h][Stock] = amount;
				format(szMessage, sizeof(szMessage), " CRACK DISPONIBLE: %d\n(/COMPRARCRACK)", Points[h][Stock]);
				UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_GRAD1, szMessage);
				SendClientMessageEx(playerid, COLOR_WHITE, " Estableciste la cantidad de crack en la casa de drogas.");
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "	Nombre no válido.");
	return 1;
}

CMD:plantar(playerid, params[])
{
if(Info[playerid][pWSeeds] > 0)
{
	if(Info[playerid][pWExists] == 1)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "Ya plantaste semillas tienes que esperar." );
	    return 1;
	}
	GetPlayerPos(playerid, Info[playerid][pWX], Info[playerid][pWY], Info[playerid][pWZ]);
    ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
	SendClientMessageEx(playerid, COLOR_GREEN, "Has plantado un poco de hierba. El trayecto dura unos 80-100 minutos en crecer.");
    SendClientMessageEx(playerid, COLOR_GREEN, "Podras sacar esta planta cuando pese mas de 25 gramos (/sacarplanta - /revisarplanta).");

	Info[playerid][pWInt] = GetPlayerInterior(playerid);
	Info[playerid][pWVW] = GetPlayerVirtualWorld(playerid);
	Info[playerid][pWExists] = 1;
	Info[playerid][pWValue] = -1;
	Info[playerid][pWSeeds]--;
	Info[playerid][pWText] = CreateDynamic3DTextLabel(""COL_WEED2"Semilla de marihuana en crecimiento\n"COL_WEED2"'"COL_WHITE"/sacarplanta - /revisarplanta"COL_WEED2"'",COLOR_WHITE, Info[playerid][pWX], Info[playerid][pWY], Info[playerid][pWZ]+0.5, 10.0);
	Info[playerid][pWObject] = CreateDynamicObject(2203, Info[playerid][pWX], Info[playerid][pWY], Info[playerid][pWZ]-0.8, 0.0, 0.0, 0.0, Info[playerid][pWVW], Info[playerid][pWInt]);
	Info[playerid][pWTimer] = SetTimerEx("WeedGrowth", 300000, 1, "i", playerid);
	format(szMessage, sizeof(szMessage), " * %s planta unas semillas de hierba", GetPlayerNameEx(playerid));
	ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
}
else SendClientMessageEx(playerid, COLOR_GREY, "No tienes suficientes semillas para sembrar, ve a la casa de drogas y recoge más. (/semillas)");
return 1;
}

CMD:aborrarplanta(playerid, params[]) {
if(Info[playerid][pAdmin] >= 4) {
	new
		iTargetID;
	if(sscanf(params, "d", iTargetID)) {
		SendClientMessageEx(playerid, COLOR_GREY, "USA: /aborrarplanta [playerid]");
	}
	else if(IsPlayerConnectedEx(iTargetID))
	{
		format(szMessage, sizeof(szMessage), "Destruiste la planta de %s (%i gramos).", GetPlayerNameEx(iTargetID), Info[iTargetID][pWValue]);
		SendClientMessageEx(playerid, COLOR_GREY, szMessage);
		format(szMessage, sizeof(szMessage), "Administrador %s destruyó tu planta sembarada (%i gramos).", GetPlayerNameEx(playerid), Info[iTargetID][pWValue]);
		SendClientMessageEx(iTargetID, COLOR_GREY, szMessage);
		ClearWeed(iTargetID);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID es inválida.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
return 1;
}

CMD:destruirplanta(playerid, params[])
{
if(IsACop(playerid)) {
	foreach(Player, i) if(IsPlayerInRangeOfPoint(playerid, 2.5, Info[i][pWX], Info[i][pWY], Info[i][pWZ])) {
		if(GetPlayerVirtualWorld(playerid) == Info[i][pWVW] && GetPlayerInterior(playerid) == Info[i][pWInt])
		{
			ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
			format(szMessage, sizeof(szMessage), "* Destruye la plata, pesa %d gramos.", Info[i][pWValue]);
			SendClientMessageEx(playerid, COLOR_GREY, szMessage);
			format(szMessage, sizeof(szMessage), " * %s destruye la hierba plantada.", GetPlayerNameEx(playerid), GetPlayerNameEx(i));
			ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			ClearWeed(i);
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "* No estás en una planta.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "* No eres policía.");
return 1;
}

CMD:revisarplanta(playerid, params[]) {
foreach(Player, i) if(IsPlayerInRangeOfPoint(playerid, 2.5, Info[i][pWX], Info[i][pWY], Info[i][pWZ])) {
    if(GetPlayerVirtualWorld(playerid) == Info[i][pWVW] && GetPlayerInterior(playerid) == Info[i][pWInt])
	{
		if(Info[i][pWValue] >= 20)
		{
			format(szMessage, sizeof(szMessage), "Plantador: %s, peso: %i gramos (min 25g - máx 45g). /sacarplanta para sacarla!", GetPlayerNameEx(i), Info[i][pWValue]);
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
		}
		else
		{
			format(szMessage, sizeof(szMessage), "Plantador: %s. Esto no está listo para ser sacada, sólo pesa %i gramos (min 20g - máx 45g).", GetPlayerNameEx(i), Info[i][pWValue]);
			SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
		}
		return 1;
	}
}
return SendClientMessageEx(playerid, COLOR_GREY, "* No estás en una planta.");
}

CMD:sacarplanta(playerid, params[])
{
foreach(Player, i) if(IsPlayerInRangeOfPoint(playerid, 2.5, Info[i][pWX], Info[i][pWY], Info[i][pWZ]))
{
    if(GetPlayerVirtualWorld(playerid) == Info[i][pWVW] && GetPlayerInterior(playerid) == Info[i][pWInt])
	{
		if(Info[i][pWValue] >= 20)
		{
			if(Info[i][pWValue] + Info[playerid][pPot] < 100)
			{
				ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
				Info[playerid][pPot] += Info[i][pWValue];
				format(szMessage, sizeof(szMessage), "Recogiste la hierba y te dió %d gramos de hierba.", Info[i][pWValue]);
				SendClientMessageEx(playerid, COLOR_GREY, szMessage);
				format(szMessage, sizeof(szMessage), " * %s recoge la planta.", GetPlayerNameEx(playerid));
				ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ClearWeed(i);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "* No se puede llevar a más de 99 gramos de hierba.");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* Esta planta no está lista para ser recogida todavía.");
		return 1;
	}
}
return SendClientMessageEx(playerid, COLOR_GREY, "* No estás en una planta.");
}

CMD:materiales(playerid, params[])
{
if (Info[playerid][pMember] <= 8) return SendClientMessageEx(playerid, COLOR_GREY, "* Debes pertenecer a una familia/banda para recoger paquetes de materiales.");
if(GetPVarInt(playerid, "Packages") >= 1 || EMSAccepted[playerid] != 999 || MedicAccepted[playerid] != 999 || MechanicCallTime[playerid] >= 1)
{
	SendClientMessageEx(playerid, COLOR_WHITE, "Por favor primero asegurate de estar sin un checkpoint activo (Tal vez tengas materiales por entregar).");
	return 1;
}
if(IsPlayerInRangeOfPoint(playerid, 10.0, 2613.3691,-1065.9915,69.9656)) // Matrun 3
{
	if(GetPVarInt(playerid, "Packages") >= 10) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes entregar tus paquetes primero.");
	if(Info[playerid][pVIP] == 1)
	{
	    if(GetPlayerCash(playerid) < 1125) return SendClientMessageEx(playerid, COLOR_GREY," No puedes pagar $1125!");
		GivePlayerCash(playerid, -1125);
		SetPVarInt(playerid, "Packages", 23);
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Pagaste 23 Paquetes de Materiales por $1125.");
		SendClientMessageEx(playerid, COLOR_GRAD1,"VIP Silver: Has recibido los paquetes pero por 1.5x más, y lo que te permite es recibir 1.5x materiales más.");
	}
	else if(Info[playerid][pVIP] == 2)
	{
		if(GetPlayerCash(playerid) < 1500) return SendClientMessageEx(playerid, COLOR_GREY," No puedes pagar $1500!");
		GivePlayerCash(playerid, -1500);
		SetPVarInt(playerid, "Packages", 30);
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Pagaste 30 Paquetes de Materiales por $1500.");
		SendClientMessageEx(playerid, COLOR_GRAD1,"VIP Gold: Has recibido los paquetes pero por 2x más, y lo que te permite es recibir 2x materiales más.");
	}
	else
	{
		if(GetPlayerCash(playerid) < 1000) return SendClientMessageEx(playerid, COLOR_GREY," No puedes pagar $1000!");
		GivePlayerCash(playerid, -1000);
		SetPVarInt(playerid, "Packages", 15);
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Pagaste 15 Paquetes de Materiales por $1000.");
	}
	SendClientMessageEx(playerid, COLOR_WHITE, "TIP: Sigue tu camino hacia el checkpoint y entrega tus paquetes de materiales.");
	SetPVarInt(playerid, "MatDeliver", 333);
	SetPVarInt(playerid, "tpMatRunTimer", 15);
    SetPlayerAttachedObject(playerid,9, 1210, 6,0.3,0.1,0,0,-90,0);
	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
	SetPlayerCheckpoint(playerid, 1083.0131,-1226.7869,15.8203, 5);
	return 1;
}
if (IsPlayerInRangeOfPoint(playerid, 4.0, 2388.4568,-2008.2374,13.5537)) // Matrun 4
{
	if(GetPVarInt(playerid, "Packages") >= 10) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes entregar tus paquetes primero. (( Usar el comando /tirar parquetesM ))");
	if(Info[playerid][pVIP] == 1)
	{
		if(GetPlayerCash(playerid) < 900) return SendClientMessageEx(playerid, COLOR_GREY," No puedes pagar $900!");
		GivePlayerCash(playerid, -900);
		SetPVarInt(playerid, "Packages", 18);
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Pagaste 18 Paquetes de Materiales por $900.");
		SendClientMessageEx(playerid, COLOR_GRAD1,"VIP Silver: Has recibido los paquetes pero por 1.5x más, y lo que te permite es recibir 1.5x materiales más.");
	}
	else if(Info[playerid][pVIP] == 2)
	{
		if(GetPlayerCash(playerid) < 1200) return SendClientMessageEx(playerid, COLOR_GREY," No puedes pagar $1200!");
		GivePlayerCash(playerid, -1200);
		SetPVarInt(playerid, "Packages", 24);
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Pagaste 24 Paquetes de Materiales por $1200.");
		SendClientMessageEx(playerid, COLOR_GRAD1,"VIP Gold: Has recibido los paquetes pero por 2x más, y lo que te permite es recibir 2x materiales más.");
	}
	else
	{
		if(GetPlayerCash(playerid) < 600) return SendClientMessageEx(playerid, COLOR_GREY," No puedes pagar $600!");
		SendClientMessageEx(playerid, COLOR_GENERAL,"* Pagaste 18 Paquetes de Materiales por $600.");
		GivePlayerCash(playerid, -600);
		SetPVarInt(playerid, "Packages", 18);
	}

	SetPVarInt(playerid, "MatDeliver", 444);
	SetPVarInt(playerid, "tpMatRunTimer", 12);
    SetPlayerAttachedObject(playerid,9, 1210, 6,0.3,0.1,0,0,-90,0);
	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
	SetPlayerCheckpoint(playerid, 2288.2263,-1104.6658,38.5870, 5);
	return 1;
}
new mypoint = -1;
for (new i=0; i<MAX_POINTS; i++)
{
	if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 1)
	{
		mypoint = i;
	}
}
if (mypoint == -1) return SendClientMessageEx(playerid, COLOR_GREY, " No estás en el Punto donde se recogen materiales!");
new payment;
if(Info[playerid][pVIP] == 1)
{
	if(GetPlayerCash(playerid) < 750) return SendClientMessageEx(playerid, COLOR_GREY," No puedes pagar $750!");
    payment = 750;
	SetPVarInt(playerid, "Packages", 15);
	SendClientMessageEx(playerid, COLOR_GENERAL,"* Pagaste $750 por 15 materiales.");
	SendClientMessageEx(playerid, COLOR_GRAD1,"VIP Silver: Tu recibes 1.5x paquetes más, que te dará 1.5x más materiales.");
}
else if(Info[playerid][pVIP] == 2)
{
	if(GetPlayerCash(playerid) < 1000) return SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1000!");
    payment = 1000;
	SetPVarInt(playerid, "Packages", 20);
	SendClientMessageEx(playerid, COLOR_GENERAL,"* Pagaste $1000 por 20 materiales.");
	SendClientMessageEx(playerid, COLOR_GRAD1,"VIP Gold: Tu recibes 2x paquetes más, que te dará 2x más materiales.");
}
else
{
	if(GetPlayerCash(playerid) < 500) return SendClientMessageEx(playerid, COLOR_GREY," No tienes $500!");
    payment = 500;
	
	SetPVarInt(playerid, "Packages", 10);
	SendClientMessageEx(playerid, COLOR_GENERAL,"* Pagaste 10 paquetes de materiales por $500.");
}
GivePlayerCash(playerid, -payment);
SetPVarInt(playerid, "MatDeliver", 555);
SetPVarInt(playerid, "tpMatRunTimer", 10);
SetPlayerAttachedObject(playerid,9, 1210, 6,0.3,0.1,0,0,-90,0);
SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
SetPlayerCheckpoint(playerid, 2317.739990,-2303.850830,13.545999, 5);
return 1;
}

CMD:settax(playerid, params[])
{
if(Info[playerid][pAdmin] < 8) return NoAutorizado
if(!isnull(params))
{
    Tax = strval(params);
    format(szMessage, sizeof(szMessage), "AdmExe: Nuevo fondo del gobierno: "COL_WHITE"$%d.", Tax);
    SendClientMessageEx(playerid, COLOR_GENERAL, szMessage);
    SaveStuff();
}
return 1;
}
CMD:sfondos(playerid, params[])
{
if(!Presidente(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No eres el lider del gobierno.");
new string[128], amount, reason[64];
if(sscanf(params, "ds[64]", amount, reason))
{
	SendClientMessageEx(playerid, COLOR_WHITE, "USA: /sfondos [monto] [razón]");
	format(string, sizeof(string), "* BALANCE: "COL_WHITE"$%d.", Tax);
	SendClientMessageEx(playerid, COLOR_GENERAL, string);
	return 1;
}
if(amount < 0) return SendClientMessageEx(playerid, COLOR_GREY, "* El monto es inválido.");
if(Tax >= amount)
{
	Tax -= amount;
	SaveStuff();
	GivePlayerCash( playerid, amount );
	format( string, sizeof( string ), "Retiraste $%d de los fondos del gobierno.", amount );
	SendClientMessageEx( playerid, COLOR_WHITE, string );
	format(string,sizeof(string),""COL_BLUE"Administración >"COL_WHITE" %s retiro $%d de los fondos del gobierno, razón: %s.",GetPlayerNameEx(playerid),amount,reason);
	ABroadCast( COLOR_GRAD1, string, 2);
	Log("logs/especial.log", string);
}
else SendClientMessageEx(playerid, COLOR_GREY, "No hay fondos suficientes.");
return 1;
}

CMD:dfondos(playerid, params[])
{
if(!Presidente(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No eres el lider del gobierno.");
new string[128], amount;
if(sscanf(params, "d", amount))
{
	SendClientMessageEx(playerid, COLOR_WHITE, "USA: /dfondos [monto]");
	format(string, sizeof(string), "* BALANCE: "COL_WHITE"$%d.", Tax);
	SendClientMessageEx(playerid, COLOR_GENERAL, string);
	return 1;
}
if(amount < 0) return SendClientMessageEx(playerid, COLOR_GREY, "* El monto es inválido.");
Tax += amount;
SaveStuff();
GivePlayerCash(playerid, -amount);
format( string, sizeof( string ), "Depositaste $%d en los fondos del gobierno.", amount );
SendClientMessageEx( playerid, COLOR_WHITE, string );
return 1;
}
CMD:scnn(playerid, params[])
{
    if(!DirectorCNN(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No eres el lider de CNN.");
	new string[128], amount, reason[64];
	if(sscanf(params, "ds[64]", amount, reason))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USA: /scnn [monto] [razón]");
		format(string, sizeof(string), "* BALANCE: $%d.", TaxCNN);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string,sizeof(string),""COL_BLUE"Administración >"COL_WHITE" %s deposito $%d de los fondos de CNN, razón: %s.",GetPlayerNameEx(playerid),amount,reason);
		ABroadCast( COLOR_RED2, string, 2);
		Log("logs/especial.log", string);
		return 1;
	}
	if(amount < 0) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " El monto es inválido.");
	if( Tax > amount )
	{
		TaxCNN -= amount;
		SaveStuff();
		GivePlayerCash( playerid, amount );
		format( string, sizeof( string ), "Retiraste $%d de los fondos de CNN.", amount );
		SendClientMessageEx( playerid, COLOR_WHITE, string );
		format(string,sizeof(string),""COL_BLUE"Administración >"COL_WHITE" %s retiro $%d de los fondos de CNN, razón: %s.",GetPlayerNameEx(playerid),amount,reason);
		ABroadCast( COLOR_RED2, string, 2);
		Log("logs/especial.log", string);
	}
	else
	{
			SendClientMessageEx(playerid, COLOR_GREY, "No hay fondos suficientes.");
	}
	return 1;
}

CMD:dcnn(playerid, params[])
{
	if(!DirectorCNN(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No eres el lider de CNN.");
	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USA: /dcnn [monto]");
		format(string, sizeof(string), "* BALANCE: $%d.", TaxCNN);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		return 1;
	}
	if(amount < 0) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Monto es inválido.");
	TaxCNN += amount;
	SaveStuff();
	GivePlayerCash(playerid, -amount);
	format( string, sizeof( string ), "Depositaste $%d en los fondos de CNN.", amount );
	SendClientMessageEx( playerid, COLOR_WHITE, string );
	return 1;
}
CMD:placaex(playerid, params[]){
if(IsACop(playerid) || Info[playerid][pMember] == 4 || Info[playerid][pLeader] == 4 && GetPVarInt(playerid, "IsInArena") == 0 && !GetPVarInt(playerid, "EventToken") && Info[playerid][pJailed] == 0){
	if(OnDuty[playerid] == 1){
		OnDuty[playerid] = 0;
		SetPlayerToTeamColor(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora serás visto como fuera de servicio.");
	}
	else{
		OnDuty[playerid] = 1;
		SetPlayerToTeamColor(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "Ahora serás visto como en servicio.");
	}
}
return 1;
}

CMD:arrestar(playerid, params[]){
if(IsACop(playerid)){
	if(!IsAtArrestPoint(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No estás en el punto de arresto.");
	new string[128], moneys, time, bail, bailprice;
	if(sscanf(params, "dddd", moneys, time, bail, bailprice)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /arrestar [Multa] [Tiempo (minutos)] [Fianza (0=no 1=si)] [Precio]");
	if(moneys < 1 || moneys > 30000) { SendClientMessageEx(playerid, COLOR_GREY, "Multa: $1 a $30,000."); return 1; }
	if(time < 1 || time > 60) { SendClientMessageEx(playerid, COLOR_GREY, "Tiempo: 1 a 60 minutos."); return 1; }
	if(bail < 0 || bail > 1) { SendClientMessageEx(playerid, COLOR_GREY, "Fianza: 0 [OFF] o 1 [ON]."); return 1; }
	if(bailprice < 0 || bailprice > 10000) { SendClientMessageEx(playerid, COLOR_GREY, "Fianza: $0 a $10,000."); return 1; }
	new suspect = GetClosestPlayer(playerid);
	if(IsPlayerConnectedEx(suspect)){
		if(ProxDetectorS(5.0, playerid,suspect))
		{
			format(string, sizeof(string), "["COL_BLUE"NOTICIAS"COL_WHITE"] ¡Noticia de último minuto! , %s fué arrestado y ha sido mandado a la Prisión federal", GetPlayerNameEx(suspect));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			GivePlayerCash(suspect, -moneys);
			Tax += moneys;
			ResetPlayerWeaponsEx(suspect);
			SetPlayerSkin(suspect, 50);
			if(RobarTiempo[playerid] > 0)
            {
                SendClientMessageEx(playerid, COLOR_TWRED, "Nota:{FFFFFF} Has resultado arrestado en un intento de robo al banco, la policia te ha quitado el dinero.");
                GivePlayerCash(playerid, -DineroRobado[playerid]);
                DineroRobado[playerid] = 0;
                RobarTiempo[playerid] = 0;
                KillTimer(RobarTiempoTimer[playerid]);
		        return 1;
            }
			if(IsPlayerInRangeOfPoint(playerid, 4.0, 1559.3228,-1693.7491,5.8970)){
				SetPlayerFacingAngle(suspect, 0);
				if(Info[suspect][pVIP] >= 2)
				{
					Info[suspect][pJailTime] = ((time*60)*75)/100;
				}
				else
				{
					Info[suspect][pJailTime] = time * 60;
				}
				DeletePVar(suspect, "IsFrozen");
				new rand;
	    		rand = random(sizeof(SAPDPrisonSpawns));
	    		SetPlayerPos(suspect, SAPDPrisonSpawns[rand][0], SAPDPrisonSpawns[rand][1], SAPDPrisonSpawns[rand][2]);
	    		LoadObjects(suspect);
				SetPlayerInterior(suspect, 10);
				Info[suspect][pInt] = 10;
				Info[suspect][pJailed] = 2;
				PhoneOnline[suspect] = 1;
				Info[suspect][pArrested] += 1;
				Info[suspect][pWantedLevel] = 0;
				SetPlayerToTeamColor(suspect);
				SetPlayerWantedLevel(suspect, 0);
				ClearAnimations(suspect);
				Info[suspect][pEstado] = 0;
				DeletePVar(suspect, "PlayerCuffed");
				PlayerCuffedTime[suspect] = 0;
				Info[suspect][pVW] = 500;
				SetPlayerVirtualWorld(suspect, 500);
			}
			if(IsPlayerInRangeOfPoint(playerid, 4.0, 613.3228,-589.1623,17.2266)) // Dillmore
			{
			    SetPlayerFacingAngle(suspect, 0);
				if(Info[suspect][pVIP] >= 2)
				{
					Info[suspect][pJailTime] = ((time*60)*75)/100;
				}
				else
				{
					Info[suspect][pJailTime] = time * 60;
				}
				DeletePVar(suspect, "IsFrozen");
				new rand;
	    		rand = random(sizeof(PrisonDillmore));
	    		SetPlayerPos(suspect, PrisonDillmore[rand][0], PrisonDillmore[rand][1], PrisonDillmore[rand][2]);
				SetPlayerInterior(suspect, 5);
				Info[suspect][pInt] = 5;
				Info[suspect][pVW] = 400;
				SetPlayerVirtualWorld(suspect, 400);
				Info[suspect][pJailed] = 6;
				PhoneOnline[suspect] = 1;
				Info[suspect][pArrested] += 1;
				Info[suspect][pWantedLevel] = 0;
				SetPlayerToTeamColor(suspect);
				SetPlayerWantedLevel(suspect, 0);
				ClearAnimations(suspect);
				Info[suspect][pEstado] = 0;
				DeletePVar(suspect, "PlayerCuffed");
				PlayerCuffedTime[suspect] = 0;
			}
			else if(Team_FBI(playerid)){
				TogglePlayerControllable(suspect, 0);
			    TextDrawShowForPlayer(suspect, boxGM);
				SetPVarInt(suspect, "LoadingObjects", 1);
				SetTimerEx("SafeLoadObjects", 4000, 0, "d", suspect);
				SetPlayerInterior(suspect, 1);
				Info[suspect][pVW] = 600;
				Info[suspect][pInt] = 1;
				SetPlayerVirtualWorld(suspect, 600);
				SetPlayerPos(suspect,315.1677,-1451.5564,-33.5292);
				if(Info[suspect][pVIP] >= 2)
				{
					Info[suspect][pJailTime] = ((time*60)*75)/100;
				}
				else
				{
					Info[suspect][pJailTime] = time * 60;
				}
				Info[suspect][pJailed] = 3;
				PhoneOnline[suspect] = 1;
				DeletePVar(suspect, "IsFrozen");
				Info[suspect][pArrested] += 1;
				Info[suspect][pWantedLevel] = 0;
				SetPlayerToTeamColor(suspect);
				SetPlayerWantedLevel(suspect, 0);
				ClearAnimations(suspect);
				Info[suspect][pEstado] = 0;
				DeletePVar(suspect, "PlayerCuffed");
				PlayerCuffedTime[suspect] = 0;
			}
			if(bail == 1){
				JailPrice[suspect] = bailprice;
				format(string, sizeof(string), "¡Encarcelado "COL_BLUE"%d"COL_WHITE" segundos! - Fianza: "COL_BLUE"$%d", Info[suspect][pJailTime], JailPrice[suspect]);
				SetPlayerColor(playerid,TEAM_GREEN_COLOR);
				SendClientMessageEx(suspect, COLOR_WHITE, "Estás en la prisión federal.");
				SendClientMessageEx(suspect, COLOR_WHITE, string);
			}
			else{
				JailPrice[suspect] = 0;
				format(string, sizeof(string), "¡Encarcelado "COL_BLUE"%d"COL_WHITE" segundos! - Fianza: "COL_BLUE"No Disponible", Info[suspect][pJailTime]);
				SendClientMessageEx(suspect, COLOR_WHITE, "Estás en la prisión federal.");
				SetPlayerColor(playerid,TEAM_GREEN_COLOR);
				SendClientMessageEx(suspect, COLOR_WHITE, string);
			}
			SetPlayerSpecialAction(suspect, 0);
			if(Info[suspect][pGunLic] == 1)
			{
			    Info[suspect][pGunLic] = -1;
			    SendClientMessageEx(suspect, COLOR_WHITE, "Te han suspendido la licencia de armas de por vida.");
			}
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "* No hay nadie cerca tuyo.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "* No eres de las fuerzas de la ley!");
return 1;
}

CMD:fianza(playerid, params[]){
if(Info[playerid][pJailed] >= 2){
	if(JailPrice[playerid] > 0){
		if(GetPlayerCash(playerid) > JailPrice[playerid]){
			new string[128];
			format(string, sizeof(string), "Pagaste la fianza de $%d.", JailPrice[playerid]);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			GivePlayerCash(playerid, -JailPrice[playerid]);
			Tax += JailPrice[playerid];
			Info[playerid][pJailTime] = 1;
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes el dinero de la fianza");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* En tu condena no hay fianza, espera el tiempo de condena.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "* No estás en prisión.");
return 1;
}
CMD:vendermateriales(playerid, params[])
{
new string[128], giveplayerid, amount, price;
if(sscanf(params, "udd", giveplayerid, amount, price)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /vendermateriales [playerid] [Monto] [Precio]");
if(amount < 1 || amount > 99999999) { SendClientMessageEx(playerid, COLOR_GREY, "* Los valores no pueden ser mayores a 99999999 gramos ni menores a 1."); return 1; }
if(price < 1) { SendClientMessageEx(playerid, COLOR_GREY, "* El precio no puede ser menor que 1!"); return 1; }
if (GetPVarInt(playerid, "ArmsTimer") > 0)
{
    format(string, sizeof(string), "* Tienes que esperar %d segundos despues de haber dado algún arma o materiales.", GetPVarInt(playerid, "ArmsTimer"));
    SendClientMessageEx(playerid,COLOR_GREY,string);
    return 1;
}
if(IsPlayerConnectedEx(playerid))
{
	if(IsPlayerConnectedEx(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes venderte a ti mismo.");
			
			format(string, sizeof(string), "* Has ofrecido a %s, %d materiales por $%d.", GetPlayerNameEx(giveplayerid), amount, price);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			format(string, sizeof(string), "* %s quiere venderte %d materiales por $%d, (Usa: /aceptar materiales para comprar).", GetPlayerNameEx(playerid), amount, price);
			SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
			MatsOffer[giveplayerid] = playerid;
			MatsPrice[giveplayerid] = price;
			return MatsAmount[giveplayerid] = amount;
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está cerca tuyo.");
	}
}
else SendClientMessageEx(playerid, COLOR_WHITE, "* ID Inválido.");
return 1;
}

CMD:serverstats(playerid, params[])
{
	new string[128];
	new formatmin[4];
	if(MPMinute < 10) format(formatmin,sizeof(formatmin),"0%d",MPMinute);
	else format(formatmin,sizeof(formatmin),"%d",MPMinute);
	format(string,sizeof(string),"Estadisticas del Servidor - Versión %s (desde 15 de Diciembre, 2014).",SERVER_VERSION);
	SendClientMessageEx(playerid, COLOR_GENERAL, string);
	format(string, sizeof(string), "* Objetos: %d | Pickups: %d | Map Icons: %d | 3D Text Labels: %d | TextDraws: %d | Casas: %d",CountDynamicObjects(),CountDynamicPickups(),CountDynamicMapIcons(),CountDynamic3DTextLabels(),textdrawscount,MAX_HOUSES);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "* Logins: %d | Conexiones: %d | Registrados: %d | Autobaneados: %d | Uptime: %d horas",TotalLogin, TotalConnect, TotalRegister, TotalAutoBan, TotalUptime);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "* Usuarios Conectados: %d | Récord: %d (%d/%d/%d - %d:%s) | Vehiculos de Usuarios: %d",Iter_Count(Player),MaxPlayersConnected,MPDay,MPMonth,MPYear,MPHour,formatmin,PlayerCars);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	return 1;
}

CMD:proteccion(playerid, params[])
{
if(Info[playerid][pJob] != 5 && Info[playerid][pJob2] != 5)
{
	SendClientMessageEx(playerid, COLOR_GREY, "No eres un bodyguard.");
	return 1;
}
new string[128], giveplayerid, money;
if(sscanf(params, "dd", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /proteccion [playerid] [precio]");
if (GetPVarInt(playerid, "GuardTimer") > 0)
{
	format(string, sizeof(string), "   Debes esperar %d segundos después de haber vendido.", GetPVarInt(playerid, "GuardTimer"));
	SendClientMessageEx(playerid,COLOR_GREY,string);
	return 1;
}
if(money < 2000 || money > 10000) { SendClientMessageEx(playerid, COLOR_GREY, "Precio: $2,000 a $10,000."); return 1; }
if(IsPlayerConnectedEx(giveplayerid))
{

	if(ProxDetectorS(8.0, playerid, giveplayerid))
	{
		if(giveplayerid == playerid)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer esto para ti mismo.");
			return 1;
		}
		SetPVarInt(playerid, "GuardTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GUARDTIMER);
		format(string, sizeof(string), "* Ofreciste protección a %s por $%d.", GetPlayerNameEx(giveplayerid), money);
		SendClientMessageEx(playerid, COLOR_GENERAL, string);
		format(string, sizeof(string), "* Bodyguard %s quiere darte protección por $%d, usa /aceptar bodyguard para aceptar.", GetPlayerNameEx(playerid), money);
		SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
		GuardOffer[giveplayerid] = playerid;
		GuardPrice[giveplayerid] = money;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "El jugador está cerca tuyo.");
	}

}
else
{
	SendClientMessageEx(playerid, COLOR_GREY, "Jugador no está conectado.");
}
return 1;
}

CMD:mostrar(playerid, params[])
{
new string[128], giveplayerid, choice[32];
if(sscanf(params, "ds[32]", giveplayerid, choice))
{
	SendClientMessageEx(playerid, COLOR_WHITE, "USA: /mostrar [playerid] [Nombre]");
	SendClientMessageEx(playerid, COLOR_GREY, "Nombres: Hierba, Crack, Materiales");
	return 1;
}
if(giveplayerid == playerid)
{
    SendClientMessageEx(playerid, COLOR_GREY, "No puedes enseñarte a ti mismo");
	return 1;
}
if(IsPlayerConnectedEx(giveplayerid))
{
	if(giveplayerid != INVALID_PLAYER_ID)
	{
		if (!ProxDetectorS(5.0, playerid, giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador no está cerca tuyo.");
			return 1;
		}
		if (strcmp(choice, "materiales", true) == 0)
		{
		    new amount = Info[playerid][pMats];
		    if(amount < 1)
		    {
		        SendClientMessageEx(playerid, COLOR_GREY, "No tienes materiales!");
				return 1;
		    }
			format(string, sizeof(string), "%s te ha mostrado sus %d Materiales.",  GetPlayerNameEx(playerid), amount);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

			format(string, sizeof(string), "Enseñaste a %s tus %d Materiales.", GetPlayerNameEx(giveplayerid), amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			format(string, sizeof(string), "* %s enseña algo a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
		if (strcmp(choice, "hierba", true) == 0)
		{
		    new amount = Info[playerid][pPot];
		    if(amount < 1)
		    {
		        SendClientMessageEx(playerid, COLOR_GREY, "No tienes hierba!");
				return 1;
		    }
			format(string, sizeof(string), "%s te ha mostrado sus %d bolsas de hierba.",  GetPlayerNameEx(playerid), amount);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

			format(string, sizeof(string), "Enseñaste a %s tus %d bolsas de hierba.", GetPlayerNameEx(giveplayerid), amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			format(string, sizeof(string), "* %s enseña algo a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
		if (strcmp(choice, "crack", true) == 0)
		{
		    new amount = Info[playerid][pCrack];
		    if(amount < 1)
		    {
		        SendClientMessageEx(playerid, COLOR_GREY, "No tienes crack!");
				return 1;
		    }
			format(string, sizeof(string), "%s te ha mostrado sus %d gramos de crack.",  GetPlayerNameEx(playerid), amount);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

			format(string, sizeof(string), "Enseñaste a %s tus %d gramos de crack.", GetPlayerNameEx(giveplayerid), amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			format(string, sizeof(string), "* %s enseña algo a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
	}
}
return 1;
}

CMD:saludar(playerid, params[])
{
new string[128], giveplayerid, style;
if(sscanf(params, "dd", giveplayerid, style)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /saludar [playerid] [estilo (1-8)]");

if(IsPlayerConnectedEx(giveplayerid))
{
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hacer eso tu mismo.");

	if(style >= 1 && style < 9)
	{
		new Float: ppFloats[3];
		GetPlayerPos(giveplayerid, ppFloats[0], ppFloats[1], ppFloats[2]);
		if(!IsPlayerInRangeOfPoint(playerid, 5, ppFloats[0], ppFloats[1], ppFloats[2]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Estás demasiado lejos de la persona.");
			return 1;
		}
		SetPVarInt(playerid, "shrequest", giveplayerid);
		SetPVarInt(playerid, "shstyle", style);

		format(string, sizeof(string), "Saludaste a %s, espera que el responda.", GetPlayerNameEx(giveplayerid));
		SendClientMessageEx(playerid, COLOR_GENERAL, string);

		format(string, sizeof(string), "%s te ha saludado, porfavor usa '/aceptar saludo' para darle la mano.", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
	}
	else return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /saludar [playerid] [estilo (1-8)]");
}
else SendClientMessageEx(playerid, COLOR_GREY, "Jugador desconectado.");
return 1;
}

CMD:gmaletero(playerid, params[])
{
	if(GetPVarInt(playerid, "Dandoarma") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No puedes usar este comando mientras estás dando un arma a otro jugador.");
	if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No puedes usar este comando mientras estás en el paintball.");
 	if(GetPVarInt( playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: No puedes usar este comando mientras estás en un evento.");
	if(IsPlayerInAnyVehicle(playerid)) { SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No puedes hacer esto mientras estar en el interior del vehículo!"); return 1; }
	if(GetPVarInt(playerid, "EMSAttempt") != 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR]: No puedes usar este comando ahora mismo.");
	new string[128],slot,engine,lights,alarm,doors,bonnet,boot,objective,currentwep = GetPlayerWeapon(playerid),varwep, varammo;
	if(currentwep == 0 || currentwep == 1) return SendClientMessage(playerid,COLOR_GRAD2,"Debes tener tu arma en mano para guardarla.");
	if(sscanf(params, "d", slot)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /gmaletero [slot]");
	new pvid = -1, Float: x, Float: y, Float: z, pnamep[MAX_PLAYER_NAME], wepnamex[24];
	format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
	    if(strcmp(PlayerVehicleInfo[d][pvOwner], pnamep) == 0)
	    {
			if(PlayerVehicleInfo[d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[d][pvId], x, y, z);
			if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
			{
				pvid = d;
				break;
			}
		}
	}
	if(pvid == -1) return SendClientMessageEx(playerid,COLOR_GREY,"[ERROR]: No estás cerca de un vehículo que sea tuyo.");
	GetVehicleParamsEx(PlayerVehicleInfo[pvid][pvId],engine,lights,alarm,doors,bonnet,boot,objective);
	if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) return SendClientMessageEx(playerid, COLOR_GRAD3, "[ERROR]: No se puede poner armas en el interior del maletero si está cerrado! (/maletero para abrirlo)");
	if(GetVehicleModel(PlayerVehicleInfo[pvid][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[pvid][pvId]) == 510)  return SendClientMessageEx(playerid,COLOR_GREY,"[ERROR]: Este coche no tiene maletero.");
	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "   Necesitas esperar %d segundos después de haber guardado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
		return SendClientMessageEx(playerid,COLOR_GREY,string);
	}
	if( PlayerVehicleInfo[pvid][pvWeapons][slot-1] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: Tienes armas guardadas en ese slot.");
	GetPlayerWeaponData(playerid, GetWeaponSlot(currentwep), varwep, varammo);
	GetWeaponName(currentwep, wepnamex, sizeof(wepnamex));
	format(szMessage, sizeof(szMessage), "guarda su %s en el maletero del vehiculo.", wepnamex);
	cmd_me(playerid, szMessage);
	PlayerVehicleInfo[pvid][pvWeapons][slot-1] = varwep;
	PlayerVehicleInfo[pvid][pvMunicion][slot-1] = varammo;
	RemovePlayerWeapon(playerid, currentwep);
	return 1;
}

CMD:smaletero(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No puedes hacer esto mientras estás dentro de un vehículo.");
	else if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No puedes usar este comando mientras estás en el paintball.");
	else if(GetPVarInt( playerid, "EventToken") != 0) return SendClientMessageEx(playerid, COLOR_GREY, "[ERROR]: No puedes usar este comando mientras estás en un evento.");
	else if(Info[playerid][pConnectTime] < 2 || Info[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "[ERROR]: No puedes usar este comando ya que tienes restricción de armas.");
	else if(GetPVarInt(playerid, "GiveWeaponTimer") >= 1)
	{
		format(szMessage, sizeof(szMessage), "   Necesitas esperar %d segundos después de haber agarrado un arma.", GetPVarInt(playerid, "GiveWeaponTimer"));
		return SendClientMessageEx(playerid, COLOR_GREY, szMessage);
	}
	new Float: fVehPos[3], iWeaponSlot = strval(params), pnamep[MAX_PLAYER_NAME];
    format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
	    if(strcmp(PlayerVehicleInfo[d][pvOwner], pnamep) == 0)
	    {
			if(PlayerVehicleInfo[d][pvId] != INVALID_PLAYER_VEHICLE_ID)
			{
				GetVehiclePos(PlayerVehicleInfo[d][pvId], fVehPos[0], fVehPos[1], fVehPos[2]);
				if(IsPlayerInRangeOfPoint(playerid, 4.0, fVehPos[0], fVehPos[1], fVehPos[2]))
				{
					if(isnull(params))
					{
						format(szMessage, sizeof(szMessage), "*** %s - %s ***", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[d][pvId]));
						SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
						for(new s = 0; s < 3; s++) if(PlayerVehicleInfo[d][pvWeapons][s] != 0)
						{
							new szWeapon[16];
							GetWeaponName(PlayerVehicleInfo[d][pvWeapons][s], szWeapon, sizeof(szWeapon));
							format(szMessage, sizeof(szMessage), "Ranura %d: %s", s+1, szWeapon);
							SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
						}
						return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /smaletero [slot]");
					}
					else if(GetVehicleModel(PlayerVehicleInfo[d][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[d][pvId]) == 509) return SendClientMessageEx(playerid,COLOR_GREY,"Ese vehiculo no tiene maletero.");
					new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(PlayerVehicleInfo[d][pvId], engine, lights, alarm, doors, bonnet, boot, objective);
					if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) return SendClientMessageEx(playerid, COLOR_GRAD3, "No puedes tomar armas del maletero, si está cerrado! /maletero para abrirlo.");
					else if(PlayerVehicleInfo[d][pvWeapons][iWeaponSlot - 1] != 0)
					{
						GivePlayerValidWeapon(playerid, PlayerVehicleInfo[d][pvWeapons][iWeaponSlot - 1], PlayerVehicleInfo[d][pvMunicion][iWeaponSlot - 1]);
						PlayerVehicleInfo[d][pvWeapons][iWeaponSlot - 1] = 0;
						PlayerVehicleInfo[d][pvMunicion][iWeaponSlot - 1] = 0;
						format(szMessage, sizeof(szMessage), "Retiraste un %s del maletero de tu coche.", WeaponNames[PlayerVehicleInfo[d][pvWeapons][iWeaponSlot - 1]]);
						SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
						format(szMessage, sizeof(szMessage), "* %s ha retirado un %s del maletero de su coche.", GetPlayerNameEx(playerid), WeaponNames[PlayerVehicleInfo[d][pvWeapons][iWeaponSlot - 1]]);
						return ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else return SendClientMessageEx(playerid, COLOR_WHITE, "No tienes un arma almacenada en esa ranura.");
				}
			}
		}
	}
	return SendClientMessageEx(playerid,COLOR_GREY,"No estás cerca de un vehiculo tuyo.");
}

CMD:limpiar(playerid, params[])
{
	new string[128], giveplayerid;
	if(!IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* /limpiar [playerid]");
	if(IsPlayerConnectedEx(giveplayerid))
	{
		format(string, sizeof(string), "* Limpiaste el nivel de búsqueda %s.", GetPlayerNameEx(giveplayerid));
		SendClientMessageEx(playerid, COLOR_GENERAL, string);
		format(string, sizeof(string), "* Agente %s a limpiado tu nivel de búsqueda.", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
		format(string, sizeof(string), "* Agente %s a limpiado el nivel de búsqueda de %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		SendRadioMessage(1, TEAM_RADIO_COLOR, string);
		SendRadioMessage(2, TEAM_RADIO_COLOR, string);
		SendRadioMessage(3, TEAM_RADIO_COLOR, string);
		Info[giveplayerid][pWantedLevel] = 0;
		SetPlayerToTeamColor(giveplayerid);
		SetPlayerWantedLevel(giveplayerid, 0);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "Esa ID es inválida.");
	return 1;
}

CMD:irapunto(playerid, params[])
{
	if(Info[playerid][pFactionModerator] != 1) return NoAutorizado
	new points;
	if(sscanf(params, "d", points)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /irapunto [pointid]");
	if(points >= MAX_POINTS || points < 0) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /irapunto [0-8]");
	SetPlayerPos(playerid, Points[points][Pointx], Points[points][Pointy], Points[points][Pointz]);
	return 1;
}

CMD:hora(playerid, params[])
{
new time[3];
gettime(time[0], time[1], time[2]);
if(time[1] < 10) format(szMessage, sizeof(szMessage), "* Hora Actual: %d:0%d (%d segundos).", time[0], time[1], time[2]);
else format(szMessage, sizeof(szMessage), "* Hora Actual: %d:%d (%d segundos).", time[0], time[1], time[2]);
SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
new string[128];
format(string, sizeof(string), "* %s se fija la hora en su reloj de muñeca", GetPlayerNameEx(playerid));
ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);

return 1;
}
CMD:payday(playerid, params[])
{
format(szMessage, sizeof(szMessage), "Tu próximo paycheck será en %d minutos (%d segundos).", (3600-Info[playerid][pTimePayDay])/60, (3600-Info[playerid][pTimePayDay]));
SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
SendClientMessageEx(playerid, COLOR_WHITE, "Recuerda que al estar AFK no recibirás PayCheck.");
return 1;
}
CMD:shopvest(playerid, params[])
{
	if (Info[playerid][pShopTech] != 1) return SendClientMessageEx(playerid, COLOR_GREY, " No puedes usar este comando.");
	new string[128], giveplayerid, slot, invoice[64];
	if(sscanf(params, "dds[64]", giveplayerid, slot, invoice)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /shopvest [playerid] [slot(0-9)] [invoice #]");

	PlayerToyInfo[giveplayerid][slot][ptModelID] = 19515;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 1;
	PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.07998;
	PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.03999;
	PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	format(string, sizeof(string), "Police Vest en el slot %d, usa /toys para editar la posición.", slot);
	SendClientMessageEx(giveplayerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "Diste a %s un police vest en el slot %d", GetPlayerNameEx(giveplayerid), slot);
	SendClientMessageEx(playerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "[SHOPVEST] %s has given %s a police vest toy - Invoice %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
	Log("logs/shoplog.log", string);
	return 1;
}

CMD:listatoys(playerid, params[])
{
if (Info[playerid][pAdmin] >= 4)
{
	new
		iTargetID;

	if(sscanf(params, "d", iTargetID)) {
		SendClientMessageEx(playerid, COLOR_GREY, "USA: /listatoys [playerid]");
	}
	else if(IsPlayerConnectedEx(iTargetID))
	for(new iToyIter, szMessageex[128]; iToyIter < MAX_PLAYERTOYS; ++iToyIter)
	{
		for(new LoopRapist; LoopRapist < sizeof(HoldingObjectsAll); ++LoopRapist) {
			if(HoldingObjectsAll[LoopRapist][holdingmodelid] == PlayerToyInfo[iTargetID][iToyIter][ptModelID]) {
				format(szMessageex, sizeof(szMessageex), "%s (slot %i, parte: %s)", HoldingObjectsAll[LoopRapist][holdingmodelname], iToyIter, HoldingBones[PlayerToyInfo[iTargetID][iToyIter][ptBone]]);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessageex);
				break;
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Jugador Invalido.");
}
return 1;
}

CMD:placa(playerid, params[])
{
if(Info[playerid][pMember] >= 1 && Info[playerid][pMember] <= 4){
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /placa [playerid]");
	if(giveplayerid != INVALID_PLAYER_ID){
		if(ProxDetectorS(5.0, playerid, giveplayerid)){
			switch(Info[playerid][pMember]){
				case 1 .. 4:
				{
					new
					infoArrays[3][64];

					GetPlayerFactionInfo(playerid, infoArrays[0], infoArrays[1], infoArrays[2]);

					SendClientMessageEx(giveplayerid, COLOR_WHITE, "----------------------------------------------------------------------------------------------------");
					format(string, sizeof(string), "%s %s es un miembro de %s.", infoArrays[0], GetPlayerNameEx(playerid), infoArrays[2]);
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
					format(string, sizeof(string), "Asignación actual: %s.", infoArrays[1]);
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
					switch(Info[playerid][pMember])
					{
						case 1 .. 4: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Con autoridad en San Andreas.");
					}
					if(Info[playerid][pMember] != 4) SendClientMessageEx(giveplayerid, COLOR_WHITE, "Oficial tiene la autoridad para arrestar.");
                    SendClientMessageEx(giveplayerid, COLOR_WHITE, "----------------------------------------------------------------------------------------------------");
					format(string, sizeof(string), "* %s muesta su placa a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				default: SendClientMessageEx(playerid, COLOR_WHITE, "Usted no está en una facción del estado.");
			}
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador no está cerca de ti.");
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Usted no está en una facción del estado.");
}
return 1;
}

CMD:reparar(playerid, params[])
{
if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes reparar un vehiculo estando dentro de uno.");
new string[128];
if(GetPVarInt(playerid, "EventToken")) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hacer esto en un evento.");
new giveplayerid, money;
if(sscanf(params, "dd", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /reparar [playerid] [precio]");
if(Team_Mecanicos(playerid)){
	if(money < 1 || money > 10000) { SendClientMessageEx(playerid, COLOR_GREY, "   Precio: $1 a $10,000!"); return 1; }
	if(IsPlayerConnectedEx(giveplayerid)){
		if(giveplayerid != INVALID_PLAYER_ID){
		    new closestcar = GetClosestCar(playerid);
  			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 8.0)){
				if(ProxDetectorS(8.0, playerid, giveplayerid)&& IsPlayerInAnyVehicle(giveplayerid)){
					if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "   No puedes hacer esto!"); return 1; }
                    if(!IsAMBike(closestcar) && !IsAPlane(closestcar))
					{
						new engine,lights,alarm,doors,bonnet,boot,objective;
						GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
						if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "Este vehiculo necesita estar con el capo abierto para repararlo.");
							return 1;
						}
					}
					format(string, sizeof(string), "* Ofreciste a %s reparar su coche por $%d .",GetPlayerNameEx(giveplayerid),money);
					SendClientMessageEx(playerid, COLOR_GENERAL, string);
					format(string, sizeof(string), "* Mecánicos %s quiere reparar tu coche por $%d. (usa /aceptar fix)",GetPlayerNameEx(playerid),money);
					SendClientMessageEx(giveplayerid, COLOR_GENERAL, string);
					RepairOffer[giveplayerid] = playerid;
					RepairPrice[giveplayerid] = money;
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador debe estar cerca tuyo y dentro de un auto.");
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "* Ningún vehiculo no está cerca tuyo.");
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "* Jugador desconectado.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "* No eres mecánico.");
return 1;
}

CMD:revisar(playerid, params[])
{
if(Info[playerid][pConnectTime] > 3)
{
	new string[128], giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /revisar [playerid]");
	if(IsPlayerConnectedEx(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
		    if(GetPlayerSpecialAction(giveplayerid) != SPECIAL_ACTION_HANDSUP) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes revisar a una persona si no tiene las manos arriba ((/rendirse)).");
			if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes buscarte a ti mismo!");
			SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
			format(string, sizeof(string), "*** Objetos de %s ...  ***", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			if(Info[giveplayerid][pPot] > 0)
			{
				format(string, sizeof(string), "%d gramos de hierba.", Info[giveplayerid][pPot]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
			if(Info[giveplayerid][pWSeeds] == 1)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Semillas de hierba");
			}
			if(Info[giveplayerid][pCrack] > 0)
			{
				format(string, sizeof(string), "%d gramos de crack.", Info[giveplayerid][pCrack]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
			if(Info[giveplayerid][pMats] > 0)
			{
				format(string, sizeof(string), "%d materiales.", Info[giveplayerid][pMats]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
			if(Fishes[giveplayerid][pWeight1] > 0 || Fishes[giveplayerid][pWeight2] > 0 || Fishes[giveplayerid][pWeight3] > 0 || Fishes[giveplayerid][pWeight4] > 0 || Fishes[giveplayerid][pWeight5] > 0)
			{
				format(string, sizeof(string), "%d peces.", Info[giveplayerid][pFishes]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
			if(Info[giveplayerid][pPhoneBook] > 0) SendClientMessageEx(playerid, COLOR_GREY, "Phone book.");
			new weaponname[50];
			format(string, sizeof(string), "*** Armas de %s...  ***", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			for (new i = 0; i < 13; i++)
			{
				if(Info[giveplayerid][pWeapons][i] > 0)
				{
					GetWeaponName(Info[giveplayerid][pWeapons][i], weaponname, sizeof(weaponname));
					format(string, sizeof(string), "Armas: %s.", weaponname);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
			}
			new cash =  GetPlayerCash(giveplayerid);
			format(string, sizeof(string), "*** Dinero: %d  ***", cash);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
			format(string, sizeof(string), "* %s revisa a %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "Ese jugador no está cerca tuyo.");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "Jugador especificado no válido.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "   No puedes hacer esto - necesitas tener 3 horas jugadas!");
return 1;
}

CMD:unlockveh(playerid, params[])
{
	if(Info[playerid][pAdmin] >= 4)
	{
		new vehicleid;
		if(sscanf(params, "d", vehicleid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /unlockveh [vehicle id]");

		if(IsValidVehicleID(vehicleid))
		{
			vehicle_unlock_doors(Info[playerid][pLockCar]);
			GameTextForPlayer(playerid, "~g~unlocked", 1000, 6);
			PlayerPlaySoundEx(1145, 0.0, 0.0, 0.0);
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "* Invalid vehicle ID");
 	}
	else NoAutorizado
	return 1;
}
CMD:calcular(playerid, params[])
{
	new string[128], method[20], value1, value2;
	if(sscanf(params, "ds[20]d", value1, method, value2))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USA: /calcular [valor] [operación] [valor].");
		SendClientMessageEx(playerid, COLOR_WHITE, "Operaciones: sumar [+], restar [-], Multiplicar[*], Dividir.[/]");
		return 1;
	}
	if(strcmp(method,"multiplicar",true) == 0 || strcmp(method,"*",true) == 0)
	{
		new sum = value1*value2;
		format(string,sizeof(string),"* %d multiplicado por %d: %i.",value1,value2,sum);
		SendClientMessageEx(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"dividir",true) == 0 || strcmp(method,"/",true) == 0)
	{
		switch(value2)
		{
		    case 0: return SendClientMessageEx(playerid,COLOR_GREY,"* No se puede dividir por 0!");
		    default:
		    {
		    	new sum = value1/value2;
				format(string,sizeof(string),"* %d dividido por %d: %i.",value1,value2,sum);
				SendClientMessageEx(playerid,COLOR_WHITE,string);
			}
		}
	}
	if(strcmp(method,"sumar",true) == 0 || strcmp(method,"+",true) == 0)
	{
		new sum = value1+value2;
		format(string,sizeof(string),"* %d + %d = %i.",value1,value2,sum);
		SendClientMessageEx(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"restar",true) == 0 || strcmp(method,"-",true) == 0)
	{
		new sum = value1-value2;
		format(string,sizeof(string),"* %d - %d = %i.",value1,value2,sum);
		SendClientMessageEx(playerid,COLOR_WHITE,string);
	}
	return 1;
}

CMD:adunmute(playerid, params[])
{
	if (Info[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /adunmute [playerid]");
		if(IsPlayerConnectedEx(giveplayerid))
		{
			if(Info[giveplayerid][pADMute] == 1)
			{
				if(Info[giveplayerid][pJailed] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes desmutear del comando /ad si la persona está en jail!");

				format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s fue desmuteado del cmd /ad por %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
				Log("logs/admin.log", string);
				Info[giveplayerid][pADMute] = 0;
				Info[giveplayerid][pADMuteTotal]--;
			}
			else return SendClientMessageEx(playerid, COLOR_LIGHTRED,"Ese jugador ya está muteado de los anuncios!");
		}
	}
	return 1;
}

CMD:admute(playerid, params[]){
if (Info[playerid][pAdmin] >= 2){
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /admute [playerid]");

	if(IsPlayerConnectedEx(giveplayerid)){
		if(Info[giveplayerid][pAdmin] >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando con administradores de mayor rango.");
		if(Info[giveplayerid][pADMute] == 0){
			Info[giveplayerid][pADMute] = 1;
			Info[giveplayerid][pADMuteTotal] += 1;
			format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s fue muteado del cmd /ad por %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			ABroadCast(COLOR_GENERAL,string,2);
			if(Info[giveplayerid][pADMuteTotal] > 6){
				new year, month,day;
				getdate(year, month, day);
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s(IP:%s) was banned by %s, reason: Excessive advertisement mutes (%d-%d-%d)", GetPlayerNameEx(giveplayerid),playerip,GetPlayerNameEx(playerid),month,day,year);
				Log("logs/ban.log", string);
				format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s fue baneado, razón: Ad´s Abussing [Total: 6]", GetPlayerNameEx(giveplayerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				Info[giveplayerid][pBanned] = 2;
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(giveplayerid);
			}
		}
		else{
			if(Info[playerid][pAdmin] >= 2){
				ShowAdMuteFine(giveplayerid);
				format(string, sizeof(string), "Ofreciste a %s una posibilidad de desmutearse del comando /ad.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "Ese jugador ya está muteado del comando /ad.");
		}
	}
}
else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
return 1;
}

CMD:buscados(playerid, params[])
{
if(IsACop(playerid)||Info[playerid][pMember] == 8) // temp
{
	if(JudgeOnlineCheck() == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Debe de estar en línea al menos un juez!");
	SendClientMessageEx(playerid, COLOR_GRAD1, "Lista de órdenes judiciales pendientes:");
	new fCounter,string[128];
	foreach(Player, i)
	{
		if(!isnull(Info[i][pWarrant]))
		{
			format(string, sizeof(string), "%s (%d) - razón: %s.",GetPlayerNameEx(i),i,Info[i][pWarrant]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			++fCounter;
		}
	}
	if(fCounter <= 0) SendClientMessageEx(playerid, COLOR_WHITE, "No hay órdenes judiciales pendientes.");
}
return 1;
}

CMD:pescar(playerid, params[])
{
if(Carnada[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No has comprado carnadas para pescar.");
if(Lineas[playerid] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes lineas para la caña de pesca.");
if(Info[playerid][pFishes] > 15) return SendClientMessageEx(playerid, COLOR_GREY, "* Has pescado bastante por ahora, toma un descanso.");
if(Fishes[playerid][pWeight1] > 0 && Fishes[playerid][pWeight2] > 0 && Fishes[playerid][pWeight3] > 0 && Fishes[playerid][pWeight4] > 0 && Fishes[playerid][pWeight5] > 0)
{
	SendClientMessageEx(playerid, COLOR_GREY, "* No puedes llevar más de cinco peces en un momento - vender o ponerlos en libertad en primer lugar.");
	return 1;
}
new string[128];
new Veh = GetPlayerVehicleID(playerid);
if(IsABoat(Veh))
{
	new Caught;
	new rand;
	new fstring[MAX_PLAYER_NAME];
	new Level = Info[playerid][pFishSkill];
	if(Level >= 0 && Level <= 50) { Caught = random(20)-7; }
	else if(Level >= 51 && Level <= 100) { Caught = random(50)-20; }
	else if(Level >= 101 && Level <= 200) { Caught = random(100)-50; }
	else if(Level >= 201 && Level <= 400) { Caught = random(160)-60; }
	else if(Level >= 401) { Caught = random(180)-70; }
	rand = random(FishNamesNumber);
	if(Caught <= 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "La línea se rompió.");
		Lineas[playerid]--;
		return 1;
	}
	else if(rand == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Atrapaste una camisa rota y la botaste a la basura.");
		Carnada[playerid]--;
		return 1;
	}
	else if(rand == 4) return SendClientMessageEx(playerid, COLOR_GREY, "Atrapaste un pantalon y lo tiraste lejos.");
	else if(rand == 7)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Atrapaste un lata de comida vacía y la tiraste a la basura.");
		Carnada[playerid]--;
		return 1;
	}
	else if(rand == 10) return SendClientMessageEx(playerid, COLOR_GREY, "Atrapaste... Zapatos viejos y los botaste.");
	else if(rand == 13) return SendClientMessageEx(playerid, COLOR_GREY, "Atrapaste una bolsa con basura y lo botaste.");
	else if(rand == 20)
	{
		new mrand = random(140);
		format(string, sizeof(string), "* Atrapaste una billetera con dinero. ($%d).", mrand);
		SendClientMessageEx(playerid, COLOR_GENERAL, string);
		GivePlayerCash(playerid, mrand);
		Carnada[playerid]--;
		return 1;
	}
	if(Fishes[playerid][pWeight1] == 0)
	{
		Info[playerid][pFishes] += 1;
        if(Info[playerid][pDobleExp] == 0) { Info[playerid][pFishSkill]++; }
		else {
			Info[playerid][pFishSkill] += 2;
			SendClientMessageEx(playerid, COLOR_YELLOW, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
		}
		format(fstring, sizeof(fstring), "%s", FishNames[rand]);
		strmid(Fishes[playerid][pFish1], fstring, 0, strlen(fstring), 255);
		Fishes[playerid][pWeight1] = Caught;
		format(string, sizeof(string), "* Cogiste un %s y pesa %d libras.", Fishes[playerid][pFish1], Caught);
		SendClientMessageEx(playerid, COLOR_GENERAL, string);
		Fishes[playerid][pLastWeight] = Caught;
		Fishes[playerid][pLastFish] = 1;
		Fishes[playerid][pFid1] = rand;
		Fishes[playerid][pFishID] = rand;
		Carnada[playerid]-= 2;
		if(Caught > Info[playerid][pBiggestFish])
		{
			format(string, sizeof(string), "* Tu antiguo record en peso de tu pesca era de %d libras, ahora tu nuevo record es de %d libras.", Info[playerid][pBiggestFish], Caught);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			Info[playerid][pBiggestFish] = Caught;
		}
	}
	else if(Fishes[playerid][pWeight2] == 0)
	{
		Info[playerid][pFishes] += 1;
        if(Info[playerid][pDobleExp] == 0) { Info[playerid][pFishSkill]++; }
		else {
			Info[playerid][pFishSkill] += 2;
			SendClientMessageEx(playerid, COLOR_YELLOW, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
		}
		format(fstring, sizeof(fstring), "%s", FishNames[rand]);
		strmid(Fishes[playerid][pFish2], fstring, 0, strlen(fstring), 255);
		Fishes[playerid][pWeight2] = Caught;
		format(string, sizeof(string), "* Cogiste un %s y pesa %d libras.", Fishes[playerid][pFish2], Caught);
		SendClientMessageEx(playerid, COLOR_GENERAL, string);
		Fishes[playerid][pLastWeight] = Caught;
		Fishes[playerid][pLastFish] = 2;
		Fishes[playerid][pFid2] = rand;
		Fishes[playerid][pFishID] = rand;
		Carnada[playerid]-= 2;
		if(Caught > Info[playerid][pBiggestFish])
		{
			format(string, sizeof(string), "* Tu antiguo record en peso de tu pesca era de %d libras, ahora tu nuevo record es de %d libras.", Info[playerid][pBiggestFish], Caught);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			Info[playerid][pBiggestFish] = Caught;
		}
	}
	else if(Fishes[playerid][pWeight3] == 0)
	{
		Info[playerid][pFishes] += 1;
        if(Info[playerid][pDobleExp] == 0) { Info[playerid][pFishSkill]++; }
		else {
			Info[playerid][pFishSkill] += 2;
			SendClientMessageEx(playerid, COLOR_YELLOW, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
		}
		format(fstring, sizeof(fstring), "%s", FishNames[rand]);
		strmid(Fishes[playerid][pFish3], fstring, 0, strlen(fstring), 255);
		Fishes[playerid][pWeight3] = Caught;
		format(string, sizeof(string), "* Cogiste un %s y pesa %d libras.", Fishes[playerid][pFish3], Caught);
		SendClientMessageEx(playerid, COLOR_GENERAL, string);
		Fishes[playerid][pLastWeight] = Caught;
		Fishes[playerid][pLastFish] = 3;
		Fishes[playerid][pFid3] = rand;
		Fishes[playerid][pFishID] = rand;
		Carnada[playerid]-= 2;
		if(Caught > Info[playerid][pBiggestFish])
		{
			format(string, sizeof(string), "* Tu antiguo record en peso de tu pesca era de %d libras, ahora tu nuevo record es de %d libras.", Info[playerid][pBiggestFish], Caught);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			Info[playerid][pBiggestFish] = Caught;
		}
	}
	else if(Fishes[playerid][pWeight4] == 0)
	{
		Info[playerid][pFishes] += 1;
        if(Info[playerid][pDobleExp] == 0) { Info[playerid][pFishSkill]++; }
		else {
			Info[playerid][pFishSkill] += 2;
			SendClientMessageEx(playerid, COLOR_YELLOW, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
		}
		format(fstring, sizeof(fstring), "%s", FishNames[rand]);
		strmid(Fishes[playerid][pFish4], fstring, 0, strlen(fstring), 255);
		Fishes[playerid][pWeight4] = Caught;
		format(string, sizeof(string), "* Cogiste un %s y pesa %d libras.", Fishes[playerid][pFish4], Caught);
		SendClientMessageEx(playerid, COLOR_GENERAL, string);
		Fishes[playerid][pLastWeight] = Caught;
		Fishes[playerid][pLastFish] = 4;
		Fishes[playerid][pFid4] = rand;
		Fishes[playerid][pFishID] = rand;
		Carnada[playerid]-= 4;
		if(Caught > Info[playerid][pBiggestFish])
		{
			format(string, sizeof(string), "* Tu antiguo record en peso de tu pesca era de %d libras, ahora tu nuevo record es de %d libras.", Info[playerid][pBiggestFish], Caught);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			Info[playerid][pBiggestFish] = Caught;
		}
	}
	else if(Fishes[playerid][pWeight5] == 0)
	{
		Info[playerid][pFishes] += 1;
        if(Info[playerid][pDobleExp] == 0) { Info[playerid][pFishSkill]++; }
		else {
			Info[playerid][pFishSkill] += 2;
			SendClientMessageEx(playerid, COLOR_YELLOW, "* Ganaste 2 puntos de skill por tener horas de doble experiencia.");
		}
		format(fstring, sizeof(fstring), "%s", FishNames[rand]);
		strmid(Fishes[playerid][pFish5], fstring, 0, strlen(fstring), 255);
		Fishes[playerid][pWeight5] = Caught;
		format(string, sizeof(string), "* Cogiste un %s y pesa %d libras.", Fishes[playerid][pFish5], Caught);
		SendClientMessageEx(playerid, COLOR_GENERAL, string);
		Fishes[playerid][pLastWeight] = Caught;
		Fishes[playerid][pLastFish] = 5;
		Fishes[playerid][pFid5] = rand;
		Fishes[playerid][pFishID] = rand;
		Carnada[playerid]-= 5;
		if(Caught > Info[playerid][pBiggestFish])
		{
			format(string, sizeof(string), "* Tu antiguo record en peso de tu pesca era de %d libras, ahora tu nuevo record es de %d libras.", Info[playerid][pBiggestFish], Caught);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			Info[playerid][pBiggestFish] = Caught;
		}
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "No tienes espacio para los peces.");
	if(Info[playerid][pFishSkill] == 50)
	{ SendClientMessageEx(playerid, COLOR_YELLOW, "* Tu nivel de pesca ahora es 2, ya puedes atrapar peces más grandes."); }
	else if(Info[playerid][pFishSkill] == 100)
	{ SendClientMessageEx(playerid, COLOR_YELLOW, "* Tu nivel de pesca ahora es 3, ya puedes atrapar peces más grandes."); }
	else if(Info[playerid][pFishSkill] == 200)
	{ SendClientMessageEx(playerid, COLOR_YELLOW, "* Tu nivel de pesca ahora es 4, ya puedes atrapar peces más grandes."); }
	else if(Info[playerid][pFishSkill] == 400)
	{ SendClientMessageEx(playerid, COLOR_YELLOW, "* Tu nivel de pesca ahora es 5, ya puedes atrapar peces más grandes."); }
}
else SendClientMessageEx(playerid, COLOR_GREY, "No estás en el muelle de Santa María, o en un barco de pesca.");
return 1;
}

CMD:venderpez(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 6, 991.2456,-1942.9379,2835.0078)) return SendClientMessageEx(playerid, COLOR_GRAD2, "   No estás en la tienda del puerto!");
	new string[128], fishid;
	if(sscanf(params, "d", fishid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /venderpez [fish]");
	new price;
	if(fishid < 1 || fishid > 5) { SendClientMessageEx(playerid, COLOR_GREY, "   ID: 1 al 5!"); return 1; }
	else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   No has pescado nada. (1)!"); return 1; }
	else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   No has pescado nada. (1)!"); return 1; }
	else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   No has pescado nada. (1)!"); return 1; }
	else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   No has pescado nada. (1)!"); return 1; }
	else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   No has pescado nada. (1)!"); return 1; }

	switch (fishid)
	{
	case 1:
		{
			if(Fishes[playerid][pWeight1] < 5)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Tienda: Sólo estamos interesados en comprar peces de 5 Libras para arriba.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid1]);
			price = price * Fishes[playerid][pWeight1];
			if(Info[playerid][pLevel] > 0)
			{
				new skill = price / 100;
				new payout = (skill)*(2);
				price += payout;
			}
			GameTextForPlayer(playerid, "~g~Pez~n~~r~Vendido", 3000, 1);
			format(string, sizeof(string), "* Vendiste un %s (%d Libras) por $%d.", Fishes[playerid][pFish1],Fishes[playerid][pWeight1],price);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 1);
		}
	case 2:
		{
			if(Fishes[playerid][pWeight2] < 5)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Tienda: Sólo estamos interesados en comprar peces de 5 Libras para arriba.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid2]);
			price = price * Fishes[playerid][pWeight2];
			if(Info[playerid][pLevel] > 3)
			{
				new skill = price / 100;
				new payout = (skill)*(2);
				price += payout;
			}
			GameTextForPlayer(playerid, "~g~Pez~n~~r~Vendido", 3000, 1);
			format(string, sizeof(string), "* Vendiste un %s (%d Libras) por $%d.", Fishes[playerid][pFish2],Fishes[playerid][pWeight2],price);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 2);
		}
	case 3:
		{
			if(Fishes[playerid][pWeight3] < 5)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Tienda: Sólo estamos interesados en comprar peces de 5 Libras para arriba.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid3]);
			price = price * Fishes[playerid][pWeight3];
			if(Info[playerid][pLevel] > 5)
			{
				new skill = price / 100;
				new payout = (skill)*(2);
				price += payout;
			}
			GameTextForPlayer(playerid, "~g~Pez~n~~r~Vendido", 3000, 1);
			format(string, sizeof(string), "* Vendiste un %s (%d Libras) por $%d.", Fishes[playerid][pFish3],Fishes[playerid][pWeight3],price);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 3);
		}
	case 4:
		{
			if(Fishes[playerid][pWeight4] < 5)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Tienda: Sólo estamos interesados en comprar peces de 5 Libras para arriba.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid4]);
			price = price * Fishes[playerid][pWeight4];
			if(Info[playerid][pLevel] > 10)
			{
				new skill = price / 100;
				new payout = (skill)*(2);
				price += payout;
			}
			GameTextForPlayer(playerid, "~g~Pez~n~~r~Vendido", 3000, 1);
			format(string, sizeof(string), "* Vendiste un %s (%d Libras) por $%d.", Fishes[playerid][pFish4],Fishes[playerid][pWeight4],price);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 4);
		}
	case 5:
		{
			if(Fishes[playerid][pWeight5] < 5)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Tienda: Sólo estamos interesados en comprar peces de 5 Libras para arriba.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid5]);
			price = price * Fishes[playerid][pWeight5];
			if(Info[playerid][pLevel] > 20)
			{
				new skill = price / 100;
				new payout = (skill)*(2);
				price += payout;
			}
			GameTextForPlayer(playerid, "~g~Pez~n~~r~Vendido", 3000, 1);
			format(string, sizeof(string), "* Vendiste un %s (%d Libras) por $%d.", Fishes[playerid][pFish5],Fishes[playerid][pWeight5],price);
			SendClientMessageEx(playerid, COLOR_GENERAL, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 5);
		}
	}
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	return 1;
}

CMD:peces(playerid, params[])
{
new string[128];
SendClientMessageEx(playerid, COLOR_WHITE, "|__________________ Peces __________________|");
format(string, sizeof(string), "** (1) Pez: %s.   Peso: %d.", Fishes[playerid][pFish1], Fishes[playerid][pWeight1]);
SendClientMessageEx(playerid, COLOR_GREY, string);
format(string, sizeof(string), "** (2) Pez: %s.   Peso: %d.", Fishes[playerid][pFish2], Fishes[playerid][pWeight2]);
SendClientMessageEx(playerid, COLOR_GREY, string);
format(string, sizeof(string), "** (3) Pez: %s.   Peso: %d.", Fishes[playerid][pFish3], Fishes[playerid][pWeight3]);
SendClientMessageEx(playerid, COLOR_GREY, string);
format(string, sizeof(string), "** (4) Pez: %s.   Peso: %d.", Fishes[playerid][pFish4], Fishes[playerid][pWeight4]);
SendClientMessageEx(playerid, COLOR_GREY, string);
format(string, sizeof(string), "** (5) Pez: %s.   Peso: %d.", Fishes[playerid][pFish5], Fishes[playerid][pWeight5]);
SendClientMessageEx(playerid, COLOR_GREY, string);
return SendClientMessageEx(playerid, COLOR_WHITE, "|____________________________________________|");
}

CMD:liberarpez(playerid, params[])
{
new fishid;
if(sscanf(params, "d", fishid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /liberarpez [pez 1-5]");

if(fishid < 1 || fishid > 5) { SendClientMessageEx(playerid, COLOR_WHITE, "USA: /liberarpez [fish 1-5]"); return 1; }
else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "Ese slot está vacío."); return 1; }
else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "Ese slot está vacío."); return 1; }
else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "Ese slot está vacío."); return 1; }
else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "Ese slot está vacío."); return 1; }
else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "Ese slot está vacío."); return 1; }
ClearFishID(playerid, fishid);
Fishes[playerid][pLastFish] = 0;
Fishes[playerid][pFishID] = 0;
return SendClientMessageEx(playerid, COLOR_GREY, "Liberaste un pez.");
}

CMD:qfa(playerid, params[]) // By Treyfus
{
	new giveplayerid, string[73];
	if(!sscanf(params, "u", giveplayerid))
	{
	    if(Info[playerid][pAdmin] == 0) return NoAutorizado
		if(IsPlayerConnectedEx(giveplayerid))
		{
			format(string,sizeof(string),"%s: La última persona que me mató fue %s.",GetPlayerNameEx(giveplayerid),QFA[giveplayerid]);
			SendClientMessageEx(playerid,COLOR_GRAD1,string);
		}
		else return SendClientMessageEx(playerid,COLOR_GRAD1,"El jugador no esta conectado");
	}
	else
	{
		format(string,sizeof(string),"La última persona que te mato fue %s.", QFA[playerid]);
		SendClientMessageEx(playerid,COLOR_GRAD1,string);
		if(Info[playerid][pAdmin]) return SendClientMessageEx(playerid, COLOR_GREY, "/qfa [id]");
	}
	return 1;
}

CMD:ddnext(playerid, params[])
{
	if(Info[playerid][pAdmin] >= 5 || Info[playerid][pShopTech] == 1)
	{
		for(new x;x<MAX_DDOORS;x++)
		{
		    if(DDoorsInfo[x][ddDescription] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d está disponible para el uso.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else NoAutorizado
	return 1;
}

CMD:shopdoor(playerid, params[])
{
	if (Info[playerid][pShopTech] == 1)
	{
		new string[128], doorid;
		if(!sscanf(params, "d", doorid))
		{
		    if (DDoorsInfo[doorid][ddDescription] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esa puerta ya está creada! Usa: /ddedit");
			if(doorid >= MAX_DDOORS) return SendClientMessageEx( playerid, COLOR_WHITE, "Door ID Inválida!");
			GetPlayerPos(playerid, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]);
			GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddExteriorA]);
			DDoorsInfo[doorid][ddExteriorVW] = GetPlayerVirtualWorld(playerid);
			DDoorsInfo[doorid][ddExteriorInt] = GetPlayerInterior(playerid);
			DDoorsInfo[doorid][ddCustomInterior] = 0;
			DDoorsInfo[doorid][ddCustomExterior] = 0;
			DDoorsInfo[doorid][ddVIP] = 0;
			DDoorsInfo[doorid][ddFamily] = 0;
			DDoorsInfo[doorid][ddPickupModel] = 0;
			DDoorsInfo[doorid][ddColor] = 1;
			DDoorsInfo[doorid][ddVehicleAble] = 0;
			DDoorsInfo[doorid][ddWanted] = 0;
			DDoorsInfo[doorid][ddAdmin] = 0;
	    	DDoorsInfo[doorid][ddFaction] = 0;
			DDoorsInfo[doorid][ddInteriorInt] = 0;
			DDoorsInfo[doorid][ddInteriorVW] = 0;
			DDoorsInfo[doorid][dMusic] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Creaste el exterior de esta puerta, usa /ddedit para terminar de editar la puerta!");
			if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
			if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
			CreateDynamicDoor(doorid);
			SaveDynamicDoors(doorid);
			format(string, sizeof(string), "%s ha creado la DoorID %d.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "* /shopdoor [ID Libre]!");
	}
	return 1;
}

CMD:ddedit(playerid, params[])
{
	if(Info[playerid][pAdmin] < 5 && Info[playerid][pShopTech] != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
	new string[128], choice[32], doorid, amount;
	if(sscanf(params, "s[32]dD", choice, doorid, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USA: /ddedit [name] [doorid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, CustomExterior, VIP");
		SendClientMessageEx(playerid, COLOR_GREY, "Familia, Faccion, Wanted, Admin, VehicleAble, Color, PickupModel, Borrar, Musica");
		return 1;
	}

	if(doorid >= MAX_DDOORS) return SendClientMessageEx( playerid, COLOR_WHITE, "Door ID Inválida!");
	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddInteriorX], DDoorsInfo[doorid][ddInteriorY], DDoorsInfo[doorid][ddInteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddInteriorA]);
		DDoorsInfo[doorid][ddInteriorInt] = GetPlayerInterior(playerid);
		DDoorsInfo[doorid][ddInteriorVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el interior!");
		SaveDynamicDoors(doorid);
		format(string, sizeof(string), "%s ha editado la DoorID %d - Interior", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(DDoorsInfo[doorid][ddCustomInterior] == 0)
		{
			DDoorsInfo[doorid][ddCustomInterior] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Estableciste a Interior Personalizado!");
		}
		else
		{
			DDoorsInfo[doorid][ddCustomInterior] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Estableciste a Interior Normal!");
		}
		SaveDynamicDoors(doorid);
		format(string, sizeof(string), "%s ha editado la DoorID %d - Interior Personalizado.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(DDoorsInfo[doorid][ddCustomExterior] == 0)
		{
			DDoorsInfo[doorid][ddCustomExterior] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Estableciste a Exterior Personalizado!");
		}
		else
		{
			DDoorsInfo[doorid][ddCustomExterior] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Estableciste a Exterior Normal!");
		}
		SaveDynamicDoors(doorid);
		format(string, sizeof(string), "%s ha editado la DoorID %d - Exterior Personalizado.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddExteriorA]);
		DDoorsInfo[doorid][ddExteriorVW] = GetPlayerVirtualWorld(playerid);
		DDoorsInfo[doorid][ddExteriorInt] = GetPlayerInterior(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el exterior!");
		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);
		SaveDynamicDoors(doorid);
		format(string, sizeof(string), "%s ha editado la DoorID %d - Exterior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
	}
	else if(strcmp(choice, "vip", true) == 0)
	{
		DDoorsInfo[doorid][ddVIP] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - VIP Nivel %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors(doorid);
		format(string, sizeof(string), "%s ha editado la DoorID %d - VIP Nivel.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "familia", true) == 0)
	{
		DDoorsInfo[doorid][ddFamily] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - Familia %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors(doorid);
		format(string, sizeof(string), "%s ha editado la DoorID %d - Familia.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "faccion", true) == 0)
	{
		DDoorsInfo[doorid][ddFaction] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - Facción %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors(doorid);
		format(string, sizeof(string), "%s ha editado la DoorID %d - Facción.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "admin", true) == 0)
	{
		DDoorsInfo[doorid][ddAdmin] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - Admin Nivel %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors(doorid);
		format(string, sizeof(string), "%s ha editado la DoorID %d - Admin Nivel.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "wanted", true) == 0)
	{
		DDoorsInfo[doorid][ddWanted] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - Wanted %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors(doorid);
		format(string, sizeof(string), "%s ha editado la DoorID %d - Wanted.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "vehicleable", true) == 0)
	{
		DDoorsInfo[doorid][ddVehicleAble] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - VehicleAble %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors(doorid);
		format(string, sizeof(string), "%s ha editado la DoorID %d - Disponible Vehs.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "color", true) == 0)
	{
		DDoorsInfo[doorid][ddColor] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - Color %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);

		SaveDynamicDoors(doorid);
		format(string, sizeof(string), "%s ha editado la DoorID %d - Color.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "pickupmodel", true) == 0)
	{
		DDoorsInfo[doorid][ddPickupModel] = amount;

		format(string, sizeof(string), "* Has editado la DoorID - PickupModel %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);

		SaveDynamicDoors(doorid);
		format(string, sizeof(string), "%s ha editado la DoorID %d - PickupModel.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "musica", true) == 0)
	{
	    DDoorsInfo[doorid][dMusic] = amount;
		format(string, sizeof(string), "* Has editado la DoorID - Musica %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		SaveDynamicDoors(doorid);
		switch(amount)
		{
		    case 0: SendClientMessageEx(playerid, COLOR_WHITE, "Genero: Sin música"); //
	    	case 1: SendClientMessageEx(playerid, COLOR_WHITE, "Genero: Reggeaton"); //
	        case 2: SendClientMessageEx(playerid, COLOR_WHITE, "Genero: Electro"); //
	        case 3: SendClientMessageEx(playerid, COLOR_WHITE, "Genero: Techno"); //
	        case 4: SendClientMessageEx(playerid, COLOR_WHITE, "Genero: Hip hop"); //
	        case 5: SendClientMessageEx(playerid, COLOR_WHITE, "Genero: Variada"); //
		}
		return 1;
	}
	else if(strcmp(choice, "borrar", true) == 0)
	{
	    if (DDoorsInfo[doorid][ddDescription] == 0)
		{
	        format(string, sizeof(string), "DoorID %d no existe.", doorid);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
	    }
		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
	    DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		DDoorsInfo[doorid][ddDescription] = 0;
		DDoorsInfo[doorid][ddCustomInterior] = 0;
		DDoorsInfo[doorid][ddExteriorVW] = 0;
		DDoorsInfo[doorid][ddExteriorInt] = 0;
		DDoorsInfo[doorid][ddInteriorVW] = 0;
		DDoorsInfo[doorid][ddInteriorInt] = 0;
		DDoorsInfo[doorid][ddExteriorX] = 0;
		DDoorsInfo[doorid][ddExteriorY] = 0;
		DDoorsInfo[doorid][ddExteriorZ] = 0;
		DDoorsInfo[doorid][ddExteriorA] = 0;
		DDoorsInfo[doorid][ddInteriorX] = 0;
		DDoorsInfo[doorid][ddInteriorY] = 0;
		DDoorsInfo[doorid][ddInteriorZ] = 0;
		DDoorsInfo[doorid][ddInteriorA] = 0;
		DDoorsInfo[doorid][ddCustomExterior] = 0;
		DDoorsInfo[doorid][ddVIP] = 0;
		DDoorsInfo[doorid][ddFamily] = 0;
		DDoorsInfo[doorid][ddFaction] = 0;
		DDoorsInfo[doorid][ddAdmin] = 0;
		DDoorsInfo[doorid][ddWanted] = 0;
		DDoorsInfo[doorid][ddVehicleAble] = 0;
		DDoorsInfo[doorid][ddColor] = 0;
		DDoorsInfo[doorid][dPass] = 0;
		DDoorsInfo[doorid][dLocked] = 0;
		DDoorsInfo[doorid][dMusic] = 0;
		SaveDynamicDoors(doorid);
		format(string, sizeof(string), "Borraste la DoorID %d.", doorid);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s a borrado DoorID %d.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	return 1;
}

CMD:clave(playerid, params[])
{
	for(new i = 0; i < sizeof(DDoorsInfo); i++)
	{
	    if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddExteriorVW] || IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddInteriorVW])
		{
			if(DDoorsInfo[i][dPass] < 1)
	            return SendClientMessageEx(playerid, COLOR_GREY, "Esta puerta ya está bloqueada");
	     	if(strcmp(DDoorsInfo[i][dPass], "Nada", true) == 0)
	            return SendClientMessageEx(playerid, COLOR_GREY, "Esta puerta no está autorizada a ser bloqueada");

			ShowPlayerDialog(playerid, DOORLOCK, DIALOG_STYLE_INPUT, "Seguridad de puerta","Ingresa la contraseña de la puerta","Ingresar","Cancelar");
			SetPVarInt(playerid, "Door", i);
		}
	}
	return 1;
}

CMD:goindoor(playerid, params[])
{
	if(Info[playerid][pAdmin] >= 5)
	{
		new doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /goindoor [doornumber]");
		Streamer_UpdateEx(playerid, DDoorsInfo[doornum][ddInteriorX],DDoorsInfo[doornum][ddInteriorY],DDoorsInfo[doornum][ddInteriorZ]);
		SetPlayerInterior(playerid,DDoorsInfo[doornum][ddInteriorInt]);
		SetPlayerPos(playerid,DDoorsInfo[doornum][ddInteriorX],DDoorsInfo[doornum][ddInteriorY],DDoorsInfo[doornum][ddInteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddInteriorA]);
		if(DDoorsInfo[doornum][ddCustomInterior])
		{
			LoadObjects(playerid);
		}
		Info[playerid][pInt] = DDoorsInfo[doornum][ddInteriorInt];
		Info[playerid][pVW] = DDoorsInfo[doornum][ddInteriorVW];
		SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddInteriorVW]);
	}
	return 1;
}

CMD:gotodoor(playerid, params[])
{
	if(Info[playerid][pAdmin] >= 5)
	{
		new doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /gotodoor [doornumber]");

		Streamer_UpdateEx(playerid, DDoorsInfo[doornum][ddExteriorX],DDoorsInfo[doornum][ddExteriorY],DDoorsInfo[doornum][ddExteriorZ]);
		if(DDoorsInfo[doornum][ddCustomExterior])
		{
			LoadObjects(playerid);
		}
		SetPlayerInterior(playerid,DDoorsInfo[doornum][ddExteriorInt]);
		SetPlayerPos(playerid,DDoorsInfo[doornum][ddExteriorX],DDoorsInfo[doornum][ddExteriorY],DDoorsInfo[doornum][ddExteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddExteriorA]);
		Info[playerid][pInt] = DDoorsInfo[doornum][ddExteriorInt];
		SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddExteriorVW]);
		Info[playerid][pVW] = DDoorsInfo[doornum][ddExteriorVW];
	}
	return 1;
}

CMD:ddname(playerid, params[])
{
	if(Info[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
	new string[128], doorid, doorname[128];
	if(sscanf(params, "ds[128]", doorid, doorname)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /ddname [doorid] [name]");
	format(DDoorsInfo[doorid][ddDescription], 128, "%s", doorname);
	SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste el nombre de la puerta!");
	if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
	if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
	CreateDynamicDoor(doorid);
	SaveDynamicDoors(doorid);

	format(string, sizeof(string), "%s editó la DoorID %d - nombre a %s.", GetPlayerNameEx(playerid), doorid, doorname);
	Log("logs/ddedit.log", string);
	return 1;
}

CMD:ddpass(playerid, params[])
{
	if(Info[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
	new string[128], doorid, doorpass[24];
	if(sscanf(params, "ds[24]", doorid, doorpass)) { SendClientMessageEx(playerid, COLOR_WHITE, "USA: /ddpass [doorid] [pass]"); SendClientMessageEx(playerid, COLOR_WHITE, "Para remover la contraseña escribe 'nada'."); return 1; }
	format(DDoorsInfo[doorid][dPass], 24, "%s", doorpass);
	SendClientMessageEx(playerid, COLOR_WHITE, "Cambiaste la contraseña de la puerta.");
	SaveDynamicDoors(doorid);
	format(string, sizeof(string), "%s editó la DoorID %d - pass a %s.", GetPlayerNameEx(playerid), doorid, doorpass);
	Log("logs/ddedit.log", string);
	return 1;
}

CMD:ocambiarpassde(playerid, params[])
{
if(Info[playerid][pAdmin] < 5) return NoAutorizado
new accountName[24], password[18];
if(sscanf(params, "s[MAX_PLAYER_NAME]s[18]", accountName, password)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /ocambiarpassde [Nombre_Apellido] [password]");
if(INI_Exist(accountName))
{
    if(strlen(accountName) > 12) return SendClientMessageEx(playerid, COLOR_WHITE, "La cuenta no puede tener más de 12 letras/números.");
	new string[128], PlayerFile[MAX_PLAYER_NAME + 32];
	format( PlayerFile , sizeof PlayerFile, USERFILE, accountName);
    new INI:File = INI_Open(PlayerFile);
    INI_SetTag(File,"data");
 	INI_WriteInt(File,"Password",strval(password));
	INI_Close(File);
    format(string, sizeof(string), "Cambiaste la contraseña de %s. Ahora es '%s'", accountName, password);
    SendClientMessageEx(playerid, COLOR_GRAD1, string);
    //OnPlayerOfflineSave(accountName);
    format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" Contraseña de %s fue cambiada por %s", accountName, GetPlayerNameEx(playerid));
    Log("logs/password.log", string);
    return ABroadCast(COLOR_LIGHTRED,string,2);
}
else SendClientMessageEx( playerid, COLOR_WHITE, "Esta cuenta no existe." );
return 1;
}

CMD:jail(playerid, params[])
{
	new time, giveplayerid, reason[64];
	if(CommandSpamTimes[playerid] == 4)
	{
      	format(szMessage, sizeof(szMessage), "AdmWarning: %s fue baneado automáticamente, razón: Flood Cmd´s", GetPlayerNameEx(playerid));
        ABroadCast(COLOR_GENERAL,szMessage,2);
        Log("logs/hackeraction.log", szMessage);
        Info[playerid][pBanned] = 2;
        SendClientMessageEx(playerid, COLOR_GENERAL,"ATENCIÓN: "COL_WHITE"Fuiste baneado automáticamente por seguridad, has usado el comando /jail muchas veces.");
        Expulsar(playerid);
		return 1;
	}
    if(Info[playerid][pAdmin] < 1) 								return NoAutorizado
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 5) 	return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	if(!sscanf(params, "dds[64]", giveplayerid, time, reason))
	{
        if(IsPlayerConnectedEx(giveplayerid))
		{
			SetPVarInt(giveplayerid, "IsInArena", 0);
			SetPVarInt(giveplayerid, "ArenaMode", 0);

          	CommandSpamTimes[playerid]++;
			CommandSpamUnmute[playerid] = 60;
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);

            Info[giveplayerid][pJailAdmin] += 1;
	        Info[giveplayerid][pJailed] = 1;
	        PhoneOnline[giveplayerid] = 1;
			Info[giveplayerid][pJailTime] = time*60;
			ResetPlayerWeaponsEx(giveplayerid);

			LoadObjects(giveplayerid);
			new rand = random(sizeof(OOCJail));
			SetPlayerPos(giveplayerid, OOCJail[rand][0], OOCJail[rand][1], OOCJail[rand][2]);
			//SetPlayerSkin(giveplayerid, 50);
			SetPlayerToTeamColor(giveplayerid);
			SetPlayerInterior(giveplayerid, 0);
			SetPlayerVirtualWorld(giveplayerid, 1000);

			format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración > "COL_WHITE"%s encarceló a %s, razón: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
			BroadCast(COLOR_LIGHTRED, szMessage);

			format(szMessage, sizeof(szMessage), ""COL_GENERAL"> Tiempo: %d minuto(s) - Jugador: %s", time, GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_GENERAL,szMessage,2);

			format(szMessage, sizeof(szMessage), "Tiempo: %d minuto(s)", time);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, szMessage);
			StopAudioStreamForPlayer(giveplayerid);

			format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración > "COL_WHITE"%s encarceló a %s, razón: %s, tiempo: %d minuto(s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason, time);
			Log("logs/jail.log", szMessage);
			return 1;
        }
		else return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está conectado.");
    }
	else SendClientMessageEx(playerid,  COLOR_GREY, "USA: /jail <playerID> <minutos> <razón>");
    return 1;
}

CMD:kick(playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	if (Info[playerid][pAdmin] >= 1)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "ds[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /kick [player] [reason]");
		if(IsPlayerConnectedEx(giveplayerid))
		{
			if(Info[giveplayerid][pAdmin] > Info[playerid][pAdmin])
			{
				format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s ha sido auto-expulsado, razón: Intentar usar /kick a un administrador mayor.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_GRAD1,string,1);
	        	SendClientMessageEx(playerid, COLOR_GENERAL,"ATENCIÓN: "COL_WHITE"Fuiste baneado por seguridad, por intentar expulsar a un administrador de mayor rango.");
	        	Expulsar(playerid);
				return 1;
			}
			else
			{
				new year, month,day;
				getdate(year, month, day);
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s (IP:%s) fue expulsado por %s, razón: %s (%d-%d-%d)", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason,month,day,year);
				Log("logs/kick.log", string);
				if(Info[playerid][pAdmin] == 1) Log("logs/moderator.log", string);
				format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s fue expulsado por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
	   			Expulsar(giveplayerid);
			}
			return 1;
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
	}
	else NoAutorizado
	return 1;
}
CMD:ban(playerid, params[])
{
    if(CommandSpamTimes[playerid] == 4)
	{
      	format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s fue baneado automáticamente, razón: Flood Cmd´s", GetPlayerNameEx(playerid));
        ABroadCast(COLOR_GENERAL,szMessage,2);
        Log("logs/hackeraction.log", szMessage);
        Info[playerid][pBanned] = 2;
        SendClientMessageEx(playerid, COLOR_GENERAL,"ATENCIÓN: "COL_WHITE"Fuiste baneado automáticamente por seguridad, has usado el comando /ban muchas veces.");
        Expulsar(playerid);
		return 1;
	}
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	if (Info[playerid][pAdmin] >= 3)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "ds[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /banear [player] [razón]");
		if(IsPlayerConnectedEx(giveplayerid))
		{
			if(Info[giveplayerid][pAdmin] > Info[playerid][pAdmin])
			{
				format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s ha sido auto-baneado, razón: Intentar banear a un nivel mayor de admin.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_GRAD1,string,2);
				Info[playerid][pBanned] = 2;
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
	        	SendClientMessageEx(playerid, COLOR_GENERAL,"ATENCIÓN: "COL_WHITE"Fuiste baneado por seguridad, por intentar banear a un administrador de mayor rango.");
	        	Expulsar(playerid);
				return 1;
			}
			else
			{
                CommandSpamTimes[playerid]++;
			    CommandSpamUnmute[playerid] = 60;
			    SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
				new year, month,day;
				getdate(year, month, day);
				new playerip[32];
				format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s(IP:%s) fue baneado por %s, razón: %s (%d-%d-%d)", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason,month,day,year);
				Log("logs/ban.log", string);
				format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s fue baneado por %s, razón: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				Info[giveplayerid][pBanned] = 2;
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				AddBan(playerip);
				Expulsar(giveplayerid);
			}
		}
		else return SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
	}
	else NoAutorizado
	return 1;
}
CMD:nombreadmin(playerid, params[])
{
    if(Info[playerid][pAdmin] < 6) 									return NoAutorizado
	new userID,playerNameString[MAX_PLAYER_NAME];
	if(sscanf(params, "us[24]", userID, playerNameString)) 			return SendClientMessageEx(playerid, COLOR_GREY, "USA: /nombreadmin [playerid] [adminname]");
	if(!IsPlayerConnectedEx(userID)) 								return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está conectado.");
	if(Info[userID][pAdmin] < 1) 									return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando a usuarios que no son administradores.");
	if(Info[userID][pAdmin] > Info[playerid][pAdmin]) 				return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando a administradores de mayor rango.");
	new nick[MAX_PLAYER_NAME];
	GetPlayerName(playerid, nick, sizeof(nick));
	{
		format(Info[userID][pAdminName], MAX_PLAYER_NAME, "%s", playerNameString);
		format(szMessage, sizeof(szMessage), "Cambiaste el nombre administrativo de %s a %s.", GetPlayerNameEx(userID), Info[userID][pAdminName]);
	    SendClientMessageEx(playerid, -1, szMessage);
		format(szMessage, sizeof(szMessage), "%s a cambiado tu nombre administrativo a %s.", GetPlayerNameEx(playerid),Info[userID][pAdminName]);
	    SendClientMessageEx(userID, -1, szMessage);
	    format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s a cambiado el nombre administrativo de %s a %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(userID), Info[userID][pAdminName]);
	    SendAdminMessage(COLOR_GENERAL, szMessage);
	}
	return 1;
}

CMD:aname(playerid, params[])
{
    if(Info[playerid][pAdmin] < 3) 					return NoAutorizado
    if(!IsPlayerConnectedEx(playerid))              return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	new ID = strval(params);
	if(isnull(params)) 								return SendClientMessageEx(playerid, COLOR_GREY, "USA: /aname [playerid]");
    if(!IsPlayerConnectedEx(ID))   					return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está conectado correctamente.");
    if(GetPVarInt(ID, "RequestingNameChange") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no ha pedido un cambio de nombre.");
	new newname[MAX_PLAYER_NAME];
	GetPVarString(ID, "NewNameRequest", newname, MAX_PLAYER_NAME);
	if(INI_Exist(newname))
	{
		SendClientMessageEx(ID, 		COLOR_GREY, 		"* Ese nombre ya existe porfavor ingresa otro.");
		SendClientMessageEx(playerid, 	COLOR_GREY, 		"* Ese nombre ya existe en la base de datos.");
		DeletePVar(ID, "RequestingNameChange");
		return 1;
	}
	switch(Info[ID][pMember])
	{
	    case 2, 8:
	    {
			format(szMessage, sizeof(szMessage), 			"Tu nombre ha sido aprobado y cambiado de %s a %s.", GetPlayerNameEx(ID), newname);
			SendClientMessageEx(ID,COLOR_GRAD1,szMessage);
			SendClientMessageEx(ID,COLOR_GRAD1,			"Este nombre lo tendrás temporalmente, recuerda que no se guardará ningún stat, puedes cambiarlo con /minombre");

			format(szMessage, sizeof(szMessage), 			"Adm %s aprobó el cambio de nombre de %s a %s. Razón: FBI - HITMAN",GetPlayerNameEx(playerid),GetPlayerNameEx(ID), newname);
			ABroadCast(COLOR_GENERAL, szMessage, 2);
			GetPlayerName(ID, Info[ID][pNormalName], MAX_PLAYER_NAME);
			SetPlayerName(ID, newname);
			DeletePVar(ID, "RequestingNameChange");
			DeletePVar(ID, "NewNameRequest");
            Info[ID][pTempName] = 1;
		}
	    default:
		{
		    DeletePVar(ID, "NewNameRequest");
		    DeletePVar(ID, "RequestingNameChange");
		    SendClientMessageEx(playerid, COLOR_GREY, 		"* Ese jugador no puede cambiarse el nombre, sólo FBI o Hitman.");
			return SendClientMessageEx(ID, COLOR_GREY, 		"* No se ha podido completar el cambio de nombre.");
		}
	}
	return 1;
}
CMD:rname(playerid, params[])
{
    if(Info[playerid][pAdmin] < 3) 					return NoAutorizado
    if(!IsPlayerConnectedEx(playerid))              return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	new ID = strval(params);
	if(isnull(params)) 								return SendClientMessageEx(playerid, COLOR_GREY, "USA: /rname [playerid]");
    if(IsPlayerConnectedEx(ID))   					return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está conectado correctamente.");
    if(GetPVarInt(ID, "RequestingNameChange") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no ha pedido un cambio de nombre.");

	SendClientMessageEx(ID,COLOR_GRAD1," El cambio de nombre fue rechazado.");
	format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s rechazó el cambio de nombre a %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(ID));
	ABroadCast(COLOR_GENERAL, szMessage, 2);
	DeletePVar(ID, "RequestingNameChange");
	DeletePVar(ID, "NewNameRequest");
	return 1;
}

CMD:ncambios(playerid, params[])
{
    if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	if(Info[playerid][pAdmin] >= 3)
	{
		new nstring[64 + (MAX_PLAYER_NAME * 2)],newname[ MAX_PLAYER_NAME ];
		SendClientMessageEx(playerid, COLOR_GREEN, "* Cambios de nombre pendientes:");
		foreach(Player, i)
		{
			if(GetPVarType(i, "RequestingNameChange"))
			{
				GetPVarString(i, "NewNameRequest", newname, MAX_PLAYER_NAME);
				format(nstring, sizeof(nstring), "Nombre Actual: %s (ID: %d) | Cambiar a: %s | Precio: %d", GetPlayerNameEx(i), i, newname, GetPVarInt(i, "NameChangeCost"));
				SendClientMessageEx(playerid, COLOR_GRAD1, nstring);
			}
		}
		SendClientMessageEx(playerid, COLOR_GREEN, "_____________________________________________________");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
	return 1;
}

CMD:minombre(playerid, params[])
{
    if(!IsPlayerConnectedEx(playerid)) 	return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	switch(Info[playerid][pTempName])
	{
	    case 1:
		{
		    Info[playerid][pTempName] = 0;
		    SetPlayerName(playerid, Info[playerid][pNormalName]);
		    format(szMessage, sizeof(szMessage), "Se ha cambiado tu nombre correctamente. Nombre original: %s",Info[playerid][pNormalName]);
            SendClientMessageEx(playerid,-1, szMessage);
		}
		default: return SendClientMessageEx(playerid, COLOR_GREY, "* No te has cambiado de nombre.");
	}
	return 1;
}
CMD:adminduty(playerid, params[])
{
    if(!IsPlayerConnectedEx(playerid)) 	return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	if(Info[playerid][pAdmin] >= 1)
	{
		if(!strcmp(Info[playerid][pAdminName], "(null)", true)) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes administrar porque aún no han configurado tu nombre administrativo. Contácta a un administrador de rango mayor.");
		switch(Info[playerid][pAdminDuty])
		{
			case 0:
			{
			    Info[playerid][pTempName] = 1;
			    Info[playerid][pAdminDuty] = 1;
				GetPlayerHealth(playerid, Info[playerid][pHealth]);
				GetPlayerArmour(playerid, Info[playerid][pArmour]);
				SetPlayerName(playerid, Info[playerid][pAdminName]);
				SetPlayerHealth(playerid, 500000.0);
     			SetPlayerArmour(playerid, 500000.0);
				switch(Info[playerid][pSex])
				{
				    case    1: SetPlayerSkin(playerid,217);
				    case    2: SetPlayerSkin(playerid,211);
				}
				format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" {FFFFFF}Admin %s (ID: %d) está ahora en servicio.", GetPlayerNameEx(playerid), playerid);
			}
			case 1:
			{
				Info[playerid][pTempName] = 0;
			    Info[playerid][pAdminDuty] = 0;
				SetPlayerName(playerid, Info[playerid][pNormalName]);
				SetPlayerHealth(playerid, Info[playerid][pHealth]);
				SetPlayerArmour(playerid, Info[playerid][pArmour]);
				SetPlayerSkin(playerid,Info[playerid][pChar]);
				SetPlayerColor(playerid,TEAM_HIT_COLOR);
				format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" {FFFFFF}Admin %s (ID: %d) ahora ya no está en servicio.", GetPlayerNameEx(playerid), playerid);
			}
		}
		SendAdminMessage(COLOR_GENERAL, szMessage);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
	return 1;
}
zcmd(w, playerid, params[])
{
    if(!sscanf(params, "us[128]", params[0], params[1]))
	{
        if(Info[playerid][pAdmin] > 0 || Info[playerid][pAdmin] == 0 && Info[params[0]][pAdmin] > 0)
	    {
	        if(HidePM[params[0]] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Éste administrador se encuentra AFK, no puedes mandarles mensajes.");
	        new string[128];
	        format(string, sizeof(string), "Mensaje de %s (%d): %s", GetPlayerNameEx(playerid), playerid, params[1]);
	        SendClientMessageEx(params[0], 0xE9BC0AFF, string);
	        format(string, sizeof(string), "Susurras a %s (%d): %s", GetPlayerNameEx(params[0]), params[0] ,params[1]);
            SendClientMessageEx(playerid,  0xE9BC0AFF, string);
           foreach(Player, i)
            {
	            if(Info[i][pAdmin] >= 6)
		        {
		            if(See_MP[i] == 1)
			        {
			            format(string, sizeof(string), "[R: %s(%d) a  User %s(%d): {FFFFFF}%s]", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(params[0]), params[0], params[1]);
				        SendClientMessageEx(i, COLOR_GREY, string);
			        }
		        }
	        }
	    }
	    else SendClientMessageEx(playerid, COLOR_WHITE, "¡Susurros solo ha administradores!");
    }
	else SendClientMessageEx(playerid, COLOR_WHITE, "Utilize: /w <PlayerID> <Texto>");
    return 1;
}
zcmd(togpm, playerid, params[])
{
    if(Info[playerid][pAdmin] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
	switch(HidePM[playerid])
	{
	    case 1:
	    {
	        HidePM[playerid] = 0;
	        SendClientMessageEx(playerid, COLOR_WHITE, "¡PMs Habilitados!");
	    }
		default:
		{
			HidePM[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "¡PMs Bloqueados!");
		}
	}
    return 1;
}
CMD:mps(playerid, params[])
{
    if(Info[playerid][pAdmin] < 6) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
    if(See_MP[playerid] == 1)
	{
		See_MP[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_WHITE, "- Notificación de respuestas administrativas desactivada.");
	}
    else
	{
        See_MP[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_WHITE, "- Notificación de respuestas administrativas activada.");
	}
    return 1;
}
CMD:duda(playerid, params[])
{
    if(nod == 1)                                    return SendClientMessageEx(playerid, COLOR_GREY, "* Canal de dudas desactivado.");
	if(!IsPlayerConnectedEx(playerid)) 				return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	if(Info[playerid][pTut] == 0) 					return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando en la introduccion.");
	if((nonewbie) && Info[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_GREY, "* El canal de ayuda está desactivado por un administrador!");
	if(Info[playerid][pDudaMute] == 1) 				return SendClientMessageEx(playerid, COLOR_GREY, "* Estás bloqueado del canal de duda.");
	if(NewbieTimer[playerid] > 0)
	{
		format(szMessage, sizeof(szMessage), "Debes esperar %d segundos para volver hacer una duda.", NewbieTimer[playerid]);
		SendClientMessageEx(playerid, COLOR_GREY, szMessage);
		return 1;
	}
	if(isnull(params)) 								return SendClientMessageEx(playerid, COLOR_GREY, "USA: /duda [Pregunta o Duda]");
	if(isnumeric(params)) 							return SendClientMessageEx(playerid, COLOR_GREY, "* No se puede enviar números por este canal.");

	format(szMessage, sizeof(szMessage), ""COL_DUDA"Duda de %s (ID:%d): %s",GetPlayerNameEx(playerid),playerid,params);
 	ABroadCast(-1,szMessage,1);
  	CBroadCast(-1,szMessage,1);
	NewbieTimer[playerid] = 30;
	PlayerDuda[playerid] = 1;
	SendClientMessageEx(playerid, COLOR_GRAD1, "Tu pregunta fue enviada a nuestros administradores y moderadores, espere una respuesta.");
	return 1;
}
CMD:dudamute(playerid, params[])
{
    new idplayer = strval(params);
    if(Info[playerid][pAdmin] < 2) 		return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
    if(isnull(params)) 					return SendClientMessageEx(playerid, COLOR_GREY, "USA: /dudamute [id]");
    if(!IsPlayerConnectedEx(idplayer)) 	return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está conectado correctamente.");
    if(!IsPlayerConnectedEx(playerid)) 	return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(!isnumeric(params)) 				return SendClientMessageEx(playerid, COLOR_GREY, "* Tienes que escribir la ID del jugador.");
	//if(Info[idplayer][pDudaMute] == 0)  return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador ya está bloqueado del canal.");
	{
	    Info[idplayer][pDudaMute] = 1;
	    format(szMessage, sizeof(szMessage), "[ADM] Has sido bloqueado del canal de dudas por %s.", GetPlayerNameEx(playerid));
	    SendClientMessageEx(idplayer, COLOR_WHITE, szMessage);
		format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s ha bloqueado del canal de dudas a (ID:%d) %s.", GetPlayerNameEx(playerid), idplayer, GetPlayerNameEx(idplayer));
		ABroadCast(COLOR_GENERAL, szMessage, 1);
	}
	return 1;
}
CMD:dduda(playerid, params[])
{
    new idplayer = strval(params);
    if(Info[playerid][pAdmin] < 2) 		return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
    if(isnull(params)) 					return SendClientMessageEx(playerid, COLOR_GREY, "USA: /dudamute [id]");
    if(!IsPlayerConnectedEx(idplayer)) 	return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está conectado correctamente.");
    if(!IsPlayerConnectedEx(playerid)) 	return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(!isnumeric(params)) 				return SendClientMessageEx(playerid, COLOR_GREY, "* Tienes que escribir la ID del jugador.");
	//if(Info[idplayer][pDudaMute] == 0)
	{
	    Info[idplayer][pDudaMute] = 0;
	    format(szMessage, sizeof(szMessage), "[ADM] Has sido desbloqueado del canal de dudas por %s.", GetPlayerNameEx(playerid));
	    SendClientMessageEx(idplayer, COLOR_WHITE, szMessage);
		format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s ha desbloqueado del canal de dudas a (ID:%d) %s.", GetPlayerNameEx(playerid), idplayer, GetPlayerNameEx(idplayer));
		ABroadCast(COLOR_GENERAL, szMessage, 1);
	}
	return 1;
}
CMD:re(playerid, params[])
{
	return cmd_reportar(playerid, params);
}
CMD:reportar(playerid, params[])
{
    if(!IsPlayerConnectedEx(playerid)) 			return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	//if(AdminOnlineCheck() == 0) 				return SendClientMessageEx(playerid, COLOR_GREY, "* No hay administradores online en este momento, intenta más tarde!");
    if(Info[playerid][pTut] == 0) 				return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando en la introduccion.");
    if(Info[playerid][pRMutedTime] != 0)        return SendClientMessageEx(playerid, COLOR_GREY, "* Estás suspendido del sistema de reportes.");
    if(Info[playerid][pRMuted] == 1)        	return SendClientMessageEx(playerid, COLOR_GREY, "* Estás bloqueado permanentemente del sistema de reportes.");
    new ID;
    if(sscanf(params, "us[64]",ID,params)) 		return SendClientMessageEx(playerid,  COLOR_GREY, "USA: (/re)portar [id] [texto]");
	if(JustReported[playerid] > 0)
	{
		format(szMessage, sizeof(szMessage), "Debes esperar %d segundos para volver hacer un reporte.", JustReported[playerid]);
		SendClientMessageEx(playerid, COLOR_GREY, szMessage);
		return 1;
	}
    if(!IsPlayerConnectedEx(ID)) 				return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está conectado correctamente.");
	PlayerNeedsHelp[playerid] = 1;
	JustReported[playerid] = 20;
	format(szMessage, sizeof(szMessage), 	""COL_REPO"[REPORTE]: %s (ID:%d) reporta a %s (ID:%d)", GetPlayerNameEx(playerid), playerid,GetPlayerNameEx(ID), ID);
    ABroadCast(-1,szMessage,1);
	format(szMessage, sizeof(szMessage),    ""COL_REPO"[RAZÓN]  : %s", params);
	ABroadCast(-1,szMessage,1);
	if(Info[playerid][pVIP] == 2) ABroadCast(COLOR_VIP,".REPORTE PRIORITARIO.",1);
	SendClientMessageEx(playerid, COLOR_GRAD1, "Tu reporte fue enviado a nuestros administradores, espera un momento.");
	return 1;
}
CMD:aceptarreporte(playerid, params[]){return cmd_ar(playerid, params);}
CMD:ar(playerid, params[])
{
    new idplayer = strval(params);
	if(Info[playerid][pAdmin] == 0) 	return NoAutorizado
    if(isnull(params)) 					return SendClientMessageEx(playerid, COLOR_GREY, "USA: /aceptarreporte [id]");
    if(!IsPlayerConnectedEx(idplayer)) 	return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está conectado correctamente.");
    if(!IsPlayerConnectedEx(playerid)) 	return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	if(!isnumeric(params)) 				return SendClientMessageEx(playerid, COLOR_GREY, "* Tienes que escribir la ID del jugador.");
	if(PlayerNeedsHelp[idplayer] == 1)
    {
		format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s ha aceptado el reporte de (ID:%d) %s.", GetPlayerNameEx(playerid), idplayer, GetPlayerNameEx(idplayer));
		ABroadCast(COLOR_GENERAL, szMessage, 1);
		format(szMessage, sizeof(szMessage), "[ADM] Administrador %s (ID:%d) ha aceptado tu reporte porfavor espera.", GetPlayerNameEx(playerid), playerid);
		SendClientMessageEx(idplayer, COLOR_WHITE, szMessage);
		PlayerNeedsHelp[idplayer] = 0;
		JustReported[idplayer] = 0;
    }
    else SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no ha enviado un reporte.");
    return 1;
}
CMD:rechazarreporte(playerid, params[]){return cmd_rr(playerid, params);}
zcmd(rr,playerid, params[])
{
    new idplayer = strval(params);
	if(Info[playerid][pAdmin] == 0) 	return NoAutorizado
    if(isnull(params)) 					return SendClientMessageEx(playerid, COLOR_GREY, "USA: /rechazarreporte [id]");
    if(!IsPlayerConnectedEx(idplayer)) 	return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está conectado correctamente.");
    if(!IsPlayerConnectedEx(playerid)) 	return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	if(!isnumeric(params)) 				return SendClientMessageEx(playerid, COLOR_GREY, "* Tienes que escribir la ID del jugador.");
	if(PlayerNeedsHelp[idplayer] == 1)
    {
		format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s ha rechazado el reporte de (ID:%d) %s.", GetPlayerNameEx(playerid), idplayer, GetPlayerNameEx(idplayer));
        ABroadCast(COLOR_GENERAL, szMessage, 1);
		format(szMessage, sizeof(szMessage), "[ADM] Administrador %s (ID:%d) ha rechazado tu reporte.", GetPlayerNameEx(playerid), playerid);
		SendClientMessageEx(idplayer, COLOR_WHITE, szMessage);
		PlayerNeedsHelp[idplayer] = 0;
		JustReported[idplayer] = 0;
    }
    else SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no ha enviado un reporte.");
    return 1;
}
zcmd(aduda, playerid, params[]) {
    if (sscanf(params, "u", params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Utilize: /aduda <id>");
    if (!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
    if (Info[playerid][pAdmin] > 0 || Info[playerid][pHelper] > 0)
    {
        if (PlayerDuda[params[0]] == 1) {
            format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s aceptó la duda de [ID:%d] %s.", GetPlayerNameEx(playerid), params[0], GetPlayerNameEx(params[0]));
            ABroadCast(COLOR_GENERAL, szMessage, 1);
            CBroadCast(COLOR_GENERAL, szMessage, 1);
            format(szMessage, sizeof(szMessage), "Atencion:{FFFFFF} %s aceptó tu duda y va a responderte en instantes.", GetPlayerNameEx(playerid));
            SendClientMessageEx(params[0], COLOR_GENERAL, szMessage);
            PlayerDuda[params[0]] = 0;
        } else SendClientMessageEx(playerid, COLOR_GREY, "El jugador no ha enviado una duda.");
    }
        else return NoAutorizado
        
    return 1;
}
zcmd(rduda, playerid, params[]) {
    if (sscanf(params, "u", params[0])) return SendClientMessageEx(playerid, COLOR_WHITE, "Utilize: /rduda <id>");
    if (!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
    if (Info[playerid][pAdmin] > 0 || Info[playerid][pHelper] > 0)
    {
        if (PlayerDuda[params[0]] == 1) {
            format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s rechazó la duda de [ID:%d] %s.", GetPlayerNameEx(playerid), params[0], GetPlayerNameEx(params[0]));
            ABroadCast(COLOR_GENERAL, szMessage, 1);
            CBroadCast(COLOR_GENERAL, szMessage, 1);
            format(szMessage, sizeof(szMessage), "Atencion:{FFFFFF} %s rechazó tu duda, por favor utiliza el canal correctamente.", GetPlayerNameEx(playerid));
            SendClientMessageEx(params[0], COLOR_GENERAL, szMessage);
            PlayerDuda[params[0]] = 0;
        } else SendClientMessageEx(playerid, COLOR_GREY, "El jugador no ha enviado una duda.");
    }
        else return NoAutorizado

    return 1;
}
CMD:rto(playerid, params[])
{
    if(!IsPlayerConnectedEx(playerid)) 							return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 3) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	if (Info[playerid][pAdmin] >= 3)
	{
	    new giveplayerid = strval(params);
		if(isnull(params)) 					return SendClientMessageEx(playerid, COLOR_GREY, "USA: /rto [id]");
		if(!isnumeric(params)) 				return SendClientMessageEx(playerid, COLOR_GREY, "* Tienes que escribir la ID del jugador.");
		if(IsPlayerConnectedEx(giveplayerid))
		{
			switch(Info[giveplayerid][pRMutedTotal])
			{
			    case 0:
			    {
			        Info[giveplayerid][pRMutedTotal]++;
			        Info[giveplayerid][pRMutedTime] = 5*60;
					format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s ha dado a %s su primera advertencia sobre abuso de reportes.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ABroadCast(COLOR_LIGHTRED,szMessage,1);
					format(szDialog, sizeof(szDialog), "Advertencia sobre mal uso del comando (/re)portar\n\nRecuerda que en el caso de mal uso de este privilegio serás\nbloqueado permanentemente.\n\n"COL_GENERAL"%d de 5.\nEstás bloqueado %d segundos.",Info[giveplayerid][pRMutedTotal],Info[giveplayerid][pRMutedTime]);
					ShowPlayerDialog(giveplayerid,INVALID_DIALOG,DIALOG_STYLE_MSGBOX,"Advertencia de abuso", szDialog,"OK", "");
			    }
			    case 1:
			    {
                    Info[giveplayerid][pRMutedTotal]++;
                    Info[giveplayerid][pRMutedTime] = 10*60;
					format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s ha dado a %s su segunda advertencia sobre abuso de reportes.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ABroadCast(COLOR_LIGHTRED,szMessage,1);
					format(szDialog, sizeof(szDialog), "Advertencia sobre mal uso del comando (/re)portar\n\nRecuerda que en el caso de mal uso de este privilegio serás\nbloqueado permanentemente.\n\n"COL_GENERAL"%d de 5.\nEstás bloqueado %d segundos.",Info[giveplayerid][pRMutedTotal],Info[giveplayerid][pRMutedTime]);
					ShowPlayerDialog(giveplayerid,INVALID_DIALOG,DIALOG_STYLE_MSGBOX,"Advertencia de abuso", szDialog,"OK", "");
			    }
			    case 2:
				{
                    Info[giveplayerid][pRMutedTotal]++;
                    Info[giveplayerid][pRMutedTime] = 15*60;
					format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s ha dado a %s su tercera advertencia sobre abuso de reportes.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ABroadCast(COLOR_LIGHTRED,szMessage,1);
					format(szDialog, sizeof(szDialog), "Advertencia sobre mal uso del comando (/re)portar\n\nRecuerda que en el caso de mal uso de este privilegio serás\nbloqueado permanentemente.\n\n"COL_GENERAL"%d de 5.\nEstás bloqueado %d segundos.",Info[giveplayerid][pRMutedTotal],Info[giveplayerid][pRMutedTime]);
					ShowPlayerDialog(giveplayerid,INVALID_DIALOG,DIALOG_STYLE_MSGBOX,"Advertencia de abuso", szDialog,"OK", "");
			    }
			    case 3:
			    {
                    Info[giveplayerid][pRMutedTotal]++;
                    Info[giveplayerid][pRMutedTime] = 20*60;
					format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s ha dado a %s su cuarta advertencia sobre abuso de reportes.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ABroadCast(COLOR_LIGHTRED,szMessage,1);
					format(szDialog, sizeof(szDialog), "Advertencia sobre mal uso del comando (/re)portar\n\nRecuerda que en el caso de mal uso de este privilegio serás\nbloqueado permanentemente.\n\n"COL_GENERAL"%d de 6.\nEstás bloqueado %d segundos.",Info[giveplayerid][pRMutedTotal],Info[giveplayerid][pRMutedTime]);
					ShowPlayerDialog(giveplayerid,INVALID_DIALOG,DIALOG_STYLE_MSGBOX,"Advertencia de abuso", szDialog,"OK", "");
			    }
			    case 4:
			    {
                    Info[giveplayerid][pRMutedTotal]++;
                    Info[giveplayerid][pRMutedTime] = 25*60;
					format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s ha dado a %s su penúltima advertencia sobre abuso de reportes.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ABroadCast(COLOR_LIGHTRED,szMessage,1);
					format(szDialog, sizeof(szDialog), "Advertencia sobre mal uso del comando (/re)portar\n\nRecuerda que en el caso de mal uso de este privilegio serás\nbloqueado permanentemente.\n\n"COL_GENERAL"%d de 6.\nEstás bloqueado %d segundos.\nLa próxima serás bloqueado permanentemente.",Info[giveplayerid][pRMutedTotal],Info[giveplayerid][pRMutedTime]);
					ShowPlayerDialog(giveplayerid,INVALID_DIALOG,DIALOG_STYLE_MSGBOX,"Advertencia de abuso", szDialog,"OK", "");
			    }
				case 5:
				{
				    Info[giveplayerid][pRMuted] = 1;
                    Info[giveplayerid][pRMutedTotal]++;
                    Info[giveplayerid][pRMutedTime] = 30*60;
					format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s ha dado a %s su última advertencia sobre abuso de reportes.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ABroadCast(COLOR_LIGHTRED,szMessage,1);
					format(szDialog, sizeof(szDialog), "Te han bloqueado permanentemente por abuso de comando (/re)portar.\n"COL_GENERAL"%d de 6.\nEstás bloqueado %d segundos.\n"COL_WHITE"Apela al foro si crees que es un error.",Info[giveplayerid][pRMutedTotal],Info[giveplayerid][pRMutedTime]);
					ShowPlayerDialog(giveplayerid,INVALID_DIALOG,DIALOG_STYLE_MSGBOX,"Advertencia de abuso", szDialog,"OK", "");
				}
				default: return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador ya ha sido bloqueado permanentemente del sistema de reportes.");
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está conectado correctamente.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "No estás autorizado para usar este comando");
	return 1;
}
CMD:dreporte(playerid, params[])
{
    if(Info[playerid][pAdmin] >= 3)
    {
        new giveplayerid;
        if(sscanf(params, "ds[64]", giveplayerid, params)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /desbloquearr  [playerid] [razón]");
        if(IsPlayerConnectedEx(giveplayerid))
        {
                    Info[giveplayerid][pRMuted] = 0;
                    Info[giveplayerid][pRMutedTotal]--;
                    Info[giveplayerid][pRMutedTime] = 0;
					format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s ha desbloqueado del comando /re a %s, razón: %s",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid), params);
					ABroadCast(COLOR_GENERAL,szMessage,2);
					SendClientMessageEx(giveplayerid, COLOR_WHITE, "Has sido desbloqueado del comando de reportes, y ahora puedes usar el sistema de reportes de nuevo.");
					format(szMessage, sizeof(szMessage), "Razón: %s",params);
					SendClientMessageEx(giveplayerid, COLOR_WHITE, szMessage);
        }
        else return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está conectado correctamente.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "No estás autorizado para usar este comando");
	return 1;
}

CMD:noduda(playerid, params[])
{
	if(Info[playerid][pAdmin] >= 6)
	{
		if (!nonewbie)
		{
			nonewbie = 1;
			BroadCast(COLOR_GENERAL, ""COL_BLUE"Administración >"COL_WHITE" El canal de dudas fue deshabilitado por un administrador.");
		}
		else
		{
			nonewbie = 0;
			BroadCast(COLOR_GENERAL, ""COL_BLUE"Administración >"COL_WHITE" El canal de dudas fue habilitado por un administrador.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar este comando!");
	return 1;
}


CMD:darobjeto(playerid, params[]){
if(Info[playerid][pAdmin] >= 4){
	new string[128], giveplayerid, object, slot;
	if(sscanf(params, "ddd", giveplayerid, object, slot)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /giveobject [player] [object] [slot]");
	if(slot < 0 || slot > 8) return SendClientMessageEx(playerid, COLOR_WHITE, "* Slot Inválido, De 0 a 8");{
		if (IsPlayerConnectedEx(giveplayerid)){
			PlayerToyInfo[giveplayerid][slot][ptModelID] = object;
			PlayerToyInfo[giveplayerid][slot][ptBone] = 1;
			format(string, sizeof(string), "Entregaste a %s el objeto ID %d en el slot %d", GetPlayerNameEx(giveplayerid), object, slot);
			SendClientMessageEx(playerid, COLOR_GRAD1, string);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, "Recibiste un nuevo objeto (/toys) de un administrador!");
		}
		return 1;
	}
}
return 1;
}

CMD:mole(playerid, params[])
{
	if(Info[playerid][pAdmin] < 5) return NoAutorizado
	new string[128];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /mole [mole texto]");
	format(string, sizeof(string), "[Anuncio] %s [Número desconocido]",params);
	SendMoleMessage(COLOR_GRAD1, string);
	return 1;
}

CMD:facchat(playerid, params[])
{
	if(Info[playerid][pFactionModerator] != 1) return NoAutorizado
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /facchat [Mensaje para miembros en las facciones]");
	new string[128];
	format(string, sizeof(string), "* [Admin %s]: %s.", GetPlayerNameEx(playerid),params);
	foreach(Player, i)
	{
		if(Info[i][pMember] >= 1)
		{
			SendClientMessageEx(i, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:showsound(playerid, params[])
{
	new sound;
	if(sscanf(params, "d", sound)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /showsound [ID]");
	PlayerPlaySound(playerid, sound, 0,0,0);
	return 1;
}

CMD:shopdoble(playerid, params[]){
if (Info[playerid][pShopTech] == 1){
	new string[128], giveplayerid, hours, invoice[64];
	if(sscanf(params, "uds[64]", giveplayerid, hours, invoice)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /shop2X [playerid] [Horas] [Detalles]");
	format(string, sizeof(string), " %s te dio %d horas de doble experiencia, cada payday recibirás doble EXP y en trabajos también.", GetPlayerNameEx(playerid), hours);
	SendClientMessageEx(giveplayerid,COLOR_GRAD1,string);
	format(string, sizeof(string), " Estableciste su 2xEXP a %d horas a %s.", hours,GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid,COLOR_GRAD1,string);
	Info[giveplayerid][pDobleExp] += hours;
	format(string, sizeof(string), "[SHOP - X2 Exp] %s dió %d horas a %s - Pagó fue de %s", GetPlayerNameEx(playerid), hours,GetPlayerNameEx(giveplayerid), invoice);
	Log("logs/shoplog.log", string);
}
return 1;
}

CMD:weaponr(playerid, params[])
{
	if(Info[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid, hours;
		if(sscanf(params, "dd", giveplayerid,hours)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /weaponr [playerid] [horas]");
		if(IsPlayerConnectedEx(giveplayerid))
		{
			if(Info[giveplayerid][pWRestricted] == 0)
			{
			    Info[giveplayerid][pWRestricted] = hours;
				format(string, sizeof(string), "* Diste a %s %i horas de restricción de armas.", GetPlayerNameEx(giveplayerid),hours);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* Administrador %s te dió %i horas de restricción de armas.", GetPlayerNameEx(playerid),hours);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s dió restricción de armas a %s por %d horas.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),hours);
				ABroadCast(COLOR_GENERAL,string,2);
				return 1;
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "* Ese jugador ya tiene restricción de armas.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "ID Inválida.");
	}
	return 1;
}
zcmd(ad, playerid, params[])
{
    if(!sscanf(params, "s[220]", params[0]))
    {
        if(iAdverTimer >= 1)
		{
			new szerror[128];
			format(szerror, sizeof(szerror), "Sólo se puede enviar un anuncio global cada 1 minuto, faltan %d segundos.", iAdverTimer);
			return SendClientMessageEx(playerid, COLOR_GREY, szerror);
		}
		if(strlen(params[0]) >= 128) return SendClientMessageEx( playerid, COLOR_GREY, "* El anuncio es demasiado largo, por favor no utilizes más de 128 caracteres." );
		if(Info[playerid][pLevel] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Debes ser mínimo nivel 2");
        if(Info[playerid][pPnumber] == 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "No tienes teléfono, cómpra uno en el 24/7");
        if(Info[playerid][pADMute] == 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "Usted se encuentra bloqueado.");
        if(GetPVarType(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer anuncios mientras estás herido.");
        if(Info[playerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer anuncios en prisión.");
        new string[220];
        if(CheckMoney(playerid, 160))
        {
            format(string, sizeof(string), "[Anuncio]{FFFFFF} %s "COL_GENERAL"[Teléfono: {FFFFFF}%d"COL_GENERAL"]",  params[0], Info[playerid][pPnumber]);
	        OOCNews(COLOR_GENERAL,string);
	        Bought(playerid, 160);
	        TaxCNN += 160;
	        iAdverTimer = 60;
	        format(string, sizeof(string), "[STAFF] - Anuncio enviado por %s [ID: %d]", GetPlayerNameEx(playerid), playerid);
	        ABroadCast(COLOR_WHITE,string,1);
   		}
   		else SendClientMessageEx(playerid, COLOR_WHITE, "No tienes dinero para enviar un anuncio global ($160).");
  	}
  	else SendClientMessageEx(playerid, COLOR_WHITE, "Utilize: /ad <anuncio>");
    return 1;
}
CMD:anuncio(playerid, params[])
{
	if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No has ingresado al servidor correctamente.");
	if(GetPVarType(playerid, "Injured") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer anuncios mientras estás herido.");
	if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer anuncios en este momento.");
	if(!IsATablones(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No estás en los tablones de anuncios.");
	if(Info[playerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes hacer anuncios en prisión.");
	ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Anuncios", "Lista de Anuncios\nBuscar Anuncios\nPoner un Anuncio\nBorrar Anuncio", "Seleccionar", "Cancelar");
	return 1;
}

CMD:cinturon(playerid, params[]){
if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No estás en un vehiculo.");
new string[50 + MAX_PLAYER_NAME];
if(IsPlayerInAnyVehicle(playerid) == 1 && Seatbelt[playerid] == 0){
    Seatbelt[playerid] = 1;
    if(IsABike(GetPlayerVehicleID(playerid))){format(string, sizeof(string), "* %s agarra su casco, y se lo pone.", GetPlayerNameEx(playerid));}
    else { format(string, sizeof(string), "* %s pone las manos en su cinturón y se lo pone.", GetPlayerNameEx(playerid)); }
}
else if(IsPlayerInAnyVehicle(playerid) == 1 && Seatbelt[playerid] == 1){
    Seatbelt[playerid] = 0;
    if(IsABike(GetPlayerVehicleID(playerid))){format(string, sizeof(string), "* %s pone las manos en su casco, y se lo quita.", GetPlayerNameEx(playerid));}
    else { format(string, sizeof(string), "* %s pone las manos en su cinturón y se lo quita.", GetPlayerNameEx(playerid)); }
}
ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
return 1;
}

CMD:vercinturon(playerid, params[]){
new giveplayerid;
if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /vercinturon [Jugador]");
if(GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT) return SendClientMessageEx(playerid,COLOR_GREY,"Ese jugador no está en un vehiculo!");
if (ProxDetectorS(9.0, playerid, giveplayerid)){
	new string[128];
    new stext[4];
    if(Seatbelt[giveplayerid] == 0) { stext = "sin"; }
    else { stext = "con"; }
    if(IsABike(GetPlayerVehicleID(playerid))){
        format(string, sizeof(string), "%s está %s casco." , GetPlayerNameEx(giveplayerid) , stext);
        SendClientMessageEx(playerid,COLOR_WHITE,string);

        format(string, sizeof(string), "* %s mira a %s, mirando si tiene puesto su casco.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    }
    else{
        format(string, sizeof(string), "%s está %s cinturón." , GetPlayerNameEx(giveplayerid) , stext);
        SendClientMessageEx(playerid,COLOR_WHITE,string);

        format(string, sizeof(string), "* %s observa a travez de la ventana de %s, mirando si usa el cinturón.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    }
}
else { SendClientMessageEx(playerid, COLOR_GREY, "No estás cerca de ese jugador!"); }
return 1;
}

CMD:creditos(playerid, params[])
{
	SendClientMessage(playerid, COLOR_WHITE, "* "COL_BLUE"Fundadores:");
	SendClientMessage(playerid, COLOR_WHITE, " Mauro Palacios - David Gonzáles");
	SendClientMessage(playerid, COLOR_WHITE, "* "COL_BLUE"Programador del GM:");
	SendClientMessage(playerid, COLOR_WHITE, " Clicked");
	SendClientMessage(playerid, COLOR_WHITE, "* "COL_BLUE"Mapper del GM:");
	SendClientMessage(playerid, COLOR_WHITE, " Paolo Ibarra");
	SendClientMessage(playerid, COLOR_WHITE, "* "COL_BLUE"GameMode basado en ZC");
	return 1;
}

CMD:togvip(playerid, params[]){
if(Info[playerid][pVIP] > 0 || Info[playerid][pAdmin] >= 5){
	switch(Info[playerid][pVIPCHAT]){
		case 0:{
			Info[playerid][pVIPCHAT] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Chat VIP habilitado. Usa /vip [texto] para hablar.");
		}
		case 1:{
			Info[playerid][pVIPCHAT] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Chat VIP deshabilitado.");
		}
	}
}
return 1;
}

CMD:vip(playerid, params[])
{
if(Info[playerid][pVIP] > 0 || Info[playerid][pAdmin] >= 5){
	new string[128];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /vip [Mensaje - Chat]");
	if(VIPTimer[playerid] > 0){
		format(string, sizeof(string), "Debes esperar %d segundos para hablar de nuevo por este canal.", VIPTimer[playerid]);
		SendClientMessageEx(playerid, COLOR_GREY, string);
		return 1;
	}
	if(Info[playerid][pVIPCHAT] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "Tienes el canal deshabilitado, /togvip para re-habilitarlo!");
	//if(Info[playerid][pVMuted] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "Tu has sido mutedo del canal VIP.");
	switch(Info[playerid][pAdmin])
	{
	    case 5: format(string, sizeof(string), "** Administrador %s: %s", GetPlayerNameEx(playerid), params);
	    case 6: format(string, sizeof(string), "** Admin General %s: %s", GetPlayerNameEx(playerid), params);
	    case 7,8: format(string, sizeof(string), "** Director %s: %s", GetPlayerNameEx(playerid), params);
	}
	switch(Info[playerid][pVIP])
	{
		case 1:
		{
			format(string, sizeof(string), "** VIP Bronze %s: %s", GetPlayerNameEx(playerid), params);
			VIPTimer[playerid] = 6;
		}
		case 2:
		{
			format(string, sizeof(string), "** VIP Silver %s: %s", GetPlayerNameEx(playerid), params);
			VIPTimer[playerid] = 5;
		}
		case 3: format(string, sizeof(string), "** VIP Gold %s: %s", GetPlayerNameEx(playerid), params);
	}
	SendVIPMessage(COLOR_VIP, string);
	Log("logs/vipchat.log", string);
}
return 1;
}

CMD:spawncasa(playerid, params[])
{
	if( Info[playerid][pPhousekey] != INVALID_HOUSE_ID)
	{
	    if(Info[playerid][pVIP] >= 2)
		{
	    	switch(Info[playerid][pTypeSpawn])
			{
				case 0:
				{
	        		Info[playerid][pTypeSpawn] = 1;
	        		SendClientMessageEx( playerid, COLOR_GRAD1, "Gold VIP: Ahora aparecerás en tu casa cuando mueras." );
				}
				case 1:
				{
	        		Info[playerid][pTypeSpawn] = 0;
	        		SendClientMessageEx( playerid, COLOR_GRAD1, "Gold VIP: Ahora aparecerás en el hospital cuando mueras." );
				}
			}
		}
	    else return SendClientMessageEx( playerid, COLOR_WHITE, "No eres Gold VIP!" );
	}
	else SendClientMessageEx( playerid, COLOR_WHITE, "No eres dueño de una casa." );
	return 1;
}


CMD:automensaje(playerid, params[])
{
	if(Info[playerid][pVIP] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "No eres VIP.");
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /automensaje [text]");
	new string[128];
	if(strlen(params) >= 1 && strlen(params) < 63)
	{
		format(Info[playerid][pAutoTextReply], 64, "%s", params);
		format(string, sizeof(string), "Cambiaste el auto mensaje de respuesta: %s", params);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Tu automensaje no puede tener más de 64 letras ni menos de 1.");
	return 1;
}

CMD:adminshop(playerid, params[])
{
	if(Info[playerid][pShopTech] == 1)
	{
		SendClientMessageEx(playerid, COLOR_GREEN,"/shoplaser /shopcar /shopdoble /shopvest /shopneon");
	    SendClientMessageEx(playerid, COLOR_GREEN,"/crearcodigo /borrarcodigo /codigolibre /darcoins");
	}
	return 1;
}

CMD:shopneon(playerid, params[])
{
	if (Info[playerid][pShopTech] != 1) return SendClientMessageEx(playerid, COLOR_GREY, " No puedes usar este comando.");
	new string[128], giveplayerid, slot, color[32], invoice[64];
	if(sscanf(params, "ddss[64]", giveplayerid, slot, color, invoice)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /shopneon [playerid] [slot(0-9)] [red/green/blanco/yellow/rosado/blue] [Detalles]");
	if(strcmp(color,"red",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 18647;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = -5.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = -67.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = -30.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 90.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 230.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 90.0;
	    PlayerToyInfo[giveplayerid][slot][ftscaleX] = 1.5;
	    PlayerToyInfo[giveplayerid][slot][ftscaleY] = 1.5;
	    PlayerToyInfo[giveplayerid][slot][ftscaleZ] = 1.5;
	}
	else if(strcmp(color,"blue",true) == 0){
	PlayerToyInfo[giveplayerid][slot][ptModelID] = 18648;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
	PlayerToyInfo[giveplayerid][slot][ptPosX] = -5.0;
	PlayerToyInfo[giveplayerid][slot][ptPosY] = -67.0;
	PlayerToyInfo[giveplayerid][slot][ptPosZ] = -30.0;
	PlayerToyInfo[giveplayerid][slot][ptRotX] = 90.0;
	PlayerToyInfo[giveplayerid][slot][ptRotY] = 230.0;
	PlayerToyInfo[giveplayerid][slot][ptRotZ] = 90.0;
    PlayerToyInfo[giveplayerid][slot][ftscaleX] = 1.5;
    PlayerToyInfo[giveplayerid][slot][ftscaleY] = 1.5;
    PlayerToyInfo[giveplayerid][slot][ftscaleZ] = 1.5;
}
else if(strcmp(color,"green",true) == 0){
	PlayerToyInfo[giveplayerid][slot][ptModelID] = 18649;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
	PlayerToyInfo[giveplayerid][slot][ptPosX] = -5.0;
	PlayerToyInfo[giveplayerid][slot][ptPosY] = -67.0;
	PlayerToyInfo[giveplayerid][slot][ptPosZ] = -30.0;
	PlayerToyInfo[giveplayerid][slot][ptRotX] = 90.0;
	PlayerToyInfo[giveplayerid][slot][ptRotY] = 230.0;
	PlayerToyInfo[giveplayerid][slot][ptRotZ] = 90.0;
    PlayerToyInfo[giveplayerid][slot][ftscaleX] = 1.5;
    PlayerToyInfo[giveplayerid][slot][ftscaleY] = 1.5;
    PlayerToyInfo[giveplayerid][slot][ftscaleZ] = 1.5;
}
else if(strcmp(color,"yellow",true) == 0){
	PlayerToyInfo[giveplayerid][slot][ptModelID] = 18650;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
	PlayerToyInfo[giveplayerid][slot][ptPosX] = -5.0;
	PlayerToyInfo[giveplayerid][slot][ptPosY] = -67.0;
	PlayerToyInfo[giveplayerid][slot][ptPosZ] = -30.0;
	PlayerToyInfo[giveplayerid][slot][ptRotX] = 90.0;
	PlayerToyInfo[giveplayerid][slot][ptRotY] = 230.0;
	PlayerToyInfo[giveplayerid][slot][ptRotZ] = 90.0;
    PlayerToyInfo[giveplayerid][slot][ftscaleX] = 1.5;
    PlayerToyInfo[giveplayerid][slot][ftscaleY] = 1.5;
    PlayerToyInfo[giveplayerid][slot][ftscaleZ] = 1.5;
}
else if(strcmp(color,"pink",true) == 0){
	PlayerToyInfo[giveplayerid][slot][ptModelID] = 18651;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
	PlayerToyInfo[giveplayerid][slot][ptPosX] = -5.0;
	PlayerToyInfo[giveplayerid][slot][ptPosY] = -67.0;
	PlayerToyInfo[giveplayerid][slot][ptPosZ] = -30.0;
	PlayerToyInfo[giveplayerid][slot][ptRotX] = 90.0;
	PlayerToyInfo[giveplayerid][slot][ptRotY] = 230.0;
	PlayerToyInfo[giveplayerid][slot][ptRotZ] = 90.0;
    PlayerToyInfo[giveplayerid][slot][ftscaleX] = 1.5;
    PlayerToyInfo[giveplayerid][slot][ftscaleY] = 1.5;
    PlayerToyInfo[giveplayerid][slot][ftscaleZ] = 1.5;
}
else if(strcmp(color,"blanco",true) == 0){
	PlayerToyInfo[giveplayerid][slot][ptModelID] = 18652;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
	PlayerToyInfo[giveplayerid][slot][ptPosX] = -5.0;
	PlayerToyInfo[giveplayerid][slot][ptPosY] = -67.0;
	PlayerToyInfo[giveplayerid][slot][ptPosZ] = -30.0;
	PlayerToyInfo[giveplayerid][slot][ptRotX] = 90.0;
	PlayerToyInfo[giveplayerid][slot][ptRotY] = 230.0;
	PlayerToyInfo[giveplayerid][slot][ptRotZ] = 90.0;
    PlayerToyInfo[giveplayerid][slot][ftscaleX] = 1.5;
    PlayerToyInfo[giveplayerid][slot][ftscaleY] = 1.5;
    PlayerToyInfo[giveplayerid][slot][ftscaleZ] = 1.5;
}
format(string, sizeof(string), "Recibiste un meon de color %s en el slot %d, usa /toys para verlo y editarlo.", color, slot);
SendClientMessageEx(giveplayerid, COLOR_LIGHTGREEN, string);
format(string, sizeof(string), "Le diste a %s meon de color %s en el slot %d", GetPlayerNameEx(giveplayerid), color, slot);
SendClientMessageEx(playerid, COLOR_LIGHTGREEN, string);
format(string, sizeof(string), "[SHOPNEON] %s dió %s un neon toy - DETALLES: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
Log("logs/shoplog.log", string);
return 1;
}

CMD:buscar(playerid, params[])
{
	new string[128];
	if(!Hitman(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "No eres un hitman.");
	if(UsedFind[playerid])
	{
		format(string, sizeof(string), "Tienes que esperar %d segundos para buscar de nuevo.", UsedFind[playerid]);
		return SendClientMessageEx(playerid, COLOR_GREY, string);
	}
	new giveplayerid;
	if(sscanf(params, "d", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USO: /buscar [player]");
	if(IsPlayerConnectedEx(giveplayerid))
	{
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "No puedes usar este comando contigo mismo.");
		if(GetPlayerInterior(giveplayerid)!=0) return SendClientMessageEx(playerid, COLOR_GREY, "Está persona está en un interior.");
		if(Info[giveplayerid][pAdmin] >= 5) return SendClientMessageEx(playerid, COLOR_GREY, "No está disponible buscar a está persona.");
		new reload, level = Info[playerid][pRank];
		switch(level)
		{
		    case 1: reload = 90;
		    case 2: reload = 70;
		    case 3: reload = 60;
		    case 4: reload = 40;
		    case 5: reload = 20;
		    case 6: reload = 5;
		}
	    new Float:X[3];
	    GetPlayerPos(giveplayerid, X[0], X[1], X[2]);
	    SetPlayerCheckpoint(playerid,X[0], X[1], X[2], 4.0);
		new zone[MAX_ZONE_NAME];
		GetPlayer3DZone(giveplayerid, zone, sizeof(zone));
		format(string, sizeof(string), "%s - su última posición fue en %s.", GetPlayerNameEx(giveplayerid), zone);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		UsedFind[playerid] = reload;
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "Esa ID es inválida.");
	return 1;
}

CMD:graffiti(playerid, params[])
{
    if(!IsPlayerConnectedEx(playerid)) SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	if(Info[playerid][pMember] <= 10 && Info[playerid][pRank] >= 4)
    {
        SprayTag_Dialog(playerid, TYPE_LIST_MENU);
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "* No perteneces una familia o no tienes el rango suficiente.");
	return 1;
}
CMD:luces(playerid, params[])
{
if(Team_SAPD(playerid) || Team_FBI(playerid)){
	if(IsPlayerInAnyVehicle(playerid)){
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(!LSPD_IsACopCar(vehicleid) && !FBI_Vehicle(vehicleid)) return SendClientMessageEx(playerid, -1, "Debes estar en un vehiculo de SAPD o FBI.");
	    if(Lamp[vehicleid] == 0)
		{
			for(new i=0; i<sizeof(Offsets); i++){
            	if(Offsets[i][getID] == 560 && GetVehicleModel(vehicleid) == 560)
				{
                	Lamp[vehicleid] = 1;
                	SendClientMessageEx(playerid, -1, "Luces activadas correctamente.");
					light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
					AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
					return 1;
            	}
            	if(Offsets[i][getID] == 415 && GetVehicleModel(vehicleid) == 415){
                Lamp[vehicleid] = 1;
				light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
				AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
				return 1;
            	}
            	if(Offsets[i][getID] == 421 && GetVehicleModel(vehicleid) == 421){
                Lamp[vehicleid] = 1;
				light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
				AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
				return 1;
            	}
            	if(Offsets[i][getID] == 426 && GetVehicleModel(vehicleid) == 426){
                Lamp[vehicleid] = 1;
				light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
				AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
				return 1;
            	}
            	if(Offsets[i][getID] == 579 && GetVehicleModel(vehicleid) == 579){
                Lamp[vehicleid] = 1;
				light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
				AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
				return 1;
            	}
            	if(Offsets[i][getID] == 402 && GetVehicleModel(vehicleid) == 402){
                Lamp[vehicleid] = 1;
				light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
				AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
				return 1;
            	}
            	if(Offsets[i][getID] == 461 && GetVehicleModel(vehicleid) == 461){
                Lamp[vehicleid] = 1;
				light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
				AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
				return 1;
            	}
            	if(Offsets[i][getID] == 521 && GetVehicleModel(vehicleid) == 521){
                Lamp[vehicleid] = 1;
				light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
				AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
				return 1;
            	}
            	if(Offsets[i][getID] == 506 && GetVehicleModel(vehicleid) == 506){
                Lamp[vehicleid] = 1;
				light[vehicleid] = CreateObject(18646,Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 96.0);
				AttachObjectToVehicle(light[vehicleid], vehicleid, Offsets[i][vvvX], Offsets[i][vvvY], Offsets[i][vvvZ], 0.0, 0.0, 0.0);
				return 1;
            	}
			}
        	SendClientMessageEx(playerid, -1, "ERROR: Modelos compatibles:");
        	return SendClientMessageEx(playerid, -1, "Sultan, Cheetah, Washington, Premier, Huntley, Buffalo, PCJ 600, FCR 900, Super Gt");
        }
		else
		{
        	DestroyObject(light[vehicleid]);
            Lamp[vehicleid] = 0;
            SendClientMessageEx(playerid, -1, "Luces desactivadas correctamente.");
            return 1;
		}
	}
	else return SendClientMessageEx(playerid, -1, "Debes estar en un vehiculo.");
}
else SendClientMessageEx(playerid, -1, "No puedes usar este comando. (No eres Agente)");
return 1;
}
CMD:intermitentes(playerid, params[])
{
	if(Team_SAPD(playerid) || Team_FBI(playerid)){
		if(IsPlayerInAnyVehicle(playerid))
		{
		    new vehicleid = GetPlayerVehicleID(playerid);
		    if(!LSPD_IsACopCar(vehicleid) && !FBI_Vehicle(vehicleid)) return SendClientMessageEx(playerid, -1, "Debes estar en un vehiculo de SAPD o FBI.");
		    if(PLuces[playerid] == 0)
			{
				PLuces[playerid] = 1;
                SendClientMessageEx(playerid, -1, "Luces activadas correctamente.");
				LucesIntermitentes(playerid);
				return 1;
            }
			else
			{
            	ApagarLucesIntermitentes(playerid);
                PLuces[playerid] = 0;
                SendClientMessageEx(playerid, -1, "Luces desactivadas correctamente.");
                return 1;
			}
		}
		else return SendClientMessageEx(playerid, -1, "Debes estar en un vehiculo.");
	}
	else SendClientMessageEx(playerid, -1, "No puedes usar este comando.");
	return 1;
}
CMD:forcep(playerid, params[])
{
if (Info[playerid][pAdmin] < 5) return NoAutorizado
else{
	foreach(Player, i){
		if(Info[i][pLevel] != 0){ Info[i][pTimePayDay] = 3599; }
	}
	new string[64];
    format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s adelantó el payday.", GetPlayerNameEx(playerid));
    ABroadCast(COLOR_GENERAL,string,2);
}
return 1;
}
CMD:guardarcuenta(playerid, params[])
{
	if(IsPlayerConnectedEx(playerid))
	{
    	if(Info[playerid][pSavedTime] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Sólo puedes usar este comando cada 5 minutos.");
		if(Info[playerid][pTempName] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes guardar tu cuenta mientras tengas un nombre temporal.");
		Info[playerid][pSavedTime] = 300;
    	SendClientMessageEx(playerid, -1, "Tu cuenta ha sido guardada correctamente, sólo puedes usar este comando cada 5 minutos.");
		new playerip[32];
		Info[playerid][pInt] = GetPlayerInterior(playerid);
		Info[playerid][pVW] = GetPlayerVirtualWorld(playerid);
		GetPlayerPos(playerid, Info[playerid][pPos_x], Info[playerid][pPos_y], Info[playerid][pPos_z]);
		GetPlayerFacingAngle(playerid, Info[playerid][pPos_r]);
		GetPlayerIp(playerid, playerip, sizeof(playerip));
		format(Info[playerid][pIP], 32, "%s", playerip);
		OnPlayerSavedStats(playerid);
		GuardarArmas(playerid);
	}
	return 1;
}

CMD:borraratm(playerid, params[])
{
	if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	if(Info[playerid][pAdmin] >= 5)
	{
		if(!isnull(params))
		{
			new atmid = strval(params);
        	if(atmid < 0 || atmid > MAX_ATMS) return SendClientMessageEx( playerid, COLOR_GREY, "* ID de ATM inválida.");
			if(atmVariables[atmid][fATMPos][0] == 0.0) return SendClientMessageEx( playerid, COLOR_GREY, "* Ese ATM no está creado.");
        	atmVariables[atmid][fATMPos][0] = 0.0;
        	atmVariables[atmid][fATMPos][1] = 0.0;
        	atmVariables[atmid][fATMPos][2] = 0.0;
        	atmVariables[atmid][fATMPosRot] = 0.0;
        	atmVariables[atmid][atmMoney] = 0;
        	DestroyDynamicObject(atmVariables[atmid][rObjectId]);
        	DestroyDynamic3DTextLabel(Text3D:atmVariables[atmid][rTextLabel]);
        	SendClientMessageEx(playerid, COLOR_WHITE, "Borraste satisfactoriamente el ATM indicado.");
			atmSave();
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "USA: /borraratm [ID Libre]!");
	}
	return 1;
}
CMD:crearatm(playerid, params[])
{
	if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	if(Info[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
	new atmid;
	if(!sscanf(params, "d", atmid))
	{
		if(atmid < 0 || atmid > MAX_ATMS) return SendClientMessageEx( playerid, COLOR_GREY, "* ID de ATM inválida.");
		if(atmVariables[atmid][atmMoney] > 0) return SendClientMessageEx( playerid, COLOR_GREY, "* Esta ID está siendo utilizada.");
		GetPlayerPos(playerid, atmVariables[atmid][fATMPos][0], atmVariables[atmid][fATMPos][1], atmVariables[atmid][fATMPos][2]);
  		GetPlayerFacingAngle(playerid, atmVariables[atmid][fATMPosRot]);
		DestroyDynamicObject(atmVariables[atmid][rObjectId]);
		atmVariables[atmid][rObjectId] = CreateDynamicObject(2942,atmVariables[atmid][fATMPos][0],atmVariables[atmid][fATMPos][1],atmVariables[atmid][fATMPos][2]-0.4,0,0,atmVariables[atmid][fATMPosRot]);
		new text[150];
  		format(text,sizeof(text),""COL_GENERAL"[ATM ID: "COL_WHITE"%d"COL_GENERAL"]\n"COL_WHITE"Ingresa tu tarjeta usando 'cajero'.",atmid);
  		DestroyDynamic3DTextLabel(Text3D:atmVariables[atmid][rTextLabel]);
		atmVariables[atmid][rTextLabel] = CreateDynamic3DTextLabel(text,COLOR_GRAD1,atmVariables[atmid][fATMPos][0],atmVariables[atmid][fATMPos][1],atmVariables[atmid][fATMPos][2],8.0);
  		atmVariables[atmid][atmMoney] = 0;
  		SendClientMessageEx(playerid, COLOR_WHITE, "Creaste satisfactoriamente el ATM indicado.");
		atmSave();
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "USA: /crearatm [ID Libre]!");
	return 1;
}
CMD:editaratm(playerid, params[])
{
	if(Info[playerid][pAdmin] < 5) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
	new atmid, choose;
	if(sscanf(params, "dd", atmid,choose))
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "1. Posición");
		return SendClientMessageEx(playerid, COLOR_GREY, "USA: /editaratm <ID> <Opción>");
	}
	if(atmid < 0 || atmid > MAX_ATMS) return SendClientMessageEx( playerid, COLOR_GREY, "* ID de ATM inválida.");
	switch(choose)
	{
	    case 1:
	    {
			GetPlayerPos(playerid, atmVariables[atmid][fATMPos][0], atmVariables[atmid][fATMPos][1], atmVariables[atmid][fATMPos][2]);
	        GetPlayerFacingAngle(playerid, atmVariables[atmid][fATMPosRot]);
	        DestroyDynamicObject(atmVariables[atmid][rObjectId]);
			atmVariables[atmid][rObjectId] = CreateDynamicObject(2942,atmVariables[atmid][fATMPos][0],atmVariables[atmid][fATMPos][1],atmVariables[atmid][fATMPos][2]-0.4,0,0,atmVariables[atmid][fATMPosRot]);
			new text[150];
	        format(text,sizeof(text),""COL_GENERAL"[ATM ID: "COL_WHITE"%d"COL_GENERAL"]\n"COL_WHITE"Ingresa tu tarjeta usando 'cajero'.",atmid);
	        DestroyDynamic3DTextLabel(Text3D:atmVariables[atmid][rTextLabel]);
			atmVariables[atmid][rTextLabel] = CreateDynamic3DTextLabel(text,COLOR_GRAD1,atmVariables[atmid][fATMPos][0],atmVariables[atmid][fATMPos][1],atmVariables[atmid][fATMPos][2],8.0);
			atmSave();
	    }
	}
	return 1;
}

CMD:cajero(playerid, params[])
{
	if(IsPlayerConnectedEx(playerid))
	{
	    for(new i = 0; i < sizeof(atmVariables); i++)
		{
	        if(IsPlayerInRangeOfPoint(playerid,2.0,atmVariables[i][fATMPos][0],atmVariables[i][fATMPos][1],atmVariables[i][fATMPos][2]))
			{
	    		if(Info[playerid][pNrCuenta] == 0)
				{
			    	format(szDialog, sizeof(szDialog), ""COL_WHITE"Te recordamos que estos ATM's son propiedad del banco estado, y por ello\nnecesitas una tarjeta electrónica para acceder al sistema y hacer transacciones.\n\nRequisítos:\n* 2 meses en la ciudad ((Nivel 2))\n* $1000 disponibles.");
			    	return ShowPlayerDialog(playerid, INVALID_DIALOG, DIALOG_STYLE_MSGBOX,""COL_GENERAL"ATM - "COL_WHITE"Información", szDialog,"*","");
				}
				else
				{
				    SetPVarInt(playerid, "atmID", i);
	    			format(szDialog, sizeof(szDialog), "%s\n\nIngresa tu PIN(clave) para realizar operaciones con tu tarjeta.",GetPlayerNameEx(playerid));
	        		return ShowPlayerDialog(playerid, D_ATM_PIN,DIALOG_STYLE_PASSWORD,""COL_GENERAL"ATM - "COL_WHITE"Bienvenido", szDialog,"Continuar","Salir");
	    		}
			}
		}
	    SendClientMessageEx(playerid, COLOR_GREY, "* No estás cerca de un ATM.");
	}
	else SendClientMessage(playerid, COLOR_GREY, NoConectado);
	return 1;
}
CMD:abrircuenta(playerid, params[])
{
	if(!IsAtBank(playerid)) 					return SendClientMessageEx(playerid, COLOR_GREY, "* No estas en la ventanilla del banco.");
	 if(Info[playerid][pLevel] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "Usted debe ser mayor al nivel 2");
	if(Info[playerid][pNrCuenta] == 0)
	{
		new number = 48050000 + random(9999);
   		Info[playerid][pNrCuenta] = number;
    	Info[playerid][pPinBank] = 1234;
    	Info[playerid][pMoneyBank] += 1000;
   		SendClientMessageEx(playerid, -1, "* Has conseguido una cuenta bancaria,ya puedes usar los cajeros automáticos.");
    	SendClientMessageEx(playerid, -1, "* Tu PIN se estableció en "COL_BLUE"1234"COL_WHITE", cámbialo automaticamente en cualquier cajero.");
   		if(Info[playerid][pTaxDeuda] > 0)
     {
      Info[playerid][pMoneyBank] -= Info[playerid][pTaxDeuda];
   			Tax += Info[playerid][pTaxDeuda];
			Info[playerid][pTaxDeuda] = 0;
			SendClientMessageEx(playerid, -1, "Banco: Hay una deuda pendiente al estado y lo hemos descontado de su cuenta bancaria.");
   		}

		return 1;
	}
	else SendClientMessageEx(playerid, -1, ""COL_WHITE"* Ya tienes una cuenta bancaria.");
	return 1;
}
CMD:crearsalecars(playerid, params[])
{
	if (Info[playerid][pAdmin] < 7) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
	new ID;
	if(sscanf(params, "d", ID)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /crearsalecars [vehículo ID]");
	if(ID < 0 || ID > MAX_CARSALE) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de vehículo inválida! (0 - 130)");
	if(varCarSale[ID][CSVehModel] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID ya está siendo utilizada.");
	ShowPlayerDialog(playerid,D_NEWVEH,DIALOG_STYLE_INPUT,"Crear Vehículo","Escribe la ID del modelo del coche que quieres crear.","Ok","Cancelar");
	SetPVarInt(playerid, "IDCarSale", ID);
	return 1;
}
CMD:borrarsalecars(playerid, params[])
{
	if (Info[playerid][pAdmin] < 7) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
	new ID;
	if(sscanf(params, "d", ID)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /borrarsalecars [vehículo ID]");
	if(ID < 0 || ID > MAX_CARSALE) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de vehículo inválida! (0 - 130)");
	if(varCarSale[ID][CSVehModel] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID ya no está siendo utilizada.");
	DeleteSaleCar(ID);
	return 1;
}
CMD:crearcamara(playerid, params[])
{
	if (Info[playerid][pAdmin] < 7) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
	new ID;
	if(sscanf(params, "d", ID)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /crearcamara [SpeedCam ID]");
	if(ID < 0 || ID > MAX_vCAMERAS) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de cámara inválida! (0 - 15)");
	if(vCameraInfo[ID][vCameraLimit] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID ya está siendo utilizada.");
	new Float:x,Float:y,Float:z,Float:angle;
	GetPlayerPos(playerid,x,y,z); GetPlayerFacingAngle(playerid,angle);
	angle = angle + 180;if(angle > 360){angle = angle - 360;}
	CreateSpeedCam(ID,x,y,z-2,angle,1,10,0);
	SetPlayerPos(playerid,x,y+2,z);
	SendClientMessageEx(playerid, COLOR_GREY, "* Cámara creada exitósamente, usa /editarcamara para editar su rango, limite y multa.");
	return 1;
}
CMD:editarcamara(playerid, params[])
{
	if (Info[playerid][pAdmin] < 7) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
	new ID,opcion;
	if(sscanf(params, "dd", ID,opcion))
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "1: Rango - 2: Limite - 3: Estado - 4: Multa");
		return SendClientMessageEx(playerid, COLOR_GREY, "USA: /editarcamara [SpeedCam ID] [Número de opción]");
	}
	if(ID < 0 || ID > MAX_vCAMERAS) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de cámara inválida! (0 - 15)");
	if(vCameraInfo[ID][vCameraLimit] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes editar está cámara, primero créala.");
	switch(opcion)
	{
	    case 1:
	    {
	        ShowPlayerDialog(playerid,D_SPEEDCAMRANGE,DIALOG_STYLE_INPUT,"Editar Cámara","Escribe el rango que medirá la velocidad de lo coches.\n\nMin: 5 -- Max: 30","Ok","Cancelar");
	        SetPVarInt(playerid, "IDSpeedCam", ID);
	    }
	    case 2:
	    {
			ShowPlayerDialog(playerid,D_SPEEDCAMLIMIT,DIALOG_STYLE_INPUT,"Editar Cámara","Escribe el límite de la velocidad que podrán pasar los coches.\n\nMin: 10 -- Max: 250","Ok","Cancelar");
	        SetPVarInt(playerid, "IDSpeedCam", ID);
	    }
	    case 3:
	    {
			ShowPlayerDialog(playerid,D_SPEEDCAMSTATUS,DIALOG_STYLE_LIST,"Editar Cámara - Selecciona","Activar Cámara\nDesactivar Cámara","Ok","Cancelar");
	        SetPVarInt(playerid, "IDSpeedCam", ID);
	    }
		case 4:
		{
			ShowPlayerDialog(playerid,D_SPEEDCAMFINE,DIALOG_STYLE_INPUT,"Editar Cámara","Escribe la multa que dará al pasarse el máximo de velocidad.\n\nMin: 100 -- Max: 15000","Ok","Cancelar");
	        SetPVarInt(playerid, "IDSpeedCam", ID);
		}
	}
	return 1;
}
CMD:borrarcamara(playerid, params[])
{
	if (Info[playerid][pAdmin] < 7) 		return NoAutorizado
	new ID;
	if(sscanf(params, "d", ID)) 			return SendClientMessageEx(playerid, COLOR_GREY, "USA: /borrarcamara [SpeedCam ID]");
	if(ID < 0 || ID > MAX_vCAMERAS) 		return SendClientMessageEx(playerid, COLOR_GREY, "* ID de vehículo inválida! (0 - 40)");
	if(vCameraInfo[ID][vCameraLimit] == 0) 	return SendClientMessageEx(playerid, COLOR_GREY, "* Esa ID ya no está siendo utilizada.");
	DeleteSpeedCam(ID);
	return 1;
}

CMD:darcoins(playerid, params[])
{
	if(Info[playerid][pShopTech] == 0) 						return NoAutorizado
	new giveplayerid, coins,invoice[32];
	if(sscanf(params,"uds[32]",giveplayerid,coins,invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /darcoins [playerid] [# coins] [Factura]");
	if(!IsPlayerConnectedEx(giveplayerid)) 					return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está correctamente conectado.");
	if(coins < 0) 											return SendClientMessageEx(playerid, COLOR_GREY, "* No se puede dar esa cantidad de coins!");

	Info[giveplayerid][pCoinsVip] += coins;
    format(szMessage, sizeof(szMessage), "Administrador %s te ha dado %d coins.",GetPlayerNameEx(playerid),coins);
    SendClientMessageEx(giveplayerid, COLOR_ORANGE, szMessage);
    format(szMessage, sizeof(szMessage), "Has dado %d coins a %s.",coins,GetPlayerNameEx(giveplayerid));
    SendClientMessageEx(playerid, COLOR_ORANGE, szMessage);
	format(szMessage, sizeof(szMessage), "* %s ha dado %d coins a %s. Factura [%s].", GetPlayerNameEx(playerid), coins, GetPlayerNameEx(giveplayerid),invoice);
	Log("logs/coins.log", szMessage);
	return 1;
}
CMD:crearcodigo(playerid, params[]){
	if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	if(Info[playerid][pShopTech] == 1){
		new codeid,codestr[8],coins;
		if(!sscanf(params, "ds[8]d", codeid,codestr,coins)){
			if(codeid < 0 || codeid > MAX_CODESVIP) 	return SendClientMessageEx(playerid, COLOR_GREY, "* ID de código inválida.");
		    if(varCodesVIP[codeid][CodeCoins] > 0) 		return SendClientMessageEx(playerid, COLOR_GREY, "* Ese código ya ha sido creado.");
            if(!isnumeric(codestr)) 					return SendClientMessageEx(playerid, COLOR_GREY, "* El código sólo consiste en números.");
			if(strlen(codestr) == 6){
   		    	new codigo = strval(codestr);
	            varCodesVIP[codeid][CodeNro] = codigo;
	            varCodesVIP[codeid][CodeCoins] = coins;
	            format(szMessage, sizeof(szMessage), "Se ha creado el código vip exitósamente. (%d) (Asignará %d coins)",codigo,coins);
                SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				saveCodes();
	        }else return SendClientMessageEx( playerid, COLOR_GREY, "* El código debe tener sólo 6 dígitos.");
		}else return SendClientMessageEx( playerid, COLOR_GREY, "USA: /crearcódigo [codeid] [código] [coins]");
	}else NoAutorizado
	return 1;
}
CMD:borrarcodigo(playerid, params[]){
	if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	if(Info[playerid][pShopTech] == 1){
		new codeid;
		if(!sscanf(params, "d", codeid)){
			if(codeid < 0 || codeid > MAX_CODESVIP) return SendClientMessageEx( playerid, COLOR_GREY, "* ID de código inválida.");
		    if(varCodesVIP[codeid][CodeCoins] == 0) return SendClientMessageEx( playerid, COLOR_GREY, "* Ese código aún no ha sido creado.");
			varCodesVIP[codeid][CodeNro] = 0;
	        varCodesVIP[codeid][CodeCoins] = 0;
	        format(szMessage, sizeof(szMessage), "Se ha borrado el código vip exitósamente. (ID: %s)",codeid);
	        SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	        saveCodes();
		}else return SendClientMessageEx( playerid, COLOR_GREY, "USA: /crearcódigo [codeid]");
	}else NoAutorizado
	return 1;
}
CMD:codigolibre(playerid, params[]){
    if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	if(Info[playerid][pShopTech] == 1){
	    SendClientMessageEx(playerid, COLOR_GREY, "ID de Código que está disponible:");
		for(new ex; ex <MAX_CODESVIP; ex++){
		    if(varCodesVIP[ex][CodeCoins] == 0){
	        	new string[128];
	        	format(string, sizeof(string), "ID Libre: /crearcodigo %d [Código ][coins]", ex);
	        	SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else NoAutorizado
	return 1;
}

CMD:mundode(playerid, params[])
{
    new idplayer = strval(params);
	if(Info[playerid][pAdmin] < 1) 		return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes usar este comando.");
    if(isnull(params)) 					return SendClientMessageEx(playerid, COLOR_GREY, "USA: /mundode [id]");
    if(!IsPlayerConnectedEx(idplayer)) 	return SendClientMessageEx(playerid, COLOR_GREY, "* Ese jugador no está conectado correctamente.");
    if(!IsPlayerConnectedEx(playerid)) 	return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
	new inte = GetPlayerInterior(idplayer), vw = GetPlayerVirtualWorld(idplayer);
	format(szMessage, sizeof(szMessage), "%s (Int: %d) - (VirtualWorld: %d)", GetPlayerNameEx(idplayer),inte,vw);
	SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	return 1;
}
CMD:menuvip(playerid, params[])
{
    if(!IsPlayerConnectedEx(playerid)) 	return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
    if(Info[playerid][pCoinsPIN] == 0)			return SendClientMessageEx(playerid, COLOR_GREY, "* No has establecido tu PIN para el sistema de funciones VIP (usa /pinvip)");
	if(Info[playerid][pVIP] >= 1)
    {
        ShowPlayerDialog(playerid,D_VIPACC,DIALOG_STYLE_INPUT ,""COL_GENERAL"Ingresa tu PIN VIP",	""COL_WHITE"Ingresa tu PIN para poder usar las funciones VIP.\n\nPIN:","Continuar","Atrás");
    }
    else SendClientMessageEx(playerid, COLOR_GREY, "* Debes ser VIP para usar este locker.");
	return 1;
}
CMD:pinvip(playerid, params[]){
    if(!IsPlayerConnectedEx(playerid)) 			return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
    if(Info[playerid][pVIP] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "* Debes ser VIP para usar esta función.");
	ShowPlayerDialog(playerid,D_PINVIP,DIALOG_STYLE_LIST,""COL_GENERAL"Selecciona","Crear PIN VIP\nCambiar PIN VIP","Seleccionar","Salir");
	return 1;
}

CMD:codigovip(playerid, params[]){
	if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	ShowPlayerDialog(playerid,D_CODEVIP,DIALOG_STYLE_INPUT ,""COL_GENERAL"Codigo VIP",""COL_WHITE"Atención:\n\nEste comando sólo es usado para personas que\nhan comprado coins en la web de nuestro servidor.\n\nSi has comprado coins ingresa el código que se te ha generado.","Ingresar","Salir");
	return 1;
}
CMD:vips(playerid, params[]){
    if(!IsPlayerConnectedEx(playerid)) 			return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
   	ShowPlayerDialog(playerid,D_CVVIP,DIALOG_STYLE_LIST,""COL_GENERAL"Paquetes VIP",""COL_WHITE"VIP Bronze (200C)\nVIP Silver (300C)\nVIP Gold (450C)","Seleccionar","Cancelar");
	return 1;
}
CMD:cobrar(playerid, params[])
{
if(EmpleosPOS(playerid))
{
	if(Info[playerid][pCashGo] == 0) 		return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes ningún cobro pendiente.");
	if(Tax > Info[playerid][pCashGo])
	{
        GivePlayerCash(playerid, Info[playerid][pCashGo]);
        Tax -= Info[playerid][pCashGo];
        format(szMessage, sizeof(szMessage), "Se te entregó el pago pendiente ($%d), disculpa los inconvenientes causados.",Info[playerid][pCashGo]);
        SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
		Info[playerid][pCashGo] = 0;
	}
    else SendClientMessageEx(playerid, COLOR_GREY, "* Aún no hay fondos suficiente para pagar tu deuda, lo sentimos.");
}
else SendClientMessageEx(playerid, COLOR_GREY, "No estas en el Centro de Empleos!");
return 1;
}
CMD:comprar(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
	{
	    new businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
	    if(businessVariables[businessID][bType] == 0) return 1;
	    new titlestring[32];
	    format(titlestring, sizeof(titlestring), "%s",businessVariables[businessID][bName]);
		switch(businessVariables[businessID][bType])
		{
			case 1: ShowPlayerDialog(playerid, DIALOG_BFOOD, DIALOG_STYLE_LIST, titlestring, "Pizza 		- ($20)	(+10 Hambre)\nPollo 		- ($18)	(+8 Hambre)\nHamburgesa 	- ($15)	(+5 Hambre)\nEnsalada 	- ($12)	(+3 Hambre)\nPostre 		- ($8)	(+2 Hambre)\nHelado 		- ($5)	(+1 Hambre)\nEnergizante	- ($350)(100%)", "Comer", "Salir");
			case 3: ShowPlayerDialog(playerid, STOREMENU, DIALOG_STYLE_LIST, titlestring,"Agenda\t\t\t$20\nLoteria\t\t\t$10\nCigarros\t\t$40\nEncendedor\t\t$20\nFlores\t\t\t$7", "Seleccionar", "Salir");
			case 4: ShowPlayerDialog(playerid, DIALOG_BSEX_SHOP, DIALOG_STYLE_LIST, titlestring,"Dildo Doble punta\nDildo pequeño\nDildo vibrador\nDildo vibrador pequeño", "Seleccionar", "Salir");
			case 5: ShowFurnitureMenu(playerid);
            case 6: ShowPlayerDialog(playerid, DIALOG_AMMU, DIALOG_STYLE_LIST, titlestring,"Balas\nBrass Knuckles\nBate de Beisbol\nPistola 9mm (3000$)\nDesert Eagle (8000$)", "Comprar", "Salir");
			case 7: ShowPlayerDialog(playerid, DIALOG_SHOPFISH, DIALOG_STYLE_LIST, titlestring,"Cebo de Pesca\nHilos de nailon", "Comprar", "Salir");
			case 8: ShowPlayerDialog(playerid, BEBIDAS, DIALOG_STYLE_LIST, "Bebidas", "Cerveza ($60)\nVodka ($100)\nWhiskey ($100)\nAgua ($20)\nGaseosa($20)", "Comprar", "Salir");
			case 9: ShowPlayerDialog(playerid, DIALOG_ELECTRONICA, DIALOG_STYLE_LIST, "Tienda de Electronica", "Celular\t\t\t($200)\nCámara\t\t\t($160)\nRadio\t\t\t($350)\nEstereo\t\t\t($750)", "Comprar", "Salir");
			default: return 1;
		}
	}
	return 1;
}
zcmd(cropa, playerid, params[])
{
    new businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
    if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
    {
        if(businessVariables[businessID][bType] == 2)
        {
    		if(IsPlayerConnectedEx(playerid)) return ShowModelSelectionMenu(playerid, skinlist, "Cambia tu skin", 0x000000FF, COLOR_GREY, 0xFFF6BDFF);
			return SendClientMessageEx(playerid, COLOR_WHITE, "No estás conectado !");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* No estás en una tienda de Ropa.");
	}
	return 1;
}
zcmd(ctoys,playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid,5.0,802.5069,-1419.6813,1016.4688))
    {
    	if(Info[playerid][pVIP] >= 2)
    	{
        	return ShowPlayerDialog(playerid, BUYTOYSGOLD, DIALOG_STYLE_MSGBOX, "Tienda de Accesorios", "Bienvenido al dispensador de accesorios VIP! Aquí puedes comprar accesorios para ti.\nPrimero, tienes que elegir que menú verás","Ok", "Salir");
    	}
    }
    new businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
    if(GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD >= 1)
    {
        if(businessVariables[businessID][bType] == 2)
        {
        	ShowPlayerDialog(playerid, BUYTOYS, DIALOG_STYLE_MSGBOX, "Tienda de Accesorios", "Bienvenido a la tienda de accesorios! Aquí puedes comprar accesorios para ti.\nPrimero, tienes que elegir que menú verás","Normal", "VIP");
			return 1;
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "* No estás en una tienda de Ropa.");
	}
    return 1;
}

CMD:avenegocio(playerid, params[])
{
    if(Info[playerid][pAdmin] >= 5)
	{
        new businessID = strval(params);
		if(!isnull(params))
		{
		    if(businessID < 1 || businessID > MAX_BUSINESS) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de negocio inválido.");
	        new labelString[96];
	        format(businessVariables[businessID][bOwner], MAX_PLAYER_NAME, "Sin Dueño");
	        DestroyDynamicPickup(businessVariables[businessID][bPickupID]);
	        DestroyDynamic3DTextLabel(businessVariables[businessID][bLabelID]);
		    format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"Nadie\n"COL_GENERAL"Precio: "COL_WHITE"$%d\n"COL_GENERAL"'/comprarnegocio'\n"COL_WHITE"["COL_GENERAL"Abierto"COL_WHITE"]", businessID, businessVariables[businessID][bName], businessVariables[businessID][bPrice]);
			businessVariables[businessID][bLabelID] = CreateDynamic3DTextLabel(szMessage, -1, businessVariables[businessID][bExteriorPos][0], businessVariables[businessID][bExteriorPos][1], businessVariables[businessID][bExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
			businessVariables[businessID][bPickupID] = CreateDynamicPickup(1274, 23, businessVariables[businessID][bExteriorPos][0], businessVariables[businessID][bExteriorPos][1], businessVariables[businessID][bExteriorPos][2], 0, 0, -1, 250);
			businessVariables[businessID][bLocked] = 0;
			format(labelString, sizeof(labelString), "* Vendiste con comando administrativo el negocio ID %d.", businessID);
			SendClientMessageEx(playerid, COLOR_WHITE, labelString);
		    saveBusiness(businessID);
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "USA: /avenegocio [businessid]");
    }
    return 1;
}
CMD:vendernegocio(playerid, params[])
{
    #pragma unused params
	if(IsPlayerConnectedEx(playerid))
	{
	    new businessID = getPlayerBusinessID(playerid);
	    if(businessID < 1) return 1;
	    new labelString[96];
		GivePlayerCash(playerid, businessVariables[businessID][bPrice]/2);
		Tax -= businessVariables[businessID][bPrice]/2;
        format(businessVariables[businessID][bOwner], MAX_PLAYER_NAME, "Sin Dueño");
		format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"Nadie\n"COL_GENERAL"Precio: "COL_WHITE"$%d\n"COL_GENERAL"'/comprarnegocio'\n"COL_WHITE"["COL_GENERAL"Abierto"COL_WHITE"]", businessID, businessVariables[businessID][bName], businessVariables[businessID][bPrice]);
        DestroyDynamicPickup(businessVariables[businessID][bPickupID]);
        DestroyDynamic3DTextLabel(businessVariables[businessID][bLabelID]);
		businessVariables[businessID][bLabelID] = CreateDynamic3DTextLabel(szMessage, -1, businessVariables[businessID][bExteriorPos][0], businessVariables[businessID][bExteriorPos][1], businessVariables[businessID][bExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		businessVariables[businessID][bPickupID] = CreateDynamicPickup(1274, 23, businessVariables[businessID][bExteriorPos][0], businessVariables[businessID][bExteriorPos][1], businessVariables[businessID][bExteriorPos][2], 0, 0, -1, 250);
		businessVariables[businessID][bLocked] = 0;
		format(labelString, sizeof(labelString), "Negocio Vendido! El estado te pagó %d por tu local.", businessVariables[businessID][bPrice]/2);
		SendClientMessageEx(playerid, COLOR_WHITE, labelString);
		saveBusiness(businessID);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
	return 1;
}
CMD:crearnegocio(playerid, params[])
{
	if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, NoConectado);
    if(Info[playerid][pAdmin] >= 5)
	{
    	new Float: floatPos[3];

		if(!strcmp(params, "exterior", true))
		{
	        GetPlayerPos(playerid, floatPos[0], floatPos[1], floatPos[2]);
            SetPVarFloat(playerid, "pBeX", floatPos[0]);
            SetPVarFloat(playerid, "pBeY", floatPos[1]);
            SetPVarFloat(playerid, "pBeZ", floatPos[2]);
            SetPVarInt(playerid, "bExt", 1);
            SendClientMessageEx(playerid, COLOR_WHITE, "* Exterior de negocio configurado.");
		}
        else if(!strcmp(params, "interior", true))
		{
        	GetPlayerPos(playerid, floatPos[0], floatPos[1], floatPos[2]);

            SetPVarFloat(playerid, "pBiX", floatPos[0]);
            SetPVarFloat(playerid, "pBiY", floatPos[1]);
            SetPVarFloat(playerid, "pBiZ", floatPos[2]);
			SetPVarInt(playerid, "pBiID", GetPlayerInterior(playerid));
            SetPVarInt(playerid, "bInt", 1);
            SendClientMessageEx(playerid, COLOR_WHITE, "* Interior de negocio configurado.");
		}
        else if(!strcmp(params, "completar", true))
		{
        	if(GetPVarInt(playerid, "bExt") != 1 || GetPVarInt(playerid, "bInt") != 1) return SendClientMessageEx(playerid, COLOR_GREY, "* Todavia no has configurado el interior/exterior del negocio.");
		    new i;
			for(new x = 1; x < MAX_BUSINESS; x++)
			{
			    if(businessVariables[x][bType] == 0)
			    {
			        i = x;
			        printf("ID LIBRE %d",x);
			        break;
				}
			}
			if(businessVariables[i][bType] == 0)
			{
				businessVariables[i][bExteriorPos][0] = GetPVarFloat(playerid, "pBeX");
			    businessVariables[i][bExteriorPos][1] = GetPVarFloat(playerid, "pBeY");
			    businessVariables[i][bExteriorPos][2] = GetPVarFloat(playerid, "pBeZ");

			    businessVariables[i][bInteriorPos][0] = GetPVarFloat(playerid, "pBiX");
			    businessVariables[i][bInteriorPos][1] = GetPVarFloat(playerid, "pBiY");
			    businessVariables[i][bInteriorPos][2] = GetPVarFloat(playerid, "pBiZ");
			    
			    businessVariables[i][bInterior] = GetPVarInt(playerid, "pBiID");

 		        format(businessVariables[i][bOwner], MAX_PLAYER_NAME, "Sin Dueño");
 		        format(businessVariables[i][bName], 32, "Negocio");

 		        businessVariables[i][bLocked] = 0;

			    format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"Nadie\n"COL_GENERAL"Precio: "COL_WHITE"$%d\n"COL_GENERAL"'/comprarnegocio'\n"COL_WHITE"["COL_GENERAL"Abierto"COL_WHITE"]", i, businessVariables[i][bName], businessVariables[i][bPrice]);

		        businessVariables[i][bLabelID] = CreateDynamic3DTextLabel(szMessage, -1, businessVariables[i][bExteriorPos][0], businessVariables[i][bExteriorPos][1], businessVariables[i][bExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
				businessVariables[i][bPickupID] = CreateDynamicPickup(1274, 23, businessVariables[i][bExteriorPos][0], businessVariables[i][bExteriorPos][1], businessVariables[i][bExteriorPos][2], 0, 0, -1, 250);

				saveBusiness(i);

			    DeletePVar(playerid, "pBeX");
			    DeletePVar(playerid, "pBeY");
			    DeletePVar(playerid, "pBeZ");
			    DeletePVar(playerid, "pBiX");
			    DeletePVar(playerid, "pBeY");
			    DeletePVar(playerid, "pBeZ");
			    DeletePVar(playerid, "pBiID");

			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid, businessVariables[i][bExteriorPos][0], businessVariables[i][bExteriorPos][1], businessVariables[i][bExteriorPos][2]);
		        return SendClientMessageEx(playerid, COLOR_WHITE, "* Negocio creado!");

			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "* Ya no hay slots disponibles para crear negocios.");

		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "USA: /crearnegocio [interior/exterior/completar]");
	}
	else NoAutorizado
	return 1;
}
CMD:nprecio(playerid, params[])
{
	if(Info[playerid][pAdmin] >= 5)
	{
	    new businessID,businessPrice;
		if(sscanf(params, "dd", businessID, businessPrice))
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "USA: /nprecio [businessid] [precio]");
		}
		else
		{
		    if(businessID < 1 || businessID > MAX_BUSINESS){return SendClientMessageEx(playerid, COLOR_GREY, "* ID de negocio inválido.");}
		    else
			{
				format(szMessage, sizeof(szMessage), "Cambiaste el precio del negocio ID %d a $%d.", businessID, businessPrice);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				businessVariables[businessID][bPrice] = businessPrice;
				switch(businessVariables[businessID][bLocked])
				{
					case 1:
					{
       					if(!strcmp("Sin Dueño", businessVariables[businessID][bOwner])) format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"Nadie\n"COL_GENERAL"Precio: "COL_WHITE"$%d\n"COL_GENERAL"'/comprarnegocio'\n"COL_WHITE"["COL_GENERAL"Cerrado"COL_WHITE"]", businessID, businessVariables[businessID][bName], businessVariables[businessID][bPrice]);
						else format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"%s\n"COL_WHITE"["COL_GENERAL"Cerrado"COL_WHITE"]", businessID, businessVariables[businessID][bName], businessVariables[businessID][bOwner]);
					}
					case 0:
					{
			    		if(!strcmp("Sin Dueño", businessVariables[businessID][bOwner])) format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"Nadie\n"COL_GENERAL"Precio: "COL_WHITE"$%d\n"COL_GENERAL"'/comprarnegocio'\n"COL_WHITE"["COL_GENERAL"Abierto"COL_WHITE"]", businessID, businessVariables[businessID][bName], businessVariables[businessID][bPrice]);
						else format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"%s\n"COL_WHITE"["COL_GENERAL"Abierto"COL_WHITE"]", businessID, businessVariables[businessID][bName], businessVariables[businessID][bOwner]);
					}
				}
				UpdateDynamic3DTextLabelText(businessVariables[businessID][bLabelID], -1, szMessage);
                SaveVarBusiness(1,businessID, "Precio",businessVariables[businessID][bPrice]);
			}
		}
	}
	else NoAutorizado
	return 1;
}
CMD:nstock(playerid, params[])
{
	if(Info[playerid][pAdmin] >= 5)
	{
	    new businessID,businessStock;
		if(sscanf(params, "dd", businessID, businessStock)) return SendClientMessageEx(playerid, COLOR_GREY, "USA: /nstock [businessid] [stock]");
		if(businessID < 1 || businessID > MAX_BUSINESS) return SendClientMessageEx(playerid, COLOR_GREY, "* ID de negocio inválido.");
		format(szMessage, sizeof(szMessage), "Cambiaste el stock del negocio ID %d a %d.", businessID, businessStock);
		SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
		businessVariables[businessID][bStock] = businessStock;
		SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
	}
	else NoAutorizado
	return 1;
}

CMD:comprarnegocio(playerid, params[])
{
    #pragma unused params
    if(IsPlayerConnectedEx(playerid))
	{
        for(new x = 0; x < MAX_BUSINESS; x++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5, businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2]))
			{
				if(!strcmp(businessVariables[x][bOwner], "Sin Dueño", true))
				{
				    if(businessVariables[x][bPrice] == -1) return SendClientMessageEx(playerid, COLOR_GREY, "* Este negocio ha sido bloqueado por un administrador.");
					if(getPlayerBusinessID(playerid) >= 1) return SendClientMessageEx(playerid, COLOR_GREY, "* Ya eres dueño de un negocio.");
					if(GetPlayerCash(playerid) >= businessVariables[x][bPrice])
					{
					    businessVariables[x][bMiscPos][0] = 0.0;
					    businessVariables[x][bMiscPos][1] = 0.0;
					    businessVariables[x][bMiscPos][2] = 0.0;
					    businessVariables[x][bVault] = 0;
						GivePlayerCash(playerid,-businessVariables[x][bPrice]);
						Tax += businessVariables[x][bPrice];
						strcpy(businessVariables[x][bOwner], Info[playerid][pNormalName], MAX_PLAYER_NAME);
						DestroyDynamicPickup(businessVariables[x][bPickupID]);
						switch(businessVariables[x][bLocked])
						{
							case 1: format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"%s\n"COL_WHITE"["COL_GENERAL"Cerrado"COL_WHITE"]", x, businessVariables[x][bName], businessVariables[x][bOwner]);
							case 0: format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"%s\n"COL_WHITE"["COL_GENERAL"Abierto"COL_WHITE"]", x, businessVariables[x][bName], businessVariables[x][bOwner]);
						}
						UpdateDynamic3DTextLabelText(businessVariables[x][bLabelID], -1, szMessage);
						businessVariables[x][bPickupID] = CreateDynamicPickup(1274, 23, businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2], 0, 0, -1, 250);
						SendClientMessageEx(playerid, COLOR_GREY, "* Felicitaciones por tu compra!");
						saveBusiness(x);
					}
					else return SendClientMessageEx(playerid, COLOR_GREY, "* No tienes suficiente dinero para comprar este negocio.");
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes comprar un negocio con dueño.");
			}
		}
    }
	return 1;
}
CMD:gotonegocio(playerid, params[])
{
if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] < 8) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
if(Info[playerid][pAdmin] > 4)
{
	new businessID;
	if(sscanf(params, "d", businessID)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /gotonegocio [id]");

	SetPlayerPos(playerid,businessVariables[businessID][bExteriorPos][0], businessVariables[businessID][bExteriorPos][1], businessVariables[businessID][bExteriorPos][2]);
	GameTextForPlayer(playerid, "~w~Teletransportado", 5000, 1);
	SetPlayerInterior(playerid, 0);
	Info[playerid][pInt] = 0;
}
return 1;
}
CMD:ntipo(playerid, params[])
{
    if(Info[playerid][pAdmin] >= 5)
	{
        new bCID,bCType;
		if(sscanf(params, "dd", bCID, bCType))
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "USA: /ntipo [businessid] [tipo]");
            SendClientMessageEx(playerid, COLOR_GREY, "Comida 1, Ropa y Toys 2, 24/7 3, SexShop 4, Objetos 5, Armas 6, Fish Items 7, Bar 8, Electronica 9.");
			return 1;
		}
        format(szMessage, sizeof(szMessage), "Cambiaste el tipo del negocio ID %d al tipo %d.", bCID, bCType);
		SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
		businessVariables[bCID][bType] = bCType;
		SaveVarBusiness(1,bCID, "Tipo",businessVariables[bCID][bType]);
	}
	else NoAutorizado
	return 1;
}

CMD:ncaja(playerid, params[])
{
    #pragma unused params
	if(getPlayerBusinessID(playerid) >= 1)
	{
		new businessID = getPlayerBusinessID(playerid);
		if(IsPlayerInRangeOfPoint(playerid, 30.0, businessVariables[businessID][bInteriorPos][0], businessVariables[businessID][bInteriorPos][1], businessVariables[businessID][bInteriorPos][2]))
		{
			GetPlayerPos(playerid, businessVariables[businessID][bMiscPos][0], businessVariables[businessID][bMiscPos][1], businessVariables[businessID][bMiscPos][2]);
			SendClientMessageEx(playerid, COLOR_WHITE, "Configuraste la posición de la caja fuerte de tu negocio. Recuerda donde está.");
   			saveBusiness(businessID);
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "* Debes poner la caja fuerte en el interior de tu negocio.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes un negocio para hacer esto.");
	return 1;
}

CMD:nborrar(playerid, params[])
{
    if(!AdminOnDuty(playerid) && Info[playerid][pAdmin] <= 7) return SendClientMessageEx(playerid, COLOR_GREY, NODUTY);
    if(Info[playerid][pAdmin] >= 5)
	{
		new businessID;
		if(sscanf(params, "d", businessID)) return SendClientMessageEx(playerid, COLOR_WHITE, "USA: /nborrar [id]");
		GameTextForPlayer(playerid, "~w~Negocio Borrado", 5000, 1);
		businessVariables[businessID][bType] = 0;
		businessVariables[businessID][bName] = 0;
		businessVariables[businessID][bOwner] = 0;
		businessVariables[businessID][bExteriorPos][0] = 0;
		businessVariables[businessID][bExteriorPos][1] = 0;
		businessVariables[businessID][bExteriorPos][2] = 0;
		businessVariables[businessID][bInteriorPos][0] = 0;
		businessVariables[businessID][bInteriorPos][1] = 0;
		businessVariables[businessID][bInteriorPos][2] = 0;
		businessVariables[businessID][bInterior] = 0;
		businessVariables[businessID][bMiscPos][0] = 0;
		businessVariables[businessID][bMiscPos][1] = 0;
		businessVariables[businessID][bMiscPos][2] = 0;
		businessVariables[businessID][bVault] = 0;
		businessVariables[businessID][bPrice] = 0;
		businessVariables[businessID][bStock] = 0;
		businessVariables[businessID][bLocked] = 0;
		DestroyDynamicPickup(businessVariables[businessID][bPickupID]);
        DestroyDynamic3DTextLabel(businessVariables[businessID][bLabelID]);
        saveBusiness(businessID);
		new string[128];
    	format(string, sizeof(string), BUSINESS_FILE, businessID);
    	fremove(string);
	}
	return 1;
}

CMD:movernegocio(playerid, params[])
{
	if(Info[playerid][pAdmin] >= 5)
	{
	    new businessID, subject[32];
		if(sscanf(params, "ds[32]", businessID, subject))
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "USA: /movernegocio [ID de Negocio] [exterior/interior]");
		}
		else
		{
		    if(businessID < 1 || businessID > MAX_BUSINESS) return SendClientMessage(playerid, COLOR_GREY, "* ID de negocio invalida.");
            if(strcmp(subject, "exterior", true) == 0)
			{
			    GetPlayerPos(playerid, businessVariables[businessID][bExteriorPos][0], businessVariables[businessID][bExteriorPos][1], businessVariables[businessID][bExteriorPos][2]);
			    DestroyDynamic3DTextLabel(businessVariables[businessID][bLabelID]);
			    DestroyDynamicPickup(businessVariables[businessID][bPickupID]);
			    switch(businessVariables[businessID][bLocked])
			    {
			    	case 1:
					{
       					if(!strcmp("Sin Dueño", businessVariables[businessID][bOwner])) format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"Nadie\n"COL_GENERAL"Precio: "COL_WHITE"$%d\n"COL_GENERAL"'/comprarnegocio'\n"COL_WHITE"["COL_GENERAL"Cerrado"COL_WHITE"]", businessID, businessVariables[businessID][bName], businessVariables[businessID][bPrice]);
						else format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"%s\n"COL_WHITE"["COL_GENERAL"Cerrado"COL_WHITE"]", businessID, businessVariables[businessID][bName], businessVariables[businessID][bOwner]);
					}
					case 0:
					{
			    		if(!strcmp("Sin Dueño", businessVariables[businessID][bOwner])) format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"Nadie\n"COL_GENERAL"Precio: "COL_WHITE"$%d\n"COL_GENERAL"'/comprarnegocio'\n"COL_WHITE"["COL_GENERAL"Abierto"COL_WHITE"]", businessID, businessVariables[businessID][bName], businessVariables[businessID][bPrice]);
						else format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"%s\n"COL_WHITE"["COL_GENERAL"Abierto"COL_WHITE"]", businessID, businessVariables[businessID][bName], businessVariables[businessID][bOwner]);
					}
				}
				businessVariables[businessID][bLabelID] = CreateDynamic3DTextLabel(szMessage, -1, businessVariables[businessID][bExteriorPos][0], businessVariables[businessID][bExteriorPos][1], businessVariables[businessID][bExteriorPos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
				businessVariables[businessID][bPickupID] = CreateDynamicPickup(1274, 23, businessVariables[businessID][bExteriorPos][0], businessVariables[businessID][bExteriorPos][1], businessVariables[businessID][bExteriorPos][2], 0, 0, -1, 250);
				SendClientMessage(playerid, COLOR_WHITE, "El exterior del negocio ha sido cambiado.");
			}
			else if(strcmp(subject, "interior", true) == 0)
			{
			    GetPlayerPos(playerid, businessVariables[businessID][bInteriorPos][0], businessVariables[businessID][bInteriorPos][1], businessVariables[businessID][bInteriorPos][2]);
			    businessVariables[businessID][bInterior] = GetPlayerInterior(playerid);
			    SendClientMessage(playerid, COLOR_WHITE, "El interior del negocio ha sido cambiado.");
			}
			saveBusiness(businessID);
		}
	}

	return 1;
}

CMD:abrir(playerid, params[])
{
    #pragma unused params
	if(getPlayerBusinessID(playerid) >= 1)
	{
	    new x = getPlayerBusinessID(playerid);
	    switch(businessVariables[x][bLocked])
		{
			case 0: return SendClientMessageEx(playerid, COLOR_WHITE, "Usa /cerrar.");
			case 1:
			{
    			format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"%s\n"COL_WHITE"["COL_GENERAL"Abierto"COL_WHITE"]", x, businessVariables[x][bName], businessVariables[x][bOwner]);
				UpdateDynamic3DTextLabelText(businessVariables[x][bLabelID], -1, szMessage);
				businessVariables[x][bLocked] = 0;
			    SendClientMessageEx(playerid, COLOR_WHITE, "El negocio fue abierto.");
			    SaveVarBusiness(1,x, "Locked",businessVariables[x][bLocked]);
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes un negocio para hacer esto.");
	return 1;
}
CMD:cerrar(playerid, params[])
{
    #pragma unused params
	if(getPlayerBusinessID(playerid) >= 1)
	{
	    new x = getPlayerBusinessID(playerid);
	    switch(businessVariables[x][bLocked])
		{
			case 0:
			{
   				format(szMessage, sizeof(szMessage), ""COL_GENERAL"Negocio ID: "COL_WHITE"%d\n["COL_GENERAL"%s"COL_WHITE"]\n"COL_GENERAL"Dueño: "COL_WHITE"%s\n"COL_WHITE"["COL_GENERAL"Cerrado"COL_WHITE"]", x, businessVariables[x][bName], businessVariables[x][bOwner]);
                UpdateDynamic3DTextLabelText(businessVariables[x][bLabelID], -1, szMessage);
				businessVariables[x][bLocked] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "El negocio fue cerrado.");
				SaveVarBusiness(1,x, "Locked",businessVariables[x][bLocked]);
			}
			case 1: return SendClientMessageEx(playerid, COLOR_WHITE, "Usa /abrir.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "* No tienes un negocio para hacer esto.");
	return 1;
}
CMD:negociomenu(playerid, params[])
{
    #pragma unused params
	if(IsPlayerConnectedEx(playerid))
	{
        new x = getPlayerBusinessID(playerid);
        if(x < 1) return 1;
        if(IsPlayerInRangeOfPoint(playerid, 2.0, businessVariables[x][bMiscPos][0], businessVariables[x][bMiscPos][1], businessVariables[x][bMiscPos][2]))
		{
		    new szDialogTittle[128];
		    format(szDialogTittle, sizeof(szDialogTittle), "Tu negocio - $%d", businessVariables[x][bVault]);
		    ShowPlayerDialog(playerid, DIALOG_MYBUSINESS,DIALOG_STYLE_LIST,szDialogTittle,"* Retirar Dinero\n* Depositar Dinero\n* Stock\n* Pedir productos", "Seleccionar", "Salir");
		}
		else return SendClientMessage(playerid, COLOR_GREY, "* No estás cerca de la caja fuerte de tu negocio.");
	}
	else SendClientMessage(playerid, COLOR_GREY, NoConectado);
	return 1;
}
// último comando
// System Furniture
public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
	CancelEdit(playerid);
	new hID = getPlayerHouseID(playerid);
	new title[64];
	for(new i = 0; i < MAX_FURNITURE; i++)
	{
		if(objectid == HouseInfo[hID][FurnitureObj][i])
		{
			SetPVarInt(playerid			,"ObjetcIDFur"	,i);
			format(title, sizeof(title) ,""COL_GENERAL"Modelo ID - %d",HouseInfo[hID][FModel][i]);
			ShowPlayerDialog(playerid, DIALOG_EDITOBJECT,DIALOG_STYLE_LIST,title,"* Editar\n* Guardar\n* Vender","Seleccionar","Salir");
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY,"* Has seleccionado un objeto que no es del sistema de objetos para casas.");
    return 1;
}
stock SaveFurniturePosition(houseid, furnid) // Furnid is the instance id of the furniture.
{
	new fname[64]; format(fname, 64, HOUSE_FILE, houseid);
	new key[32];
	new INI:File = INI_Open(fname);
	INI_SetTag(File,"HouseData");
	format(key, 24, "FPosX%d", furnid); INI_WriteFloat(File,key, HouseInfo[houseid][FPosX][furnid]);
	format(key, 24, "FPosY%d", furnid); INI_WriteFloat(File,key, HouseInfo[houseid][FPosY][furnid]);
	format(key, 24, "FPosZ%d", furnid); INI_WriteFloat(File,key, HouseInfo[houseid][FPosZ][furnid]);
	format(key, 24, "FRotX%d", furnid); INI_WriteFloat(File,key, HouseInfo[houseid][FRotX][furnid]);
	format(key, 24, "FRotY%d", furnid); INI_WriteFloat(File,key, HouseInfo[houseid][FRotY][furnid]);
	format(key, 24, "FRotZ%d", furnid); INI_WriteFloat(File,key, HouseInfo[houseid][FRotZ][furnid]);
	INI_Close(File);
	return 1;
}
stock ShowFurnitureMenu(playerid)
{
	//new string[64], money = GetPlayerCash(playerid);
	new titlestring[32], businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
	format(titlestring, sizeof(titlestring), "%s",businessVariables[businessID][bName]);
	if(businessVariables[businessID][bStock] == 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No hay stock de productos en este momento, vuelve más tarde.");
    ShowPlayerDialog(playerid, DIALOG_BUY_FURNITURE, DIALOG_STYLE_LIST, titlestring, "Dormitorio\nComedor\nBaño\nLobby\nCocina\nElectrónica\nParedes\nOtros", "Comprar", "Cancelar");
	return 1;
}
stock BuyFurniture(playerid, houseid, modelid, price) // modelid is the furniture model id while fid is the instance id of a furniture.
{
	new fid = 0;
	while(fid < MAX_FURNITURE)
	{
		if(HouseInfo[houseid][FModel][fid] == INVALID_FURNITURE_ID) break;
		fid ++;
	}
	if(fid == MAX_FURNITURE || HouseInfo[houseid][FCount] >= MAX_FURNITURE) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes comprar más objetos para tu casa.");
	HouseInfo[houseid][FCount] += 1;
	HouseInfo[houseid][FModel][fid] = modelid;

	new fname[64]; format(fname, 64, HOUSE_FILE, houseid);
	new key[24];

	new businessID = GetPlayerVirtualWorld(playerid)-BUSINESS_VIRTUAL_WORLD;
	businessVariables[businessID][bVault] += price;
	businessVariables[businessID][bStock]--;
    SaveVarBusiness(1,businessID, "Vault",businessVariables[businessID][bVault]);
    SaveVarBusiness(1,businessID, "Stock",businessVariables[businessID][bStock]);
	GivePlayerCash(playerid, -price);

	new INI:File = INI_Open(fname);
	INI_SetTag(File,"HouseData");
	INI_WriteInt(File,"FCount", HouseInfo[houseid][FCount]);
	format(key, 24, "FModel%d", fid); INI_WriteInt(File,key, HouseInfo[houseid][FModel][fid]);
	INI_Close(File);
	format(szDialog, sizeof(szDialog), ""COL_WHITE"Objeto comprado!\nPrecio: $%d\n\nPuedes ver tus objetos comprados en el menú de tu casa usando\nel comando /casamenu > Muebles\n\n¿Continuar comprando?.",price);
	ShowPlayerDialog(playerid, DIALOG_FURNITURE_BOUGHT, DIALOG_STYLE_MSGBOX,"Información:",szDialog,"Continuar","Salir");
	return fid;
}
getPlayerHouseID(const playerid)
{
	new x;
    while(x < MAX_HOUSES)
	{
		if(strlen(HouseInfo[x][hOwner]) >= 1)
		{
	        if(!strcmp(HouseInfo[x][hOwner], Info[playerid][pNormalName], true)){return x;}
		}
		x++;
	}
    return 0;
}
stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    GetPlayerFacingAngle(playerid, a);
    if (GetPlayerVehicleID(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}
// SpeedCam System
stock CreateSpeedCam(newid,Float:x,Float:y,Float:z,Float:rot,range,limit,fine)
{
	new text_info[64];
	vCameraInfo[newid][vCameraPos][0] = x;
	vCameraInfo[newid][vCameraPos][1] = y;
	vCameraInfo[newid][vCameraPos][2] = z;
	vCameraInfo[newid][vCameraRot] = rot;
	vCameraInfo[newid][vCameraRange] = range;
	vCameraInfo[newid][vCameraLimit] = limit;
	vCameraInfo[newid][vCameraTicket] = fine;
	vCameraInfo[newid][vCameraStatus] = 0;
	saveSpeedCam();
	vCameraInfo[newid][vCameraObject] = CreateDynamicObject(18880, vCameraInfo[newid][vCameraPos][0],vCameraInfo[newid][vCameraPos][1],vCameraInfo[newid][vCameraPos][2],0,0,vCameraInfo[newid][vCameraRot]);
	switch(vCameraInfo[newid][vCameraStatus])
	{
	    case 0: format(text_info, sizeof(text_info), ""COL_WHITE"(%d)\nCámara de Velocidad\nLímite: "COL_GENERAL"MPH %d", newid,vCameraInfo[newid][vCameraLimit]);
		case 1: format(text_info, sizeof(text_info), ""COL_WHITE"(%d)\nCámara de Velocidad\n"COL_RED"(DESACTIVADA)", newid);
	}
	vCameraInfo[newid][vCameraLabel] = CreateDynamic3DTextLabel(text_info,-1,vCameraInfo[newid][vCameraPos][0],vCameraInfo[newid][vCameraPos][1],vCameraInfo[newid][vCameraPos][2]+5,10.0);
}

stock DeleteSpeedCam(newid)
{
	vCameraInfo[newid][vCameraPos][0] = 0.0;
	vCameraInfo[newid][vCameraPos][1] = 0.0;
	vCameraInfo[newid][vCameraPos][2] = 0.0;
	vCameraInfo[newid][vCameraRot] = 0.0;
	vCameraInfo[newid][vCameraRange] = 0;
	vCameraInfo[newid][vCameraLimit] = 0;
	vCameraInfo[newid][vCameraTicket] = 0;
	saveSpeedCam();
	DestroyDynamicObject(vCameraInfo[newid][vCameraObject]);
	DestroyDynamic3DTextLabel(vCameraInfo[newid][vCameraLabel]);
}
// Car Sale System
stock CreateSaleCar(carsaleid,modelid, Float: x, Float: y, Float: z, Float: a, price)
{
	new text_info[140];
	varCarSale[carsaleid][CSVehSpawn][0] = x;
	varCarSale[carsaleid][CSVehSpawn][1] = y;
	varCarSale[carsaleid][CSVehSpawn][2] = z;
	varCarSale[carsaleid][CSVehSpawn][3] = a;
	varCarSale[carsaleid][CSVehModel] = modelid;
	varCarSale[carsaleid][CSVehCost] = price;
	new carcreated = CreateVehicle(modelid, x, y, z, a, 0, 0, 6);
	format(text_info, sizeof(text_info), "{DF013A}Vehiculo {FFFFFF}nuevo {DF013A}en venta!\n\nModelo: {FFFFFF}%s\n{DF013A}Precio: {FFFFFF}$%d\nSubete para comprarlo!", GetVehicleName(carcreated), varCarSale[carsaleid][CSVehCost]);
	varCarSale[carsaleid][CSVehicleLabel] = CreateDynamic3DTextLabel(text_info,COLOR_GENERAL,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
	varCarSale[carsaleid][CSVehId] = carcreated;
	saveCarSale();
}
stock DeleteSaleCar(carsaleid)
{
	varCarSale[carsaleid][CSVehSpawn][0] = 0.0;
	varCarSale[carsaleid][CSVehSpawn][1] = 0.0;
	varCarSale[carsaleid][CSVehSpawn][2] = 0.0;
	varCarSale[carsaleid][CSVehSpawn][3] = 0.0;
	varCarSale[carsaleid][VehSpawn][0] = 0.0;
	varCarSale[carsaleid][VehSpawn][1] = 0.0;
	varCarSale[carsaleid][VehSpawn][2] = 0.0;
	varCarSale[carsaleid][VehSpawn][3] = 0.0;
	varCarSale[carsaleid][CSVehModel] = 0;
	varCarSale[carsaleid][CSVehCost] = 0;
	DestroyVehicle(varCarSale[carsaleid][CSVehId]);
	DestroyDynamic3DTextLabel(varCarSale[carsaleid][CSVehicleLabel]);
	varCarSale[carsaleid][CSVehicleLabel] = Text3D:INVALID_3DTEXT_ID;
	varCarSale[carsaleid][CSVehId] = 0;
	saveCarSale();
}

stock SendMoleMessage(color, string[]){
foreach(Player, i){
	if(IsPlayerConnectedEx(i)){
		SendClientMessageEx(i, color, string);
	}
}
}
function cameraexpire(playerid)
{
SetPVarInt(playerid, "cameraactive", 0);
SetCameraBehindPlayer(playerid);
if(GetPVarInt(playerid, "camerasc") == 1)
{
 	SetPlayerPos(playerid, GetPVarFloat(playerid, "cameraX2"), GetPVarFloat(playerid, "cameraY2"), GetPVarFloat(playerid, "cameraZ2"));
  	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw2"));
  	SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint2"));
}
TogglePlayerControllable(playerid,1);
DestroyDynamic3DTextLabel(Camera3D[playerid]);
SendClientMessageEx(playerid, COLOR_WHITE, "A tu cámara se le acabaron las baterias!");
}
CreateDynamicDoor(doorid)
{
	new string[128];
	format(string, sizeof(string), ""COL_GENERAL"[ID: "COL_WHITE"%d"COL_GENERAL"]\n"COL_WHITE"%s\n\n"COL_GENERAL"Presiona "COL_WHITE"'H' "COL_GENERAL"para ingresar y salir.",doorid,DDoorsInfo[doorid][ddDescription]);
	switch(DDoorsInfo[doorid][ddColor])
	{
    case -1:{ /* Disable CreateDynamic3DTextLabel */ }
    case 1:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWWHITE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
    case 2:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPINK, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
    case 3:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWRED, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
    case 4:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBROWN, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
    case 5:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGRAY, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
    case 6:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWOLIVE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
    case 7:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPURPLE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
    case 8:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWORANGE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
    case 9:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWAZURE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
    case 10:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGREEN, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
    case 11:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLUE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
    case 12:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLACK, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	default:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_GRAD1, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.8,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
}
switch(DDoorsInfo[doorid][ddPickupModel]){
    case -1: { /* Disable Pickup */ }
	case 1:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1210, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 2:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1212, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 3:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1239, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 4:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1240, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 5:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1241, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 6:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1242, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 7:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1247, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 8:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1248, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 9:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1252, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 10:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1253, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 11:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1254, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 12:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1313, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 13:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1272, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 14:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1273, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 15:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1274, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 16:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1275, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 17:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1276, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 18:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1277, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 19:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1279, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 20:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1314, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 21:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1316, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 22:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1317, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 23:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1559, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 24:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1582, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 25:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(2894, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	case 26:{DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(19198, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	default: DDoorsInfo[doorid][ddPickupID] = CreateDynamicPickup(1318, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);
}
}
function PlayerPlayMusic(playerid){
if(IsPlayerConnectedEx(playerid)){
	SetTimer("StopMusic", 5000, 0);
	PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
}
}

function StopMusic(){
foreach(Player, i){
	PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
}
}

function FishCost(playerid, fish){
if(IsPlayerConnectedEx(playerid)){
	new cost = 0;
	switch (fish){
		case 1: cost = 10;
		case 2: cost = 11;
		case 3: cost = 12;
		case 5: cost = 90;
		case 6: cost = 75;
		case 8: cost = 50;
		case 9: cost = 40;
		case 11: cost = 20;
		case 12: cost = 150;
		case 14: cost = 75;
		case 15: cost = 80;
		case 16: cost = 300;
		case 17: cost = 200;
		case 18: cost = 52;
		case 19: cost = 33;
		case 21: cost = 22;
	}
	return cost;
}
return 0;
}

function ClearFishes(playerid){
if(IsPlayerConnectedEx(playerid)){
	Fishes[playerid][pFid1] = 0; Fishes[playerid][pFid2] = 0; Fishes[playerid][pFid3] = 0;
	Fishes[playerid][pFid4] = 0; Fishes[playerid][pFid5] = 0;
	Fishes[playerid][pWeight1] = 0; Fishes[playerid][pWeight2] = 0; Fishes[playerid][pWeight3] = 0;
	Fishes[playerid][pWeight4] = 0; Fishes[playerid][pWeight5] = 0;
	new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "Nada");
	strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
	strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
	strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
	strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
	strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
}
return 1;
}

function ClearFishID(playerid, fish){
if(IsPlayerConnectedEx(playerid)){
	new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "Nada");
	switch (fish){
		case 1:{
			strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
			Fishes[playerid][pWeight1] = 0;
			Fishes[playerid][pFid1] = 0;
		}
		case 2:{
			strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
			Fishes[playerid][pWeight2] = 0;
			Fishes[playerid][pFid2] = 0;
		}
		case 3:{
			strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
			Fishes[playerid][pWeight3] = 0;
			Fishes[playerid][pFid3] = 0;
		}
		case 4:{
			strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
			Fishes[playerid][pWeight4] = 0;
			Fishes[playerid][pFid4] = 0;
		}
		case 5:{
			strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
			Fishes[playerid][pWeight5] = 0;
			Fishes[playerid][pFid5] = 0;
		}
	}
}
return 1;
}

// Checks
ADAvalibles(){
new count;
for(new i = 0; i < MAX_AD; i++){
	if(ADInfo[i][aActive] == 1){
	    count++;
	}
}
return count;
}
/*AdminOnlineCheck(){
new count;
foreach(Player, i){
	if(Info[i][pAdmin] > 1){
		count++;
	}
}
return count;
}*/

JudgeOnlineCheck(){
new count;
foreach(Player, i){
	if(Info[i][pMember] == 7 || Info[i][pLeader] == 7){
		count++;
	}
}
return count;
}
stock ConvertTime(cts, &ctm=-1,&cth=-1,&ctd=-1,&ctw=-1,&ctmo=-1,&cty=-1){
//Defines to drastically reduce the code..

#define PLUR(%0,%1,%2) (%0),((%0) == 1)?((#%1)):((#%2))

#define CTM_cty 31536000
#define CTM_ctmo 2628000
#define CTM_ctw 604800
#define CTM_ctd 86400
#define CTM_cth 3600
#define CTM_ctm 60

#define CT(%0) %0 = cts / CTM_%0; cts %= CTM_%0


new strii[128];

if(cty != -1){
    CT(cty); CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
    format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(cty,"year","years"),PLUR(ctmo,"month","months"),PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
    return strii;
}
if(ctmo != -1){
    CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
    format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(ctmo,"month","months"),PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
    return strii;
}
if(ctw != -1){
    CT(ctw); CT(ctd); CT(cth); CT(ctm);
    format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
    return strii;
}
if(ctd != -1){
    CT(ctd); CT(cth); CT(ctm);
    format(strii, sizeof(strii), "%d %s, %d %s, %d %s, and %d %s",PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
    return strii;
}
if(cth != -1){
    CT(cth); CT(ctm);
    format(strii, sizeof(strii), "%d %s, %d %s, and %d %s",PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
    return strii;
}
if(ctm != -1){
    CT(ctm);
    format(strii, sizeof(strii), "%d %s, and %d %s",PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
    return strii;
}
format(strii, sizeof(strii), "%d %s", PLUR(cts,"second","seconds"));
return strii;
}

stock IsValidVehicleID(vehicleid)
{
if(GetVehicleModel(vehicleid)) return 1;
return 0;
}

ShowAdMuteFine(playerid)
{
new string[128];
new playername[MAX_PLAYER_NAME];
GetPlayerName(playerid, playername, sizeof(playername));
new allmoney;
if(Info[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[Info[playerid][pPhousekey]][hOwner], true) == 0)
{
	allmoney = HouseInfo[Info[playerid][pPhousekey]][hSafeMoney]+GetPlayerCash(playerid)+Info[playerid][pMoneyBank];
}
else
{
 	  allmoney = GetPlayerCash(playerid)+Info[playerid][pMoneyBank];
}
new fine = 10*allmoney/100;
if(Info[playerid][pADMuteTotal] < 4) format(string,sizeof(string),"Prisión por %d Minutos\nPerder Dinero ($%d)",Info[playerid][pADMuteTotal]*15,fine);
if(Info[playerid][pADMuteTotal] == 4) format(string,sizeof(string),"Prisión por 1 Hora");
if(Info[playerid][pADMuteTotal] == 5) format(string,sizeof(string),"Prisión por 1 Hora y 15 Minutos)");
if(Info[playerid][pADMuteTotal] == 6) format(string,sizeof(string),"Prisión por 1 Hora y 30 Minutos");
ShowPlayerDialog(playerid,ADMUTE,DIALOG_STYLE_LIST,"Selecciona tu castigo - AD Mutes",string,"Ok","Cancelar");
}

function WeedGrowth(weedid)
{
if(Info[weedid][pWExists])
{
	//new string[128];
    if(Info[weedid][pWValue] < 45)
    {
		new level = Info[weedid][pDrugsSkill];
        if(level >= 0 && level <= 50)
		{ Info[weedid][pWValue]+= 1; }
		else if(level >= 51 && level <= 100)
		{ Info[weedid][pWValue]+= 2; }
		else if(level >= 101 && level <= 200)
		{ Info[weedid][pWValue]+= 2; }
		else if(level >= 201 && level <= 400)
		{ Info[weedid][pWValue]+= 2; }
		else if(level >= 401)
		{ Info[weedid][pWValue]+= 3; }
		if(Info[weedid][pWValue] == 20)
		{
            DestroyDynamic3DTextLabel(Info[weedid][pWText]);
            Info[weedid][pWZ2] = Info[weedid][pWZ]-0.8;
		    Info[weedid][pWObject2] = CreateDynamicObject(19473, Info[weedid][pWX], Info[weedid][pWY], Info[weedid][pWZ2], 0.0, 0.0, 0.0, Info[weedid][pWVW], Info[weedid][pWInt]);
		    Info[weedid][pWText] = CreateDynamic3DTextLabel(""COL_WEED"Planta de marihuana crecida\n"COL_WEED"'"COL_WHITE"/sacarplanta"COL_WEED"'",COLOR_WHITE, Info[weedid][pWX], Info[weedid][pWY], Info[weedid][pWZ]+0.5,10.0);
		}
		if(Info[weedid][pWValue] > 45)
		{
		    Info[weedid][pWValue] = 45;
		}
	}
}
return 1;
}

WeedLogin(playerid)
{
if(Info[playerid][pWExists])
{
    if(Info[playerid][pWValue] >= 25)
	{
		Info[playerid][pWObject] = CreateDynamicObject(2203, Info[playerid][pWX], Info[playerid][pWY], Info[playerid][pWZ]-0.8, 0.0, 0.0, 0.0, Info[playerid][pWVW], Info[playerid][pWInt]);
		Info[playerid][pWObject2] = CreateDynamicObject(19473, Info[playerid][pWX], Info[playerid][pWY], Info[playerid][pWZ2], 0.0, 0.0, 0.0, Info[playerid][pWVW], Info[playerid][pWInt]);
		Info[playerid][pWTimer] = SetTimerEx("WeedGrowth", 300000, 1, "i", playerid);
		Info[playerid][pWText] = CreateDynamic3DTextLabel(""COL_WEED"Planta de marihuana crecida\n"COL_WEED"'"COL_WHITE"/sacarplanta"COL_WEED"'",COLOR_WHITE, Info[playerid][pWX], Info[playerid][pWY], Info[playerid][pWZ]+0.5,10.0);
	}
	else
	{
		Info[playerid][pWText] = CreateDynamic3DTextLabel(""COL_WEED2"Semilla de marihuana en crecimiento\n"COL_WEED2"'"COL_WHITE"/sacarplanta - /revisarplanta"COL_WEED2"'",COLOR_WHITE, Info[playerid][pWX], Info[playerid][pWY], Info[playerid][pWZ]+0.5,10.0);
		Info[playerid][pWObject] = CreateDynamicObject(2203, Info[playerid][pWX], Info[playerid][pWY], Info[playerid][pWZ]-0.8, 0.0, 0.0, 0.0, Info[playerid][pWVW], Info[playerid][pWInt]);
		Info[playerid][pWTimer] = SetTimerEx("WeedGrowth", 300000, 1, "i", playerid);
	}
	return 1;
}
return 1;
}

WeedLogout(WeedID)
{
if(Info[WeedID][pWExists])
{
	KillTimer(Info[WeedID][pWTimer]);
	DestroyDynamic3DTextLabel(Info[WeedID][pWText]);
	DestroyDynamicObject(Info[WeedID][pWObject]);
	DestroyDynamicObject(Info[WeedID][pWObject2]);
	return 1;
}
return 1;
}

ClearWeed(WeedID)
{
KillTimer(Info[WeedID][pWTimer]);
DestroyDynamic3DTextLabel(Info[WeedID][pWText]);
DestroyDynamicObject(Info[WeedID][pWObject]);
DestroyDynamicObject(Info[WeedID][pWObject2]);
Info[WeedID][pWX] = 0.0;
Info[WeedID][pWY] = 0.0;
Info[WeedID][pWZ] = 0.0;
Info[WeedID][pWZ2] = 0.0;
Info[WeedID][pWValue] = 0;
Info[WeedID][pWExists] = 0;
return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
if(!IsPlayerConnectedEx(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "* No puedes utilizar comandos si no estás logeado en el servidor");
if(LocalOOC[playerid] > gettime()) return PosibleFlood[playerid] += 1;
SetTimerEx("LimpiarFlood", 2000, false, "i", playerid);
if(PosibleFlood[playerid] >= 4)
{
	//new string[128];
	//format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s ha sido autoexpulsado. (Flood de Comandos)", GetPlayerNameEx(playerid));
	//SendClientMessageToAllEx(-1, string);
	//Expulsar(playerid);
}
printf("[Jugador: %s %d] ha escrito el comando '%s'.", GetPlayerNameEx(playerid), playerid, cmdtext);
LocalOOC[playerid] = gettime() + 1;
if(strfind(cmdtext, "|", true) != -1)
{
    SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar el carácter '|' en un comando.");
	return 0;
}
if(GetPVarInt(playerid, "LoadingObjects") == 1)
{
    SendClientMessageEx(playerid, COLOR_WHITE, "No puedes usar comandos en este momento.");
    return 0;
}
if(strfind(cmdtext,"=",true) != -1)
{
    SendClientMessageEx(playerid,COLOR_WHITE,"No puedes usar el carácter '=' en un comando.");
	return 0;
}
if(Info[playerid][pAdmin] < 2)
{
	if(strfind(cmdtext, ":", true) != -1)
	{
		new
			i_numcount,
			i_period,
			i_pos;
		while(cmdtext[i_pos])
		{
			if('0' <= cmdtext[i_pos] <= '9') i_numcount++;
			else if(cmdtext[i_pos] == '.') i_period++;
			i_pos++;
		}
		if(i_numcount >= 8 && i_period >= 3)
		{
			new string[128];
			format(string,sizeof(string),"Atención: (ID: %d) %s puede estar haciendo SPAM: '%s'.", playerid, GetPlayerNameEx(playerid),cmdtext);
			SendAdminMessage(COLOR_RED, string);
			return 0;
		}
	}
}
return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if(!success) ShowInfoForPlayer(playerid, "~w~ Ingresaste un comando que ~r~no existe", 3000);
	return 1;
}

//------------------------------------------------------------------------------------------------------

function LimpiarFlood(playerid)
{
    PosibleFlood[playerid] = 0;
	return 1;
}

stock VelocidadVehiculo(playerid) //GROVE4L
{
    new Float:ST[4];
    if(IsPlayerInAnyVehicle(playerid))
	GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]);
	else GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 150.;
    return floatround(ST[3]);
}

stock VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z)
{
new Float:oldposx, Float:oldposy, Float:oldposz;
new Float:tempposx, Float:tempposy, Float:tempposz;
GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
tempposx = (oldposx -x);
tempposy = (oldposy -y);
tempposz = (oldposz -z);
if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
{
	return 1;
}
return 0;
}

encode_tires(tire1, tire2, tire3, tire4)
{
return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
}
NearMsg(playerid, color, string[], Float: Distance)
{
new
    Float: nbCoords[3];
GetPlayerPos(playerid, nbCoords[0], nbCoords[1], nbCoords[2]);
foreach(Player, i)
{
	if(IsPlayerInRangeOfPoint(i, Distance, nbCoords[0], nbCoords[1], nbCoords[2]) && (GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))) {SendClientMessageEx(i, color, string);}
}
return 1;
}

ProxDetector(Float: f_Radius, playerid, string[],col1,col2,col3,col4,col5)
{
	new Float: f_playerPos[3];
	GetPlayerPos(playerid, f_playerPos[0], f_playerPos[1], f_playerPos[2]);
	foreach(Player, i)
	{
		if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
		{
			if(IsPlayerInRangeOfPoint(i, f_Radius / 16, f_playerPos[0], f_playerPos[1], f_playerPos[2])) { SendSplitMessage(i, col1, string); }
			else if(IsPlayerInRangeOfPoint(i, f_Radius / 8, f_playerPos[0], f_playerPos[1], f_playerPos[2])) { SendSplitMessage(i, col2, string); }
			else if(IsPlayerInRangeOfPoint(i, f_Radius / 4, f_playerPos[0], f_playerPos[1], f_playerPos[2])) { SendSplitMessage(i, col3, string); }
			else if(IsPlayerInRangeOfPoint(i, f_Radius / 2, f_playerPos[0], f_playerPos[1], f_playerPos[2])) { SendSplitMessage(i, col4, string); }
			else if(IsPlayerInRangeOfPoint(i, f_Radius, f_playerPos[0], f_playerPos[1], f_playerPos[2])) { SendSplitMessage(i, col5, string); }
		}
	}
	return 1;
}

ProxDetectorS(Float:radi, playerid, targetid)
{
	new Float: fp_playerPos[3];
	GetPlayerPos(targetid, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);
	if(IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
		return 1;
	}
	return 0;
}

function PlayerToPointStripped(Float:radi, playerid, Float:x, Float:y, Float:z, Float:curx, Float:cury, Float:curz)
{
if(IsPlayerConnectedEx(playerid))
{
	new Float:tempposx, Float:tempposy, Float:tempposz;
	tempposx = (curx -x);
	tempposy = (cury -y);
	tempposz = (curz -z);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) return 1;
}
return 0;
}

public OnPlayerText(playerid, text[])
{
new string[128 + MAX_PLAYER_NAME],tmp[32];
if(Muted[playerid] == 1)
{
	SendClientMessageEx(playerid, COLOR_WHITE, "* ¡Has sido silenciado!");
	return 0;
}
if(!IsPlayerConnectedEx(playerid))
{
	SendClientMessageEx(playerid, COLOR_GENERAL, "No puedes usar el chat en el Login - Kickeado automáticamente.");
	Kick(playerid);
	return 0;
}
if(TutStep[playerid] >= 1)
{
	SendClientMessageEx(playerid, COLOR_WHITE, "* Estás en la introduccion no puedes hablar.");
	return 0;
}
if(TalkingLive[playerid] != INVALID_PLAYER_ID)
{
	if(Team_LSTV(playerid))
	{
		format(string, sizeof(string), "[CNN] Reportero %s: %s", GetPlayerNameEx(playerid), text);
		OOCNews(COLOR_SANEWS, string);
	}
	else
	{
		format(string, sizeof(string), "[CNN] Invitado %s: %s", GetPlayerNameEx(playerid), text);
		OOCNews(COLOR_SANEWS, string);
	}
	return 0;
}
if(MarriageCeremoney[playerid] > 0)
{
	if (strcmp("si", text, true) == 0)
	{
		if(GotProposedBy[playerid] < 999)
		{
			if(IsPlayerConnectedEx(GotProposedBy[playerid]))
			{
				format(string, sizeof(string), "Sacerdote: %s aceptas a %s como tu esposa para siempre? (Escribe 'Si' - cualquier otro caracter arruinaria el matrimonio).",GetPlayerNameEx(GotProposedBy[playerid]),GetPlayerNameEx(playerid));
				SendClientMessageEx(GotProposedBy[playerid], COLOR_WHITE, string);
				MarriageCeremoney[GotProposedBy[playerid]] = 1;
				MarriageCeremoney[playerid] = 0;
				GotProposedBy[playerid] = 999;
				return 0; // Yeah... no more "YES DILDOS SEX RAPE LOL" broadcast to the whole server
			}
			else
			{
				MarriageCeremoney[playerid] = 0;
				GotProposedBy[playerid] = 999;
				return 0;
			}
		}
		else if(ProposedTo[playerid] < 999)
		{
			if(IsPlayerConnectedEx(ProposedTo[playerid]))
			{
				if(Info[playerid][pSex] == 1 && Info[ProposedTo[playerid]][pSex] == 2)
				{
					format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar a la novia.", GetPlayerNameEx(playerid), GetPlayerNameEx(ProposedTo[playerid]));
					SendClientMessageEx(playerid, COLOR_WHITE, string);
			   		format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar al novio.", GetPlayerNameEx(ProposedTo[playerid]), GetPlayerNameEx(playerid));
					SendClientMessageEx(ProposedTo[playerid], COLOR_WHITE, string);
					format(string, sizeof(string), "Noticias: Tenemos una nueva linda pareja! %s y %s ahora están casados!!", GetPlayerNameEx(playerid), GetPlayerNameEx(ProposedTo[playerid]));
					OOCNews(COLOR_WHITE, string);
				}
				else if(Info[playerid][pSex] == 1 && Info[ProposedTo[playerid]][pSex] == 1)
				{
					format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar al novio.", GetPlayerNameEx(playerid), GetPlayerNameEx(ProposedTo[playerid]));
					SendClientMessageEx(playerid, COLOR_WHITE, string);
			   		format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar al novio.", GetPlayerNameEx(ProposedTo[playerid]), GetPlayerNameEx(playerid));
					SendClientMessageEx(ProposedTo[playerid], COLOR_WHITE, string);
					format(string, sizeof(string), "Noticias: Tenemos una nueva pareja gay! %s & %s se han casado.", GetPlayerNameEx(playerid), GetPlayerNameEx(ProposedTo[playerid]));
					OOCNews(COLOR_WHITE, string);
				}
				else if(Info[playerid][pSex] == 2 && Info[ProposedTo[playerid]][pSex] == 2)
				{
					format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar a la novia.", GetPlayerNameEx(playerid), GetPlayerNameEx(ProposedTo[playerid]));
					SendClientMessageEx(playerid, COLOR_WHITE, string);
			   		format(string, sizeof(string), "Sacerdote: %s y %s los declaro... Marido & Mujer, puedes besar a la novia.", GetPlayerNameEx(ProposedTo[playerid]), GetPlayerNameEx(playerid));
					SendClientMessageEx(ProposedTo[playerid], COLOR_WHITE, string);
					format(string, sizeof(string), "Noticias: Tenemos una nueva pareja de lesbianas! %s & %s se han casado.", GetPlayerNameEx(playerid), GetPlayerNameEx(ProposedTo[playerid]));
					OOCNews(COLOR_WHITE, string);
				}
				//MarriageCeremoney[ProposedTo[playerid]] = 1;
				MarriageCeremoney[ProposedTo[playerid]] = 0;
				MarriageCeremoney[playerid] = 0;
				format(Info[ProposedTo[playerid]][pMarriedTo], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(playerid));
				format(Info[playerid][pMarriedTo], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(ProposedTo[playerid]));
				GivePlayerCash(playerid, - 4000);
				Tax += 4000;
				Info[playerid][pMarried] = 1;
				Info[ProposedTo[playerid]][pMarried] = 1;
				ProposedTo[playerid] = 999;
				MarriageCeremoney[playerid] = 0;
				return 0;
			}
			else
			{
				MarriageCeremoney[playerid] = 0;
				ProposedTo[playerid] = 999;
				return 0;
			}
		}
	}
	else
	{
		if(GotProposedBy[playerid] < 999)
		{
			if(IsPlayerConnectedEx(GotProposedBy[playerid]))
			{
				format(string, sizeof(string), "* No quisiste casarse con %s, no dijiste 'si'.", GetPlayerNameEx(GotProposedBy[playerid]));
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "* %s no quisó casaste contigo, no dijo 'si'.",GetPlayerNameEx(playerid));
				SendClientMessageEx(GotProposedBy[playerid], COLOR_GRAD1, string);
				return 0;
			}
			else
			{
				MarriageCeremoney[playerid] = 0;
				GotProposedBy[playerid] = 999;
				return 0;
			}
		}
		else if(ProposedTo[playerid] < 999)
		{
			if(IsPlayerConnectedEx(ProposedTo[playerid]))
			{
				format(string, sizeof(string), "* No quisiste casarse con %s, no dijiste 'si'.",GetPlayerNameEx(ProposedTo[playerid]));
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "* %s no quisó casaste contigo, no dijo 'si'.",GetPlayerNameEx(playerid));
				SendClientMessageEx(ProposedTo[playerid], COLOR_GRAD1, string);
				return 0;
			}
			else
			{
				MarriageCeremoney[playerid] = 0;
				ProposedTo[playerid] = 999;
				return 0;
			}
		}
	}
	return 0;
}
if(Mobile[playerid] != -1)
{
	new idx;
	tmp = strtok(text, idx);
	if(UnidentifedCall[playerid] == 1){format(string, sizeof(string), "(Teléfono) Desconocido: %s", text);}
	else{format(string, sizeof(string), "(Teléfono) %s: %s", GetPlayerNameEx(playerid), text);}
	ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	if(Mobile[playerid] == 913)
	{
		if(!strlen(tmp))
		{
			SendClientMessageEx(playerid, COLOR_ALLDEPT, "Comisaria: repítame que no le he entendido!");
			return 0;
		}
		if(strfind(text, " ", true))
		{
		    format(string, sizeof(string), "** Central: han solicitado una patrulla en: %s",text);
			SendFamilyMessage(1, TEAM_RADIO_COLOR, string);
			format(string, sizeof(string), "** Central: un tal %s denuncia: %s",GetPlayerNameEx(playerid), Situacion[playerid]);
			SendFamilyMessage(1, TEAM_RADIO_COLOR, string);
			SendFamilyMessage(1, COLOR_WHITE, "Utiliza '/tlc' para rastrear la ultima llamada.");
			SendClientMessageEx(playerid, COLOR_ALLDEPT, "Comisaria: una patrulla se pasará por la zona.");
			SendClientMessageEx(playerid, COLOR_ALLDEPT, "Comisaria: ¡Gracias por su información!");
			SendClientMessageEx(playerid, COLOR_WHITE, 	 "Colgaron <--");
			Mobile[playerid] = -1;
			new Float:trace_x, Float:trace_y, Float:trace_z;
			GetPlayerPos(playerid, trace_x, trace_y, trace_z);
			pdtrace = 1; pdtrace_x = trace_x; pdtrace_y = trace_y; pdtrace_z = trace_z;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 9);
			return 0;
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Comisaria: Por favor calmese y vuelva a repetir su situación diciendo la ciudad.");
	 	return 0;
	}
	if(Mobile[playerid] == 912)
	{
		strmid(Situacion[playerid], text, 0, strlen(text), 128);
		format(string, sizeof(string), "Comisaria: Entendemos señor %s, díganos en donde se encuentra y alguna referencia.", GetPlayerNameEx(playerid));
		SendClientMessageEx(playerid, COLOR_ALLDEPT, string);
		Mobile[playerid] = 913;
		return 0;
	}
	if(Mobile[playerid] == 3901)
	{
		SendFamilyMessage(5, COLOR_GREEN, "Central: Llegó un nuevo mensaje a CNN:");
		format(string, sizeof(string), "[ID: %d] Mensaje de %s: %s", playerid, GetPlayerNameEx(playerid), text);
		SendFamilyMessage(5, COLOR_GREEN, string);
		SendClientMessageEx(playerid, COLOR_GREEN, "Estudio CNN: Gracias por su información !");
		SendClientMessageEx(playerid, COLOR_WHITE, "   la llamada se colgo...");
		Mobile[playerid] = -1;
		return 0;
	}
	if(Mobile[playerid] == 758)
	{
	    format(string, sizeof(string), "(celular) %s", text);
	    SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		format(string, sizeof(string), "[CNN] Celular: %s", text);
		OOCNews(COLOR_SANEWS, string);
		return 0;
	}
	if(IsPlayerConnectedEx(Mobile[playerid]))
	{
		if(Mobile[Mobile[playerid]] == playerid)
		{
			if(Info[Mobile[playerid]][pSpeaker] != 0)
			{
		   		format(string, sizeof(string), "[Altavoz] %s Dice: %s", GetPlayerNameEx(playerid), text);
				ProxDetector(20.0, Mobile[playerid], string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			}
			else SendClientMessageEx(Mobile[playerid], COLOR_GRAD1,string);
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1,"No hay nadie!");
	return 0;
}
if(GetPVarInt(playerid, "PlayerCuffed") == 1)
{
    SendClientMessageEx(playerid, COLOR_WHITE, "* No puedes hablar cuando fuiste taseado, espera a que te quiten los cables.");
	return 0;
}
if(GetPVarInt(playerid, "IsInArena") == 1)
{
	if(GetPVarInt(playerid, "ArenaMode") == 2)
	{
		switch(Info[playerid][pPaintTeam])
		{
		    case 1: format(string, sizeof(string), "[Paintball Arena] ({FF0000}Equipo Rojo{FFFFFF}) %s dice: %s", GetPlayerNameEx(playerid), text);
			case 2: format(string, sizeof(string), "[Paintball Arena] ({0000FF}Equipo Azul{FFFFFF}) %s dice: %s", GetPlayerNameEx(playerid), text);
		}
	}
	if(GetPVarInt(playerid, "ArenaMode") == 1) format(string, sizeof(string), "[Paintball Arena] %s dice: %s", GetPlayerNameEx(playerid), text);
	if(GetPVarInt(playerid, "ArenaMode") == 3) format(string, sizeof(string), "[Paintball Arena] %s dice: %s", GetPlayerNameEx(playerid), text);
	SendPaintballArenaMessage(GetPVarInt(playerid,"ArenaMode"), COLOR_WHITE, string);
	return 0;
}
if(Info[playerid][pMaskuse] == 1)
{
    Anim_Hablar(playerid, text);
	format(string, sizeof(string), "Desconocido dice: %s", text);
	ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
	return 0;
}
if(strlen(Info[playerid][pAcento]) >= 1)
{
    Anim_Hablar(playerid, text);
	format(string, sizeof(string), "[Acento %s] %s dice: %s",Info[playerid][pAcento],GetPlayerNameEx(playerid), text);
    NearMsg(playerid, COLOR_FADE1, string, 15.0);
    SetPlayerChatBubble(playerid,text,-1,15.0,5000);
}
return 0;
}

stock IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy)
{
new Float:x, Float:y, Float:z;
GetPlayerPos(playerid, x, y, z);
if (x > minx && x < maxx && y > miny && y < maxy) return 1;
return 0;
}
function TeleportPlayer(playerid)
{
new Float:cx, Float:cy, Float:cz;
GetPlayerPos(playerid, cx, cy, cz);
for(new i = 0; i < sizeof(DDoorsInfo); i++)
{
   	if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]))
	{
        ShowInfoForPlayer(playerid, "~w~ PRESIONA ~g~'H'~w~ PARA ENTRAR O SALIR", 3000);
        return 1;
    }
}
//FBI
if(PlayerToPointStripped(1, playerid,325.4713,-1514.8862,36.0325, cx,cy,cz))
{
    LoadObjects(playerid);
	SetPlayerPos(playerid,278.0079,-1505.8489,-45.1302); Info[playerid][pVW] = 600;
	SetPlayerVirtualWorld(playerid, 600); SetPlayerFacingAngle(playerid, ESTE);
	SetCameraBehindPlayer(playerid);
}
if(PlayerToPointStripped(1, playerid,278.0079,-1505.8489,-45.1302, cx,cy,cz))
{
	SetPlayerPos(playerid,325.4713,-1514.8862,36.0325); SetPlayerFacingAngle(playerid, 90);
	SetCameraBehindPlayer(playerid); SetPlayerVirtualWorld(playerid, 0);
}
//FBI HELIPAD
else if (PlayerToPointStripped(1, playerid,316.2381,-1513.3770,24.9219, cx,cy,cz))
{
	ShowPlayerDialog( playerid, ELEVATOR4 , DIALOG_STYLE_LIST, "Elevador", "Interior\nHelipuerto", "Ir", "Cancelar");
}
else if (PlayerToPointStripped(1, playerid,301.5812,-1490.6759,-45.1302, cx,cy,cz))
{
	if(!Team_FBI(playerid))
	{
  SendClientMessageEx(playerid,COLOR_GREY,"Acceso Denegado.");
		return 1;
	}
	else ShowPlayerDialog( playerid, ELEVATOR5 , DIALOG_STYLE_LIST, "Elevador", "Garage\nHelipuerto", "Ir", "Cancelar");
}
else if (PlayerToPointStripped(1, playerid,308.8113,-1509.8134,77.7645, cx,cy,cz))
{
	ShowPlayerDialog( playerid, ELEVATOR7 , DIALOG_STYLE_LIST, "Elevador", "Interior\nGarage", "Ir", "Cancelar");
}
else if (PlayerToPointStripped(1, playerid,364.7064,-11.3221,1001.8516, cx,cy,cz) && GetPlayerInterior(playerid) == 9)
{
	SetPosEx(playerid, 928.6895,-1353.0563,13.3438,89.7594,0,0);
}
return 1;
}

ClearChatbox(playerid)
{
for(new i = 0; i < 120; i++)
{
	SendClientMessageEx(playerid, COLOR_WHITE, "");
}
return 1;
}

stock IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}

function RadarCooldown(playerid)
{
	DeletePVar(playerid, "RadarTimeout");
	return 1;
}

//Anti Cleo
new legalmods[48][22] = {
        {400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
        {404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
        {491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
        {492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
        {500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
        {517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
        {518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
        {527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
        {534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
        {535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
        {536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
        {540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
        {542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
        {547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
        {550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
        {551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
        {558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
        {559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
        {560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
        {561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
        {562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
        {565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
        {567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
        {575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
        {600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
};
iswheelmodel(modelid) {
    new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};
    for(new wm; wm < sizeof(wheelmodels); wm++) {
        if (modelid == wheelmodels[wm])
            return true;
    }
    return false;
}

IllegalCarNitroIde(carmodel) {
    new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };
    for(new iv; iv < sizeof(illegalvehs); iv++) {
        if (carmodel == illegalvehs[iv])
            return true;
    }
    return false;
}

stock islegalcarmod(vehicleide, componentid) {
    new modok = false;
    if ( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010))) {
        new nosblocker = IllegalCarNitroIde(vehicleide);
        if (!nosblocker)
            modok = true;
    } else {
        for(new lm; lm < sizeof(legalmods); lm++) {
            if (legalmods[lm][0] == vehicleide) {
                for(new J = 1; J < 22; J++) {
                    if (legalmods[lm][J] == componentid)
                        modok = true;
                }
            }
        }
    }
    return modok;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	foreach(Player, i)
	{
	    if(GetPVarType(i, "BBArea"))
	    {
	        if(areaid == GetPVarInt(i, "BBArea"))
	        {
	            new station[256];
	            GetPVarString(i, "BBStation", station, sizeof(station));
	            if(!isnull(station))
				{
					PlayStream(playerid, station, GetPVarFloat(i, "BBX"), GetPVarFloat(i, "BBY"), GetPVarFloat(i, "BBZ"), 30.0, 1);
				 	ShowInfoForPlayer(playerid, "~w~Te acercas a una zona donde hay colocado un estereo", 3000);
	            }
				return 1;
	        }
	    }
	}
	for(new v = 0 ; v < MAX_VEHICLES ; v++)
	{
		if(areaid == EstereoArea[v])
		{
		    if(isnull(EstereoURL[v])) return 1;
		    PlayStream(playerid, EstereoURL[v], EstereoVPos[v][0], EstereoVPos[v][1], EstereoVPos[v][2], 30.0, 1);
		    ShowInfoForPlayer(playerid, "~w~Te acercas a una zona donde se escucha el estereo de un vehiculo.", 3000);
		}
	}
	return 1;
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    foreach(Player, i)
	{
	    if(GetPVarType(i, "BBArea"))
	    {
	        if(areaid == GetPVarInt(i, "BBArea"))
	        {
	            StopStream(playerid);
	            ShowInfoForPlayer(playerid, "~w~Te alejas del estereo y la musica se va poco a poco", 3000);
				return 1;
	        }
	    }
	}
	for(new v = 0 ; v < MAX_VEHICLES ; v++)
	{
		if(areaid == EstereoArea[v])
		{
		    StopStream(playerid);
		    ShowInfoForPlayer(playerid, "~w~Te alejas del estereo y la musica se va poco a poco", 3000);
		}
	}
	return 1;
}
stock StopStream(playerid)
{
	DeletePVar(playerid, "pAudioStream");
    StopAudioStreamForPlayer(playerid);
}

stock PlayStream(playerid, url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
	if(GetPVarType(playerid, "pAudioStream")) StopAudioStreamForPlayer(playerid);
	else SetPVarInt(playerid, "pAudioStream", 1);
    PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
}

stock PickUpBoombox(playerid)
{
    foreach(Player, i)
	{
 		if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
   		{
     		StopStream(i);
		}
	}
	DeletePVar(playerid, "BBArea");
	DestroyDynamicObject(GetPVarInt(playerid, "PlacedBB"));
	DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "BBLabel"));
	DeletePVar(playerid, "PlacedBB"); DeletePVar(playerid, "BBLabel");
 	DeletePVar(playerid, "BBX"); DeletePVar(playerid, "BBY"); DeletePVar(playerid, "BBZ");
	DeletePVar(playerid, "BBInt");
	DeletePVar(playerid, "BBVW");
	DeletePVar(playerid, "BBStation");
	return 1;
}
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{

	if(IsPlayerNPC(playerid)) return 1;
	if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) return ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
	if(newkeys & KEY_FIRE && !(oldkeys & KEY_FIRE) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) return ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
	if(IsKeyJustDown(KEY_SPRINT,newkeys,oldkeys) && gPlayerUsingLoopingAnim[playerid] == 1 && Info[playerid][pBeingSentenced] == 0)
	{
	    StopLoopingAnim(playerid);
	    TextDrawHideForPlayer(playerid,txtAnimHelper);
	}
	if((newkeys & KEY_JUMP) && !IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        PlayerPressedJump[playerid] ++;
        SetTimerEx("PressJumpReset", 3000, false, "i", playerid);
        if(PlayerPressedJump[playerid] >= 5)
        {
            ApplyAnimation(playerid, "PED", "BIKE_fall_off", 4.1, 0, 1, 1, 1, 0, 1);
            SetTimerEx("AvisoTirosTimer", 3000, false, "d", playerid);
            SetTimerEx("PressJump", 9000, false, "i", playerid);
            if(AdvertenciaAviso[playerid]) return 1;
            cmd_me(playerid, "se cansa de saltar y tropieza.");
            AdvertenciaAviso[playerid] = true;
        }
    }
	if(newkeys & KEY_WALK && GetPlayerInterior(playerid) != 0) cmd_comprar(playerid, "1");
	if((newkeys & KEY_FIRE) && GetPVarInt(playerid, "SpeedRadar") == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    if(GetPVarInt(playerid, "RadarTimeout") == 0)
	    {
			if(GetPlayerWeapon(playerid) == 1)
			{
			    new Float:x,Float:y,Float:z;
				for(new veh = 1; veh < MAX_VEHICLES; veh++)
				{
				    if(IsVehicleStreamedIn(veh, playerid))
				    {
					    GetVehiclePos(veh,x,y,z);
					    if(IsPlayerAimingAt(playerid,x,y,z,10))
					    {
					        new string[128];
							new Float: Speed = GetVehicleSpeed(veh);
							format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~b~Placa: ~w~%d~n~~b~Vel: ~w~%d MPH", veh, floatround(Speed/1.609));
							GameTextForPlayer(playerid, string,3500, 3);
							format(string, sizeof(string), "Placa: %d Vel: %d MPH", veh, floatround(Speed/1.609));
							SendClientMessageEx(playerid, COLOR_WHITE, string);
							SetPVarInt(playerid, "RadarTimeout", 1);
							SetTimerEx("RadarCooldown", 3000, 0, "i", playerid);
							return 1;
						}
					}
			    }
			}
		}
	}
	if((newkeys & KEY_FIRE) && pTazer[playerid] == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerWeapon(playerid) == 23)
	{
		if(TazerTimeout[playerid] > 0) return 1;
		new Float:X, Float:Y, Float:Z;
		foreach(Player, i)
		{
		    if(IsPlayerStreamedIn(i, playerid))
		    {
			    GetPlayerPos(i, X, Y, Z);
				if(IsPlayerAimingAt(playerid,X,Y,Z,1) && Info[i][pEstado] == 0 && GetPlayerState(i) == PLAYER_STATE_ONFOOT && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
				{
					if(IsACop(i)) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes tasear a esta persona.");
					new string[44 + (MAX_PLAYER_NAME * 2)];
		    		format(string, sizeof(string), "* %s dispará su taser hacia %s, paralizandolo.", GetPlayerNameEx(playerid), GetPlayerNameEx(i));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(i, "~r~Inmovilizado", 3500, 3);
					//SendAudioToRange(10300, 100, 0, X, Y, Z, 20.0);
					TogglePlayerControllable(i, 0);
					PlayerPlaySound(i, 1085, X, Y, Z);
					PlayerPlaySound(playerid, 1085, X, Y, Z);
					Info[i][pEstado] = 1;
					SetPVarInt(i, "PlayerCuffed", 1);
					PlayerCuffedTime[i] = 120;
					SetPVarInt(i, "IsFrozen", 1);
					//Frozen[i] = 1;
					TazerTimeout[playerid] = 4;
					SetTimerEx("TazerTimer",1000,false,"d",playerid);
					ApplyAnimation(i,"PED","KO_skid_front",4.1,0,1,1,1,0);
					GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~r~Recargando Taser... ~w~5", 1500,3);
					return 1;
				}
			}
		}
	}
	if((newkeys & KEY_NO) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		for(new v = 0 ; v < MAX_PLAYERVEHICLES ; v++)
		{
		    if(GetPlayerVehicleID(playerid) == PlayerVehicleInfo[v][pvId])
		    {
		        if(PlayerVehicleInfo[v][pvEnVenta] == 1) return SendClientMessage(playerid, -1, "No puedes encender este vehículo si esta En Venta!");
			}
		}
		for(new v = 0 ; v < MAX_VEHICLES ; v++)
		{
		    if(IsPlayerInVehicle(playerid, v))
		    {
		        if(EstereoON[v]) return SendClientMessage(playerid, COLOR_WHITE, "No puedes encender este vehículo si tiene el estereo encendido.");
			}
		}
		new engine,lights,alarm,doors,bonnet,boot,objective,vehicleid = GetPlayerVehicleID(playerid), var = Info[playerid][pMember], var2 = Info[playerid][pJob], var3 = Info[playerid][pJob2];
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_WHITE,"[ERROR]: No puedes usar este comando si estás en este tipo de vehiculos.");
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == VEHICLE_PARAMS_ON) SetVehicleEngine(vehicleid, playerid);
		else if((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET))
		{
		    if((LSPD_IsACopCar(vehicleid) && var == 1) || IsAHarvest(vehicleid) || (VehiculoHitman(vehicleid) && var == 8) || (IsATruckerCar(vehicleid) && var2 == 2 || var3 == 2) || (Taxi_Vehicle(vehicleid) || var2 == 3 && var3 == 3) ||
			(AutoRusos(vehicleid) && var == 9) || (AutoItalianos(vehicleid) && var == 10) || (SAMD_Vehicle(vehicleid) && var == 4) || (Mecanico_Vehicle(vehicleid) && var == 6) || (FBI_Vehicle(vehicleid) && var == 2) || (CNN_Vehicle(vehicleid) && var == 5) ||
			(IsAPizzabike(vehicleid) && var2 == 1 || var3 == 1) || (GobierAuto(vehicleid) && var == 7) || (IsAnNGCar(vehicleid) && var == 3) || IsATestVehicle(vehicleid) || (IsABasureroVehicle(vehicleid) && var2 == 8 || var3 == 8) ||
			(AutoGrove(vehicleid) && var == 11) || (AutoBallas(vehicleid) && var == 12) || (AutoVagos(vehicleid) && var == 13))
			{
				ShowInfoForPlayer(playerid, "~w~ ENCENDIENDO...", 1000);
		 		SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			}
			else
			{
				new newcar = GetPlayerVehicleID(playerid);
            	foreach(Player, i)
	        	{
  		        	new v = GetPlayerVehicle(i, newcar);
	            	if(v != -1)
		        	{
			        	if(i == playerid)
			        	{
				       		ShowInfoForPlayer(playerid, "~w~ ENCENDIENDO...", 1000);
		 		        	SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			        	}
		        		else if(i == Info[playerid][pVehicleKeysFrom])
						{
				        	ShowInfoForPlayer(playerid, "~w~ ENCENDIENDO...", 1000);
		 		        	SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
			        	}
			        	else
			        	{
			            	ShowInfoForPlayer(playerid, "~w~ No tienes las llaves de este vehiculo", 3000);
			        	}
			        	return 1;
		        	}
	        	}
			}
		}
	}
	if(IsKeyJustDown(KEY_CTRL_BACK, newkeys, oldkeys))
	{
		for(new x = 0; x < MAX_BUSINESS; x++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2]))
			{
				if(businessVariables[x][bLocked] == 1) return SendClientMessage(playerid, COLOR_GREY, "Este local esta cerrado.");
				businessTypeMessages(x, playerid);
				SetPlayerPos(playerid, businessVariables[x][bInteriorPos][0], businessVariables[x][bInteriorPos][1], businessVariables[x][bInteriorPos][2]);
				SetPlayerInterior(playerid, businessVariables[x][bInterior]);
				SetPlayerVirtualWorld(playerid, BUSINESS_VIRTUAL_WORLD+x);
				LoadObjects(playerid);
				return 1;
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, businessVariables[x][bInteriorPos][0], businessVariables[x][bInteriorPos][1], businessVariables[x][bInteriorPos][2]) && GetPlayerVirtualWorld(playerid) == BUSINESS_VIRTUAL_WORLD+x)
			{
				SetPlayerPos(playerid, businessVariables[x][bExteriorPos][0], businessVariables[x][bExteriorPos][1], businessVariables[x][bExteriorPos][2]);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				if(GetPlayerInterior(playerid) != 0) LoadObjects(playerid);
				return 1;
			}
		}
	}
	if (IsKeyJustDown(KEY_FIRE, newkeys, oldkeys))
	{
		if(GetPVarInt(playerid, "CreandoCoche"))
		{
		    ShowPlayerDialog(playerid,D_NEWVEH_1,DIALOG_STYLE_MSGBOX,"Advertencia:","¿Esta es la posición en la que estará el coche?","Ok","Cancelar");
		}
		if(GetPVarInt(playerid, "CreandoCoche2"))
		{
			ShowPlayerDialog(playerid,D_NEWVEH_3,DIALOG_STYLE_MSGBOX,"Advertencia:","¿Esta es la posición en la que spawneará el coche al comprarlo?","Ok","Cancelar");
		}
	}
	if(newkeys & KEY_YES)
	{
	    if(PuedeP[playerid] == 1) return GameTextForPlayer(playerid, "~b~Espera. . .", 200, 6);
		if(TutStep[playerid] == 1)
		{
			switch(TutTime[playerid])
			{
		    	case 1: TutTime[playerid] = 13;
		    	case 2: TutTime[playerid] = 13;
		    	case 3: TutTime[playerid] = 13;
		    	case 4: TutTime[playerid] = 13;
		    	case 5: TutTime[playerid] = 13;
		    	case 6: TutTime[playerid] = 13;
		    	case 7: TutTime[playerid] = 13;
		    	case 8: TutTime[playerid] = 13;
		    	case 9: TutTime[playerid] = 13;
		    	case 10: TutTime[playerid] = 13;
		    	case 11: TutTime[playerid] = 13;
		    	case 12: TutTime[playerid] = 13;
		    	case 13: TutTime[playerid] = 13;
		    }
		    Tutorial_Inside(playerid);
		}
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK && (newkeys & KEY_FIRE))
	{
	    if(GetPVarInt(playerid, "DrinkCooledDown") == 1)
	    {
			new Float: cHealth;
			GetPlayerHealth(playerid, cHealth);
		    if(cHealth < 100)
		    {
				SetHP(playerid, cHealth+2);
		    }
		    else
		    {
		        SendClientMessageEx(playerid, COLOR_GREY, "* Terminaste de tomar la bebida.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    }
		    DeletePVar(playerid, "DrinkCooledDown");
		    SetTimerEx("DrinkCooldown", 2500, 0, "i", playerid);
			return 1;
		}
	}
	if(IsKeyJustDown(KEY_SECONDARY_ATTACK, newkeys, oldkeys))
	{
		if(GetPVarInt(playerid, "UsingSprunk"))
		{
			DeletePVar(playerid, "UsingSprunk");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
	}
	if (IsKeyJustDown(KEY_FIRE, newkeys, oldkeys))
	{
		new Float:health;
		GetPlayerHealth(playerid, health);

		if(GetPVarInt(playerid, "UsingSprunk"))
		{
		    new hpint = floatround( health, floatround_round );
		    if( hpint >= 100 )
			{
				SendClientMessageEx(playerid, COLOR_GREY, " Estás con tu vida llena.");
	 			return 1;
	   		}
	   		else
	   		{
				GetPlayerHealth(playerid, health);
				SetHP(playerid, health+2.0);
			}
		}
	}
	if(newkeys & KEY_SPRINT)
	{
		if(IsPlayerConnectedEx(playerid))
		{
		    if(ShowRules[playerid] == 0)
			{
				return 1;
			}
			if(PlayerDrunk[playerid] > 9) { ApplyAnimation(playerid,"PED", "WALK_DRUNK",6.0,0,1,0,0,PlayerDrunk[playerid]*1000); }
			if(PuedeD[playerid] == 1)
	    	{
				return GameTextForPlayer(playerid, "Espera. . .", 5000, 1);
			}
			else if(ShowRules[playerid] == 1)
			{
				switch(RulesTime[playerid])
				{
		    		case 1: RulesTime[playerid] = 2;
		    		case 2: RulesTime[playerid] = 3;
		    		case 3: RulesTime[playerid] = 4;
		    		case 4: RulesTime[playerid] = 5;
		    		case 5: RulesTime[playerid] = 6;
		    		case 6: RulesTime[playerid] = 7;
		    		case 7: RulesTime[playerid] = 8;
		    		case 8: RulesTime[playerid] = 9;
		    		case 9: RulesTime[playerid] = 10;
		    	}
		    	ShowRol(playerid);
		    }
		}
	}
	if(newkeys & KEY_SECONDARY_ATTACK)
	{
		if(IsPlayerConnectedEx(playerid))
		{
		    if (GetPlayerState(playerid) == 1)
			{
				TeleportPlayer(playerid);
				if(ReduceTime[playerid] == 0)
				{
				    new Float:hp; GetPlayerHealth(playerid, hp);
					if(PlayerToPoint(1.0,playerid,-36.3182,-56.8905,1003.5469))
					{
					    ReduceTime[playerid] = 1;
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
					else if(PlayerToPoint(1.0,playerid,-19.1974,-56.8366,1003.5469))
					{
					    ReduceTime[playerid] = 1;
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
					else if(PlayerToPoint(1.0,playerid,-35.9060,-139.2014,1003.5469))
					{
					    ReduceTime[playerid] = 1;
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
					else if(PlayerToPoint(1.0,playerid,-15.2743,-139.2626,1003.5469))
					{
					    ReduceTime[playerid] = 1;
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+5);
					}
					else if(PlayerToPoint(1.0,playerid,-16.7039,-139.3292,1003.5469))
					{
					    ReduceTime[playerid] = 1;
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
				}
			}
			else if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    RemovePlayerFromVehicle(playerid);
			    TogglePlayerControllable(playerid, 1);
			}
		}
	}
    if (newkeys & KEY_CTRL_BACK)
	{
        if( Info[playerid][pJailed] > 0 ) return SendClientMessageEx(playerid, COLOR_WHITE, "[ERROR]: No puedes usar este comando.");
        if(GetPVarInt(playerid, "IsInArena") == 1) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hacer esto en la arena!");
        if(Info[playerid][pEstado] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "* No puedes hacer esto ahora.");

    	if(IsPlayerConnectedEx(playerid))
		{
	        for(new i = 0; i < sizeof(DDoorsInfo); i++)
		    {
        	    if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddExteriorVW])
			    {
            	    if(DDoorsInfo[i][ddVIP] > 0 && Info[playerid][pVIP] < DDoorsInfo[i][ddVIP]) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes entrar necesitas ser un mayor nivel de VIP.");
            	    if(DDoorsInfo[i][ddFamily] > 0)
				    {
                	    if(Info[playerid][pFMember] != DDoorsInfo[i][ddFamily]-1) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes entrar, sólo para miembros de la familia.");
   	                }
	                if(DDoorsInfo[i][ddFaction] > 0)
				    {
					    if(DDoorsInfo[i][ddFaction] >= 1 && DDoorsInfo[i][ddFaction] <= 3)
					    {
						    if(!IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes entrar, esta puerta está restringida. (Sólo Policías)");
					    }
					    else if(DDoorsInfo[i][ddFaction] < 32 && Info[playerid][pMember] != DDoorsInfo[i][ddFaction]) return SendClientMessageEx(playerid, COLOR_WHITE, "Sólo ingreso a miembros de la facción.");
	                }
	                if(DDoorsInfo[i][ddAdmin] > 0 && Info[playerid][pAdmin] < DDoorsInfo[i][ddAdmin]) return SendClientMessageEx(playerid, COLOR_WHITE, "No puedes entrar, necesitas ser de más nivel administrativo.");

				    if(DDoorsInfo[i][ddWanted] > 0 && Info[playerid][pWantedLevel] != 0) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta puerta esta restringida a personas con nivel de búsqueda.");

				    if(DDoorsInfo[i][dLocked] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Esta puerta está bloqueada.");
        		    SetPlayerInterior(playerid,DDoorsInfo[i][ddInteriorInt]);
        		    Info[playerid][pInt] = DDoorsInfo[i][ddInteriorInt];
        		    Info[playerid][pVW] = DDoorsInfo[i][ddInteriorVW];
        		    SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddInteriorVW]);
        		    if(DDoorsInfo[i][ddCustomInterior])
				    {
        		        LoadObjects(playerid);
        		    }
        		    if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                    {
        	    	    SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
        	    	    SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorA]);
        	    	    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorVW]);
        	    	    LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorInt]);
        		    }
        	    	else
				    {
            		    SetPlayerPos(playerid,DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
            		    SetPlayerFacingAngle(playerid,DDoorsInfo[i][ddInteriorA]);
            		    SetCameraBehindPlayer(playerid);
        		    }
        		    if(DDoorsInfo[i][dMusic] == 0) return 1;
        		    else
        		    {
        		        switch(DDoorsInfo[i][dMusic])
        		        {
        		            case 1: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=56349", 1, 1, 1, 1, 0); // Reggeaton
                            case 2: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=860870", 1, 1, 1, 1, 0); // Electro
                            case 3: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377200", 1, 1, 1, 1, 0); // Techno
                            case 4: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1281016", 1, 1, 1, 1, 0); // Hip hop
                            case 5: PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=616366", 1, 1, 1, 1, 0); // Variada
                        }
                    }
				    return 1;
    		    }
                if (IsPlayerInRangeOfPoint(playerid,3,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && Info[playerid][pVW] == DDoorsInfo[i][ddInteriorVW])
		        {
        	        SetPlayerInterior(playerid,DDoorsInfo[i][ddExteriorInt]);
        	        Info[playerid][pInt] = DDoorsInfo[i][ddExteriorInt];
        	        SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddExteriorVW]);
        	        Info[playerid][pVW] = DDoorsInfo[i][ddExteriorVW];
        	        if(DDoorsInfo[i][ddCustomExterior])
			        {
				        LoadObjects(playerid);
        	        }
        	        if(DDoorsInfo[i][dMusic] != 0) StopAudioStreamForPlayer(playerid);
        	        if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			        {
            	        SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
            	        SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorA]);
            	        SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorVW]);
            	        LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorInt]);
        	        }
        	        else
			        {
            	        SetPlayerPos(playerid,DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
            	        SetPlayerFacingAngle(playerid, DDoorsInfo[i][ddExteriorA]);
            	        SetCameraBehindPlayer(playerid);
            	        return 1;
        	        }
    	        }
	        }
		    if (IsPlayerInRangeOfPoint(playerid,3,2281.1748,-1724.4528,13.2521)) //  GARAGE 1
		    {
                if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			    {
            	    SetVehiclePos(GetPlayerVehicleID(playerid),  2233.9280,-1758.3882,2031.3885);
            	    SetVehicleZAngle(GetPlayerVehicleID(playerid),  11.4);
            	    Streamer_Update(playerid);
                }
                else
			    {
				    SetPlayerPos(playerid, 2235.1851,-1763.5916,2032.9728);
				    SetPlayerFacingAngle(playerid, 14.9);
				    SetCameraBehindPlayer(playerid);
				    LoadObjects(playerid);
			    }
			    return 1;
		    }
		    if (IsPlayerInRangeOfPoint(playerid,3,1242.2382,-1732.4800,13.2911)) //  GARAGE 2
		    {

        	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			    {
            	    SetVehiclePos(GetPlayerVehicleID(playerid),  1134.0381,-1591.4459,6602.5879);
            	    SetVehicleZAngle(GetPlayerVehicleID(playerid),  176.3030);
            	    Streamer_Update(playerid);
                }
                else
			    {
				    SetPlayerPos(playerid, 1134.0381,-1591.4459,6602.5879);
				    SetPlayerFacingAngle(playerid, 14.9);
				    SetCameraBehindPlayer(playerid);
				    LoadObjects(playerid);
			    }
			    return 1;
		    }
		    if (IsPlayerInRangeOfPoint(playerid,3,853.3862,-1387.1884,13.7470)) //  GARAGE VIP
		    {

			    if(Info[playerid][pVIP] == 0) return GameTextForPlayer(playerid, "~r~No eres VIP", 2000, 4);
        	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			    {
            	    SetVehiclePos(GetPlayerVehicleID(playerid),  855.6053,-1412.6117,4202.1577);
            	    SetVehicleZAngle(GetPlayerVehicleID(playerid),  NORTE);
            	    Streamer_Update(playerid);
                }
                else
			    {
				    SetPlayerPos(playerid, 855.6053,-1412.6117,4202.1577);
				    SetPlayerFacingAngle(playerid, NORTE);
				    SetCameraBehindPlayer(playerid);
				    LoadObjects(playerid);
			    }
			    return 1;
		    }
            if (IsPlayerInRangeOfPoint(playerid,8,2233.9280,-1758.3882,2031.3885)) //  GARAGE 1
	        {
       	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			    {
           	        SetVehiclePos(GetPlayerVehicleID(playerid),  2281.1748,-1724.4528,13.2521);
           	        SetVehicleZAngle(GetPlayerVehicleID(playerid),  179.93);
           	        Streamer_Update(playerid);
                }
                else
			    {
			        SetPlayerPos(playerid, 2280.5620,-1722.8878,13.5469);
			        SetPlayerFacingAngle(playerid, 181);
			        SetCameraBehindPlayer(playerid);
		        }
		        return 1;
	        }
	        if (IsPlayerInRangeOfPoint(playerid,8,1140.7430,-1592.1893,6602.4922)) //  GARAGE 1
	        {
       	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			    {
           	        SetVehiclePos(GetPlayerVehicleID(playerid),  1242.2382,-1732.4800,13.2911);
           	        SetVehicleZAngle(GetPlayerVehicleID(playerid),  359.47);
           	        Streamer_Update(playerid);
                }
                else
			    {
			        SetPlayerPos(playerid, 1241.9020,-1734.0985,13.5899);
			        SetPlayerFacingAngle(playerid, 354.9746);
			        SetCameraBehindPlayer(playerid);
		        }
		        return 1;
	        }
	        if (IsPlayerInRangeOfPoint(playerid,8,855.6053,-1412.6117,4202.1577)) //  GARAGE VIP
	        {
       	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			    {
           	        SetVehiclePos(GetPlayerVehicleID(playerid),  853.3862,-1387.1884,13.7470);
           	        SetVehicleZAngle(GetPlayerVehicleID(playerid),  182.4513);
           	        Streamer_Update(playerid);
                }
                else
			    {
			        SetPlayerPos(playerid, 853.3862,-1387.1884,13.7470);
			        SetPlayerFacingAngle(playerid, 182.4513);
			        SetCameraBehindPlayer(playerid);
		        }
		        return 1;
	        }
	        for(new i = 0; i < sizeof(HouseInfo); i++)
		    {
    		    if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
			    {
        		    if(Info[playerid][pPhousekey] == i || HouseInfo[i][hLock] == 0 || Info[playerid][pRenting] == i)
				    {
			            LoadObjects(playerid);
            		    SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
            		    Info[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
            		    Info[playerid][pVW] = i+6000;
            		    SetPlayerVirtualWorld(playerid, i+6000);
            		    if(HouseInfo[i][hCustomInterior] == 1)
					    {
                		    LoadObjects(playerid);
            		    }
            		    SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
            		    SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorA]);
            		    SetCameraBehindPlayer(playerid);
            		    GameTextForPlayer(playerid, "~w~Bienvenido", 5000, 1);
					    Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
        		    }
        		    else GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);
        		    return 1;
        	    }
                if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && Info[playerid][pVW] == i+6000)
		        {
			        SetPlayerInterior(playerid,0);
                    Info[playerid][pInt] = 0;
                    if(HouseInfo[i][hCustomExterior] == 1)
					{
						LoadObjects(i);
					}
                    SetPlayerPos(playerid,HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
                    SetPlayerFacingAngle(playerid, HouseInfo[i][hExteriorA]);
                    SetCameraBehindPlayer(playerid);
                    SetPlayerVirtualWorld(playerid, 0);
                    Info[playerid][pVW] = 0;
                    return Streamer_UpdateEx(playerid, HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
                }
                if(IsPlayerInRangeOfPoint(playerid,200.0, 1331.0873,-1556.7892,10037.3408) && Info[playerid][pVW] == i+6000)
				{
					if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
 					{
						LoadObjects(playerid);
						SetPlayerVirtualWorld(playerid, 0);
						Info[playerid][pVW] = 0;
						SetPlayerPos(playerid,HouseInfo[i][gX],HouseInfo[i][gY],HouseInfo[i][gZ]);
						SetPlayerFacingAngle(playerid, HouseInfo[i][gR]);
						SetCameraBehindPlayer(playerid);
						Streamer_UpdateEx(playerid, HouseInfo[i][gX],HouseInfo[i][gY],HouseInfo[i][gZ]);
					}
			        else
					{
						if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
						{
							for(new p = 0; p < MAX_PLAYERS; p++)
							{
								new vehact = GetPlayerVehicleID(playerid);
								if(IsPlayerInVehicle(p, vehact))
								{
									LoadObjects(p);
									SetPlayerVirtualWorld(p, 0);
									Info[p][pVW] = 0;
									SetVehicleVirtualWorld(vehact, 0);
									SetVehiclePos(vehact,HouseInfo[i][gX],HouseInfo[i][gY],HouseInfo[i][gZ]);
									SetCameraBehindPlayer(p);
									Streamer_UpdateEx(p, HouseInfo[i][gX],HouseInfo[i][gY],HouseInfo[i][gZ]);
								}
							}
						}
		     		}
			    }
			    if(IsPlayerInRangeOfPoint(playerid,5,HouseInfo[i][gX], HouseInfo[i][gY], HouseInfo[i][gZ]))
        		{
        	    	if(Info[playerid][pPhousekey] == i || HouseInfo[i][hLock] == 0 || Info[playerid][pRenting] == i)
        	    	{
        	        	if(!IsPlayerInAnyVehicle(playerid))
        	        	{
                        	LoadObjects(playerid);
            				Info[playerid][pVW] = i+6000;
            				SetPlayerVirtualWorld(playerid, i+6000);
							switch(HouseInfo[i][gT])
							{
								case 1: SetPlayerPos(playerid, 1331.0873,-1556.7892,10037.3408);
								case 2: SetPlayerPos(playerid, 1346.3470,-1555.5765,10037.3408);
								case 3: SetPlayerPos(playerid, 1327.4423,-1590.5065,10037.3408);
							}
						}
						else
						{
					    	for(new p = 0; p < MAX_PLAYERS; p++)
	        				{
		    					new vehact = GetPlayerVehicleID(playerid);
    							if(IsPlayerInVehicle(p, vehact))
    							{
					    			LoadObjects(p);
      								SetPlayerVirtualWorld(p, i+6000);
   									Info[p][pVW] = i+6000;
   									SetVehicleVirtualWorld(vehact, i+6000);
        							switch(HouseInfo[i][gT])
									{
										case 1:
										{
											SetVehiclePos(vehact, 1331.0873,-1556.7892,10037.3408);
											SetVehicleZAngle(vehact, 357.0128);
										}
										case 2:
										{
											SetVehiclePos(vehact, 1346.3470,-1555.5765,10037.3408);
											SetVehicleZAngle(vehact, 354.9474);
										}
										case 3:
										{
											SetVehiclePos(vehact, 1327.4423,-1590.5065,10037.3408);
											SetVehicleZAngle(vehact, 354.4669);
										}
									}
								}
							}
						}
					}
				}
    	    }
        }
	}
	return 1;
}

stock ClearKnock(playerid)
{
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid);
	KnockedDown[playerid] = 0;
}

stock RemovePlayerWeapon(playerid, weapon){
	switch(weapon) {
		case 0, 1: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][0] = 0;
	        Info[playerid][pMunicion][0] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 2, 3, 4, 5, 6, 7, 8, 9: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][1] = 0;
	        Info[playerid][pMunicion][1] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 22, 23, 24: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][2] = 0;
	        Info[playerid][pMunicion][2] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 25, 26, 27: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][3] = 0;
	        Info[playerid][pMunicion][3] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 28, 29, 32: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][4] = 0;
	        Info[playerid][pMunicion][4] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 30, 31: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][5] = 0;
	        Info[playerid][pMunicion][5] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 33, 34: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][6] = 0;
	        Info[playerid][pMunicion][6] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 35, 36, 37, 38: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][7] = 0;
	        Info[playerid][pMunicion][7] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 16, 17, 18, 39: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][8] = 0;
	        Info[playerid][pMunicion][8] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 41, 42, 43: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][9] = 0;
	        Info[playerid][pMunicion][9] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 10, 11, 12, 13, 14, 15: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][10] = 0;
	        Info[playerid][pMunicion][10] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 44, 45, 46: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][11] = 0;
			Info[playerid][pMunicion][11] = 0;
			SetPlayerWeapons(playerid);
	    }
	    case 40: {
		    ResetPlayerWeapons(playerid);
	        Info[playerid][pWeapons][12] = 0;
	        Info[playerid][pMunicion][12] = 0;
			SetPlayerWeapons(playerid);
	    }
	}
	return 1;
}

/*RemovePlayerWeapon(playerid, weaponid)
{
new plyWeapons[13];
for(new s = 0; s < 13; s++)
{
	new wep, ammo;
	GetPlayerWeaponData(playerid, s, wep, ammo);
	if(wep != weaponid)
	{
		GetPlayerWeaponData(playerid, s, plyWeapons[s], ammo);
	}
	else
	{
		Info[playerid][pWeapons][s] = 0;
	}
}
ResetPlayerWeapons(playerid);
for(new s = 0; s < 13; s++)
{
	GivePlayerValidWeapon(playerid, plyWeapons[s]);
}
return 1;
}*/

function ReduceTimer(playerid)
{
if(IsPlayerConnectedEx(playerid))
{
    if(ReduceTime[playerid] == 1)
    {
		ReduceTime[playerid] = 0;
    }
}
}

function FreezePlayer(playerid)	{	TogglePlayerControllable(playerid, 0);	}

function UnfreezePlayer(playerid)	{	TogglePlayerControllable(playerid, 1);	}

function Heal(playerid)			{	SetHP(playerid, 100);			return 1;	}

function CheckForCloseDoor(playerid)
{
if(IsAPolice(playerid))
{
    if (PlayerToPoint(15, playerid,1589.053344,-1638.123168,14.122960))
	{
		MoveDynamicObject(pdgate1,1589.053344,-1638.123168,14.122960, 0.97);
  		PlayerPlaySound(playerid, 1153, 1589.053344,-1638.123168,14.122960);
  		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_GREY,"  No hay señal!");
}
else SendClientMessageEx(playerid, COLOR_GREY,"Usted no tiene un mando a distancia.");
return 1;
}
function CheckForCloseDoorMeca(playerid)
{
    //new string[128];
	if(Team_Mecanicos(playerid))
    {
        if (PlayerToPoint(20, playerid,1823.74646, -1406.35303, 13.84960)){
	      		MoveDynamicObject(Mecagate,1823.74646, -1406.35303, 13.84960, 5.0);
	            return 1;
		}
		if (PlayerToPoint(20, playerid,1813.60327, -1427.44653, 13.84860)){
	      		MoveDynamicObject(Mecagate2,1813.60327, -1427.44653, 13.84860, 5.0);
	            return 1;
		}
		else SendClientMessageEx(playerid, COLOR_GREY,"  No hay señal!");
    }
    else SendClientMessageEx(playerid, COLOR_GREY,"Usted no tiene un mando a distancia.");
    return 1;
}
stock Bought(playerid, amount)
{
if(IsPlayerConnectedEx(playerid))
{
	new a[12];
	format(a,sizeof(a),"~r~ -%d$",amount);
	GameTextForPlayer(playerid, a, 5000, 1);
	GivePlayerCash(playerid, -amount);
	PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
}
return 1;
}

stock Earn(playerid, amount){
if(IsPlayerConnectedEx(playerid)){
	new a[12];
	format(a,sizeof(a),"~g~ %d$",amount);
    GameTextForPlayer(playerid, a, 5000, 1);
	GivePlayerCash(playerid, amount);
	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
}
return 1;
}

stock CheckMoney(playerid, money){
if(IsPlayerConnectedEx(playerid)){
    new b[64];
    new xx;
	xx = money - (GetPlayerCash(playerid));
    if(GetPlayerCash(playerid) >= money){ return 1; }
	else{
	    format(b,sizeof(b),"No tienes dinero suficiente! Te faltan $%d",xx);
		SendClientMessageEx(playerid, COLOR_WHITE, b);
		return 0;
	}
}
return 0;
}

function ClearDrugs(playerid)
{
UsedWeed[playerid] = 0;
UsedCrack[playerid] = 0;
return 1;
}

function NewUs(playerid)
{
  NewUsed[playerid] = 0;
  return 1;
}

function PuedePTimer(playerid)
{
PuedeP[playerid] = 0;
return 1;
}

function ReleasePlayer(playerid)
{
SetPVarInt(playerid, "IsFrozen", 0);
TogglePlayerControllable(playerid,1);
}

function ShowDNI(playerid,giveplayerid)
{
    if(IsPlayerConnectedEx(playerid) && IsPlayerConnectedEx(giveplayerid))
    {
    	new string[64], sex[10];
		switch(Info[playerid][pSex])
		{
	    	case 1:  sex = "Masculino";
	    	default: sex = "Femenino";
		}

        format(string, sizeof(string), "%s", GetPlayerNameEx(playerid));
		TextDrawSetString(DNI9[giveplayerid], string);

        format(string, sizeof(string), "%d", Info[playerid][pDNI]);
		TextDrawSetString(DNI8[giveplayerid], string);

		format(string, sizeof(string), "%s", sex);
		TextDrawSetString(DNI11[giveplayerid], string);

		format(string, sizeof(string), "%d", Info[playerid][pAge]);
		TextDrawSetString(DNI10[giveplayerid], string);

		format(string, sizeof(string), "%s", Info[playerid][pAcento]);
		TextDrawSetString(DNI12[giveplayerid], string);

   		TextDrawSetPreviewModel(DNI3[giveplayerid],Info[playerid][pChar]);

		TextDrawShowForPlayer(giveplayerid, DNI0);
		TextDrawShowForPlayer(giveplayerid, DNI1);
		TextDrawShowForPlayer(giveplayerid, DNI2);
		TextDrawShowForPlayer(giveplayerid, DNI3[giveplayerid]);
		TextDrawShowForPlayer(giveplayerid, DNI4);
		TextDrawShowForPlayer(giveplayerid, DNI5);
		TextDrawShowForPlayer(giveplayerid, DNI6);
		TextDrawShowForPlayer(giveplayerid, DNI7);
		TextDrawShowForPlayer(giveplayerid, DNI8[giveplayerid]);
		TextDrawShowForPlayer(giveplayerid, DNI9[giveplayerid]);
		TextDrawShowForPlayer(giveplayerid, DNI10[giveplayerid]);
		TextDrawShowForPlayer(giveplayerid, DNI11[giveplayerid]);
		TextDrawShowForPlayer(giveplayerid, DNI12[giveplayerid]);
        SetTimerEx("timermostrar",8000,false,"i",playerid);
		SetTimerEx("qdni",7000,false,"i",giveplayerid);
	}
}
function Detective_FindPerson(playerid)
{
new Float:X,Float:Y,Float:Z;
GetPlayerPos(WhoFind[playerid], X,Y,Z);
SetPlayerCheckpoint(playerid, X,Y,Z, 6);
SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "** Información: se estableció el destino de búsqueda en su radar");
WhoFind[playerid] = 0;
return 1;
}

function Detective_FindCar(playerid)
{
new Float:X,Float:Y,Float:Z;
GetVehiclePos(WhoFind[playerid], X,Y,Z);
SetPlayerCheckpoint(playerid, X,Y,Z, 10);
SendClientMessageEx(playerid, TEAM_RADIO_COLOR, "** Información: se estableció el destino de búsqueda en su radar");
WhoFind[playerid] = 0;
return 1;
}

LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	gPlayerUsingLoopingAnim[playerid] = 1;
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
	TextDrawShowForPlayer(playerid,txtAnimHelper);
}

PreloadAnimLib(playerid, animlib[])
{
ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

StopLoopingAnim(playerid)
{
gPlayerUsingLoopingAnim[playerid] = 0;
ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

LoadAnimLibs(playerid)
{
PreloadAnimLib(playerid,"CARRY");
PreloadAnimLib(playerid,"CRACK");
PreloadAnimLib(playerid,"BD_FIRE");
PreloadAnimLib(playerid,"ON_LOOKERS");
PreloadAnimLib(playerid,"BEACH");
PreloadAnimLib(playerid,"GHANDS");
PreloadAnimLib(playerid,"MEDIC");
PreloadAnimLib(playerid,"SHOP");
PreloadAnimLib(playerid,"PARK");
PreloadAnimLib(playerid,"KISSING");
PreloadAnimLib(playerid,"SWEET");
PreloadAnimLib(playerid,"BOMBER");
PreloadAnimLib(playerid,"SWAT");
PreloadAnimLib(playerid,"WUZI");
PreloadAnimLib(playerid,"PED");
PreloadAnimLib(playerid,"ped");
PreloadAnimLib(playerid,"SCRATCHING");
PreloadAnimLib(playerid,"FAT");
PreloadAnimLib(playerid,"POLICE");
PreloadAnimLib(playerid,"Attractors");
PreloadAnimLib(playerid,"FOOD");
PreloadAnimLib(playerid,"CRIB");
PreloadAnimLib(playerid,"INT_HOUSE");
PreloadAnimLib(playerid,"MISC");
PreloadAnimLib(playerid,"GYMNASIUM");
PreloadAnimLib(playerid,"COP_AMBIENT");
PreloadAnimLib(playerid,"DEALER");
PreloadAnimLib(playerid,"GRAVEYARD");
PreloadAnimLib(playerid,"DANCING");
PreloadAnimLib(playerid,"RAPPING");
PreloadAnimLib(playerid,"GANGS");
PreloadAnimLib(playerid,"FIGHT_D");
PreloadAnimLib(playerid,"SMOKING");
PreloadAnimLib(playerid,"SNM");
PreloadAnimLib(playerid,"benchpress");
}

SearchingHit(playerid)
{
new string[ 256 ];
SendClientMessageEx(playerid, COLOR_WHITE, "Contratos Habilitados:");
new hits;
foreach(Player, i)
{
	if(Info[i][pMember] != 8 && Info[i][pHead] > 0)
	{
 		if(GotHit[i] == 0)
		{
			hits++;
			format(string, sizeof(string), "Nombre: %s (ID %d) | Precio: $%d | Contratado por: %s | Detalles: %s | Seguido por: Nadie", GetPlayerNameEx(i), i, Info[i][pHead], Info[i][pContractBy], Info[i][pContractDetail]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else
		{
			format(string, sizeof(string), "Nombre: %s (ID %d) | Precio: $%d |  Contratado por: %s | Detalles: %s | Seguido por: %s", GetPlayerNameEx(i), i, Info[i][pHead], Info[i][pContractBy], Info[i][pContractDetail], GetPlayerNameEx(GetChased[i]));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
}
/*if(hits && Info[playerid][pRank] <= 1 && Info[playerid][pMember] == 15)
{
	SendClientMessageEx(playerid, COLOR_GRAD1, "Usa /darmehit para aseinarte un contrato.");
}*/
if(hits && Info[playerid][pRank] >= 6 && Info[playerid][pMember] == 8 && Info[playerid][pLeader] == 8)
{
	SendClientMessageEx(playerid, COLOR_GRAD1, "Usa /darhit para asignar un contrato a uno de los hitman.");
}
if(hits == 0)
{
    SendClientMessageEx(playerid, COLOR_GREY, "No hay contratos disponibles.");
}
return 0;
}

SendPaintballArenaMessage(arenamodo, color, message[])
{
foreach(Player, p)
{
	new modo = GetPVarInt(p, "ArenaMode");
	if(arenamodo == modo)
   	{
      	SendClientMessageEx(p, color, message);
	}
}
return 1;
}

function GuardarArmas(playerid)
{
	for(new s = 0; s < 13; s++)
	{
     	GetPlayerWeaponData(playerid, s, Info[playerid][pWeapons][s], Info[playerid][pMunicion][s]);
    }
    return 1;
}

function GuardarArmasSV()
{
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
		{
			for(new s = 0; s < 13; s++)
			{
     			GetPlayerWeaponData(i, s, Info[i][pWeapons][s], Info[i][pMunicion][s]);
    		}
 		}
	}
    return 1;
}

function BackupClear(playerid, faction, timer)
{
if(IsPlayerConnectedEx(playerid))
{
	if(faction == 1)
	{
		if(Info[playerid][pRequestingBackup] == 1)
		{
			foreach(Player, i)
			{
				if(IsPlayerConnectedEx(i))
				{
					if(Team_SAPD(i) || Team_FBI(i) || Team_NG(i) && OnDuty[i] == 1) SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR); DisablePlayerCheckpoint(playerid);
				}
			}
			if(timer != 1) 	SendClientMessageEx(playerid, TEAM_BLUE_COLOR, "Tu pedido de refuerzos ha sido cancelado automáticamente.");
			else 					SendClientMessageEx(playerid, TEAM_BLUE_COLOR, "Tu pedido fue cancelado.");

			Info[playerid][pRequestingBackup] = 0;
		}
	}
}
return 1;
}

//·| << Timers de Objetos >> ========================================================================================|·
function Puerta2Abierta()
{
	MoveObject(PuertaH2,250.67543029785, 130.39466552734, 1037.9182128906, 0.97);
	SetTimer("Puerta2Cerrada", 5000, 0);
}

function Puerta1Abierta()
{
	MoveObject(PuertaH1,250.56510925293, 130.34936218262, 1032.2158203125, 0.97);
	SetTimer("Puerta1Cerrada", 8000, 0);
}

function Puerta2Cerrada()
{
	MoveObject(PuertaH2,250.67543029785, 131.59466552734, 1037.9182128906, 0.97);
	if(HaciaAbajo == 1) SetTimer("Eabajo", 2000, 0);
	else { }
}

function Puerta1Cerrada()
{
	MoveObject(PuertaH1,250.56510925293, 131.54936218262, 1032.2158203125, 0.97);
	if(HaciaArriba == 1) SetTimer("Earriba", 2000, 0);
	else { }
}

stock SetPosEx(playerid, Float:X, Float:Y, Float:Z, Float:A, interiorid, worldid)
{
	SetPlayerPos(playerid, X, Y, Z);
	SetPlayerFacingAngle(playerid, A);
	SetPlayerInterior(playerid, interiorid);
	SetPlayerVirtualWorld(playerid, worldid);
	Info[playerid][pVW] = worldid;
	Info[playerid][pInt] = interiorid;
}

function TazerTimer(playerid)
{
	if (TazerTimeout[playerid] > 0)
	{
		new string[128];
		format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Recargando Taser... ~w~%d", TazerTimeout[playerid]);
		GameTextForPlayer(playerid, string,1500, 3);
		TazerTimeout[playerid] -= 1;
		SetTimerEx("TazerTimer",1000,false,"d",playerid);
	}
	return 1;
}

GetPlayerNameEx(playerid)
{
	new sz_playerName[MAX_PLAYER_NAME],i_pos;
	GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	while ((i_pos = strfind(sz_playerName, "_", false, i_pos)) != -1) sz_playerName[i_pos] = ' ';
	return sz_playerName;
}

function BikeModel(playerid)
{
if(IsPlayerConnectedEx(playerid))
{
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 509) { return 1; }
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 481) { return 1; }
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 510) { return 1; }
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 462) { return 1; }
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 448) { return 1; }
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 581) { return 1; }
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 522) { return 1; }
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 461) { return 1; }
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 521) { return 1; }
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 523) { return 1; }
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 463) { return 1; }
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 586) { return 1; }
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 468) { return 1; }
	else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 471) { return 1; }
}
return 0;
}

//Buttons
function CloseChief()
{
	MoveDynamicObject(chief1,229.59960938,119.50000000,1009.21875000,4);
	MoveDynamicObject(chief2,232.59960938,119.53515625,1009.21875000,4);
	return 1;
}
function CloseEastLobby()
{
	MoveDynamicObject(eastlobby1,253.14941406,110.59960938,1002.21502686,4);
	MoveDynamicObject(eastlobby2,253.18457031,107.59960938,1002.21502686,4);
	return 1;
}
function Cerrarayunta()
{
	MoveDynamicObject(ayuntadoor,365.77, 189.55, 1007.37,4);

	return 1;
}
function Cerrarayunta2()
{
	MoveDynamicObject(ayuntadoor2,371.26, 166.58, 1007.40,4);
	return 1;
}
function CloseWestLobby()
{
	MoveDynamicObject(westlobby1,239.71582031,116.09179688,1002.21502686,4);
	MoveDynamicObject(westlobby2,239.67968750,119.09960938,1002.21502686,4);
	return 1;
}

function CloseLocker()
{
	MoveDynamicObject(locker1,267.29980469,112.56640625,1003.61718750,4);
	MoveDynamicObject(locker2,264.29980469,112.52929688,1003.61718750,4);
	return 1;
}
function CloseCCTV()
{
	MoveDynamicObject(cctv1,264.44921875,115.79980469,1003.61718750,4);
	MoveDynamicObject(cctv2,267.46875000,115.83691406,1003.61718750,4);
	return 1;
}
function CloseFBILobbyLeft()
{
	MoveDynamicObject(FBILobbyLeft,295.40136719,-1498.43457031,-46.13965225,4);
	return 1;
}
function CloseFBILobbyRight()
{
	MoveDynamicObject(FBILobbyRight,302.39355469,-1521.62988281,-46.13965225,4);
	return 1;
}
function CloseFBIPrivate()
{
	MoveDynamicObject(FBIPrivate[0],299.29986572,-1492.82666016,-28.73300552,4);
	MoveDynamicObject(FBIPrivate[1],299.33737183,-1495.83911133,-28.73300552,4);
	return 1;
}

stock PlayerFacePlayer(playerid, targetplayerid)
{
	new Float: Angle;
	GetPlayerFacingAngle(playerid, Angle);
	SetPlayerFacingAngle(targetplayerid, Angle+180);
	return 1;
}

stock GivePlayerEventWeapons( playerid )
{
	if( GetPVarInt( playerid, "EventToken" ) == 1 )
	{
		GivePlayerWeapon( playerid, InfoEvento[ EventWeapons ][ 0 ], 60000 );
		GivePlayerWeapon( playerid, InfoEvento[ EventWeapons ][ 1 ], 60000 );
		GivePlayerWeapon( playerid, InfoEvento[ EventWeapons ][ 2 ], 60000 );
		GivePlayerWeapon( playerid, InfoEvento[ EventWeapons ][ 3 ], 60000 );
		GivePlayerWeapon( playerid, InfoEvento[ EventWeapons ][ 4 ], 60000 );
	}
	return 1;
}

function SafeLoadObjects(playerid)
{
	if(GetPVarType(playerid, "LoadingObjects"))
	{
		DeletePVar(playerid, "LoadingObjects");
		TogglePlayerControllable(playerid, 1);
	}
}

function ReFill(playerid)
{
	if(!IsAtGasStation(playerid) || !IsPlayerInAnyVehicle(playerid) || VehicleFuel[GetPlayerVehicleID(playerid)] >= 300 || GetPlayerCash(playerid) < 1)
	{
		StopRefueling(playerid);
	}
	else
	{
	    new engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == VEHICLE_PARAMS_ON) return StopRefueling(playerid);
		VehicleFuel[GetPlayerVehicleID(playerid)] += 300; RefuelingVehiclePrice[playerid] += 350;
		if(VehicleFuel[GetPlayerVehicleID(playerid)] >= 300) VehicleFuel[GetPlayerVehicleID(playerid)] = 300;
	}
	return true;
}

stock StopRefueling(playerid)
{
	new string[128];
	GivePlayerCash(playerid, -RefuelingVehiclePrice[playerid]);
	format(string, sizeof(string), "Tu vehiculo a sido llenado por $%d.", RefuelingVehiclePrice[playerid]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	RefuelingVehicle[playerid] = 0; RefuelingVehiclePrice[playerid] = 0; KillTimer(RefuelingVehicleTimer[playerid]);
	return true;
}

public OnVehicleSpawn(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 427, 428, 432, 601, 528: SetVehicleHealth(vehicleid, 5000.0);
	}
	EstereoON[vehicleid] = false;
	if(Lamp[vehicleid] == 1)
	{
		DestroyObject(light[vehicleid]);
	    Lamp[vehicleid] = 0;
	}
	VehicleStatus{vehicleid} = 0;
	if(LockStatus[vehicleid])
	{
		foreach(Player, i)
		{
			if(Info[i][pLockCar] == vehicleid)
			{
				Info[i][pLockCar] = INVALID_VEHICLE_ID;
			}
		}
	}
	arr_Engine{vehicleid} = 0;
	VehicleFuel[vehicleid] = 300;
	TruckContents[vehicleid] = 0;
	return 1;
}

function SetPlayerJoinCamera(playerid, cases) // Jeferson taked cameras
{
	switch(cases)
	{
		case        1: // Aeropuerto
    	{
                    InterpolateCameraPos(playerid, 1535.784667, -1594.869995, 232.750915, 1524.813598, -1546.716918, 253.318038, 18000);
                    InterpolateCameraLookAt(playerid, 1532.387451, -1598.468139, 232.034957, 1526.582275, -1542.139770, 254.277984, 18000);
    	}
        case        2: // Edificio
        {
				    InterpolateCameraPos(playerid, 1535.784667, -1594.869995, 232.750915, 1524.813598, -1546.716918, 253.318038, 18000);
                    InterpolateCameraLookAt(playerid, 1532.387451, -1598.468139, 232.034957, 1526.582275, -1542.139770, 254.277984, 18000);
        }
        case        3: // Puente Agua
        {
					InterpolateCameraPos(playerid, -1341.368652, 877.729919, -24.587184, -1240.636230, 617.330200, 46.168998, 13500);
                    InterpolateCameraLookAt(playerid, -1337.027343, 875.261047, -24.347826, -1238.638183, 621.903869, 45.869575, 13500);

        }
        case    4: // Los Santos 8
        {
						InterpolateCameraPos(playerid, -1341.368652, 877.729919, -24.587184, -1240.636230, 617.330200, 46.168998, 13500);
                        InterpolateCameraLookAt(playerid, -1337.027343, 875.261047, -24.347826, -1238.638183, 621.903869, 45.869575, 13500);
        }
	}
}

stock IsPlayerInVehicleRadio(playerid, Float:radius)
{
	new Float:r, Float:rr, Float:rrr, Float:rc, Float:rrc, Float:rrrc;
	GetPlayerPos(playerid, r, rr, rrr);
	for(new i; i < MAX_VEHICLES; i++)
	{
	    GetVehiclePos(i, rc, rrc, rrrc);
	    if(PlayerToPoint(radius,playerid,rc,rrc,rrrc))
	    {
	        return i;
	    }
	}
	return false;
}

stock CleanScreen()
{
	foreach(Player, i)
	{
	    ClearChatbox(i);
	}
	return 1;
}

function DisableVehicleAlarm(vehicleid)
{
new engine, lights, alarm, doors, bonnet, boot, objective;
GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
SetVehicleParamsEx(vehicleid, engine, lights, false, doors, bonnet, boot, objective);
}

function HospitalFun(playerid)
{
    SendClientMessageEx(playerid, COLOR_WHITE,     "Recepcionista: Los gastos médicos son de $450, muchas gracias por confiar en nosotros.");
    GivePlayerCash(playerid, -450);
	Tax += 450;
	SetCameraBehindPlayer(playerid);
    SetPosEx(playerid, 1173.4215,-1354.8661,13.8894,66.4873,0,playerid);
}

function OtherTimerEx(playerid, type)
{
if(type == TYPE_GIVEWEAPONTIMER)
{
    if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		SetPVarInt(playerid, "GiveWeaponTimer", GetPVarInt(playerid, "GiveWeaponTimer")-1);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
	}
}
else if(type == TYPE_GUARDTIMER)
{
    if(GetPVarInt(playerid, "GuardTimer") > 0)
    {
        SetPVarInt(playerid, "GuardTimer", GetPVarInt(playerid, "GuardTimer")-1);
        SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GUARDTIMER);
    }
}
else if(type == TYPE_FLOODPROTECTION)
{
	if( CommandSpamUnmute[playerid] >= 1)
	{
		CommandSpamUnmute[playerid]--;
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
	}
}
else if(type == TYPE_PAYTIMER)
{
    if(GetPVarInt(playerid, "GiveMoneyTimer") > 0)
	{
		SetPVarInt(playerid, "GiveMoneyTimer", GetPVarInt(playerid, "GiveMoneyTimer")-1);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PAYTIMER);
	}
}
else if(type == TYPE_ARMSTIMER)
{
    if(GetPVarInt(playerid, "ArmsTimer") > 0)
	{
		SetPVarInt(playerid, "ArmsTimer", GetPVarInt(playerid, "ArmsTimer")-1);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
	}
}
else if (type == TYPE_TPPIZZARUNTIMER)
{
	if(GetPVarInt(playerid, "tpPizzaTimer") > 0 && GetPVarInt(playerid, "Pizza"))
	{
		SetPVarInt(playerid, "tpPizzaTimer", GetPVarInt(playerid, "tpPizzaTimer")-1);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPPIZZARUNTIMER);
	}
}
else if(type == TYPE_TPDRUGRUNTIMER)
{
	if(GetPVarInt(playerid, "tpDrugRunTimer") > 0)
	{
		SetPVarInt(playerid, "tpDrugRunTimer", GetPVarInt(playerid, "tpDrugRunTimer")-1);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
	}
}
if(type == TYPE_TPMATRUNTIMER)
{
	if(GetPVarInt(playerid, "tpMatRunTimer") > 0)
	{
		SetPVarInt(playerid, "tpMatRunTimer", GetPVarInt(playerid, "tpMatRunTimer")-1);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
	}
}
else if(type == TYPE_TPTRUCKRUNTIMER)
{
	if(GetPVarInt(playerid, "tpTruckRunTimer") > 0)
	{
		SetPVarInt(playerid, "tpTruckRunTimer", GetPVarInt(playerid, "tpTruckRunTimer")-1);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
	}
}
else if (type == TYPE_PIZZATIMER)
{
    if(GetPVarInt(playerid, "pizzaTimer") == 0)
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "No lograste entregar la pizza a la casa antes de que se se enfriara!");
        SetPVarInt(playerid, "Pizza", 0);
        DestroyProgressBar(PizzaBar[playerid]);
        DisablePlayerCheckpoint(playerid);
    }
    else if (GetPVarInt(playerid, "Pizza") == 0)
    {
        DestroyProgressBar(PizzaBar[playerid]);
        DisablePlayerCheckpoint(playerid);
    }
    else if (GetPVarInt(playerid, "pizzaTimer") > 0 && GetPVarInt(playerid, "Pizza") > 0)
    {
		SetPVarInt(playerid, "pizzaTimer", GetPVarInt(playerid, "pizzaTimer")-1);
        SetProgressBarValue(PizzaBar[playerid], (GetPVarInt(playerid, "pizzaTimer") * 100.0 / GetPVarInt(playerid, "pizzaTotal")));
        UpdateProgressBar(PizzaBar[playerid], playerid);
        SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PIZZATIMER);
    }
}
}

stock IsLocolowVehicle(veh)
{
	new model = GetVehicleModel(veh);
	switch(model)
	{
	    case 412,534,535,536,566,567,576: return 1;
	}
	return 0;
}

ReadyToCapture(pointid)
{
	new string[128];
	//if(Points[pointid][Type] == 3 && Points[pointid][Type] == 4) return 1;
	format(string, sizeof(string), "%s está disponible para capturar! En el punto escribe /capturar!", Points[pointid][Name]);
	Points[pointid][CaptureProccess] = Create3DTextLabel(string, COLOR_POINTGEN, Points[pointid][Pointx], Points[pointid][Pointy], Points[pointid][Pointz]+0.6, 10.0, 0, 0);
	Points[pointid][CaptureProccessEx] = 1;
	return 1;
}

function CaptureTimer(point)
{
	new string[128],fac;
	if (Points[point][ClaimerId] != INVALID_PLAYER_ID && Points[point][TimeToClaim])
	{
		new claimer = Points[point][ClaimerId];
		new Float: x, Float: y, Float: z;
		GetPlayerPos(claimer, x, y, z);
		if (Points[point][Capturex] != x || Points[point][Capturey] != y || Points[point][Capturez] != z || GetPVarInt(Points[point][ClaimerId],"Injured") == 1)
		{
			SendClientMessageEx(Points[point][ClaimerId], COLOR_GENERAL, "No pudiste capturar el punto, te moviste o te moriste mientras intentabas capturar.");
			Points[point][ClaimerId] = INVALID_PLAYER_ID;
			Points[point][TimeToClaim] = 0;
		}
		else
		{
			if(Points[point][Vulnerable] > 0)
			{
			    SendClientMessageEx(Points[point][ClaimerId], COLOR_GENERAL, "No pudiste capturar, el punto ya fue capturado.");
				Points[point][ClaimerId] = INVALID_PLAYER_ID;
				Points[point][TimeToClaim] = 0;
				return 1;
			}
			fac = Info[claimer][pMember];
			if(fac >= 9)
			{
			    switch(fac)
			    {
			        case 9: szMessage = "Mafia Rusa";
			        case 10: szMessage = "Mafia Italiana";
			        case 11: szMessage = "Grove Street";
			        case 12: szMessage = "Ballas";
			        case 13: szMessage = "Los Santos Vagos";
					default: return 1;
				}
			}
	        Points[point][PlayerNameCapping] = GetPlayerNameEx(claimer);
		   	format(string, sizeof(string), "%s ha intentado tomar el control de %s por %s, será de ellos en %d minutos.", Points[point][PlayerNameCapping], Points[point][Name], szMessage, TIME_TO_TAKEOVER);
			SendClientMessageToAllEx(COLOR_POINTGEN, string);
			if(Points[point][CaptureProccessEx] >= 1)
			{
				Update3DTextLabelText(Points[point][CaptureProccess], COLOR_POINTGEN, string);
				Points[point][CaptureProccessEx] = 2;
			}
			Points[point][TakeOverTimerStarted] = 1;
			Points[point][TakeOverTimer] = 5;
			Points[point][ClaimerId] = INVALID_PLAYER_ID;
			Points[point][ClaimerTeam] = fac;
			Points[point][TimeToClaim] = 0;
			if(Points[point][CaptureTimerEx2] != -1) KillTimer(Points[point][CaptureTimerEx2]);
			Points[point][CaptureTimerEx2] = SetTimerEx("CaptureTimerEx", 60000, 1, "d", point);
		}
	}
	return 1;
}

function ProgressTimer(point)
{
	if (Points[point][ClaimerId] != INVALID_PLAYER_ID && Points[point][TimeToClaim])
	{
	    Points[point][TimeLeft]--;
		SetProgressBarValue(Points[point][PointBarID], GetProgressBarValue(Points[point][PointBarID])-10.0);
		UpdateProgressBar(Points[point][PointBarID], Points[point][ClaimerId]);
		if(GetProgressBarValue(Points[point][PointBarID]) >= 10) SetTimerEx("ProgressTimer", 1000, 0, "d", point);
		new string[128];
		format(string, sizeof(string), "%s está tratando de capturar el punto, tiempo restante: %d", GetPlayerNameEx(Points[point][ClaimerId]), Points[point][TimeLeft]);
		if(Points[point][TimeLeft] == 9) Points[point][CaptureProgress] = CreateDynamic3DTextLabel(string, COLOR_RED, Points[point][Pointx], Points[point][Pointy], Points[point][Pointz]+1.0, 10.0);
		else if(Points[point][TimeLeft] < 9 && Points[point][TimeLeft] >= 0) UpdateDynamic3DTextLabelText(Points[point][CaptureProgress], COLOR_RED, string);
		if(GetProgressBarValue(Points[point][PointBarID]) == 50.0)
		{
		    SetProgressBarColor(Points[point][PointBarID], COLOR_YELLOW);
		    UpdateProgressBar(Points[point][PointBarID], Points[point][ClaimerId]);
		}
		else if(GetProgressBarValue(Points[point][PointBarID]) == 20.0)
		{
		    SetProgressBarColor(Points[point][PointBarID], COLOR_RED);
		    UpdateProgressBar(Points[point][PointBarID], Points[point][ClaimerId]);
		}
		else if(GetProgressBarValue(Points[point][PointBarID]) <= 0.0 && Points[point][TimeLeft] <= 0)
		{
		    CaptureTimer(point);
		    Points[point][TimeLeft] = 0;
		    DestroyProgressBar(Points[point][PointBarID]);
		    DestroyDynamic3DTextLabel(Points[point][CaptureProgress]);
		}
	}
	else
	{
	    DestroyProgressBar(Points[point][PointBarID]);
	    DestroyDynamic3DTextLabel(Points[point][CaptureProgress]);
	    Points[point][ClaimerId] = INVALID_PLAYER_ID;
		Points[point][TimeToClaim] = 0;
	}
	return 1;
}

function CaptureTimerEx(point)
{
	new string[128],fac;
	if (Points[point][TakeOverTimerStarted])
	{
		fac = Points[point][ClaimerTeam];
		if(fac >= 9)
		{
  			switch(fac)
  			{
  				case 9: szMessage = "Mafia Rusa";
				case 10: szMessage = "Mafia Italiana";
  				case 11: szMessage = "Grove Street";
  				case 12: szMessage = "Ballas";
 				case 13: szMessage = "Los Santos Vagos";
				default: return 1;
			}
		}
		if (Points[point][TakeOverTimer] > 0)
		{
			Points[point][TakeOverTimer]--;
			format(string, sizeof(string), "%s ha intentado tomar el control de %s por %s, será de ellos en %d minutos!",
			Points[point][PlayerNameCapping], Points[point][Name], szMessage, Points[point][TakeOverTimer]);
			Update3DTextLabelText(Points[point][CaptureProccess], COLOR_POINTGEN, string);
		}
		else
		{
			Points[point][ClaimerTeam] = INVALID_PLAYER_ID;
			Points[point][TakeOverTimer] = 0;
			Points[point][TakeOverTimerStarted] = 0;
			Points[point][Announced] = 0;
			Points[point][Vulnerable] = NEW_VULNERABLE;
			Delete3DTextLabel(Points[point][CaptureProccess]);
			Points[point][CaptureProccessEx] = 0;
			strmid(Points[point][Owner], szMessage, 0, 32, 32);
			strmid(Points[point][CapperName], Points[point][PlayerNameCapping], 0, 32, 32);
			format(string, sizeof(string), "%s ha tomado correctamente el control de %s por %s.", Points[point][CapperName], Points[point][Name], Points[point][Owner]);
			SendClientMessageToAllEx(COLOR_POINTGEN, string);
			UpdatePoints();
			KillTimer(Points[point][CaptureTimerEx2]);
			Points[point][CaptureTimerEx2] = -1;
		}
	}
	return 1;
}

ChequearHora()
{
	new hora, minuto, segundo;
	gettime(hora, minuto, segundo);
	SetWorldTime(hora);
	SetTimer("HoraPunto", 30000, 1);
	return 1;
}

function RepararHora(hora){
	hora = cambiartiempo+hora;
	if(hora < 0){
		hora = hora+24;
	}
	else if(hora > 23){
		hora = hora-24;
	}
	cambiarhora = hora;
}

function HoraPunto()
{
	new hora, minuto, segundo;
	gettime(hora, minuto, segundo);
	if(minuto == 0){
		if(EstaHora == 1) { EstaHora = 0; return 0; }
		EstaHora=1;
		SetWorldTime(hora);
		return 1;
	}
	EstaHora = 0;
	return 0;
}

// CHECK VIP EXPIRE
CheckVIPExpire(playerid)
{
	new year, month,day;
	getdate(year, month, day);
	if(Info[playerid][pVIP] == 0){
	   Info[playerid][pVIPDateD] = -1;
	   Info[playerid][pVIPDateM] = -1;
	   return 1;
	}
	if(Info[playerid][pVIPDateD] >= 1 && Info[playerid][pVIPDateM] >= 1){
		if(Info[playerid][pVIP] >= 1)
		{
			if(day >= Info[playerid][pVIPDateD] && Info[playerid][pVIPDateM] == 12 && month != 12)
			{
	    	    //print("DEBUG: DICIEMBRE EXPLOIT [CheckVIPExpire]");
				Info[playerid][pVIPDateD] = -1;
				Info[playerid][pVIPDateM] = -1;
				Info[playerid][pVIP] = 0;
				return SendClientMessageEx(playerid, COLOR_VIP, "SERVER: {FFFFFF}Tu VIP ha expirado, puedes hacer tu renovación ahora mismo.");
			}
			if(day >= Info[playerid][pVIPDateD] && month >= Info[playerid][pVIPDateM]){
	            //print("DEBUG: NORMAL [CheckVIPExpire]");
				Info[playerid][pVIPDateD] = -1;
				Info[playerid][pVIPDateM] = -1;
				Info[playerid][pVIP] = 0;
				return SendClientMessageEx(playerid, COLOR_VIP, "SERVER: {FFFFFF}Tu VIP ha expirado, puedes hacer tu renovación ahora mismo.");
			}
			if(Info[playerid][pVIPDateD] >= 30 && month > Info[playerid][pVIPDateM]){
			    //print("DEBUG: Si es 30 y pasó el mes [CheckVIPExpire]");
				Info[playerid][pVIPDateD] = -1;
				Info[playerid][pVIPDateM] = -1;
				Info[playerid][pVIP] = 0;
				return SendClientMessageEx(playerid, COLOR_VIP, "SERVER: {FFFFFF}Tu VIP ha expirado, puedes hacer tu renovación ahora mismo.");
			}
		}
	}
	return 1;
}
stock IsWAAVehicle(veh)
{
new model = GetVehicleModel(veh);
switch(model)
{
    case 558,559,560,561,562,565: return 1;
}
return 0;
}

function RadioBroadCast(playerid, color, string[])
{
new MiscString[128], Float: aaaPositions[3];
foreach(Player, i)
{
	if(Info[i][pRadioFreq] == Info[playerid][pRadioFreq] && Info[i][pRadio] >= 1 && gRadio[i] != 0)
	{
		GetPlayerPos(i, aaaPositions[0], aaaPositions[1], aaaPositions[2]);
		format(MiscString, sizeof(MiscString), "** Radio (%d khz) ** %s: %s", Info[playerid][pRadioFreq], GetPlayerNameEx(playerid), string);
		SendClientMessageEx(i, PUBLICRADIO_COLOR, MiscString);
		format(MiscString, sizeof(MiscString), "(radio) %s", string);
		SetPlayerChatBubble(playerid,MiscString,COLOR_WHITE,15.0,5000);
	}
}
}

function ShowRol(playerid)
{
if(ShowRules[playerid] == 1)
{
    switch(RulesTime[playerid])
    {
        case 1:
        {
            ClearChatbox(playerid);
        	PuedeD[playerid] = 1;
        	SetTimerEx("TutRolTimer", 14000, 0, "d", playerid);
        	gOoc[playerid] = 1; gNews[playerid] = 1; gFam[playerid] = 1; gNewbie[playerid]=1;
        	SetPlayerVirtualWorld(playerid, playerid+1);
        	TogglePlayerControllable(playerid, 0);
			Streamer_UpdateEx(playerid,370.0804,-2087.8767,7.8359);
			SetPlayerPos(playerid,370.0804,-2087.8767,-10.0);
			SetPlayerCameraPos(playerid,423.3802,-2067.7915,29.8605);
			SetPlayerCameraLookAt(playerid,370.0804,-2087.8767,7.8359);
        	SendClientMessageEx(playerid, COLOR_WHITE, "Hola! al parecer no sabes los terminos de Role Play y no tienes idea de como rolear.");
        	SendClientMessageEx(playerid, COLOR_WHITE, "Un administrador te envió y ahora tienes que leer atentamente, todo lo que te diré.");
        	SendClientMessageEx(playerid, COLOR_WHITE, "Bien comenzaremos con algo muy importante pulsa la tecla ESPACIO para seguir.");

		}
        case 2:
        {
            ClearChatbox(playerid);
        	PuedeD[playerid] = 1;
        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
        	SendClientMessageEx(playerid, COLOR_GENERAL, "DeathMatch [DM]");
        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Qué es DeathMatch [DM]? Bueno esto se llama a matar o golpear a una persona sin una razón lógica.");
        	SendClientMessageEx(playerid, COLOR_WHITE, "Por ejemplo, estás caminando, de pronto ves a una persona y comienzas a dispararle o golpearle");
        	SendClientMessageEx(playerid, COLOR_WHITE, "hasta matarlo, la persona te reportará y tu puedes ser encarcelado por 10 a 30 minutos.");
        	SendClientMessageEx(playerid, COLOR_WHITE, "Entonces tu no puedes hacer esto, por que estarias haciendo DeathMatch y va en contra las reglas del servidor.");
        }
        case 3:
        {
            ClearChatbox(playerid);
        	PuedeD[playerid] = 1;
        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
        	SendClientMessageEx(playerid, COLOR_GENERAL, "Metagaming [MG]");
        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Qué es Metagaming [MG]? Es usar información OOC dentro de IC o viceversa ¿No te quedo muy claro no?");
        	SendClientMessageEx(playerid, COLOR_WHITE, "bueno, como verás cada usuario tiene un nombre en su cabeza, es obvio que en la vida real no pasa lo mismo");
        	SendClientMessageEx(playerid, COLOR_WHITE, "para saber su nombre tienes que preguntarle; Hola ¿Cual es tu nombre? y el te responderá, desde ese momento ya");
        	SendClientMessageEx(playerid, COLOR_WHITE, "puedes llamarlo por su nombre. También es usar signos de caracteres en el chat IC (xD, :), xP, etc).");
        }
        case 4:
        {
            ClearChatbox(playerid);
        	PuedeD[playerid] = 1;
        	SetTimerEx("TutRolTimer", 13000, 0, "d", playerid);
        	SendClientMessageEx(playerid, COLOR_GENERAL, "In Character - Out of Character (IC - OOC)");
        	SendClientMessageEx(playerid, COLOR_WHITE, "IC : Es la información que tu personaje obtiene en su vida (In Game), y sólo tu personaje la sabe.");
        	SendClientMessageEx(playerid, COLOR_WHITE, "OOC: Es la información que tu sabes como persona, la que está manejando el personaje desde tu computador.");
        	SendClientMessageEx(playerid, COLOR_WHITE, "Por eso es que no puedes mezclar información IC con OOC o viceversa. Por que estarías haciendo Metagaming.");
        }
        case 5:
        {
            ClearChatbox(playerid);
        	PuedeD[playerid] = 1;
        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
        	SendClientMessageEx(playerid, COLOR_GENERAL, "Powergaming [PG]");
        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Qué es Powergaming [PG]? Esto se llama a realizar actos (roles) ficticios y fuera de lo posible en la vida real.");
        	SendClientMessageEx(playerid, COLOR_WHITE, "Por ejemplo, Usas el comando /me se tira del edificio y sige caminando. Es lógico que tu no vas a tirarte");
        	SendClientMessageEx(playerid, COLOR_WHITE, "de un quinto piso y salir vivo no?. También es obligar/forzar a una persona hacer un ROL.");
        	SendClientMessageEx(playerid, COLOR_WHITE, "Por ejemplo, usando el comando /me le roba su dinero y se va corriendo. Imposible, para rolear tienes que tener criterio.");
        	SendClientMessageEx(playerid, COLOR_WHITE, "Recuerda eres un personaje REAL y tienes que portate como tal.");
        }
        case 6:
        {
            ClearChatbox(playerid);
        	PuedeD[playerid] = 1;
        	SetTimerEx("TutRolTimer", 14000, 0, "d", playerid);
        	SendClientMessageEx(playerid, COLOR_GENERAL, "Revenge Kill (RK)");
        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Qué es Revenge Kill [RK]? Cuando `mueres´ en un ROL (Asalto a un banco, guerra de pandillas, etc)");
        	SendClientMessageEx(playerid, COLOR_WHITE, "tu no puedes regresar al mismo lugar y vengarte a por quien te mató, ya que tu exactamente no mueres, resultas herido");
        	SendClientMessageEx(playerid, COLOR_WHITE, "y cuando te recuperas no recuerdas nada, entonces no puedes volver al mismo lugar, ya que no recuerdas nada.");
        }
        case 7:
        {
            ClearChatbox(playerid);
        	PuedeD[playerid] = 1;
        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
        	SendClientMessageEx(playerid, COLOR_GENERAL, "Bad Driving (BD) - Badly Parked Car (BPC)");
        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Qué es Bad Driving (BD) y Badly Parked Car (BPC)?");
        	SendClientMessageEx(playerid, COLOR_WHITE, "Esto es muy sencillo y creo que su mismo nombre lo dice, se llama a manejar incorrectamente (por las veredas, atropellando gente, etc),");
        	SendClientMessageEx(playerid, COLOR_WHITE, "y es en contra las reglas del servidor, recuerda que estás simulando la vida real.");
        	SendClientMessageEx(playerid, COLOR_WHITE, "Badly Parked Car se define en estacionar tu vehiculo de una manera imposible, o No-RP, por ejemplo en medio del asfalto.");
        }
        case 8:
        {
            ClearChatbox(playerid);
        	PuedeD[playerid] = 1;
        	SetTimerEx("TutRolTimer", 15000, 0, "d", playerid);
        	SendClientMessageEx(playerid, COLOR_GENERAL, "Car Kill - Car Jack");
        	SendClientMessageEx(playerid, COLOR_WHITE, "¿Car Kill (CK) y Car Jack (CJ)?");
        	SendClientMessageEx(playerid, COLOR_WHITE, " * Car Kill es matar a una persona atropellandolo en varias ocaciones hasta matarlo.");
        	SendClientMessageEx(playerid, COLOR_WHITE, " * Car Jack es sacar a una persona de su auto sin ningún rol alguno.");
        	SendClientMessageEx(playerid, COLOR_WHITE, " * Esos 2 Terminos son en contra del servidor y puedes ser castigado.");
        }
        case 9:
        {
            ClearChatbox(playerid);
        	PuedeD[playerid] = 1;
        	SetTimerEx("TutRolTimer", 14000, 0, "d", playerid);
        	SendClientMessageEx(playerid, COLOR_GENERAL, "Fin - Reglas de Rol");
        	SendClientMessageEx(playerid, COLOR_WHITE, "Bien, espero que hayas aprendido en este resumen de las reglas de nuestro servidor, puedes entrar a nuestro");
        	SendClientMessageEx(playerid, COLOR_WHITE, "foro (www.newparadise-rp.net) y buscar más información, ahora volverás a tu posición anterior, no perderás nada.");
        	SendClientMessageEx(playerid, COLOR_WHITE, "Recuerda siempre que más importante es el rol de un presonaje. Bienvenido y disfruta del servidor!");
        }
        case 10:
        {
            ClearChatbox(playerid);
            gNewbie[playerid]=1; gOoc[playerid] = 0; gNews[playerid] = 0; gFam[playerid] = 0; RulesTime[playerid] = 0; RulesTime[playerid] = 0;
			SetPlayerPos(playerid, GetPVarFloat(playerid, "rOldX"), GetPVarFloat(playerid, "rOldY"), GetPVarFloat(playerid, "rOldZ"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "rOldVW"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "rOldInt"));
			Info[playerid][pVW] = GetPVarInt(playerid, "rOldVW");
			Info[playerid][pInt] = GetPVarInt(playerid, "rOldInt");
	        TogglePlayerControllable(playerid, 1);
	        ClearAnimations(playerid);
	        SetCameraBehindPlayer(playerid);
        }
	}
}
return 1;
}
function TutRolTimer(playerid)
{
	PuedeD[playerid] = 0;
	GameTextForPlayer(playerid, "Pulsa ESPACIO", 2000, 3);
}

// Crea y destruye el textdraw, ya no se quedará en la memoria. (Optimización)
CreateTextDrawTutorial(playerid)
{
	TextTut[playerid] =
	TextDrawCreate			(175.500000, 160.719985, "Bienvenido");
	TextDrawLetterSize		(TextTut[playerid], 0.212498, 1.532799);
	TextDrawAlignment		(TextTut[playerid], 1);
	TextDrawColor			(TextTut[playerid], -1);
	TextDrawSetShadow		(TextTut[playerid], 0);
	TextDrawSetOutline		(TextTut[playerid], 1);
	TextDrawBackgroundColor	(TextTut[playerid], 51);
	TextDrawFont			(TextTut[playerid], 1);
	TextDrawSetProportional	(TextTut[playerid], 1);
	TextDrawShowForPlayer	(playerid, TextTut[playerid]);
}
DestroyTextDrawTutorial(playerid)
{
    TextDrawHideForPlayer	(playerid, TextTut[playerid]);
	TextDrawDestroy			(TextTut[playerid]);
}
function Tutorial_Inside(playerid) // Tutorial optimizado
{
	//new string[512];
	if(TutStep[playerid] == 1)
	{
		if(TutTime[playerid] >= 1)
		{
			switch (TutTime[playerid])
			{
				case 1:
				{
				    PuedeP[playerid] = 1;
				    SetTimerEx("PuedePTimer", 1000, 0, "d", playerid);
					ClearChatbox(playerid);
				    CreateTextDrawTutorial(playerid);
					//for(new p = 0; p < 4; p++){ TextDrawShowForPlayer(playerid, TutTxt[p]); }
				    gOoc[playerid] = 1; gNews[playerid] = 1; gFam[playerid] = 1; gNewbie[playerid]=1;
                    InterpolateCameraPos(playerid, 1510.230834, -1761.214599, 19.413635, 1499.926391, -1519.013916, 72.000236, 30000);
                    InterpolateCameraLookAt(playerid, 1505.975952, -1763.835693, 19.573764, 1498.190551, -1522.416015, 68.773422, 30000);
					SetPlayerPos(playerid,1534.972290,-1820.798828,13.624375);
                    Streamer_UpdateEx(playerid,2845.2327,-1461.8414,51.0380);
                    SetPlayerVirtualWorld(playerid, 0);
                    TogglePlayerControllable(playerid, 0);
	    			/*format(string, sizeof(string), 		"Bienvenido, este servidor es un modo de Juego roleplay y es muy importante~n~\
														 que te registres y visites nuestro foro para que obtengas informacion que~n~\
														 necesites, tambien recuerda que tenemos administradores que pueden ayudarte~n~\
														 en cualquier duda o problema que tengas.~n~\
														 Puedes usar el comando /duda para hacer una pregunta a nuestro staff.");
					TextDrawSetString(TextTut[playerid], string);*/

				}
				case 2:
				{
				    PuedeP[playerid] = 1;
				    SetTimerEx("PuedePTimer", 10000, 0, "d", playerid);
                    InterpolateCameraPos(playerid, 2118.889648, -2389.305908, 65.143508, 2257.763183, -2209.496337, 48.792484, 19000);
                    InterpolateCameraLookAt(playerid, 2121.107421, -2385.109375, 63.571720, 2253.640380, -2211.496337, 46.791851, 18000);
					SetPlayerPos(playerid,2188.049316,-2211.125000,13.546875);
                    Streamer_UpdateEx(playerid,1769.8887,-1871.8536,39.2158);
					/*format(string, sizeof(string), 		"Existen muchas formas de generar dinero con los trabajos disponibles que~n~\
														tiene la ciudad, nosotros recomendamos el trabajo de Camionero o el de~n~\
														Repartidor de Pizzas para comenzar. Puedes buscar trabajos con ~y~/jobs.~n~~n~\
														~h~~w~Puedes usar el comando /ayuda para mas informacion.");
					TextDrawSetString(TextTut[playerid], string);*/
				}
				case 3:
				{
				    PuedeP[playerid] = 1;
				    SetTimerEx("PuedePTimer", 10000, 0, "d", playerid);
                    InterpolateCameraPos(playerid, 1320.648193, -2074.060546, 100.968078, 1137.735595, -2101.710205, 112.133247, 15000);
                    InterpolateCameraLookAt(playerid, 1316.315429, -2072.731445, 98.855964, 1140.827148, -2098.650146, 109.667877, 15000);
                    SetPlayerPos(playerid,680.0389,-1206.6534,39.5605);
                    Streamer_UpdateEx(playerid,680.0389,-1206.6534,39.5605);
					/*format(string, sizeof(string), 		"Existen familias y bandas dentro de la ciudad, puedes pertenecer a una~n~\
														 buscandolos dentro del juego y tratar de unirte a ellos.~n~\
														 Ellos siempre estan pendientes en obtener la posecion de los puntos~n~\
	 													 para poder generar dinero y llevar su grupo a lo mas alto.");
					TextDrawSetString(TextTut[playerid], string);*/
				}
				case 4:
				{
				    PuedeP[playerid] = 1;
				    SetTimerEx("PuedePTimer", 10000, 0, "d", playerid);
                    InterpolateCameraPos(playerid, 541.527160, -1230.325195, 42.663070, 532.780639, -1247.847900, 31.736938, 3000);
                    InterpolateCameraLookAt(playerid, 545.425476, -1232.507812, 40.418163, 534.120239, -1252.348266, 30.018779, 3000);
                    SetPlayerPos(playerid,538.5880,-1301.7081,38.8664);
                    Streamer_UpdateEx(playerid,538.5880,-1301.7081,38.8664);
					/*format(string, sizeof(string), 		"Hay Concesionarios donde puedes comprar un vehiculo cuando tengas dinero,~n~\
														 solo tienes que subir a un vehiculo del lugar y seguir las indicaciones~w~.~n~\
														 Es posible tener 2 vehiculos, recuerda que existen seguros que puedes comprar~n~\
														 en las tiendas ~y~24/7~w~.");
					TextDrawSetString(TextTut[playerid], string);*/
				}
				case 5:
				{
				    PuedeP[playerid] = 1;
				    SetTimerEx("PuedePTimer", 10000, 0, "d", playerid);
                    SetPlayerPos(playerid,1387.5209,-1269.4641,37.1565);
	                InterpolateCameraPos(playerid, 2756.770996, -1992.645141, 42.654777, 2812.219970, -2021.566284, 65.725746, 18000);
                    InterpolateCameraLookAt(playerid, 2759.638183, -1995.776245, 40.013545, 2809.670654, -2021.590454, 61.424545, 18000);
	                Streamer_UpdateEx(playerid,1387.5209,-1269.4641,37.1565);
					/*format(string, sizeof(string), 		"Aburrido? Divertirte con tus amigos jugando basquet ball en la cancha~n~\
														 de seville, solo necesitas comprar una pelota para poder jugar~n~\
														  ~n~~n~\
														 ~w~ ~r~");
					TextDrawSetString(TextTut[playerid], string);*/
				}
				case 6:
				{
				    PuedeP[playerid] = 1;
				    SetTimerEx("PuedePTimer", 8000, 0, "d", playerid);
                    SetPlayerPos(playerid,2257.4529,-1677.5936,36.3233);
                    InterpolateCameraPos(playerid, 2283.090087, -1648.484375, 32.701992, 2263.932617, -1657.526977, 24.980293, 3000);
                    InterpolateCameraLookAt(playerid, 2278.778076, -1646.055786, 31.989580, 2259.914306, -1659.860595, 23.134399, 3000);
                    Streamer_UpdateEx(playerid,2257.4529,-1677.5936,36.3233);
					/*format(string, sizeof(string), 		"Si necesitas cambiarte de ropa o quieres accesorios puedes buscar las tiendas de~n~\
														 ropa, hay muchas tiendas de ropa, puedes diferenciarlas por el icono de un~n~\
														 Jersey azul de cada tienda.~n~~n~\
														 ~b~Comandos: ~w~/cropa y /ctoys.");
					TextDrawSetString(TextTut[playerid], string);*/
				}
				case 7:
				{
				    PuedeP[playerid] = 1;
				    SetTimerEx("PuedePTimer", 10000, 0, "d", playerid);
                    Streamer_UpdateEx(playerid, 1564.1481,-1673.1346,52.0905);
                    InterpolateCameraPos(playerid, 1505.785156, -1651.219726, 54.730693, 1512.489868, -1685.406860, 38.450412, 3000);
                    InterpolateCameraLookAt(playerid, 1508.276123, -1648.697875, 51.204315, 1516.743652, -1684.369262, 36.036163, 3000);
                    SetPlayerPos(playerid, 1564.1481,-1673.1346,52.0905);
					/*format(string, sizeof(string), 		"Las fuerzas de la ley estan disponibles para la tranquilidad de cada ciudadano,~n~\
														 si cometes un crimen puedes quedar como buscado en el sistema del gobierno o~n~\
														 ser arrestado, puedes contactar ~b~(Nick Azul) ~w~con ellos en el juego.~n~~n~\
														 Tambien puedes aplicar en el foro para ser parte de ellos.");
					TextDrawSetString(TextTut[playerid], string);*/
				}
				case 8:
				{
				    PuedeP[playerid] = 1;
				    SetTimerEx("PuedePTimer", 8000, 0, "d", playerid);
                    Streamer_UpdateEx(playerid,1156.5229,-1305.4490,40.5471);
                    SetPlayerPos(playerid, 1156.5229,-1305.4490,40.5471);
                    InterpolateCameraPos(playerid, 1235.336547, -1271.328369, 44.204849, 1217.069946, -1322.292968, 23.143884, 3000);
                    InterpolateCameraLookAt(playerid, 1230.445678, -1270.524414, 43.546611, 1212.148681, -1322.622070, 22.323394, 3000);
					/*format(string, sizeof(string), 		"Si tu resultas herido puedes usar /aceptar muerte o /servicios y esperar~n~\
														 por una ambulancia de SAMC. Ellos confiscaran tus armas.~n~\
														 Puedes unirte a ellos contactandolos ~h~~r~(Nick Rosado) ~w~en el juego.~n~~n~\
														 Tambien puedes aplicar en el foro para ser parte de ellos.");
					TextDrawSetString(TextTut[playerid], string);*/
				}
				case 9:
				{
				    PuedeP[playerid] = 1;
				    SetTimerEx("PuedePTimer", 8000, 0, "d", playerid);
                    TogglePlayerControllable(playerid, 0);
                    Streamer_UpdateEx(playerid,1496.9926,-1665.6772,14.0469);
                    SetPlayerPos(playerid,1827.8040,-1242.0441,95.7729);
					SetPlayerCameraPos(playerid,1989.4022,-1173.5736,64.4201);
					SetPlayerCameraLookAt(playerid,1827.8040,-1242.0441,95.7729);
					/*format(string, sizeof(string), 		"~r~Reglas - Resumen~n~\
														 ~w~| No DeathMatch - No matar personas sin razon alguna.~n~\
														 | No PowerGaming - No hacer cosas imposibles en el juego.~n~\
														 | No desconectarse en una situacion de Rol Play.");
					TextDrawSetString(TextTut[playerid], string);*/
				}
				case 10:
				{   Streamer_UpdateEx(playerid,-2679.5342,1639.0643,65.8865);
					SetPlayerPos(playerid,1827.8040,-1242.0441,95.7729);
					SetPlayerCameraPos(playerid,1989.4022,-1173.5736,64.4201);
					SetPlayerCameraLookAt(playerid,1827.8040,-1242.0441,95.7729);
				    PuedeP[playerid] = 1;
				    SetTimerEx("PuedePTimer", 8000, 0, "d", playerid);
					/*format(string, sizeof(string), 		 "~n~ Informacion~n~\
														 ~w~Este servidor es dedicado a los usuarios y todo esta hecho por y para usuarios.~n~\
														 tan solo buscamos un servidor estable y jugable para todo el mundo, sin pensar .~n~\
														 en dinero,la administracion te manda un cordial saludo");
					TextDrawSetString(TextTut[playerid], string);*/
				}
				case 11:
				{
				    PuedeP[playerid] = 1;
				    SetTimerEx("PuedePTimer", 8000, 0, "d", playerid);
                    SetPlayerPos(playerid,1827.8040,-1242.0441,95.7729);
					SetPlayerCameraPos(playerid,1989.4022,-1173.5736,64.4201);
					SetPlayerCameraLookAt(playerid,1827.8040,-1242.0441,95.7729);
                    /*format(string, sizeof(string),          "~w~Dar las gracias a quien hace posible todo esto.~n~\
                                                                                             | ~y~Scripter: 	~w~Gabriel-Benjamin-Asuna~n~\
                                                                                             | ~y~Fundador: 	~w~Benjamin Martinez~n~\
                                                                                             | ~y~Hoster & Web:   ~w~Julio Contreras~n~\
                                                                                             | ~y~Agradecimientos: ~w~ZenonCity - NGG RP.");
					TextDrawSetString(TextTut[playerid], string);*/
				}
				case 12:
				{
				    PuedeP[playerid] = 1;
				    SetTimerEx("PuedePTimer", 8000, 0, "d", playerid);
				    SetPlayerPos(playerid,1827.8040,-1242.0441,95.7729);
					SetPlayerCameraPos(playerid,1989.4022,-1173.5736,64.4201);
					SetPlayerCameraLookAt(playerid,1827.8040,-1242.0441,95.7729);
					/*format(string, sizeof(string), 		"Fin de la introduccion, esperamos que tengas una idea de como funciona este servidor~n~\
														 y como puedes aprovechar al maximo la experiencia del Role Play.~n~\
														 Si tienes otra duda puedes ingresar a nuestro foro que esta abajo.~n~\
														 Si ves algun jugador sospechoso no dudes en reportarlo, usando el comando~n~\
														 ~y~/re id razon~w~.");
					TextDrawSetString(TextTut[playerid], string);*/
				}
				case 13:
				{
				    PuedeP[playerid] = 0;
	          		gOoc[playerid] = 0; 	gNews[playerid] = 0;
					gFam[playerid] = 0; 	TutStep[playerid] = 0;
					gNewbie[playerid]=0;	Muted[playerid] = 0;
					StopAudioStreamForPlayer(playerid);
					TutTime[playerid] = 0;
		           	SetPosEx(playerid, 1714.9517,-1881.5029,13.5666,0,0,0);
		           	GivePlayerCash(playerid,4500);
                    SendClientMessageEx(playerid, COLOR_WHITE, "¡Bienvenido a "COL_GENERAL"New Paradise RolePlay!");
		           	SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}* Para ayuda sobre comandos utiliza "COL_GENERAL"'/ayuda'");
                    SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}* Puedes buscar empleo, debes utilizar el comando "COL_GENERAL"'/trabajos'");
                    /*if(CheckPlayerForSobeit[playerid] == 0)
					{
					    CheckForSobeitDelayTimer[playerid] = SetTimerEx("CheckForSobeitDelay", 3000, false, "i", playerid);
					    CheckForSobeit1Timer[playerid] = SetTimerEx("CheckForSobeit1", 50, true, "i", playerid);
					    TogglePlayerControllable(playerid, false);
                    }*/
					Info[playerid][pWRestricted] = 1; Info[playerid][pTut] = 1;
	          		Info[playerid][pTimePayDay] = 0; Info[playerid][pLevel] = 1;
		           	TogglePlayerControllable(playerid, 1);
		           	SetPlayerVirtualWorld(playerid, 0);
		           	ClearAnimations(playerid);
		            SetCameraBehindPlayer(playerid);
                    LoadObjects(playerid);
                    HideNecesidades(playerid);
                    ShowNecesidades(playerid);
                    TextDrawHideForPlayer(playerid, TDIntro[0]);
					TextDrawHideForPlayer(playerid, TDIntro[1]);
					TextDrawHideForPlayer(playerid, TDIntro[2]);
					TextDrawHideForPlayer(playerid, TDIntro[3]);
					TextDrawShowForPlayer(playerid, TDHUD[0]);
					TextDrawShowForPlayer(playerid, TDHUD[1]);
	            }
			}
		}
	}
	return 1;
}

stock AdminOnDuty(const playerid)
{
	if(Info[playerid][pAdminDuty] == 1) return 1;
	return 0;
}
stock IsPlayerConnectedEx(const playerid)
{
	if(IsPlayerConnected(playerid) && gPlayerLogged{playerid} == 1) return 1;
	return 0;
}
public OnPlayerInteriorChange(playerid,newinteriorid,oldinteriorid)
{
if(IsPlayerConnectedEx(playerid) && gPlayerSpawned[playerid] && GetPVarInt(playerid, "EventToken") == 0){
	Info[playerid][pInt] = newinteriorid;
}
Streamer_Update(playerid);
}

hackerTrigger(playerid,newweapon)
{
	if(!IsPlayerConnectedEx(playerid)) { return 1; }
	if(Info[playerid][pTut] == 0) { return 1; }
	if(GetPVarInt(playerid, "IsInArena") == 1) { return 1; }
	new	reason[94],string[94];
	format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" {FFFFFF}%s fue kickeado por cheat de armas (%s).", GetPlayerNameEx(playerid), WeaponNames[newweapon]);
	ABroadCast(COLOR_GENERAL,string, 2);
	format(reason, sizeof(reason), "Weapon Hacking (%s).", WeaponNames[newweapon]);
	Expulsar(playerid);
	return 1;
}

stock scriptBan(playerid, reason[]){
new ip[32], aString[128];
Info[playerid][pBanned] = 2;
format(aString, sizeof(aString), "SERVER: %s fue baneado, razón: %s", GetPlayerNameEx(playerid), reason);
SendClientMessageToAllEx(COLOR_LIGHTRED, aString);
GetPlayerIp(playerid,ip,sizeof(ip));
format(aString, sizeof(aString),"SERVER: %s fue baneado, razón: %s (IP: %d)", GetPlayerNameEx(playerid), reason, ip);
Log("logs/ban.log", aString);
Expulsar(playerid);
return 1;
}

OnPlayerChangeWeapon(playerid, newweapon)
{
if(InsideMainMenu[playerid] == 1) { Kick(playerid); }
if(IsPlayerConnectedEx(playerid))
{
	if(GetPVarInt(playerid, "EventToken") == 0 && GetPVarInt(playerid, "IsInArena") == 0 && !TestGunLic[playerid])
	{
		if(GetPlayerWeapon(playerid) >= 1 && GetPlayerState(playerid) == 1)
		{
		//if(Info[playerid][pWeapons][0] != 1 && GetPlayerWeapon(playerid) == 1) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][1] != 2 && GetPlayerWeapon(playerid) == 2) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][1] != 3 && GetPlayerWeapon(playerid) == 3) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][1] != 4 && GetPlayerWeapon(playerid) == 4) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][1] != 5 && GetPlayerWeapon(playerid) == 5) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][1] != 6 && GetPlayerWeapon(playerid) == 6) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][1] != 7 && GetPlayerWeapon(playerid) == 7) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][1] != 8 && GetPlayerWeapon(playerid) == 8) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][1] != 9 && GetPlayerWeapon(playerid) == 9) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][2] != 22 && GetPlayerWeapon(playerid) == 22) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][2] != 23 && GetPlayerWeapon(playerid) == 23) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][2] != 24 && GetPlayerWeapon(playerid) == 24) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][3] != 25 && GetPlayerWeapon(playerid) == 25) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][3] != 26 && GetPlayerWeapon(playerid) == 26) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][3] != 27 && GetPlayerWeapon(playerid) == 27) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][4] != 28 && GetPlayerWeapon(playerid) == 28) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][4] != 29 && GetPlayerWeapon(playerid) == 29) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][4] != 32 && GetPlayerWeapon(playerid) == 32) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][5] != 30 && GetPlayerWeapon(playerid) == 30) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][5] != 31 && GetPlayerWeapon(playerid) == 31) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][6] != 33 && GetPlayerWeapon(playerid) == 33) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][6] != 34 && GetPlayerWeapon(playerid) == 34) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][7] != 35 && GetPlayerWeapon(playerid) == 35) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][7] != 36 && GetPlayerWeapon(playerid) == 36) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][7] != 37 && GetPlayerWeapon(playerid) == 37) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][7] != 38 && GetPlayerWeapon(playerid) == 38) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][8] != 16 && GetPlayerWeapon(playerid) == 16) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][8] != 17 && GetPlayerWeapon(playerid) == 17) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][8] != 18 && GetPlayerWeapon(playerid) == 18) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][8] != 39 && GetPlayerWeapon(playerid) == 39) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][9] != 41 && GetPlayerWeapon(playerid) == 41) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][9] != 42 && GetPlayerWeapon(playerid) == 42) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][9] != 43 && GetPlayerWeapon(playerid) == 43) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][10] != 10 && GetPlayerWeapon(playerid) == 10) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][10] != 11 && GetPlayerWeapon(playerid) == 11) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][10] != 12 && GetPlayerWeapon(playerid) == 12) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][10] != 13 && GetPlayerWeapon(playerid) == 13) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][10] != 14 && GetPlayerWeapon(playerid) == 14) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][10] != 15 && GetPlayerWeapon(playerid) == 15) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][11] != 44 && GetPlayerWeapon(playerid) == 44) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][11] != 45 && GetPlayerWeapon(playerid) == 45) hackerTrigger(playerid,newweapon);
		//if(Info[playerid][pWeapons][11] != 46 && GetPlayerWeapon(playerid) == 46) hackerTrigger(playerid,newweapon);
		if(Info[playerid][pWeapons][12] != 40 && GetPlayerWeapon(playerid) == 40) hackerTrigger(playerid,newweapon);
		}
	}
}
}
stock fcreate(filename[]){
if (fexist(filename)) return false;
new File:fhnd;
fhnd=fopen(filename,io_write);
if (fhnd) {
	fclose(fhnd);
	return true;
}
return false;
}

function splits(const strsrc[], strdest[][], delimiter)
{
new i, li;
new aNum;
new len;
while(i <= strlen(strsrc)){
	if(strsrc[i]==delimiter || i==strlen(strsrc)){
		len = strmid(strdest[aNum], strsrc, li, i, 128);
		strdest[aNum][len] = 0;
		li = i+1;
		aNum++;
	}
	i++;
}
return 1;
}

IsKeyJustDown(key, newkeys, oldkeys)
{
if((newkeys & key) && !(oldkeys & key)) return 1;
return 0;
}

function DrinkCooldown(playerid)
{
SetPVarInt(playerid, "DrinkCooledDown", 1);
return 1;
}

function ClearMarriage(playerid)
{
if(IsPlayerConnectedEx(playerid))
{
	new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "Nadie");
	strmid(Info[playerid][pMarriedTo], string, 0, strlen(string), 255);
	Info[playerid][pMarried] = 0;
}
return 1;
}

function ClearHouse(houseid)
{
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hSafeMoney] = 0;
	HouseInfo[houseid][hPot] = 0;
	HouseInfo[houseid][hCrack] = 0;
	HouseInfo[houseid][hMaterials] = 0;
	HouseInfo[houseid][hWeapons][0] = 0;
	HouseInfo[houseid][hWeapons][1] = 0;
	HouseInfo[houseid][hWeapons][2] = 0;
	HouseInfo[houseid][hWeapons][3] = 0;
	HouseInfo[houseid][hWeapons][4] = 0;
	HouseInfo[houseid][hMunicion][0] = 0;
	HouseInfo[houseid][hMunicion][1] = 0;
	HouseInfo[houseid][hMunicion][2] = 0;
	HouseInfo[houseid][hMunicion][3] = 0;
	HouseInfo[houseid][hMunicion][4] = 0;
}

Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ,  Float:ObjX, Float:ObjY, Float:ObjZ,  Float:FrX, Float:FrY, Float:FrZ)
{
	new Float:TGTDistance;
	// get distance from camera to target
	TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

	new Float:tmpX, Float:tmpY, Float:tmpZ;

	tmpX = FrX * TGTDistance + CamX;
	tmpY = FrY * TGTDistance + CamY;
	tmpZ = FrZ * TGTDistance + CamZ;

	return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
	}

	stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
	{
	new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
	GetPlayerCameraPos(playerid, cx, cy, cz);
	GetPlayerCameraFrontVector(playerid, fx, fy, fz);
	return (radius >= DistanceCameraTargetToLocation(cx, cy, cz, x, y, z, fx, fy, fz));
}

stock GetVehicleSpeed(vehicleid)
{
	new Float:V[3];
	GetVehicleVelocity(vehicleid, V[0], V[1], V[2]);
	return floatround(floatsqroot(V[0] * V[0] + V[1] * V[1] + V[2] * V[2]) * 180.00);
}

IsValidIP(ip[])
{
	new a;
	for (new i = 0; i < strlen(ip); i++)
	{
		if (ip[i] == '.')
		{
		    a++;
		}
	}
	if (a != 3)
	{
	    return 1;
	}
	return 0;
}

CheckBan(ip[])
{
	new string[20];
	new File: file = fopen("ban.cfg", io_read);
	while(fread(file, string))
	{
	    if (strcmp(ip, string, true, strlen(ip)) == 0)
	    {
	        fclose(file);
		    return 1;
    	}
	}
	fclose(file);
	return 0;
}

AddBan(ip[])
{
if (CheckBan(ip) == 0)
{
	new File: file = fopen("ban.cfg", io_append);
	new string[20];
	format(string, sizeof(string), "\n%s", ip);
 	fwrite(file, string);
 	fclose(file);
 	foreach(Player, playerid)
	{
	    new playerIP[16];
		GetPlayerIp(playerid, playerIP, sizeof(playerIP));
		if (strcmp(playerIP, ip) == 0)
		{
		    return Expulsar(playerid);
		}
	}
	return 1;
}
return 0;
}

RemoveBan(ip[])
{
if (CheckBan(ip) == 1)
{
    new string[20];
	new File: file = fopen("ban.cfg", io_read);
	fcreate("tempBan.cfg");
	new File: file2 = fopen("tempBan.cfg", io_append);
	while(fread(file, string))
	{
		if (strcmp(ip, string, true, strlen(ip)) != 0 && strcmp("\n", string) != 0)
	    {
			fwrite(file2, string);
		}
	}
	fclose(file);
	fclose(file2);
	file = fopen("ban.cfg", io_write);
	file2 = fopen("tempBan.cfg", io_read);
	while(fread(file2, string))
	{
		fwrite(file, string);
	}
	fclose(file);
	fclose(file2);
	fremove("tempBan.cfg");
	return 1;
}
return 0;
}
/*public OnPlayerCleoDetected(playerid, cleoid)
{
    switch( cleoid )
    {
        case CLEO_CARWARP:
        {
			new string[256];
			format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s fue expulsado automáticamente, razón: Cleo Hacks",GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
            return Expulsar(playerid);
        }
        case CLEO_CARSWING:
        {
			new string[256];
			format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s fue expulsado automáticamente, razón: Cleo Hacks",GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
            return Expulsar(playerid);
        }
        case CLEO_CAR_PARTICLE_SPAM:
        {
			new string[256];
			format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s fue expulsado automáticamente, razón: Cleo Hacks",GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
            return Expulsar(playerid);
        }
    }
    return 1;
}*/
public OnVehicleMod(playerid, vehicleid, componentid)
{
    new vehicleide = GetVehicleModel(vehicleid);
    new modok = islegalcarmod(vehicleide, componentid);
    if (!modok)
	{
	    new string[300];
	    format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s fue baneado automáticamente, razón: Mod Crasher",GetPlayerNameEx(playerid));
	    SendClientMessageToAllEx(COLOR_LIGHTRED, string);
        //DestroyVehicle(vehicleid);
        SetVehicleToRespawn(vehicleid);
        printf(string);
        Info[playerid][pBanned] = 2;
        new ip[32];
        GetPlayerIp(playerid,ip,sizeof(ip));
        AddBan(ip);
        Expulsar(playerid);
    }
    return 1;
}
public OnPlayerPickUpPickup(playerid, pickupid)
{
    if(pickupid == Talararbol[0])
    {
        if(GetPVarInt(playerid,"Lena") == 0) return SendClientMessage(playerid,COLOR_GREY, "* Primero debes comenzar a talar (usa /talar).");
        if (talar[playerid] == 1)
        {
            ClearAnimations(playerid);
			ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,1,0,0,0,11000);
            Tiempotalar[playerid] = SetTimerEx("espera",4000,false,"i", playerid);
            Azar1 = random(sizeof(Maderaazar));
            gcorte[playerid] += Maderaazar[Azar1][0];
            lena2[playerid] += Maderaazar[Azar1][0];
			CorteX+=Maderaazar[Azar1][0];
			CorteY+=Maderaazar[Azar1][0];
			CorteY ++;
            TrabajoL[playerid] = true;
            SetTimerEx("arbol1",4000,false,"i", playerid);
            lena1[playerid] = 1;
            talar[playerid] = 0;
        }
    }
    else if(pickupid == Talararbol[1])
    {
        if(GetPVarInt(playerid,"Lena") == 0) return SendClientMessage(playerid,COLOR_GREY, "* Primero debes comenzar a talar (usa /talar).");
        if (talar[playerid] == 1)
        {
            ClearAnimations(playerid);
			ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,1,0,0,0,11000);
			Tiempotalar[playerid] = SetTimerEx("espera",4000,false,"i", playerid);
            Azar1 = random(sizeof(Maderaazar));
            gcorte[playerid] += Maderaazar[Azar1][0];
            lena2[playerid] += Maderaazar[Azar1][0];
			CorteX+=Maderaazar[Azar1][0];
			CorteY+=Maderaazar[Azar1][0];
			CorteY ++;
            TrabajoL[playerid] = true;
            SetTimerEx("arbol2",4000,false,"i", playerid);
            lena1[playerid] = 1;
            talar[playerid] = 0;
        }
    }
    else if(pickupid == Talararbol[2])
    {
        if(GetPVarInt(playerid,"Lena") == 0) return SendClientMessage(playerid,COLOR_GREY, "* Primero debes comenzar a talar (usa /talar).");
        if (talar[playerid] == 1)
        {
            ClearAnimations(playerid);
			ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,1,0,0,0,11000);
			Tiempotalar[playerid] = SetTimerEx("espera",4000,false,"i", playerid);
            Azar1 = random(sizeof(Maderaazar));
    	    gcorte[playerid] += Maderaazar[Azar1][0];
            lena2[playerid] += Maderaazar[Azar1][0];
			CorteX+=Maderaazar[Azar1][0];
			CorteY+=Maderaazar[Azar1][0];
			CorteY ++;
            TrabajoL[playerid] = true;
            SetTimerEx("arbol3",4000,false,"i", playerid);
            lena1[playerid] = 1;
            talar[playerid] = 0;
        }
    }
    else if(pickupid == Talararbol[3])
    {
        if(GetPVarInt(playerid,"Lena") == 0) return SendClientMessage(playerid,COLOR_GREY, "* Primero debes comenzar a talar (usa /talar).");
        if (talar[playerid] == 1)
        {
            ClearAnimations(playerid);
			ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,1,0,0,0,11000);
            Tiempotalar[playerid] = SetTimerEx("espera",4000,false,"i", playerid);
            Azar1 = random(sizeof(Maderaazar));
            gcorte[playerid] += Maderaazar[Azar1][0];
            lena2[playerid] += Maderaazar[Azar1][0];
            CorteX+=Maderaazar[Azar1][0];
            CorteY+=Maderaazar[Azar1][0];
            CorteY ++;
            TrabajoL[playerid] = true;
            SetTimerEx("arbol4",4000,false,"i", playerid);
            lena1[playerid] = 1;
            talar[playerid] = 0;
        }
    }
	else if(pickupid == Talararbol[4])
    {
        if(GetPVarInt(playerid,"Lena") == 0) return SendClientMessage(playerid,COLOR_GREY, "* Primero debes comenzar a talar (usa /talar).");
        if (talar[playerid] == 1)
        {
            ClearAnimations(playerid);
			ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,1,0,0,0,11000);
			Tiempotalar[playerid] = SetTimerEx("espera",4000,false,"i", playerid);
            Azar1 = random(sizeof(Maderaazar));
            gcorte[playerid] += Maderaazar[Azar1][0];
            lena2[playerid] += Maderaazar[Azar1][0];
            CorteX+=Maderaazar[Azar1][0];
            CorteY+=Maderaazar[Azar1][0];
            CorteY ++;
            TrabajoL[playerid] = true;
            SetTimerEx("arbol5",4000,false,"i", playerid);
            lena1[playerid] = 1;
            talar[playerid] = 0;
        }
    }
    if(pickupid == lena)
	{
		if(lena1[playerid] == 1)
		{
			new string[256];
			ClearAnimations(playerid);
	 		DisablePlayerCheckpoint(playerid);
			lena1[playerid] = 0;
			ApplyAnimation(playerid,"PED","IDLE_tired",4.1,1,0,0,0,2500);
			talar[playerid] = 1;
			gcorte[playerid] = 0;
			format(string, sizeof(string), "* %s se agacha y seguidamente deja los troncos",GetPlayerNameEx(playerid));
		    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			//format(string, sizeof(string), "[Leñador] Has entregado %d troncos de madera en total, al finalizar recibiras $%d por tu trabajo.",lena2[playerid], lena2[playerid]* 2);
            //SendClientMessageEx(playerid, COLOR_GREY, string);

			for(new x2;x2<MAX_PLAYERTOYS;x2++)
	    	{
		        RemovePlayerAttachedObject(playerid, x2);
		        SetPlayerAttachedObject(playerid,9,341,6,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000);
        	}
		}
    }
    if(pickupid == picarescombros[0])
    {
        if(GetPVarInt(playerid,"Miner") == 0) return SendClientMessage(playerid,COLOR_GREY, "* Primero debes comenzar a picar escombros (usa /picar).");
        if(picando[playerid] == 1)
        {
			new rands;
            ClearAnimations(playerid);
			ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,11000);
            hands[playerid] = SetTimerEx("hand",9800,false,"i",playerid);
            rands = random(sizeof(randommine));
            escombros[playerid] += randommine[rands][0];
            escombrost[playerid] += randommine[rands][0];
            entregare[playerid] = 1;
            picando[playerid] = 0;
        }
    }
    else if(pickupid == picarescombros[0])
    {
        if(GetPVarInt(playerid,"Miner") == 0) return SendClientMessage(playerid,COLOR_GREY, "* Primero debes comenzar a picar escombros (usa /picar).");
        if(picando[playerid] == 1)
        {
			new rands;
            ClearAnimations(playerid);
			ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,11000);
            hands[playerid] = SetTimerEx("hand",9800,false,"i",playerid);
            rands = random(sizeof(randommine));
            escombros[playerid] += randommine[rands][0];
            escombrost[playerid] += randommine[rands][0];
            entregare[playerid] = 1;
            picando[playerid] = 0;
        }
    }
    else if(pickupid == picarescombros[1])
    {
        if(GetPVarInt(playerid,"Miner") == 0) return SendClientMessage(playerid,COLOR_GREY, "* Primero debes comenzar a picar escombros (usa /picar).");
        if(picando[playerid] == 1)
        {
			new rands;
            ClearAnimations(playerid);
			ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,11000);
            hands[playerid] = SetTimerEx("hand",9800,false,"i",playerid);
            rands = random(sizeof(randommine));
            escombros[playerid] += randommine[rands][0];
            escombrost[playerid] += randommine[rands][0];
            entregare[playerid] = 1;
            picando[playerid] = 0;
        }
    }
    else if(pickupid == picarescombros[2])
    {
        if(GetPVarInt(playerid,"Miner") == 0) return SendClientMessage(playerid,COLOR_GREY, "* Primero debes comenzar a picar escombros (usa /picar).");
        if(picando[playerid] == 1)
        {
			new rands;
            ClearAnimations(playerid);
			ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,11000);
            hands[playerid] = SetTimerEx("hand",9800,false,"i",playerid);
            rands = random(sizeof(randommine));
            escombros[playerid] += randommine[rands][0];
            escombrost[playerid] += randommine[rands][0];
            entregare[playerid] = 1;
            picando[playerid] = 0;
        }
    }
    else if(pickupid == picarescombros[3])
    {
        if(GetPVarInt(playerid,"Miner") == 0) return SendClientMessage(playerid,COLOR_GREY, "* Primero debes comenzar a picar escombros (usa /picar).");
        if(picando[playerid] == 1)
        {
			new rands;
            ClearAnimations(playerid);
			ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,11000);
            hands[playerid] = SetTimerEx("hand",9800,false,"i",playerid);
            rands = random(sizeof(randommine));
            escombros[playerid] += randommine[rands][0];
            escombrost[playerid] += randommine[rands][0];
            entregare[playerid] = 1;
            picando[playerid] = 0;
        }
    }
    else if(pickupid == picarescombros[4])
    {
        if(GetPVarInt(playerid,"Miner") == 0) return SendClientMessage(playerid,COLOR_GREY, "* Primero debes comenzar a picar escombros (usa /picar).");
        if(picando[playerid] == 1)
        {
			new rands;
            ClearAnimations(playerid);
			ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,1,0,0,1,11000);
            hands[playerid] = SetTimerEx("hand",9800,false,"i",playerid);
            rands = random(sizeof(randommine));
            escombros[playerid] += randommine[rands][0];
            escombrost[playerid] += randommine[rands][0];
            entregare[playerid] = 1;
            picando[playerid] = 0;
        }
    }
    if(pickupid == eescombros)
    {
        if(entregare[playerid] == 1)
        {
			new string [256];
            ClearAnimations(playerid);
			ApplyAnimation(playerid,"PED","IDLE_tired",4.1,1,0,0,0,2500);
			format(string, sizeof(string), "* %s inclina la carretilla y deja los escombros",GetPlayerNameEx(playerid));
		    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            if(IsPlayerAttachedObjectSlotUsed(playerid,7)) RemovePlayerAttachedObject(playerid,7);
            if(IsPlayerAttachedObjectSlotUsed(playerid,8)) RemovePlayerAttachedObject(playerid,8);
            if(IsPlayerAttachedObjectSlotUsed(playerid,9)) RemovePlayerAttachedObject(playerid,9);
            SetPlayerAttachedObject(playerid,9, 18634, 14, 0.333391, 0.000000, 0.042249, 358.219909, 268.014739, 170.032974, 2.003867, 1.764811, 1.579773);
            entregare[playerid] = 0;
            picando[playerid] = 1;
            escombros[playerid] = 0;
        }
    }
    if(pickupid == ticketR)
    {
    	GameTextForPlayer(playerid,"",3000,3);
    }
    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{
    if(Info[playerid][pConnectTime] <= 2)
    {
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("NoobDM", 5000, false, "d", playerid);
		return 0;
	}
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid)
{
	new w = weaponid;
	if(issuerid != INVALID_PLAYER_ID)
	{
		static Float:SacarVida;
		GetPlayerHealth(playerid, SacarVida);
		if(AdvertenciaAviso[playerid]) return 1;
		new zone[MAX_ZONE_NAME];
		GetPlayer3DZone(playerid, zone, sizeof(zone));
		format(szMessage, sizeof(szMessage), "** Central: Se informa de disturbios en %s. Acudir a calmar la situación lo antes posible.", zone);
		SendFamilyMessage(1, TEAM_RADIO_COLOR, szMessage);
		AdvertenciaAviso[playerid] = true;
		SetTimerEx("AvisoTirosTimer", 60000, false, "d", playerid);
		if(w == 22 || w == 23 || w == 24 || w == 31 || w == 30 || w == 25 || w == 27 || w == 33 || w == 34 || w == 32 || w == 28 || w == 29)
		{
			SetPlayerDrunkLevel(playerid, 500000);
			SleepEx(10000);
			SetPlayerDrunkLevel(playerid, 0);
		}
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	new pCurWeap = GetPlayerWeapon(playerid), Float:x, Float:y, Float:z;
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		GetPlayerPos(playerid, x, y, z);
		SetPVarFloat(playerid, "pACPX", x);
		SetPVarFloat(playerid, "pACPY", y);
		SetPVarFloat(playerid, "pACPZ", z);
	}
	else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    GetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);
	    SetPVarFloat(playerid, "pACVX", x);
		SetPVarFloat(playerid, "pACVY", y);
		SetPVarFloat(playerid, "pACVZ", z);
	}
	if(GetPVarInt(playerid, "Injured") == 1) SetPlayerArmedWeapon(playerid, 0);
	if(pCurWeap != pCurrentWeapon[playerid])
	{
	    OnPlayerChangeWeapon(playerid, pCurWeap);
	    pCurrentWeapon[playerid] = pCurWeap;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    if(GetVehicleSpeed(GetPlayerVehicleID(playerid)) > 300 && !IsAPlane(GetPlayerVehicleID(playerid)))
	    {
	        format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s fue expulsado automáticamente, razón: Speed Hack", GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_LIGHTRED, szMessage);
			Expulsar(playerid);
		}
	    if(Speedlimit[playerid])
	    {
			new a, b, c;
			GetPlayerKeys(playerid, a, b ,c);
 			if(a == 8 && GetVehicleSpeed(GetPlayerVehicleID(playerid)) > Speedlimit[playerid])
 			{
 				new newspeed = GetVehicleSpeed(GetPlayerVehicleID(playerid)) - Speedlimit[playerid];
				ModifyVehicleSpeed(GetPlayerVehicleID(playerid), -newspeed);
 			}
		}
	}
	return 1;
}

function restartTimer()
{
	iGMXTick--;
	switch(iGMXTick)
	{
	    case 0:
		{
		    GameTextForAll("~w~Es servidor va ser reiniciado ahora...", 9000, 5);
		    SendClientMessageToAllEx(COLOR_LIGHTRED, "[Administración]{FFFFFF} Es servidor ha sido reiniciado, porfavor vuelve a re-conectarte.");
			KillTimer(iGMXTimer);
			SendRconCommand("exit");
	    }
	    case 1: GameTextForAll("~w~El servidor sera reseteado en~n~ ~r~1~w~ segundo.", 1110, 5);
	    case 2: GameTextForAll("~w~El servidor sera reseteado en~n~ ~r~2~w~ segundos.", 1110, 5);
	    case 3: GameTextForAll("~w~El servidor sera reseteado en~n~ ~r~3~w~ segundos.", 1110, 5);
	    case 4: GameTextForAll("~w~El servidor sera reseteado en~n~ ~r~4~w~ segundos.", 1110, 5);
	    case 5: GameTextForAll("~w~El servidor sera reseteado en~n~ ~r~5~w~ segundos.", 1110, 5);
	}
	return 1;
}

function SyncPlayerTime(playerid)
{
new hour, minute, second;
gettime(hour, minute, second);
SetPlayerTime(playerid, hour, minute);
return 1;
}

Random(min, max)
{
new a = random(max - min) + min;
return a;
}

LoadObjects(playerid)
{
    TogglePlayerControllable(playerid, 0);
    ShowInfoForPlayer(playerid, "~w~ Cargando objetos... ~n~~r~Espera un momento", 3000);
	SetPVarInt(playerid, "LoadingObjects", 1);
	return SetTimerEx("SafeLoadObjects", 4000, 0, "d", playerid);
}

function MessageTaxiDriver(job, color, string[])
{
	foreach(Player, i)
	{
		if(job == 9 && TaxiOnDuty[i] 	> 0 && (Info[i][pJob] == 3 || Info[i][pJob2] == 3 || Info[i][pTaxiLicense] == 1 ))
		{
			SendClientMessageEx(i, color, string);
		}
	}
}

stock SendJobMessage(job, color, string[])
{
foreach(Player, i)
{
	if(Info[i][pJob] == job || Info[i][pJob2] == job)
	{
		SendClientMessageEx(i, color, string);
	}
}
}

IsPlayerInInvalidNosVehicle( playerid )
{
switch(GetVehicleModel(GetPlayerVehicleID(playerid))) {
	case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449: return 1;
}
return 0;
}
/* CAR SYSTEM BY CLICKED */
stock CreatePlayerVehicle(playerid, playervehicleid, modelid, Float: x, Float: y, Float: z, Float: angle, color1, color2, price)
{
	new s[10], pnamep[MAX_PLAYER_NAME];
	format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
	if(PlayerVehicleInfo[playervehicleid][pvId] == INVALID_PLAYER_VEHICLE_ID)
	{
    	PlayerCars++;
    	PlayerVehicleInfo[playervehicleid][pvOwner] = pnamep;
		PlayerVehicleInfo[playervehicleid][pvModelId] = modelid;
		PlayerVehicleInfo[playervehicleid][pvPosX] = x;
		PlayerVehicleInfo[playervehicleid][pvPosY] = y;
		PlayerVehicleInfo[playervehicleid][pvPosZ] = z;
		PlayerVehicleInfo[playervehicleid][pvPosAngle] = angle;
		PlayerVehicleInfo[playervehicleid][pvVW] = GetPlayerVirtualWorld(playerid);
		PlayerVehicleInfo[playervehicleid][pvColor1] = color1;
		PlayerVehicleInfo[playervehicleid][pvColor2] = color2;
		PlayerVehicleInfo[playervehicleid][pvPark] = 1;
		PlayerVehicleInfo[playervehicleid][pvPrice] = price;
		PlayerVehicleInfo[playervehicleid][pvFuel] = 300;
		PlayerVehicleInfo[playervehicleid][pvLock] = 0;
		PlayerVehicleInfo[playervehicleid][pvImpounded] = 0;
		PlayerVehicleInfo[playervehicleid][pvHealth] = 1000.0;
		PlayerVehicleInfo[playervehicleid][pvStereo] = 0;
		PlayerVehicleInfo[playervehicleid][pvSpawned] = 1;
		PlayerVehicleInfo[playervehicleid][pvEnVenta] = 0;
		PlayerVehicleInfo[playervehicleid][pvEnVentaP] = 0;
		PlayerVehicleInfo[playervehicleid][pvEqSound] = 0;
		for(new m = 0; m < MAX_MODS; m++)
	    {
	    	PlayerVehicleInfo[playervehicleid][pvMods][m] = 0;
		}
		new carcreated = CreateVehicle(modelid,x,y,z,angle,color1,color2,-1);
		PlayerVehicleInfo[playervehicleid][pvId] = carcreated;
		SetVehicleVirtualWorld(carcreated, PlayerVehicleInfo[playervehicleid][pvVW]);
		format(s, sizeof(s), "NPRP %d", PlayerVehicleInfo[playervehicleid][pvNumberPlate]);
		SetVehicleNumberPlate(carcreated, s);
		return carcreated;
	}
	return INVALID_PLAYER_VEHICLE_ID;
}

stock DestroyPlayerVehicle(playerid, playervehicleid)
{
    new playername[MAX_PLAYER_NAME];
	format(playername, sizeof(playername), "%s", GetPlayerNameEx(playerid));
	if(strcmp(PlayerVehicleInfo[playervehicleid][pvOwner], playername) == 0)
	{
		if(PlayerVehicleInfo[playervehicleid][pvModelId])
		{
	    	PlayerCars--;
			DestroyVehicle(PlayerVehicleInfo[playervehicleid][pvId]);
			PlayerVehicleInfo[playervehicleid][pvModelId] = 0;
			PlayerVehicleInfo[playervehicleid][pvPosX] = 0.0;
			PlayerVehicleInfo[playervehicleid][pvPosY] = 0.0;
			PlayerVehicleInfo[playervehicleid][pvPosZ] = 0.0;
			PlayerVehicleInfo[playervehicleid][pvPosAngle] = 0.0;
			PlayerVehicleInfo[playervehicleid][pvVW] = 0;
			PlayerVehicleInfo[playervehicleid][pvPaintJob] = -1;
			PlayerVehicleInfo[playervehicleid][pvColor1] = 126;
			PlayerVehicleInfo[playervehicleid][pvColor2] = 126;
			PlayerVehicleInfo[playervehicleid][pvPrice] = 0;
			PlayerVehicleInfo[playervehicleid][pvFuel] = 300;
			PlayerVehicleInfo[playervehicleid][pvLock] = 0;
			PlayerVehicleInfo[playervehicleid][pvImpounded] = 0;
			PlayerVehicleInfo[playervehicleid][pvHealth] = 1000.0;
			PlayerVehicleInfo[playervehicleid][pvSpawned] = 0;
			PlayerVehicleInfo[playervehicleid][pvStereo] = 0;
			PlayerVehicleInfo[playervehicleid][pvEnVenta] = 0;
			PlayerVehicleInfo[playervehicleid][pvEnVentaP] = 0;
			PlayerVehicleInfo[playervehicleid][pvEqSound] = 0;
			VehicleFuel[PlayerVehicleInfo[playervehicleid][pvId]] = 300;
			VehicleFuel[playervehicleid] = 300;
			strcpy(PlayerVehicleInfo[playervehicleid][pvAllowPlayer], "Nadie", MAX_PLAYER_NAME);
		    PlayerVehicleInfo[playervehicleid][pvId] = INVALID_PLAYER_VEHICLE_ID;
		    if(PlayerVehicleInfo[playervehicleid][pvAllowedPlayerId] != INVALID_PLAYER_ID)
		    {
		        Info[PlayerVehicleInfo[playervehicleid][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
		        Info[PlayerVehicleInfo[playervehicleid][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
		    	PlayerVehicleInfo[playervehicleid][pvAllowedPlayerId] = INVALID_PLAYER_ID;
			}
		}
	}
}

stock LoadPlayerVehicles(playerid)
{
	new playername[MAX_PLAYER_NAME];
	format(playername, sizeof(playername), "%s", GetPlayerNameEx(playerid));
	new s[10];
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
	{
	    if(strcmp(PlayerVehicleInfo[v][pvOwner], playername) == 0)
	    {
	    	if(PlayerVehicleInfo[v][pvImpounded] >= 2) PlayerVehicleInfo[v][pvImpounded] = 0;
	    	if(PlayerVehicleInfo[v][pvModelId] != 0 && PlayerVehicleInfo[v][pvImpounded] == 0)
	    	{
	        	PlayerCars++;
				new carcreated = CreateVehicle(PlayerVehicleInfo[v][pvModelId], PlayerVehicleInfo[v][pvPosX], PlayerVehicleInfo[v][pvPosY], PlayerVehicleInfo[v][pvPosZ], PlayerVehicleInfo[v][pvPosAngle],PlayerVehicleInfo[v][pvColor1], PlayerVehicleInfo[v][pvColor2], -1);
				PlayerVehicleInfo[v][pvId] = carcreated;
				VehicleFuel[carcreated] = PlayerVehicleInfo[v][pvFuel];
				PlayerVehicleInfo[v][pvSpawned] = 1;
				SetVehicleHealth(carcreated, PlayerVehicleInfo[v][pvHealth]);
				SetVehicleVirtualWorld(carcreated, PlayerVehicleInfo[v][pvVW]);
				format(s, sizeof(s), "NPRP %d", PlayerVehicleInfo[v][pvNumberPlate]);
				SetVehicleNumberPlate(carcreated, s);
				if(PlayerVehicleInfo[v][pvPaintJob] != -1) ChangeVehiclePaintjob(PlayerVehicleInfo[v][pvId], PlayerVehicleInfo[v][pvPaintJob]);
				ChangeVehicleColor(PlayerVehicleInfo[v][pvId], PlayerVehicleInfo[v][pvColor1], PlayerVehicleInfo[v][pvColor2]);
				for(new m = 0; m < MAX_MODS; m++) AddVehicleComponent(PlayerVehicleInfo[v][pvId], PlayerVehicleInfo[v][pvMods][m]);
				if(PlayerVehicleInfo[v][pvLocked] == 1) LockPlayerVehicle(playerid, PlayerVehicleInfo[v][pvId], PlayerVehicleInfo[v][pvLock]);
                if(PlayerVehicleInfo[v][pvEnVenta])
		        {
		            format(szMessage, sizeof(szMessage), "{DF013A}Vehiculo {FFFFFF}usado {DF013A}en venta!\nDueño: {FFFFFF}%s\n{DF013A}Precio: {FFFFFF}$%d\n\nSubete para comprarlo.", PlayerVehicleInfo[v][pvOwner], PlayerVehicleInfo[v][pvEnVentaP]);
					PlayerVehicleInfo[v][pvEnVentaT] = CreateDynamic3DTextLabel(szMessage,-1,0.0, 0.0, 0.0,25.0,INVALID_PLAYER_ID,PlayerVehicleInfo[v][pvId]);
				}
				else { DestroyDynamic3DTextLabel(PlayerVehicleInfo[v][pvEnVentaT]); }
			}
	    	else if(PlayerVehicleInfo[v][pvModelId] == 0 && PlayerVehicleInfo[v][pvImpounded] != 0) PlayerVehicleInfo[v][pvImpounded] = 0;
		}
	}
	LoadAllPlayerVehicleMods(playerid);
}

stock UnloadPlayerVehicles(playerid)
{
	new playername[MAX_PLAYER_NAME];
	format(playername, sizeof(playername), "%s", GetPlayerNameEx(playerid));
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
	{
	    if(strcmp(PlayerVehicleInfo[v][pvOwner], playername) == 0)
	    {
    		if(PlayerVehicleInfo[v][pvImpounded] >= 2) PlayerVehicleInfo[v][pvImpounded] = 0;
    		if(PlayerVehicleInfo[v][pvId] != INVALID_PLAYER_VEHICLE_ID && PlayerVehicleInfo[v][pvImpounded] == 0)
    		{
        		PlayerCars--;
        		PlayerVehicleInfo[v][pvSpawned] = 0;
        		if(LockStatus[PlayerVehicleInfo[v][pvId]] != 0) LockStatus[PlayerVehicleInfo[v][pvId]] = 0;
   	 			UpdatePlayerVehicleMods(v);
   	 			GetVehiclePos(PlayerVehicleInfo[v][pvId], PlayerVehicleInfo[v][pvPosX], PlayerVehicleInfo[v][pvPosY], PlayerVehicleInfo[v][pvPosZ]);
   	 			GetVehicleZAngle(PlayerVehicleInfo[v][pvId], PlayerVehicleInfo[v][pvPosAngle]);
				DestroyVehicle(PlayerVehicleInfo[v][pvId]);
				VehicleFuel[PlayerVehicleInfo[v][pvId]] = 300;
				PlayerVehicleInfo[v][pvId] = INVALID_PLAYER_VEHICLE_ID;
				if(PlayerVehicleInfo[v][pvAllowedPlayerId] != INVALID_PLAYER_ID)
    			{
    				Info[PlayerVehicleInfo[v][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
    	    		Info[PlayerVehicleInfo[v][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
    				PlayerVehicleInfo[v][pvAllowedPlayerId] = INVALID_PLAYER_ID;
				}
				if(PlayerVehicleInfo[v][pvEnVenta]) { DestroyDynamic3DTextLabel(PlayerVehicleInfo[v][pvEnVentaT]); }
    		}
		}
	}
}

stock UpdatePlayerVehicleMods(playervehicleid)
{
	if(PlayerVehicleInfo[playervehicleid][pvImpounded] == 0)
	{
		new carid = PlayerVehicleInfo[playervehicleid][pvId], exhaust, frontbumper, rearbumper, roof, spoilers, sideskirt1, sideskirt2, wheels, hydraulics, nitro, hood, lamps, stereo, ventright, ventleft;
		exhaust = GetVehicleComponentInSlot(carid, CARMODTYPE_EXHAUST);
		frontbumper = GetVehicleComponentInSlot(carid, CARMODTYPE_FRONT_BUMPER);
		rearbumper = GetVehicleComponentInSlot(carid, CARMODTYPE_REAR_BUMPER);
		roof = GetVehicleComponentInSlot(carid, CARMODTYPE_ROOF);
		spoilers = GetVehicleComponentInSlot(carid, CARMODTYPE_SPOILER);
		sideskirt1 = GetVehicleComponentInSlot(carid, CARMODTYPE_SIDESKIRT);
		sideskirt2 = GetVehicleComponentInSlot(carid, CARMODTYPE_SIDESKIRT);
		wheels = GetVehicleComponentInSlot(carid, CARMODTYPE_WHEELS);
		hydraulics = GetVehicleComponentInSlot(carid, CARMODTYPE_HYDRAULICS);
		nitro = GetVehicleComponentInSlot(carid, CARMODTYPE_NITRO);
		hood = GetVehicleComponentInSlot(carid, CARMODTYPE_HOOD);
		lamps = GetVehicleComponentInSlot(carid, CARMODTYPE_LAMPS);
		stereo = GetVehicleComponentInSlot(carid, CARMODTYPE_STEREO);
		ventright = GetVehicleComponentInSlot(carid, CARMODTYPE_VENT_RIGHT);
		ventleft = GetVehicleComponentInSlot(carid, CARMODTYPE_VENT_LEFT);
		if(spoilers >= 1000)    PlayerVehicleInfo[playervehicleid][pvMods][0] = spoilers;
		if(hood >= 1000)        PlayerVehicleInfo[playervehicleid][pvMods][1] = hood;
		if(roof >= 1000)        PlayerVehicleInfo[playervehicleid][pvMods][2] = roof;
		if(sideskirt1 >= 1000)  PlayerVehicleInfo[playervehicleid][pvMods][3] = sideskirt1;
		if(lamps >= 1000)       PlayerVehicleInfo[playervehicleid][pvMods][4] = lamps;
		if(nitro >= 1000)       PlayerVehicleInfo[playervehicleid][pvMods][5] = nitro;
		if(exhaust >= 1000)     PlayerVehicleInfo[playervehicleid][pvMods][6] = exhaust;
		if(wheels >= 1000)      PlayerVehicleInfo[playervehicleid][pvMods][7] = wheels;
		if(stereo >= 1000)      PlayerVehicleInfo[playervehicleid][pvMods][8] = stereo;
		if(hydraulics >= 1000)  PlayerVehicleInfo[playervehicleid][pvMods][9] = hydraulics;
		if(frontbumper >= 1000) PlayerVehicleInfo[playervehicleid][pvMods][10] = frontbumper;
		if(rearbumper >= 1000)  PlayerVehicleInfo[playervehicleid][pvMods][11] = rearbumper;
		if(ventright >= 1000)   PlayerVehicleInfo[playervehicleid][pvMods][12] = ventright;
		if(ventleft >= 1000)    PlayerVehicleInfo[playervehicleid][pvMods][13] = ventleft;
		if(sideskirt2 >= 1000)  PlayerVehicleInfo[playervehicleid][pvMods][14] = sideskirt2;
	}
}

stock LoadAllPlayerVehicleMods(playerid)
{
    new pnamep[MAX_PLAYER_NAME];
    format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
	{
	    if(strcmp(PlayerVehicleInfo[v][pvOwner], pnamep) == 0)
		{
	    	if(PlayerVehicleInfo[v][pvModelId] != 0 && PlayerVehicleInfo[v][pvImpounded] == 0)
	    	{
	        	new paintjob = PlayerVehicleInfo[v][pvPaintJob], color1 = PlayerVehicleInfo[v][pvColor1], color2 = PlayerVehicleInfo[v][pvColor2];
	        	if(PlayerVehicleInfo[v][pvPaintJob] != -1) ChangeVehiclePaintjob(PlayerVehicleInfo[v][pvId], paintjob);
	        	ChangeVehicleColor(PlayerVehicleInfo[v][pvId], color1, color2);
	        	for(new m = 0; m < MAX_MODS; m++) AddVehicleComponent(PlayerVehicleInfo[v][pvId], PlayerVehicleInfo[v][pvMods][m]);
	        }
		}
	}
}

stock GetPlayerFreeVehicleId()
{
	for(new i; i < MAX_PLAYERVEHICLES; ++i)
	{
		if(PlayerVehicleInfo[i][pvModelId] == 0) return i;
	}
	return -1;
}

function VehicleCount(playerid)
{
	new cars = 0, pnamep[MAX_PLAYER_NAME];
	format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
	for(new i = 0; i < MAX_PLAYERVEHICLES; i++)
	{
	    if(strcmp(PlayerVehicleInfo[i][pvOwner], pnamep) == 0)
	    {
			if(PlayerVehicleInfo[i][pvModelId] != 0) cars++;
		}
	}
	return cars;
}

function CheckPlayerVehicleForDesync(playerid, vehicleid)
{
	if(GetVehicleModel(vehicleid) < 400 || GetVehicleModel(vehicleid) > 611)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Error: Desincronización de vehículos detectado, ejecutando sincronización de sus vehículos...");
		UnloadPlayerVehicles(playerid);
		LoadPlayerVehicles(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "Sus vehículos han sido sincronizados con el servidor.");
		return 1;
	}
	return 0;
}

stock GetPlayerVehicle(playerid, vehicleid)
{
	if(!IsPlayerConnectedEx(playerid)) return -1;
	if(!GetVehicleModel(vehicleid)) return -1;
	new pnamep[MAX_PLAYER_NAME];
	format(pnamep, sizeof(pnamep), "%s", GetPlayerNameEx(playerid));
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
	{
		if(strcmp(PlayerVehicleInfo[v][pvOwner], pnamep) == 0)
		{
	    	if(PlayerVehicleInfo[v][pvId] == vehicleid)
	    	{
	        	return v;
			}
	    }
	}
	return -1;
}

stock GetDistancePlayerVeh(playerid, veh)
{
	new Float:Floats[7];
	GetPlayerPos(playerid, Floats[0], Floats[1], Floats[2]);
	GetVehiclePos(veh, Floats[3], Floats[4], Floats[5]);
	Floats[6] = floatsqroot((Floats[3]-Floats[0])*(Floats[3]-Floats[0])+(Floats[4]-Floats[1])*(Floats[4]-Floats[1])+(Floats[5]-Floats[2])*(Floats[5]-Floats[2]));
	return floatround(Floats[6]);
}

stock doesVehicleExist(vehicleid)
{
	if(GetVehicleModel(vehicleid) >= 400)
	{
		return 1;
	}
	return 0;
}

stock IsValidSkin(skinid)
{
	if(skinid < 0 || skinid > 299) return false;
	return true;
}

stock IsPublicSkin(skinid)
{
	if(!IsValidSkin(skinid)) return false;

	switch(skinid)
	{
		case 274 .. 288, 265 .. 267, 71: return false;
	}
	return true;
}
stock GetClosestCar(playerid, exception = INVALID_VEHICLE_ID)
{
	new Float:Distance,target = -1;
	for(new v; v < MAX_VEHICLES; v++) if(doesVehicleExist(v)) {
	    if(v != exception && (target < 0 || Distance > GetDistancePlayerVeh(playerid, v))) {
	        target = v;
	        Distance = GetDistancePlayerVeh(playerid, v);
	    }
	}
	return target;
}

LockPlayerVehicle(ownerid, carid, type)
{
	new v = GetPlayerVehicle(ownerid, carid);
	if(PlayerVehicleInfo[v][pvId] == carid && type == 3)
	{
	    LockStatus[carid] = 1;
	    vehicle_lock_doors(carid);
	}
}

function SetVehicleEngine(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(engine == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "Este vehiculo fue apagado con exito.");
		arr_Engine{vehicleid} = 0;
		TextDrawHideForPlayer(playerid, VelocimetroTDP[playerid][0]);
	    TextDrawHideForPlayer(playerid, VelocimetroTDP[playerid][1]);
	    HideProgressBarForPlayer(playerid, VelocimetroBAR[playerid][0]);
	    HideProgressBarForPlayer(playerid, VelocimetroBAR[playerid][1]);
     	TextDrawHideForPlayer(playerid, VelocimetroTD[0]);
		TextDrawHideForPlayer(playerid, VelocimetroTD[1]);
		TextDrawHideForPlayer(playerid, VelocimetroTD[2]);
		TextDrawHideForPlayer(playerid, VelocimetroTD[3]);
		TextDrawHideForPlayer(playerid, VelocimetroTD[4]);
	}
	else if(engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET)
	{
		new Float: f_vHealth;
		new string[128];
		GetVehicleHealth(vehicleid, f_vHealth);
		if(f_vHealth < 350.0) return SendClientMessageEx(playerid, COLOR_WHITE, "¡Tu motor está averiado! ("COL_BLUE"/servicios"COL_WHITE")");
	    if(VehicleFuel[vehicleid] <= 5) return SendClientMessageEx(playerid, COLOR_WHITE, "¡Tu motor está averiado! ("COL_BLUE"/servicios"COL_WHITE")");
		SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "Este vehiculo fue encendido con exito.");
		arr_Engine{vehicleid} = 1;
		format(string, sizeof(szMessage), "* %s da vuelta la llave del vehículo y lo enciende.", GetPlayerNameEx(playerid));
		NearMsg(playerid, COLOR_PURPLE, string, 15.0);
		TextDrawShowForPlayer(playerid, VelocimetroTDP[playerid][1]);
		TextDrawShowForPlayer(playerid, VelocimetroTDP[playerid][0]);
		ShowProgressBarForPlayer(playerid, VelocimetroBAR[playerid][0]);
		ShowProgressBarForPlayer(playerid, VelocimetroBAR[playerid][1]);
		TextDrawShowForPlayer(playerid, VelocimetroTD[0]);
		TextDrawShowForPlayer(playerid, VelocimetroTD[1]);
		TextDrawShowForPlayer(playerid, VelocimetroTD[2]);
		TextDrawShowForPlayer(playerid, VelocimetroTD[3]);
		TextDrawShowForPlayer(playerid, VelocimetroTD[4]);
	}
	return 1;
}

function Puente(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(engine == VEHICLE_PARAMS_ON)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "* Este vehículo ya se encuentra encendido.");
	}
	else if(engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET)
	{
		new string[128];
		if(VehicleFuel[vehicleid] <= 5) return SendClientMessageEx(playerid, COLOR_WHITE, "* Este vehículo no tiene gasolina.");
		SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
		arr_Engine{vehicleid} = 1;
		SendClientMessageEx(playerid, COLOR_WHITE, "Este vehiculo fue encendido con exito.");
		format(string, sizeof(szMessage), "* %s logra encender el vehículo.", GetPlayerNameEx(playerid));
		NearMsg(playerid, COLOR_PURPLE, string, 15.0);
		TextDrawShowForPlayer(playerid, VelocimetroTDP[playerid][0]);
		TextDrawShowForPlayer(playerid, VelocimetroTDP[playerid][1]);
		ShowProgressBarForPlayer(playerid, VelocimetroBAR[playerid][0]);
		ShowProgressBarForPlayer(playerid, VelocimetroBAR[playerid][1]);
  		TextDrawShowForPlayer(playerid, VelocimetroTD[0]);
		TextDrawShowForPlayer(playerid, VelocimetroTD[1]);
		TextDrawShowForPlayer(playerid, VelocimetroTD[2]);
		TextDrawShowForPlayer(playerid, VelocimetroTD[3]);
		TextDrawShowForPlayer(playerid, VelocimetroTD[4]);
	}
	return 1;
}

SetVehicleLights(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(lights == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
		GameTextForPlayer(playerid, "~w~Luces ~r~Apagadas", 1000, 3);
	}
	else if(lights == VEHICLE_PARAMS_OFF || lights == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
		GameTextForPlayer(playerid, "~w~Luces ~g~Encendidas", 1000, 3);
	}
	return 1;
}

SetVehicleHood(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(bonnet == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
		GameTextForPlayer(playerid, "~w~Capo ~r~Cerrado", 1000, 3);
	}
	else if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
		GameTextForPlayer(playerid, "~w~Capo ~g~Abierto", 1000, 3);
	}
	return 1;
}

SetVehicleTrunk(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(boot == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
		GameTextForPlayer(playerid, "~w~Maletero ~r~Cerrado", 1000, 3);
	}
	else if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
		GameTextForPlayer(playerid, "~w~Maletero ~g~Abierto", 1000, 3);
	}
	return 1;
}

stock IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius)
{
	new Float:Floats[3];
	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

stock GivePlayerCash(playerid, money)
{
	SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")+money);
	GivePlayerMoney(playerid, money);
	return 1;
}

stock ResetPlayerCash(playerid)
{
	SetPVarInt(playerid, "Cash", 0);
	ResetPlayerMoney(playerid);
	return 1;
}
stock SenderName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}
//---------------------------------------------------------

function Banear(playerid)
{
	new string[128];
	new playerip[32];
	format(string, sizeof(string), ""COL_BLUE"Administración >"COL_WHITE" %s (IP:%s) fue baneado razón: Hacks", GetPlayerNameEx(playerid), playerip);
	Log("logs/ban.log", string);
	Info[playerid][pBanned] = 2;
	GetPlayerIp(playerid, playerip, sizeof(playerip));
	AddBan(playerip);
	Expulsar(playerid);
	return 1;
}

function TimerTICKET(playerid)
{
	Vortex[playerid] = 0;
 	RemovePlayerFromVehicle(playerid);
 	return 1;
}


// Función: Otros Timers.
/*timer severTimers[1000]()
{
	if(iAdverTimer >= 1)
		--iAdverTimer;
	foreach(Player, i)
	{
	    SyncPlayerTime(i);
	    if(IsPlayerConnectedEx(i))
	    {
			if(Tied[i] > 0) TogglePlayerControllable(i, 0);
	        if(GetPVarInt(i, "EMSAttempt") == -1) ApplyAnimation(i, "CRACK", "crckidle1",4.0,0,1,1,1,-1);
		    if(CellTime[i] > 0)
			{
				if (CellTime[i] == cchargetime)
				{
					CellTime[i] = 1;
					if(Mobile[Mobile[i]] == i) { CallCost[i] = CallCost[i]+callcost; }
				}
				CellTime[i]++;
				if(Mobile[Mobile[i]] == -1 && CellTime[i] == 5)
				{
				    if(IsPlayerConnectedEx(Mobile[i]))
				    {
						new string[96];
						format(string, sizeof(string), "* El teléfono de %s esta sonando", GetPlayerNameEx(Mobile[i]));
						ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
			if(CellTime[i] == 0 && CallCost[i] > 0)
			{
			    new string[24];
				format(string, sizeof(string), "~w~Costo de llamada %d",CallCost[i]);
				GameTextForPlayer(i, string, 5000, 1);
				GivePlayerCash(i, -CallCost[i]);
				CallCost[i] = 0;
			}
			for(new h = 0; h < sizeof(Points); h++)
			{
				if(IsPlayerInRangeOfPoint(i, 2.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz])){
					if(Points[h][Type] == 3 && Info[i][pPot] < 3){
						GameTextForPlayer(i, "~w~Usa /comprarhierba para comprar algo de ~n~~r~hierba", 5000, 5);
					}
					else if(Points[h][Type] == 1 && GetPVarInt(i, "Packages") == 0){
						GameTextForPlayer(i, "~w~Usa /materiales para comprar ~n~~r~paquetes de materiales.", 5000, 5);
					}
					else if(Points[h][Type] == 4){
						GameTextForPlayer(i, "~w~Usa /comprarcrack para comprar ~n~algo de ~r~crack", 5000, 5);
					}
					else if(Points[h][Type] == 5){
						GameTextForPlayer(i, "~w~Usa /paquete para comprar un ~n~~r~paquete de droga", 5000, 5);
					}
				}
   }
			if(TaxiDriver[i] != -1)
			{
				if(GetPlayerVehicleID(i) == GetPlayerVehicleID(TaxiDriver[i]) )
				{
				    if(TaxiTiempo[i] >= 31)
				    {
				        TaxiTiempo[i] = 1;
				        TaxiCosto[i] += TaxiTarifa[TaxiDriver[i]];
				    }
					TaxiTiempo[i] += 1;
					new string[80];
					format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~%d Seg ~w~- $%d", TaxiTiempo[i], TaxiCosto[i]);
					GameTextForPlayer(i, string, 1200, 3);
					GameTextForPlayer(TaxiDriver[i], string, 1200, 3);
					if(TaxiCosto[i] > GetPlayerCash(i))
					{
					    RemovePlayerFromVehicle(i);
					    new Float:slx, Float:sly, Float:slz;
						GetPlayerPos(i, slx, sly, slz);
						SetPlayerPos(i, slx, sly, slz + 2);
					    GameTextForPlayer(i, "~r~No tienes más dinero para pagar el taxi!", 4000, 4);
					}
				}
			}
			if(IsPlayerInAnyVehicle(i))
			{
				if(GetPlayerState(i) == PLAYER_STATE_DRIVER) SetPlayerArmedWeapon(i, 0);
				else if(Info[i][pWeapons][4] == 0) SetPlayerArmedWeapon(i, 0);
				else SetPlayerArmedWeapon(i, 29);
			}
			if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && JetPack[i] == 0 && Info[i][pAdmin] < 4)
			{
				new string[74 + MAX_PLAYER_NAME];
			    format( string, sizeof( string ), "{E3E4ED}[ATECIÓN]{FFFFFF}: %s (ID %d) es posible que use Cheat de JetPack .", GetPlayerNameEx(i), i);
				ABroadCast( COLOR_GRAD1, string, 2 );
				format(string, sizeof(string), "%s (ID %d) es posible que use Cheat de JetPack.", GetPlayerNameEx(i), i);
				Log("logs/hack.log", string);
			}
			if(IsPlayerInRangeOfPoint(i, 2, 1544.2, -1353.4, 329.4)) { GivePlayerValidWeapon(i, 46); }
		}
	}
}*/
timer severTimers[1000]()
{
	if(iAdverTimer >= 1)
		--iAdverTimer;
	foreach(Player, i)
	{
	    SyncPlayerTime(i);
	    if(IsPlayerConnectedEx(i))
	    {
			if(Tied[i] > 0) TogglePlayerControllable(i, 0);
	        if(GetPVarInt(i, "EMSAttempt") == -1) ApplyAnimation(i, "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);
		    if(CellTime[i] > 0)
			{
				if (CellTime[i] == cchargetime)
				{
					CellTime[i] = 1;
					if(Mobile[Mobile[i]] == i) { CallCost[i] = CallCost[i]+callcost; }
				}
				CellTime[i]++;
				if(Mobile[Mobile[i]] == -1 && CellTime[i] == 5)
				{
				    if(IsPlayerConnectedEx(Mobile[i]))
				    {
						new called[MAX_PLAYER_NAME], string[96];
						GetPlayerName(Mobile[i], called, sizeof(called));
						format(string, sizeof(string), "* El teléfono de %s esta sonando", called);
						ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
			if(CellTime[i] == 0 && CallCost[i] > 0)
			{
			    new string[24];
				format(string, sizeof(string), "~w~Costo de llamada %d",CallCost[i]);
				GameTextForPlayer(i, string, 5000, 1);
				GivePlayerCash(i, -CallCost[i]);
				CallCost[i] = 0;
			}
			for(new h = 0; h < sizeof(Points); h++)
			{
				if(IsPlayerInRangeOfPoint(i, 2.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz])){
					if(Points[h][Type] == 3 && Info[i][pPot] < 3){
						GameTextForPlayer(i, "~w~Usa /comprarhierba para comprar algo de ~n~~r~hierba", 5000, 5);
					}
					else if(Points[h][Type] == 1 && GetPVarInt(i, "Packages") == 0){
						GameTextForPlayer(i, "~w~Usa /materiales para comprar ~n~~r~paquetes de materiales.", 5000, 5);
					}
					else if(Points[h][Type] == 4){
						GameTextForPlayer(i, "~w~Usa /comprarcrack para comprar ~n~algo de ~r~crack", 5000, 5);
					}
					else if(Points[h][Type] == 5){
						GameTextForPlayer(i, "~w~Usa /paquete para comprar un ~n~~r~paquete de droga", 5000, 5);
					}
				}
			}
			if(TaxiDriver[i] != -1)
			{
				if(GetPlayerVehicleID(i) == GetPlayerVehicleID(TaxiDriver[i]) )
				{
				    if(TaxiTiempo[i] >= 31)
				    {
				        TaxiTiempo[i] = 1;
				        TaxiCosto[i] += TaxiTarifa[TaxiDriver[i]];
				    }
					TaxiTiempo[i] += 1;
					new string[80];
					format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~%d Seg ~w~- $%d", TaxiTiempo[i], TaxiCosto[i]);
					GameTextForPlayer(i, string, 1200, 3);
					GameTextForPlayer(TaxiDriver[i], string, 1200, 3);
					if(TaxiCosto[i] > GetPlayerCash(i))
					{
					    RemovePlayerFromVehicle(i);
					    new Float:slx, Float:sly, Float:slz;
						GetPlayerPos(i, slx, sly, slz);
						SetPlayerPos(i, slx, sly, slz + 2);
					    GameTextForPlayer(i, "~r~No tienes más dinero para pagar el taxi!", 4000, 4);
					}
				}
			}
			if(IsPlayerInAnyVehicle(i))
			{
				if(GetPlayerState(i) == PLAYER_STATE_DRIVER) SetPlayerArmedWeapon(i, 0);
				else if(Info[i][pWeapons][4] == 0) SetPlayerArmedWeapon(i, 0);
				else SetPlayerArmedWeapon(i, 29);
			}
			if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && JetPack[i] == 0 && Info[i][pAdmin] < 4)
			{
				new string[74 + MAX_PLAYER_NAME];
			    format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) es posible que use Cheat de JetPack .", GetPlayerNameEx(i), i);
				ABroadCast( COLOR_YELLOW, string, 2 );
				format(string, sizeof(string), "%s (ID %d) es posible que use Cheat de JetPack.", GetPlayerNameEx(i), i);
				Log("logs/hack.log", string);
			}
			if(IsPlayerInRangeOfPoint(i, 2, 1544.2, -1353.4, 329.4)) { GivePlayerValidWeapon(i, 46, 1); }
		}
	}
}

timer severTimers2[1000](){
foreach(Player, i){
    if(IsPlayerConnectedEx(i)){
		if(Info[i][pTimePayDay] >= 0)
		{
			Info[i][pTimePayDay]++;
	    	if(Info[i][pTimePayDay] >= 3600)
			{
				if(Info[i][p_Pr_Time] == 10)
				{
				    SendClientMessageEx(i, COLOR_WHITE, "<!> ¡Ya puedes volver hacer viajes de camionero!");
					Info[i][p_Pr_Time] = 0;
				}
				if(Info[i][pRenting] != INVALID_HOUSE_ID)
				{
					if(Info[i][pNrCuenta] != 0)
					{
						if(HouseInfo[Info[i][pRenting]][hRentFee] > Info[i][pMoneyBank])
						{
							Info[i][pRenting] = INVALID_HOUSE_ID;
							SendClientMessageEx(i, COLOR_WHITE, "* Fuiste desalojado de la casa que rentabas.");
						}
						else
						{
							Info[i][pMoneyBank] -= HouseInfo[Info[i][pRenting]][hRentFee];
						}
					}
					else GivePlayerCash(i, -HouseInfo[Info[i][pRenting]][hRentFee]);
					HouseInfo[Info[i][pRenting]][hSafeMoney] += HouseInfo[Info[i][pRenting]][hRentFee];
					format(szMessage, sizeof(szMessage), "* Has pagado "COL_BLUE"$%d"COL_WHITE" de la renta de la casa donde estás alquilando.", HouseInfo[Info[i][pRenting]][hRentFee]);
					SendClientMessageEx(i, COLOR_WHITE, szMessage);
				}
				Info[i][pRob] = 0;
			    if(Info[i][pDobleExp] == 0){Info[i][pExp] += 1;}
			    else
				{
					Info[i][pExp] += 2;
					Info[i][pDobleExp]--;
					format(szMessage, sizeof(szMessage), "* Ganaste 2 puntos de respeto por tener horas de doble experiencia, te quedan %d horas más.", Info[i][pDobleExp]);
					SendClientMessageEx(i, COLOR_GRAD1, szMessage);
				}
				SendClientMessageEx(i, COLOR_WHITE, "[FACTURA DEL ESTADO SAN ANDREAS]");
                if(Info[i][pBorrowedMoney] != 0)
				{ // pFeesBank pBorrowedMoneyT
				    SendClientMessageEx(i, COLOR_YELLOW, "DEUDA AL BANCO DE LOS SANTOS");
					new pay = (Info[i][pBorrowedMoney] / Info[i][pFeesBank]);
                    format(szMessage, sizeof(szMessage),"  Deuda al banco:  $%d | Cuotas : %d | Interés: $20", Info[i][pBorrowedMoney],Info[i][pFeesBank]);
                    SendClientMessageEx(i, COLOR_GRAD2, szMessage);
					format(szMessage, sizeof(szMessage), " Saldo anterior: 	$%d | "COL_WHITE"Pago Total : -$%d (Deuda + Interés)" ,Info[i][pMoneyBank],pay+20);
					SendClientMessageEx(i, COLOR_GRAD2, szMessage);
                    Info[i][pMoneyBank] -= pay+20;
                    Info[i][pBorrowedMoney] -= pay;
                    Info[i][pFeesBank]--;
                    HideNecesidades(i);
					ShowNecesidades(i);
                    format(szMessage, sizeof(szMessage),"  Dueda actual:  $%d | Cuotas : %d | Interés: $20 | "COL_WHITE"Saldo actual: $%d", Info[i][pBorrowedMoney],Info[i][pFeesBank],Info[i][pMoneyBank]);
                    SendClientMessageEx(i, COLOR_GRAD2, szMessage);
					SendClientMessageEx(i, COLOR_YELLOW, "TRANSACCIÓN CERRADA");
				}
				SendClientMessageEx(i, COLOR_YELLOW, "IMPUESTOS:");
				format(szMessage, sizeof(szMessage),    "  Pago de impuestos: -$%d", TaxValue);
				SendClientMessageEx(i, COLOR_GRAD2, szMessage);
                if(Info[i][pNrCuenta] != 0)
				{
					if(Info[i][pMoneyBank] > TaxValue)
					{
						format(szMessage, sizeof(szMessage), 	"  Saldo anterior: $%d",Info[i][pMoneyBank]);
						SendClientMessageEx(i, COLOR_GRAD2, szMessage);
						if(Info[i][pGunLic] == 1)
						{
                        	SendClientMessageEx(i, COLOR_GRAD2,	"  Pago por adquisición de licencia de armas: $55");
                            Info[i][pMoneyBank] -= 55;
                            Tax += 55;
						}
					    Info[i][pMoneyBank] -= TaxValue;
					    Tax += TaxValue;
					    format(szMessage, sizeof(szMessage), 	"  Saldo actual: $%d",Info[i][pMoneyBank]);
					    SendClientMessageEx(i, COLOR_GRAD2, szMessage);
					}
					else
					{
						if(Info[i][pGunLic] == 1)
						{
                        	SendClientMessageEx(i, COLOR_GRAD2,	"  Pago por adquisición de licencia de armas: $55 (Pendiente)");
							Tax += 55;
							Info[i][pMoneyBank] -= 55;
						}
						Tax += TaxValue;
						Info[i][pMoneyBank] -= TaxValue;
						format(szMessage, sizeof(szMessage), "  El banco pagó los impuestos por ti y ahora debes al banco.");
						SendClientMessageEx(i, COLOR_GRAD2, szMessage);
						format(szMessage, sizeof(szMessage), "  Saldo actual: $%d",Info[i][pMoneyBank]);
						SendClientMessageEx(i, COLOR_GRAD2, szMessage);
					}
				}
				else
				{
					if(Info[i][pGunLic] == 1)
					{
                       	SendClientMessageEx(i, COLOR_GRAD2,	"Pago por adquisición de licencia de armas: $55 (Pendiente)");
                        Info[i][pTaxDeuda] += 55;
					}
					Info[i][pTaxDeuda] += TaxValue;
					SendClientMessageEx(i, COLOR_GRAD2, "* No tienes una cuenta bancaria, por lo tanto estás debiendo dinero al estado.");
					SendClientMessageEx(i, COLOR_GRAD2, "* Cuando quieras sacar una tarjeta deberás pagar lo que debes al banco.");
				}
				SendClientMessageEx(i, COLOR_YELLOW, "- TRANSACCIÓN CERRADA");
				SendClientMessageEx(i, COLOR_WHITE, 		"-------------------------------------------------");
 				Info[i][pTimePayDay] = 0;
 				Info[i][pConnectTime] += 1;
				GameTextForPlayer(i, "~y~1h+~n~~w~de juego", 5000, 1);
				if(Info[i][pConnectTime] == 2)
				{
					Info[i][pWRestricted] = 0;
					SendClientMessageEx(i, COLOR_GRAD2, "SERVER: Cumpliste las 2 horas de juego, la restricción de armas fue eliminada");
				}
				if(Info[i][pAdiccion] > 0) Info[i][pAdiccion] -= 2;
				if(Info[i][pWRestricted] >= 1) Info[i][pWRestricted]--;
			}
		}
		if(GetPlayerPing(i) > MAX_PING)
		{
           	format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s ha sido kickeado por tener %d de ping (máximo: %d).", GetPlayerNameEx(i), GetPlayerPing(i), MAX_PING);
			ABroadCast(COLOR_GENERAL, szMessage, 2);
	        SendClientMessageEx(i, COLOR_GENERAL, "Atención: Has sido expulsado por tener el PING muy elevado.");
   			Expulsar(i);
	    }
		if(Info[i][pJudgeJailType] != 0 && Info[i][pJudgeJailTime] > 0 && !Info[i][pBeingSentenced]) Info[i][pJudgeJailTime]--;
		if(Info[i][pJudgeJailTime] <= 0 && Info[i][pJudgeJailType] != 0) Info[i][pJudgeJailType] = 0;
        if(IsaRent[i] > 0)
		{
			if(RentTime[i] > 0){RentTime[i]--;}
		   	if(RentTime[i] == 0)
			{
		       	RentTime[i] = 0;
		       	if(IsaRent[i] == 1)
				{
					IsaRent[i] = 0;
					new newcar = GetPlayerVehicleID(i);
					if(IsARentCar(newcar))
					{
						SetVehicleToRespawn(HireKey[i]);
						TogglePlayerControllable(i, 1);
					}
				}
			}
		}
		if(CommandSpamUnmute[i] == 0){ CommandSpamTimes[i] = 0;}
		if(Info[i][pADTime] != 0){Info[i][pADTime]--;}
		if(OOCTimer[i] > 0) { OOCTimer[i]--; }
		if(ForzarTimer[i] > 0) { ForzarTimer[i]--; }
		if(Info[i][pServiceTime] != 0) { Info[i][pServiceTime]--; }
		if(Info[i][pSavedTime] != 0) { Info[i][pSavedTime]--; }
		if(VIPTimer[i] > 0){ VIPTimer[i]--; }
		if(GetPlayerCash(i) != GetPlayerMoney(i)){
			ResetMoneyBar(i);
			UpdateMoneyBar(i,GetPVarInt(i, "Cash"));
		}
		if(Info[i][pTriageTime] != 0){Info[i][pTriageTime]--;}
		if(Info[i][pRMuted] > 1)
		{
			if(Info[i][pRMutedTime] > 0){Info[i][pRMutedTime]--;}
		   	else{Info[i][pRMuted] = 0;}
		}
	    if(Info[i][pJailed] > 0){
			if(Info[i][pJailTime] > 0){
				Info[i][pJailTime]--;
				new str[128];
	        	switch(Info[i][pJailed])
				{
	            	case 1, 4: format(str, sizeof(str), "~w~%d segundos (~g~%i~w~ minutos) restantes", Info[i][pJailTime], Info[i][pJailTime]/60);
					case 2, 3, 5, 6: format(str, sizeof(str), "~w~%d segundos (~g~%i~w~ minutos) restantes", Info[i][pJailTime], Info[i][pJailTime]/60);
				}
				GameTextForPlayer(i, str, 2000, 3);
			}
			if(Info[i][pJailTime] <= 0)
			{
			    Info[i][pJailTime] = 0;
			    switch(Info[i][pJailed])
			    {
			        case 2:{
					SetPosEx(i,1605.5861,-1646.6277,13.5469,0,0,0);
					Info[i][pWantedLevel] = 0;
					SetPlayerWantedLevel(i, Info[i][pWantedLevel]);
			        }
			        case 3:{
			 		SetPlayerInterior(i, 0);
			 		Info[i][pInt] = 0;
		 			SetPlayerVirtualWorld(i, 0);
		 			Info[i][pVW] = 0;
		 			SetPlayerPos(i,343.1081,-1521.4404,33.2985);
			        }
			        case 1,4:{
			    	SetPlayerInterior(i, 0);
			    	Info[i][pInt] = 0;
			    	SetPosEx(i,1552.8286,-1674.9845,16.1953,0,0,0);
			        }
			        case 5:{
		 			SetPlayerInterior(i, 0);
		 			Info[i][pInt] = 0;
		 			SetPlayerVirtualWorld(i, 0);
		 			Info[i][pVW] = 0;
		 			SetPlayerPos(i,130.0132,1945.5618,19.3507);
					}
			        case 6:{
		 			SetPlayerInterior(i, 0);
		 			Info[i][pInt] = 0;
		 			SetPlayerVirtualWorld(i, 0);
		 			Info[i][pVW] = 0;
		 			SetPlayerPos(i,614.4990,-585.9028,17.2266);
					}
					case 1000:{
			    	SetPlayerInterior(i, 0);
			    	Info[i][pInt] = 0;
			    	SetPosEx(i,1552.8286,-1674.9845,16.1953,0,0,0);
			    	}
				}
				Info[i][pJailed] = 0;
				PhoneOnline[i] = 0;
				SendClientMessageEx(i, COLOR_GREEN,"Has cumplido tu condena.");
				//GameTextForPlayer(i, "~g~Eres Libre~n~~w~Se mejor persona.", 5000, 1);
				SetPlayerSkin(i, Info[i][pChar]);
				SetPlayerToTeamColor(i);
			}
		}
		if(Info[i][pWantedLevel] > 0){SetPlayerWantedLevel(i, Info[i][pWantedLevel]);}
	    if(UsedFind[i] >= 1){ UsedFind[i]--; }
		if(JustReported[i] != 0){ JustReported[i]--; }
		if(NewbieTimer[i] != 0){ NewbieTimer[i]--; }
	    //if(Info[i][pDudaMute] != 0){ Info[i][pDudaMute]--; }
		if(PlayerTazeTime[i] != 0)
		{
			PlayerTazeTime[i] += 1;
			if(PlayerTazeTime[i] == 15){PlayerTazeTime[i] = 0;}
		}
		if(MechanicCallTime[i] > 0)
		{
			if(MechanicCallTime[i] == 60) { MechanicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Checkpoint eliminado!", 2500, 1); }
			else
			{
			    new string[5];
				format(string, sizeof(string), "%d", 30 - MechanicCallTime[i]);
				GameTextForPlayer(i, string, 1500, 6);
				MechanicCallTime[i] += 1;
			}
		}
		if(MedicCallTime[i] > 0)
		{
			if(MedicCallTime[i] == 45) { MedicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Checkpoint eliminado!", 2500, 1); }
			else
			{
			    new string[5];
				format(string, sizeof(string), "%d", 45 - MedicCallTime[i]);
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(MedicAccepted[i], X, Y, Z);
				SetPlayerCheckpoint(i, X, Y, Z, 5);
				GameTextForPlayer(i, string, 1500, 6);
				MedicCallTime[i] += 1;
			}
		}
		if(EMSCallTime[i] > 0)
		{
	    	if(EMSAccepted[i] < 999)
			{
	        	if(IsPlayerConnectedEx(EMSAccepted[i]))
				{
	            	new Float:X,Float:Y,Float:Z;
	            	GetPlayerPos(EMSAccepted[i], X, Y, Z);
	            	SetPlayerCheckpoint(i, X, Y, Z, 5);
				}
			}
		}
		if(Info[i][pEstado] == 1){
			if(PlayerCuffedTime[i] <= 0){
		    	//Frozen[i] = 0;
		    	SetPVarInt(i, "IsFrozen", 0);
				TogglePlayerControllable(i, 1);
				Info[i][pEstado] = 0;
				SetPVarInt(i, "PlayerCuffed", 0);
				PlayerCuffedTime[i] = 0;
				PlayerTazeTime[i] = 1;
				ClearAnimations(i);
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(i, X, Y, Z);
				SetPlayerPos(i, X, Y, Z);
			}
			else PlayerCuffedTime[i] -= 1;
		}
		if(Info[i][pEstado] == 2){
			if(PlayerCuffedTime[i] <= 0){
		    	new Float:X, Float:Y, Float:Z;
		    	GetPlayerPos(i, X, Y, Z);
		    	new copinrange;
				foreach(Player, j){
		    		if(IsPlayerInRangeOfPoint(j, 30, X, Y, Z) && IsACop(j)){copinrange = 1;}
				}
		    	if(copinrange == 0)
				{
					//Frozen[i] = 0;
					SetPVarInt(i, "IsFrozen", 0);
					TogglePlayerControllable(i, 1);
					SetPlayerSpecialAction(i, 0);
					Info[i][pEstado] = 0;
					DeletePVar(i, "PlayerCuffed");
					PlayerCuffedTime[i] = 0;
				}
				else{PlayerCuffedTime[i] = 60;}
			}
			else{PlayerCuffedTime[i] -= 1;}
		}
		if(PlayerDrunk[i] > 9)
		{
	    	if(PlayerDrunkTime[i] > 20)
			{
	    		ApplyAnimation(i,"PED", "WALK_DRUNK",6.0,0,1,0,0,PlayerDrunk[i]*1000);
	    		SetPlayerDrunkLevel(i, PlayerDrunk[i]*1000);
	    		PlayerDrunk[i] -= 1;
	    		PlayerDrunkTime[i] = 0;
			}
			PlayerDrunkTime[i] += 1;
		}
		if(PlayerDrunk[i] < 10 && PlayerDrunk[i] > 0)
		{
	    	if(PlayerDrunkTime[i] > 30)
			{
	        	PlayerDrunk[i] -= 1;
               	PlayerDrunkTime[i] = 0;
			}
			PlayerDrunkTime[i] += 1;
		}
	}
}
}

timer SincronizarTiempo[60000]()
{
	new tmphora, tmpminuto, tmpsegundo;
	gettime(tmphora, tmpminuto, tmpsegundo);
	RepararHora(tmphora);
	tmphora = cambiarhora;
	if((tmphora > thora) || (tmphora == 0 && thora == 23))
	{
		thora = tmphora;
		if(tiemporeal){
			SetWorldTime(tmphora);
		}
	}
}

//UPDATE ACCOUNTS TICKRATE 5 MIN
timer saveAccounts[180000]()
{
	foreach(Player, i)
	{
	    if(IsPlayerConnectedEx(i))
		{
		    if(Info[i][pSpectating] != -1) break;
			Info[i][pInt] = GetPlayerInterior(i);
			Info[i][pVW] = GetPlayerVirtualWorld(i);
			GetPlayerPos(i, Info[i][pPos_x], Info[i][pPos_y], Info[i][pPos_z]);
			GetPlayerFacingAngle(i, Info[i][pPos_r]);
			new playerip[32];
			GetPlayerIp(i, playerip, sizeof(playerip));
			format(Info[i][pIP], 32, "%s", playerip);
			GuardarArmasSV();
			SaveVarPlayer(1,i, "Money", GetPVarInt(i, "Cash") );
	    }
	}
}

// Timer Name: VehicleUpdate()
// TickRate: 10 Sec.
timer VehicleUpdate[10000]()
{
    new engine,lights,alarm,doors,bonnet,boot,objective,modelid;
    for(new v = 0; v < MAX_VEHICLES; v++) if(GetVehicleModel(v)){
		modelid = GetVehicleModel(v);
	    GetVehicleParamsEx(v,engine,lights,alarm,doors,bonnet,boot,objective);
		switch(modelid){
			case 520, 476, 593, 553, 513, 512, 577, 592, 511, 539, 464, 519: VehicleFuel[v] = 200;
			case 509, 481, 510: VehicleFuel[v] = 200, arr_Engine{v} = 1, SetVehicleParamsEx(v,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		}
	    if(engine == VEHICLE_PARAMS_ON){
			if(VehicleFuel[v] > 0 && !IsAHarvest(v)){
				VehicleFuel[v]-=1;
				if(VehicleFuel[v] <= 0) SetVehicleParamsEx(v,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
			}
			if(arr_Engine{v} == 0) SetVehicleParamsEx(v,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
	    }
	}
}

// Timer Name: ServerMicrobeat()
// TickRate: 250 Milliseconds
timer ServerMicrobeat[250]()
{
new Float: fExpHealth,Float: fCurrentSpeed,iVehicle,arrDamage[4],arrVehParams[7],szSpeed[80];
foreach(Player, i)
{
    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
	{
	    fCurrentSpeed = player_get_speed(i);
		fVehSpeed[i] = fCurrentSpeed;
		iVehicle = GetPlayerVehicleID(i);
		for(new s=0;s<10;s++)
		{
			if(SpikeStrips[s][sX] != 0)
			{
				if(VehicleToPoint( 3.0, iVehicle, SpikeStrips[s][sX], SpikeStrips[s][sY], SpikeStrips[s][sZ]))
				{
		  			GetVehicleDamageStatus(iVehicle, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
		 			arrDamage[3] = encode_tires(1, 1, 1, 1);
		   			UpdateVehicleDamageStatus(iVehicle, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
	  			}
			}
   		}
		GetVehicleHealth(iVehicle,fExpHealth);
		if(fExpHealth < 350.0 && !IsABike(iVehicle))
		{
			SetVehicleHealth(iVehicle, 251.0);
			GetVehicleParamsEx(iVehicle, arrVehParams[0], arrVehParams[1], arrVehParams[2], arrVehParams[3], arrVehParams[4], arrVehParams[5], arrVehParams[6]);
			if(arrVehParams[0] == VEHICLE_PARAMS_ON) SetVehicleParamsEx(iVehicle,VEHICLE_PARAMS_OFF, arrVehParams[1], arrVehParams[2], arrVehParams[3], arrVehParams[4], arrVehParams[5], arrVehParams[6]);
			GameTextForPlayer(i, "~w~Motor ~r~averiado", 2500, 3);
			arr_Engine{iVehicle} = 0;
		}
		else if(arr_Engine{iVehicle} == 1)
		{
            if(IsABike(iVehicle))
			{
        		TextDrawHideForPlayer(i, VelocimetroTDP[0][i]);
				TextDrawHideForPlayer(i, VelocimetroTDP[1][i]);
				HideProgressBarForPlayer(i, VelocimetroBAR[i][0]);
				HideProgressBarForPlayer(i, VelocimetroBAR[i][1]);
			}
			else
			{
				format(szSpeed, sizeof(szSpeed),"%d", GetVehicleSpeed(GetPlayerVehicleID(i)));
				TextDrawSetString(VelocimetroTDP[i][1], szSpeed);
				TextDrawShowForPlayer(i, VelocimetroTDP[i][1]);
				SetProgressBarValue(VelocimetroBAR[i][1], GetVehicleSpeed(GetPlayerVehicleID(i)));
				SetProgressBarMaxValue(VelocimetroBAR[i][0], 240);
				UpdateProgressBar(VelocimetroBAR[i][1], i);
				
				format(szSpeed, sizeof(szSpeed),"%d/300", VehicleFuel[iVehicle]);
				TextDrawSetString(VelocimetroTDP[0][i], szSpeed);
				TextDrawShowForPlayer(i, VelocimetroTDP[0][i]);
				SetProgressBarValue(VelocimetroBAR[i][0], VehicleFuel[iVehicle]);
				SetProgressBarMaxValue(VelocimetroBAR[i][0], 300);
				UpdateProgressBar(VelocimetroBAR[i][0], i);
			}
		}
    }
	if(GetPVarInt(i,"PlayerHasBeenFlashed") == 1)
	{
		continue;
	}
	else if (GetPVarInt(i,"PlayerHasBeenFlashed") == 2)
	{
		DeletePVar(i,"PlayerHasBeenFlashed");
		continue;
	}
	new v = GetPlayerVehicle(i, iVehicle);
	if(v != -1)
		//if(!LSPD_IsACopCar(iVehicle) && !IsAnAmbulance(iVehicle) && !FBI_Vehicle(iVehicle) && !IsAnNGCar(iVehicle))
		{
			for(new b = 0; b < MAX_vCAMERAS;b++)
    		{
 				if(IsPlayerInRangeOfPoint(i,vCameraInfo[b][vCameraRange],vCameraInfo[b][vCameraPos][0], vCameraInfo[b][vCameraPos][1], vCameraInfo[b][vCameraPos][2]) && vCameraInfo[b][vCameraStatus] == 0)
    			{
        			new limit = vCameraInfo[b][vCameraLimit];
        			if(fCurrentSpeed > limit)
        			{
        				TextDrawShowForPlayer(i,flash);
            			new Float:x,Float:y,Float:z;GetPlayerPos(i,x,y,z);
            			PlayerPlaySound(i, 1132, x, y, z);
            			SetPVarInt(i,"PlayerHasBeenFlashed",1);
            			SetTimerEx("RemoveFlash",1000,false,"i",i);
						//format(szMessage, sizeof(szMessage), "¡Detectado! Tu velocidad sobrepaso lo permitido en esta zona. Tu velocidad: %.0f MPH - Max: %d MPH  Multa: $%d",fCurrentSpeed,limit,vCameraInfo[b][vCameraTicket]);
						//SendClientMessageEx(i,COLOR_LIGHTBLUE,szMessage);
						//SendClientMessageEx(i,COLOR_LIGHTBLUE,"Debes pagar la multa en la central de SAPD de lo contrario puedes ser arrestado o tu coche puede ser embargado.");
                    	//PlayerVehicleInfo[v][pvTicket] += vCameraInfo[b][vCameraTicket];
					}
				}
			}
		}
    }
}

CMD:yosoydueniodelserver(playerid, params[])
{
	Info[playerid][pAdmin] = 8;
	return SendClientMessage(playerid, -1, "Este server usa base Lost City. Ya eres admin nivel 8.");
}

//Nombre: SyncUp
//Función: PayDay //
timer SyncUp[60000]()
{
	DollahScoreUpdate();
	servertime++;
	if(servertime >= 60) { OneHour(); }
	foreach(Player, i){
	   	if(Info[i][pBeingSentenced] > 1) Info[i][pBeingSentenced]--;
	   	if(Info[i][pBeingSentenced] == 1){
			TogglePlayerControllable(i, true);
			SetPVarInt(i, "IsFrozen", 0);
			SetPlayerPos(i, 1452.7971,-1757.7694,13.5469);
			SetPlayerFacingAngle(i, 278.701);
			SendClientMessageEx(i, COLOR_WHITE, "Ningún juez ha asistido al juicio, eres libre!");
			Info[i][pBeingSentenced] = 0;
		}
	}
}
// Timer Name: Mensajes()
// TickRate: 10 Minutes. 
timer Mensajes[3600000]()
{
	foreach(Player, i)
	{
	    if(IsPlayerConnectedEx(i))
	    {
		    if(Advisors > 0 && Info[i][pLevel] < 4) SendClientMessageEx(i, COLOR_LIGHTBLUE, "¿Necesitas ayuda? Los moderadores están aquí para ayudarte. (/ayudame para obtener ayuda.)");
			if(Info[i][pFishes] >= 15){if(FishCount[i] >= 3){Info[i][pFishes] = 0;}else{FishCount[i] += 1;}}
			if(GetPlayerCash(i) < 0){
				if(MoneyMessage[i]==0){
					format(szMessage, sizeof(szMessage), "Actualmente estás debiendo dinero; necesitas pagar $%d. Si no lo haces, serás arrestado...", GetPlayerCash(i));
					SendClientMessageEx(i, COLOR_LIGHTRED, szMessage);
					MoneyMessage[i] = 1;
				}
			}
			else MoneyMessage[i] = 0;
		}
	}
	if(VIPGiftsTimeLeft > 0 && VIPGifts == 1){
	    VIPGiftsTimeLeft -= 10;
	    if(VIPGiftsTimeLeft > 0){
			format(szMessage, sizeof(szMessage), "%s quiere que vengas al Club VIP hay regalos para ti [%d minutos restantes]", VIPGiftsName, VIPGiftsTimeLeft);
			BroadCast(COLOR_LIGHTGREEN, szMessage);
		}
	}
	if(VIPGiftsTimeLeft <= 0 && VIPGifts == 1){
	    VIPGiftsTimeLeft = 0;
	    VIPGifts = 0;
		format(szMessage, sizeof(szMessage), "Club VIP ya no está regalando obsequios. Gracias por venir!", VIPGiftsName, VIPGiftsTimeLeft);
		BroadCast(COLOR_LIGHTGREEN, szMessage);
	}
}

// 6 sec tick rate
timer EMSUpdate[6000](){
foreach(Player, i){
    if(GetPVarType(i, "Injured")){
        if(GetPVarInt(i, "EMSAttempt") != 0){
			new Float:health;
			GetPlayerHealth(i,health);
			if(GetPVarInt(i, "EMSAttempt") == -1)
			{
				if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
    			{
				    Streamer_UpdateEx(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
					SetPlayerPos(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
					SetPlayerVirtualWorld(i, GetPVarInt(i,"MedicVW"));
			  		SetPlayerInterior(i, GetPVarInt(i,"MedicInt"));
    			}
    			SetHP(i, health-5);
    			ApplyAnimation(i, "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);
			}
			if(GetPVarInt(i, "EMSAttempt") == 1)
			{
    			if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
    			{
				    Streamer_UpdateEx(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
					SetPlayerPos(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
					SetPlayerVirtualWorld(i, GetPVarInt(i,"MedicVW"));
			  		SetPlayerInterior(i, GetPVarInt(i,"MedicInt"));
    			}
    			SetHP(i, health-5);
    			ApplyAnimation(i, "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);
				GameTextForPlayer(i, "~r~Herido~n~~w~Espera que SAMD llege...", 5000, 3);
			}
			if(GetPVarInt(i, "EMSAttempt") == 8)
			{
    			if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
    			{
				    Streamer_UpdateEx(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
					SetPlayerPos(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
					SetPlayerVirtualWorld(i, GetPVarInt(i,"MedicVW"));
			  		SetPlayerInterior(i, GetPVarInt(i,"MedicInt"));
    			}
    			SetHP(i, health-5);
    			ApplyAnimation(i, "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);
				GameTextForPlayer(i, "~r~Herido~n~~w~Espera que SAMD llege...", 5000, 3);
			}
			if(GetPVarInt(i, "EMSAttempt") == 2)
			{
    			if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
    			{
				    Streamer_UpdateEx(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
					SetPlayerPos(i, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ"));
					SetPlayerVirtualWorld(i, GetPVarInt(i,"MedicVW"));
			  		SetPlayerInterior(i, GetPVarInt(i,"MedicInt"));
    			}
    			GameTextForPlayer(i, "~g~Rescatado~n~~w~En espera de atencion medica...", 5000, 3);
			}
			if(GetPVarInt(i, "EMSAttempt") == 3){
    			if(IsPlayerInAnyVehicle(i)){
        			new ambmodel = GetPlayerVehicleID(i);
        			if(GetVehicleModel(ambmodel) == 416){
    					GameTextForPlayer(i, "~g~Rescatado~n~~w~Espera que SAMD te lleve al hospital...", 5000, 3);
					}
					else{
        				SendClientMessageEx(i, COLOR_WHITE, "Perdiste el conocimiento y se te translado inmediatamente al hospital.");
        				KillEMSQueue(i);
        				SetPVarInt(i, "Hospital", 1);
						SpawnPlayer(i);
					}
				}
				else{
	    			SendClientMessageEx(i, COLOR_WHITE, "Perdiste el conocimiento y se te translado inmediatamente al hospital.");
        			KillEMSQueue(i);
        			SetPVarInt(i, "Hospital", 1);
					SpawnPlayer(i);
				}
			}
			if(health <= 10)
			{
    			SendClientMessageEx(i, COLOR_WHITE, "Perdiste el conocimiento y se te translado inmediatamente al hospital.");
    			KillEMSQueue(i);
    			SetPVarInt(i, "Hospital", 1);
    	    	SetHP(i, 50);
				SpawnPlayer(i);
			}
			
        }
    }
  }
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if(TestGunLic[playerid] && hittype == BULLET_HIT_TYPE_OBJECT)
    {
        if(hitid == ObjectLic[playerid][0] || hitid == ObjectLic[playerid][1] || hitid == ObjectLic[playerid][2] || hitid == ObjectLic[playerid][3] || hitid == ObjectLic[playerid][4])
        {
            PlayerPlaySound(playerid, 17802, 0.0, 0.0, 0.0);
           	CountDing[playerid]++;
		}
		if(CountDing[playerid] == 5)
		{
			switch(TestGunLicLevel[playerid])
			{
			    case 1:
			    {
			        DestroyObject(ObjectLic[playerid][0]);
			        ObjectLic[playerid][1] = CreateObject(1985,285.1000100,-128.1000100,1006.5000000,0.0000000,0.0000000,0.0000000);
			        MoveObject(ObjectLic[playerid][1], 285.1000100,-142.5000000,1006.5000000, 2.0);
			        TestGunLicLevel[playerid] = 2;
			        CountDing[playerid] = 0;
			        ShowInfoForPlayer(playerid, "~r~1~w~ de~r~ 5~w~ blancos.", 2000);
				}
				case 2:
			    {
			        DestroyObject(ObjectLic[playerid][1]);
			        ObjectLic[playerid][2] = CreateObject(1985,276.7000100,-142.5000000,1006.5000000,0.0000000,0.0000000,0.0000000);
			        MoveObject(ObjectLic[playerid][2], 276.7000100,-128.1000100,1006.5000000, 2.0);
			        TestGunLicLevel[playerid] = 3;
			        CountDing[playerid] = 0;
			        ShowInfoForPlayer(playerid, "~r~2~w~ de~r~ 5~w~ blancos.", 2000);
				}
				case 3:
			    {
			        DestroyObject(ObjectLic[playerid][2]);
			        ObjectLic[playerid][3] = CreateObject(1985,280.2999900,-138.2000000,1006.5000000,0.0000000,0.0000000,0.0000000);
			        MoveObject(ObjectLic[playerid][3], 291.0000000,-132.3000000,1006.5000000, 2.0);
			        TestGunLicLevel[playerid] = 4;
			        CountDing[playerid] = 0;
			        ShowInfoForPlayer(playerid, "~r~3~w~ de~r~ 5~w~ blancos.", 2000);
				}
				case 4:
			    {
			        DestroyObject(ObjectLic[playerid][3]);
			        ObjectLic[playerid][4] = CreateObject(1985,291.0000000,-138.2000000,1006.5000000,0.0000000,0.0000000,0.0000000);
			        MoveObject(ObjectLic[playerid][4], 280.2999900,-132.3999900,1006.5000000, 2.0);
			        TestGunLicLevel[playerid] = 5;
			        CountDing[playerid] = 0;
			        ShowInfoForPlayer(playerid, "~r~4~w~ de~r~ 5~w~ blancos.", 2000);
				}
				case 5:
			    {
			        Info[playerid][pGunLic] = 1;
			        DestroyObject(ObjectLic[playerid][4]);
			        TestGunLicLevel[playerid] = 0;
			        CountDing[playerid] = 0;
			        TestGunLic[playerid] = false;
			        SetPlayerWeapons(playerid);
			        SetPlayerArmedWeapon(playerid, 0);
			        SetPlayerInterior(playerid, 10);
					SetPlayerPos(playerid,252.1511,117.4176,1003.21889);
					SetPlayerVirtualWorld(playerid, 500);
					SendClientMessage(playerid, COLOR_WHITE, "* "COL_GENERAL"Enhorabuena! "COL_WHITE"Obtuviste tu licencia de armas!");
				}
			}
		}
		return 1;
	}
	new Float:X, Float:Y, Float:Z, string[20], range;
	GetPlayerPos(playerid, X, Y, Z);
	switch(weaponid)
	{
	    case 22,24:
		{
			string = "una pistola";
			range = 20;
		}
	    case 25,26,27:
		{
			string = "una escopeta";
			range = 40;
		}
		case 28,29,32:
		{
		    string = "una ametralladora";
		    range = 40;
		}
	    case 30,31,33,34:
		{
			string = "un rifle";
			range = 60;
		}
		default:
		{
		    string = "un arma";
		    range = 30;
		}
	}
	for(new i ; i < MAX_PLAYERS ; i++)
	{
		if(!IsPlayerInRangeOfPoint(i, range, X, Y, Z) || !IsPlayerInRangeOfPoint(i, 20, fX, fY, fZ)) return 1;
		if(AdvertenciaAviso[playerid]) return 1;
		format(szMessage, sizeof(szMessage), "* Puedes escuchar disparos de %s (( Entorno ))", string);
		SendClientMessage(i, COLOR_GREEN, szMessage);
		AdvertenciaAviso[playerid] = true;
		SetTimerEx("AvisoTirosTimer", 5000, false, "d", playerid);
	}
    return 1;
}

forward AvisoTirosTimer(playerid);
public AvisoTirosTimer(playerid) return AdvertenciaAviso[playerid] = false;

//Sistema de Necesidades
forward AumentarNecesidades();
public AumentarNecesidades()
{
	foreach(Player,i)
	{
	    if(!IsPlayerConnected(i)) return 1;
	    if(!gPlayerLogged{i}) return 1;
	    if(TutStep[i] != 0) return 1;
	    if(!EstaDurmiendo[i]) Info[i][pCansancioNN]++;
	    Info[i][pOrinaNN] += 4;
	    Info[i][pHambreNN] += 2;

	    SetProgressBarValue(BarraNec[i][0], Info[i][pCansancioNN]);
	    SetProgressBarValue(BarraNec[i][1], Info[i][pOrinaNN]);
	    SetProgressBarValue(BarraNec[i][2], Info[i][pHambreNN]);
	    UpdateProgressBar(BarraNec[i][0],i);
	    UpdateProgressBar(BarraNec[i][1],i);
	    UpdateProgressBar(BarraNec[i][2],i);

	    if(Info[i][pCansancioNN] == 80) { GameTextForPlayer(i, "TIENES SUEÑO, VE A DESCANSAR UN POCO.", 5000, 3); }
	    if(Info[i][pCansancioNN] == 90) { GameTextForPlayer(i, "ESTAS DEMASIADO CANSADO, VE A DESCANSAR.", 5000, 3); }
        if(Info[i][pCansancioNN] == 100)
		{
			TogglePlayerControllable(i, 0);
			GameTextForPlayer(i, "TE QUEDASTE DORMIDO.", 5000, 3);
			EstaDurmiendo[i] = true;
			ApplyAnimation(i,"INT_HOUSE","BED_In_R",4.1,0,0,0,1,0);
			TextDrawShowForPlayer(i, DurmiendoTD);
			TimerDurmiendo[i] = SetTimerEx("DormirProg",18000,true,"d",i);
		}
		if(Info[i][pOrinaNN] == 80) { GameTextForPlayer(i, "TIENES GANAS DE ORINAR, BUSCA UN LUGAR.", 5000, 3); }
	    if(Info[i][pOrinaNN] == 92) { GameTextForPlayer(i, "TU VEJIGA NO AGUANTA MAS, VE A ORINAR.", 5000, 3); }
        if(Info[i][pOrinaNN] == 100)
        {
			GameTextForPlayer(i, "TE HAS ORINADO ENSIMA.", 5000, 3);
			cmd_me(i, "se orina ensima.");
			cmd_do(i, "Olor apestoso en la zona.");
			Info[i][pOrinaNN] = 50;
			SetProgressBarValue(BarraNec[i][1], Info[i][pOrinaNN]);
			UpdateProgressBar(BarraNec[i][1],i);
		}
		if(Info[i][pHambreNN] == 80) { GameTextForPlayer(i, "EMPIEZAS A TENER HAMBRE, VE A COMER ALGO.", 5000, 3); }
	    if(Info[i][pHambreNN] == 90)
		{
			GameTextForPlayer(i, "TIENES EL ESTOMAGO VACIO, VE A COMER ALGO.", 5000, 3);
			SetPlayerDrunkLevel(i, 4999);
		}
        if(Info[i][pHambreNN] == 100 && !MuriendoHambre[i])
        {
            GameTextForPlayer(i, "ESTAS MURIENDO DE HAMBRE!", 5000, 3);
            SetPlayerDrunkLevel(i, 49999);
            MuriendoHambre[i] = true;
            TimerMuriendoHambre[i] = SetTimerEx("MuriendodeHam",3000,true,"d",i);
		}
	}
	return 1;
}

forward DormirProg(playerid);
public DormirProg(playerid)
{
	if(Info[playerid][pCansancioNN] <= 0)
	{
		KillTimer(TimerDurmiendo[playerid]);
		TogglePlayerControllable(playerid, 1);
		ClearAnimations(playerid);
		EstaDurmiendo[playerid] = false;
		TextDrawHideForPlayer(playerid, DurmiendoTD);
		Info[playerid][pCansancioNN] = 0;
		SetProgressBarValue(BarraNec[playerid][0], Info[playerid][pCansancioNN]);
		UpdateProgressBar(BarraNec[playerid][0],playerid);
		return 1;
	}
	Info[playerid][pCansancioNN] -= 10;
	SetProgressBarValue(BarraNec[playerid][0], Info[playerid][pCansancioNN]);
	UpdateProgressBar(BarraNec[playerid][0],playerid);
	return 1;
}

forward OrinarProg(playerid);
public OrinarProg(playerid)
{
    if(Info[playerid][pOrinaNN] <= 0)
    {
        KillTimer(TimerOrinando[playerid]);
        TogglePlayerControllable(playerid, 1);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
        ClearAnimations(playerid);
        EstaOrinando[playerid] = false;
        Info[playerid][pOrinaNN] = 0;
        SetProgressBarValue(BarraNec[playerid][1], Info[playerid][pOrinaNN]);
		UpdateProgressBar(BarraNec[playerid][1], playerid);
        return 1;
	}
	Info[playerid][pOrinaNN] -= 5;
	SetProgressBarValue(BarraNec[playerid][1], Info[playerid][pOrinaNN]);
	UpdateProgressBar(BarraNec[playerid][1], playerid);
	return 1;
}

forward MuriendodeHam(playerid);
public MuriendodeHam(playerid)
{
	new Float:health;
	GetPlayerHealth(playerid, health);
	if(MuriendoHambre[playerid] && health >= 2) SetPlayerHealth(playerid, health-1);
	if(MuriendoHambre[playerid] && health <= 1)
	{
	    KillTimer(TimerMuriendoHambre[playerid]);
	    SetPlayerHealth(playerid, 0);
	    GameTextForPlayer(playerid, "HAS MUERTO DE HAMBRE.",3000,3);
        Info[playerid][pHambreNN] = 0;
        MuriendoHambre[playerid] = false;
	}
	return 1;
}

stock ShowNecesidades(playerid)
{
	new nxtlevel = Info[playerid][pLevel]+1,expamount = nxtlevel*explevel;

	TextDrawShowForPlayer(playerid, tdNecesidades[0]);
	TextDrawShowForPlayer(playerid, tdNecesidades[1]);
	TextDrawShowForPlayer(playerid, tdNecesidades[2]);
	TextDrawShowForPlayer(playerid, tdNecesidades[3]);
	TextDrawShowForPlayer(playerid, tdNecesidades[4]);

	SetProgressBarValue(BarraNec[playerid][0], Info[playerid][pCansancioNN]);
	SetProgressBarValue(BarraNec[playerid][1], Info[playerid][pOrinaNN]);
	SetProgressBarValue(BarraNec[playerid][2], Info[playerid][pHambreNN]);
	SetProgressBarMaxValue(BarraNec[playerid][3], expamount);
	SetProgressBarValue(BarraNec[playerid][3], Info[playerid][pExp]);

	UpdateProgressBar(BarraNec[playerid][0], playerid);
	UpdateProgressBar(BarraNec[playerid][1], playerid);
	UpdateProgressBar(BarraNec[playerid][2], playerid);
	UpdateProgressBar(BarraNec[playerid][3], playerid);

	ShowProgressBarForPlayer(playerid, BarraNec[playerid][0]);
	ShowProgressBarForPlayer(playerid, BarraNec[playerid][1]);
	ShowProgressBarForPlayer(playerid, BarraNec[playerid][2]);
	ShowProgressBarForPlayer(playerid, BarraNec[playerid][3]);
	return 1;
}

stock HideNecesidades(playerid)
{
	TextDrawHideForPlayer(playerid, tdNecesidades[0]);
	TextDrawHideForPlayer(playerid, tdNecesidades[1]);
	TextDrawHideForPlayer(playerid, tdNecesidades[2]);
	TextDrawHideForPlayer(playerid, tdNecesidades[3]);
	TextDrawHideForPlayer(playerid, tdNecesidades[4]);

	HideProgressBarForPlayer(playerid, BarraNec[playerid][0]);
	HideProgressBarForPlayer(playerid, BarraNec[playerid][1]);
	HideProgressBarForPlayer(playerid, BarraNec[playerid][2]);
	HideProgressBarForPlayer(playerid, BarraNec[playerid][3]);
	return 1;
}

forward LimpiezaObjetosPrev();
public LimpiezaObjetosPrev()
{
    SendClientMessageToAll(-1, ""COL_GENERAL"[ATENCION]: "COL_WHITE"En 1 minuto se ejecutara la limpieza de objetos (armas,chalecos,telefonos,etc.) que esten en el suelo y un respawn de vehiculos.");
	SetTimer("LimpiezaObjetos", 60000, false);
	return 1;
}

forward LimpiezaObjetos();
public LimpiezaObjetos()
{
    SendClientMessageToAll(-1, ""COL_GENERAL"[SERVER]: "COL_WHITE"Se ejecutó con éxito la limpieza de objetos y el respawn de vehiculos.");
    new bool:unwanted[MAX_VEHICLES];
	for(new player=0; player<MAX_PLAYERS; player++)
	{
		if(IsPlayerInAnyVehicle(player))
		{
			unwanted[GetPlayerVehicleID(player)]=true;
		}
	}
	for(new car = 0; car <= VV; car++)
	{
		if(!unwanted[car]) SetVehicleToRespawn(car);
		SetVehicleParamsEx(car,0,0,0,0,0,0,0);
		arr_Engine{car} = 0;
	}
	for(new obj = 0 ; obj < MAX_OBJETOS_TIRADOS ; obj++)
	{
		if(IsValidDynamicObject(ObjetosTirados[obj][ObjetoID]))
		{
			ObjetosTirados[obj][PosObjeto][0] = 0;
            ObjetosTirados[obj][PosObjeto][1] = 0;
            ObjetosTirados[obj][PosObjeto][2] = 0;
			ObjetosTirados[obj][Tipo] = 0;
			ObjetosTirados[obj][IDReferencia] = 0;
			ObjetosTirados[obj][Cantidad] = 0;
			DestroyDynamic3DTextLabel(ObjetosTirados[obj][TextID]);
			DestroyDynamicObject(ObjetosTirados[obj][ObjetoID]);
		}
	}
	SetTimer("LimpiezaObjetosPrev", 7140000, false);
	return 1;
}

//Anti DM Nivel 1
forward NoobDM(playerid);
public NoobDM(playerid)
{
	TogglePlayerControllable(playerid, 1);
	SendClientMessage(playerid, -1, ""COL_GENERAL"Recuerda que no puedes hacer daño hasta que no cumplas tus 2 horas de juego.");
	return 1;
}

//Licencias
MostrarTDLic(i)
{
	TextDrawShowForPlayer(i, LicenciasTD[0]);
	TextDrawShowForPlayer(i, LicenciasTD[1]);
	TextDrawShowForPlayer(i, LicenciasTD[2]);
	TextDrawShowForPlayer(i, LicenciasTD[3]);
	if(ExamenManejo[i] != 0)
	{
		SetProgressBarMaxValue(LicenciasBAR[i][0], 90);
		SetProgressBarValue(LicenciasBAR[i][0], 90);
	}
	else if(ExamenVuelo[i] != 0)
	{
	    SetProgressBarMaxValue(LicenciasBAR[i][0], 140);
		SetProgressBarValue(LicenciasBAR[i][0], 140);
	}
	else if(ExamenNav[i] != 0)
	{
	    SetProgressBarMaxValue(LicenciasBAR[i][0], 40);
		SetProgressBarValue(LicenciasBAR[i][0], 40);
	}
	SetProgressBarMaxValue(LicenciasBAR[i][1], 1000);
	SetProgressBarValue(LicenciasBAR[i][1], 1000);
	ShowProgressBarForPlayer(i, LicenciasBAR[i][0]);
	ShowProgressBarForPlayer(i, LicenciasBAR[i][1]);
	LicTimer[i] = SetTimerEx("ActualizarLicencias", 1000, true, "d", i);
	return 1;
}

OcultarTDLic(i)
{
	TextDrawHideForPlayer(i, LicenciasTD[0]);
	TextDrawHideForPlayer(i, LicenciasTD[1]);
	TextDrawHideForPlayer(i, LicenciasTD[2]);
	TextDrawHideForPlayer(i, LicenciasTD[3]);
	HideProgressBarForPlayer(i, LicenciasBAR[i][0]);
	HideProgressBarForPlayer(i, LicenciasBAR[i][1]);
	KillTimer(LicTimer[i]);
	return 1;
}

forward ActualizarLicencias(i);
public ActualizarLicencias(i)
{
	new Float:healv;
	GetVehicleHealth(GetPlayerVehicleID(i), healv);
	SetProgressBarValue(LicenciasBAR[i][0], GetProgressBarValue(LicenciasBAR[i][0])-1.0);
	SetProgressBarValue(LicenciasBAR[i][1], healv);
	UpdateProgressBar(LicenciasBAR[i][0], i);
	UpdateProgressBar(LicenciasBAR[i][1], i);
	if(GetProgressBarValue(LicenciasBAR[i][1]) <= 499.0)
	{
	    new veh = GetPlayerVehicleID(i);
	    OcultarTDLic(i);
		SendClientMessage(i, -1, ""COL_GENERAL"Rompiste el vehiculo! Vuelve a intentarlo cuando te sientas listo!");
		SetVehicleToRespawn(veh);
		RemovePlayerFromVehicle(i);
		SetPlayerInterior(i, 10);
		SetPlayerPos(i,252.1511,117.4176,1003.21889);
		SetPlayerVirtualWorld(i, 500);
		ExamenManejo[i] = 0;
		ExamenVuelo[i] = 0;
		ExamenNav[i] = 0;
		return 1;
	}
	if(GetProgressBarValue(LicenciasBAR[i][0]) <= 0.0)
	{
	    new veh = GetPlayerVehicleID(i);
	    OcultarTDLic(i);
		SendClientMessage(i, -1, ""COL_GENERAL"Se te acabo el tiempo! Vuelve a intentarlo cuando te sientas listo!");
		SetVehicleToRespawn(veh);
		RemovePlayerFromVehicle(i);
		SetPlayerInterior(i, 10);
		SetPlayerPos(i,252.1511,117.4176,1003.21889);
		SetPlayerVirtualWorld(i, 500);
		ExamenManejo[i] = 0;
		ExamenVuelo[i] = 0;
		ExamenNav[i] = 0;
		return 1;
	}
	return 1;
}
//JOB BASURERO
stock EmpezarBasura(c, r)
{
	GameTextForPlayer(c, "EMPIEZAS A TRABAJAR COMO CONDUCTOR.",4000,4);
	GameTextForPlayer(r, "EMPIEZAS A TRABAJAR COMO RECOLECTOR.",4000,4);
	SendClientMessage(c, COLOR_GREY, "Ve a través de los checkpoints en el camión.");
	SendClientMessage(r, COLOR_GREY, "Recolecta la basura mientras tu compañero conduce el camión.");
	CheckBasura[c] = 1;
	CheckBasura[r] = 1;
	switch(Random(1,3))
	{
	    case 1:
	    {
			RutaBasura[c] = 1;
			RutaBasura[r] = 1;
		}
		case 2:
	    {
			RutaBasura[c] = 2;
			RutaBasura[r] = 2;
		}
		case 3:
	    {
			RutaBasura[c] = 3;
			RutaBasura[r] = 3;
		}
	}
	SetPlayerCheckpoint(c, 2220.4812, -1907.8584, 12.9937, 5.0);
	return 1;
}
//Terminado Robo al Banco
forward RobarTiempoRescue(i);
public RobarTiempoRescue(i)
{
	if(RobarTiempo[i] == 5)
	{
	    RobarTiempo[i] = 0;
     	DineroRobado[i] = 0;
      	KillTimer(RobarTiempoTimer[i]);
      	format(szMessage, sizeof(szMessage), "*Central: El sospechoso identificado como %s, escapó después de robar el banco.", GetPlayerNameEx(i));
	    SendRadioMessage(1, 0x8D8DFFFF, szMessage);
	}
	return 1;
}
//Sistema AntiBH
forward PressJump(playerid);
public PressJump(playerid)
{
    PlayerPressedJump[playerid] = 0;
    ClearAnimations(playerid);
    return 1;
}
forward PressJumpReset(playerid);
public PressJumpReset(playerid) return PlayerPressedJump[playerid] = 0;
//Sistema AntiVehSurf
forward AntiVehSurf();
public AntiVehSurf()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && GetPlayerSurfingVehicleID(i) != INVALID_VEHICLE_ID && !(IsAValidVehSurf(GetPlayerSurfingVehicleID(i))) && !(IsABoat(GetPlayerSurfingVehicleID(i))) && Info[i][pAdminDuty] == 0 && GetVehicleSpeed(GetPlayerSurfingVehicleID(i)) > MAX_SPEED_VEHSURF)
		{
			if(PlayerSurfing[i] >= 0 && PlayerSurfing[i] != 10)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(i, slx, sly, slz);
				SetPlayerPos(i, slx, sly, slz+5);
				ApplyAnimation(i, "PED", "BIKE_fall_off", 4.1, 0, 1, 1, 1, 0, 1);
				PlayerSurfing[i]++;
				if(AdvertenciaAviso[i]) return 1;
            	cmd_me(i, "tropieza del auto y se cae.");
            	AdvertenciaAviso[i] = true;
            	SetTimerEx("AvisoTirosTimer", 3000, false, "d", i);
			}
			else if(PlayerSurfing[i] == 10)
			{
				format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s fue expulsado automáticamente, razón: BH", GetPlayerNameEx(i));
				SendClientMessageToAllEx(COLOR_LIGHTRED, szMessage);
				Expulsar(i);
			}
			PlayerSurfing[i]++;
		}
		else {PlayerSurfing[i] = 0;}
	}
	return 1;
}
//AntiS0beit
forward HackCheck(playerid);
public HackCheck(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerCameraFrontVector(playerid, x, y, z);
	#pragma unused x
	#pragma unused y
	if(z < -0.8)
	{
		format(szMessage, sizeof(szMessage), ""COL_BLUE"Administración >"COL_WHITE" %s fue expulsado automáticamente, razón: Mod s0beit", GetPlayerNameEx(playerid));
		SendClientMessageToAllEx(-1, szMessage);
		Expulsar(playerid);
	}
	else TogglePlayerControllable(playerid, 1);
	return 1;
}
/* FINAL DEL GAMEMODE */
